// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: league.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from league.proto</summary>
public static partial class LeagueReflection {

  #region Descriptor
  /// <summary>File descriptor for league.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static LeagueReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxsZWFndWUucHJvdG8aCmJhc2UucHJvdG8aDnByZV9iYXNlLnByb3RvIkYK",
          "DUpvaW5MZWFndWVSRVESDgoGY2x1YmlkGAEgASgJEhAKCGxlYWd1ZWlkGAIg",
          "ASgFEhMKC2NvbnRhY3Rfd2F5GAMgASgJIh0KDUpvaW5MZWFndWVSU1ASDAoE",
          "Y29kZRgBIAEoBSJIChZIYW5kbGVKb2luTGVhZ3VlTXNnUkVREg4KBmNsdWJp",
          "ZBgBIAEoCRIMCgRjb2RlGAIgASgFEhAKCGxlYWd1ZWlkGAMgASgFIkgKFkhh",
          "bmRsZUpvaW5MZWFndWVNc2dSU1ASEAoIbGVhZ3VlaWQYASABKAUSDAoEY29k",
          "ZRgCIAEoBRIOCgZjbHViaWQYAyABKAkiJQoRSm9pbkxlYWd1ZUxpc3RSRVES",
          "EAoIbGVhZ3VlaWQYASABKAUiVQoRSm9pbkxlYWd1ZU1zZ0luZm8SDgoGY2x1",
          "YmlkGAEgASgJEhAKCGNsdWJuYW1lGAIgASgJEgwKBHRpbWUYAyABKAMSEAoI",
          "Y2x1Ymljb24YBCABKAkiRwoRSm9pbkxlYWd1ZUxpc3RSU1ASEAoIbGVhZ3Vl",
          "aWQYASABKAUSIAoEaW5mbxgCIAMoCzISLkpvaW5MZWFndWVNc2dJbmZvIiUK",
          "EUpvaW5MZWFndWVMaXN0QlJDEhAKCGxlYWd1ZWlkGAEgASgFIkoKD0NyZWF0",
          "ZUxlYWd1ZVJFURISCgpsZWFndWVuYW1lGAEgASgJEg4KBmNsdWJpZBgCIAEo",
          "BRITCgtjb250YWN0X3dheRgDIAEoCSIfCg9DcmVhdGVMZWFndWVSU1ASDAoE",
          "Y29kZRgBIAEoBSLgAwoKQmxpbmRMaW1pdBIYChBubGhfbGltaXRfc3RhdHVz",
          "GAEgASgFEhcKD25saF9saW1pdF9zdGFydBgCIAEoAxIVCg1ubGhfbGltaXRf",
          "ZW5kGAMgASgDEhkKEW5saDZfbGltaXRfc3RhdHVzGAQgASgFEhgKEG5saDZf",
          "bGltaXRfc3RhcnQYBSABKAMSFgoObmxoNl9saW1pdF9lbmQYBiABKAMSGQoR",
          "cGluZV9saW1pdF9zdGF0dXMYByABKAUSGAoQcGluZV9saW1pdF9zdGFydBgI",
          "IAEoAxIWCg5waW5lX2xpbWl0X2VuZBgJIAEoAxIaChJvbWFoYV9saW1pdF9z",
          "dGF0dXMYCiABKAUSGQoRb21haGFfbGltaXRfc3RhcnQYCyABKAMSFwoPb21h",
          "aGFfbGltaXRfZW5kGAwgASgDEhoKEm1peGVkX2xpbWl0X3N0YXR1cxgNIAEo",
          "BRIZChFtaXhlZF9saW1pdF9zdGFydBgOIAEoAxIXCg9taXhlZF9saW1pdF9l",
          "bmQYDyABKAMSGgoScHVzb3lfbGltaXRfc3RhdHVzGBAgASgFEhkKEXB1c295",
          "X2xpbWl0X3N0YXJ0GBEgASgDEhcKD3B1c295X2xpbWl0X2VuZBgSIAEoAyJi",
          "Cg5CbGluZExpbWl0SW5mbxISCgpsaW1pdF90eXBlGAEgASgFEhQKDGxpbWl0",
          "X3N0YXR1cxgCIAEoBRITCgtsaW1pdF9zdGFydBgDIAEoAxIRCglsaW1pdF9l",
          "bmQYBCABKAMixgUKEExlYWd1ZU1lbWJlckluZm8SDgoGY2x1YmlkGAEgASgF",
          "EhAKCGNsdWJuYW1lGAIgASgJEhAKCGNsdWJpY29uGAMgASgJEgsKA2JhbhgE",
          "IAEoBRIUCgxhdXRvYmFuX3R5cGUYBSABKAUSFQoNYXV0b2Jhbl9saW1pdBgG",
          "IAEoAxITCgtwcm9maXRfd2VlaxgHIAEoAxISCgpwcm9maXRfZGF5GAggASgD",
          "EhAKCGJhbl90aW1lGAkgASgFEhEKCWpvaW5fdGltZRgKIAEoBRIaChJibGlu",
          "ZF9saW1pdF9zdGF0dXMYCyABKAgSIQoMbGltaXRfZGV0YWlsGAwgASgLMgsu",
          "QmxpbmRMaW1pdBIjCgpsaW1pdF9pbmZvGA0gAygLMg8uQmxpbmRMaW1pdElu",
          "Zm8SHwoXbHVja3lkcmF3X3dlZWtseV9wcm9maXQYDiABKAMSHgoWbHVja3lk",
          "cmF3X2RhaWx5X3Byb2ZpdBgPIAEoAxIfChdjb2xvcmdhbWVfd2Vla2x5X3By",
          "b2ZpdBgQIAEoAxIeChZjb2xvcmdhbWVfZGFpbHlfcHJvZml0GBEgASgDEh0K",
          "FWphY2twb3Rfd2Vla2x5X3Byb2ZpdBgSIAEoAxIcChRqYWNrcG90X2RhaWx5",
          "X3Byb2ZpdBgTIAEoAxIcChRldmNob3Bfd2Vla2x5X3Byb2ZpdBgUIAEoAxIb",
          "ChNldmNob3BfZGFpbHlfcHJvZml0GBUgASgDEhwKFG90aGVyc193ZWVrbHlf",
          "cHJvZml0GBYgASgDEhsKE290aGVyc19kYWlseV9wcm9maXQYFyABKAMSFwoP",
          "bGltaXRfbHVja3lkcmF3GBggASgIEhcKD2xpbWl0X2NvbG9yZ2FtZRgZIAEo",
          "CBIVCg1saW1pdF9qYWNrcG90GBogASgIEhQKDGxpbWl0X2V2Y2hvcBgbIAEo",
          "CCIjCg9MZWFndWVNZW1iZXJSRVESEAoIbGVhZ3VlaWQYASABKAUiVQoPTGVh",
          "Z3VlTWVtYmVyUlNQEhAKCGxlYWd1ZWlkGAEgASgFEh8KBGluZm8YAyADKAsy",
          "ES5MZWFndWVNZW1iZXJJbmZvEg8KB2F1dG9iYW4YBCABKAgivwEKFkxlYWd1",
          "ZU1lbWJlclNoYXJrSW5kZXgSDgoGY2x1YmlkGAEgASgJEhAKCGNsdWJuYW1l",
          "GAIgASgJEhAKCGNsdWJpY29uGAMgASgJEhAKCGxlYWd1ZWlkGAQgASgFEhIK",
          "CmxlYWd1ZW5hbWUYBSABKAkSFgoOc3VwZXJfbGVhZ3VlaWQYBiABKAUSDgoG",
          "cHBzcmlkGAcgASgFEhMKC3NoYXJrX2luZGV4GAggASgFEg4KBnBwc3RpZBgJ",
          "IAEoBSKaAQoZTGVhZ3VlTWVtYmVyU2hhcmtJbmRleFJFURIOCgZjbHViaWQY",
          "ASABKAkSEAoIbGVhZ3VlaWQYAiABKAUSFgoOc3VwZXJfbGVhZ3VlaWQYAyAB",
          "KAUSDgoGcHBzcmlkGAQgASgFEhMKC3N0YXJ0X2luZGV4GAUgASgFEg4KBmFt",
          "b3VudBgGIAEoBRIOCgZwcHN0aWQYByABKAUiegoZTGVhZ3VlTWVtYmVyU2hh",
          "cmtJbmRleFJTUBIRCgl0b3RhbF9udW0YASABKAUSEwoLc3RhcnRfaW5kZXgY",
          "AiABKAUSDgoGYW1vdW50GAMgASgFEiUKBGluZm8YBCADKAsyFy5MZWFndWVN",
          "ZW1iZXJTaGFya0luZGV4Ip0DCg5QUFNSTWVtYmVySW5mbxISCgpsZWFndWV0",
          "eXBlGAEgASgFEhAKCGxlYWd1ZWlkGAIgASgFEhIKCmxlYWd1ZW5hbWUYAyAB",
          "KAkSEQoJaXNfYmFubmVkGAQgASgFEhoKEndhcm5pbmdfbGltaXRfdHlwZRgF",
          "IAEoBRIVCg13YXJuaW5nX2xpbWl0GAYgASgDEhUKDXdlZWtseV9wcm9maXQY",
          "ByABKAMSFAoMZGFpbHlfcHJvZml0GAggASgDEhwKFGV2Y2hvcF93ZWVrbHlf",
          "cHJvZml0GAkgASgDEhsKE2V2Y2hvcF9kYWlseV9wcm9maXQYCiABKAMSHAoU",
          "b3RoZXJzX3dlZWtseV9wcm9maXQYCyABKAMSGwoTb3RoZXJzX2RhaWx5X3By",
          "b2ZpdBgMIAEoAxIUCgxsaW1pdF9ldmNob3AYDSABKAgSFQoNbGltaXRfamFj",
          "a3BvdBgOIAEoCBIdChVqYWNrcG90X3dlZWtseV9wcm9maXQYDyABKAMSHAoU",
          "amFja3BvdF9kYWlseV9wcm9maXQYECABKAMiHwoNUFBTUk1lbWJlclJFURIO",
          "CgZwcHNyaWQYASABKAUiXgoNUFBTUk1lbWJlclJTUBIOCgZwcHNyaWQYASAB",
          "KAUSHgoWZGVmaWNpdF93YXJuaW5nX2VuYWJsZRgCIAEoCBIdCgRpbmZvGAMg",
          "AygLMg8uUFBTUk1lbWJlckluZm8ihQUKFVN1cGVyTGVhZ3VlTWVtYmVySW5m",
          "bxIQCghsZWFndWVpZBgBIAEoBRISCgpsZWFndWVuYW1lGAIgASgJEhEKCWlz",
          "X2Jhbm5lZBgDIAEoBRIaChJ3YXJuaW5nX2xpbWl0X3R5cGUYBCABKAUSFQoN",
          "d2FybmluZ19saW1pdBgFIAEoAxIVCg13ZWVrbHlfcHJvZml0GAYgASgDEhQK",
          "DGRhaWx5X3Byb2ZpdBgHIAEoAxIfChdsdWNreWRyYXdfd2Vla2x5X3Byb2Zp",
          "dBgIIAEoAxIeChZsdWNreWRyYXdfZGFpbHlfcHJvZml0GAkgASgDEh8KF2Nv",
          "bG9yZ2FtZV93ZWVrbHlfcHJvZml0GAogASgDEh4KFmNvbG9yZ2FtZV9kYWls",
          "eV9wcm9maXQYCyABKAMSHQoVamFja3BvdF93ZWVrbHlfcHJvZml0GAwgASgD",
          "EhwKFGphY2twb3RfZGFpbHlfcHJvZml0GA0gASgDEhwKFGV2Y2hvcF93ZWVr",
          "bHlfcHJvZml0GA4gASgDEhsKE2V2Y2hvcF9kYWlseV9wcm9maXQYDyABKAMS",
          "HAoUb3RoZXJzX3dlZWtseV9wcm9maXQYECABKAMSGwoTb3RoZXJzX2RhaWx5",
          "X3Byb2ZpdBgRIAEoAxIXCg9saW1pdF9sdWNreWRyYXcYEiABKAgSFwoPbGlt",
          "aXRfY29sb3JnYW1lGBMgASgIEhUKDWxpbWl0X2phY2twb3QYFCABKAgSFAoM",
          "bGltaXRfZXZjaG9wGBUgASgIEhoKEmJsaW5kX2xpbWl0X3N0YXR1cxgWIAEo",
          "CBIjCgpsaW1pdF9pbmZvGBcgAygLMg8uQmxpbmRMaW1pdEluZm8iLQoUU3Vw",
          "ZXJMZWFndWVNZW1iZXJSRVESFQoNc3VwZXJsZWFndWVpZBgBIAEoBSJzChRT",
          "dXBlckxlYWd1ZU1lbWJlclJTUBIVCg1zdXBlcmxlYWd1ZWlkGAEgASgFEh4K",
          "FmRlZmljaXRfd2FybmluZ19lbmFibGUYAiABKAgSJAoEaW5mbxgDIAMoCzIW",
          "LlN1cGVyTGVhZ3VlTWVtYmVySW5mbyLSAQoQTGVhZ3VlQXV0b0JhblJFURIQ",
          "CghsZWFndWVpZBgBIAEoBRIMCgR0eXBlGAIgASgFEg4KBmVuYWJsZRgDIAEo",
          "CBIOCgZjbHViaWQYBCABKAkSEAoIdGltZXR5cGUYBSABKAUSDQoFbGltaXQY",
          "BiABKAMSFwoPbGltaXRfbHVja3lkcmF3GAcgASgIEhcKD2xpbWl0X2NvbG9y",
          "Z2FtZRgIIAEoCBIVCg1saW1pdF9qYWNrcG90GAkgASgIEhQKDGxpbWl0X2V2",
          "Y2hvcBgKIAEoCCLQAQoQTGVhZ3VlQXV0b0JhblJTUBIQCghsZWFndWVpZBgB",
          "IAEoBRIMCgR0eXBlGAIgASgFEgwKBGNvZGUYAyABKAUSDgoGY2x1YmlkGAQg",
          "ASgJEhAKCHRpbWV0eXBlGAUgASgFEg0KBWxpbWl0GAYgASgDEhcKD2xpbWl0",
          "X2x1Y2t5ZHJhdxgHIAEoCBIXCg9saW1pdF9jb2xvcmdhbWUYCCABKAgSFQoN",
          "bGltaXRfamFja3BvdBgJIAEoCBIUCgxsaW1pdF9ldmNob3AYCiABKAgiNwoV",
          "UFBTUkRlZmljaXRXYXJuaW5nUkVREg4KBnBwc3JpZBgBIAEoBRIOCgZlbmFi",
          "bGUYAiABKAgiJQoVUFBTUkRlZmljaXRXYXJuaW5nUlNQEgwKBGNvZGUYASAB",
          "KAUisQEKGVBQU1JNZW1iZXJXYXJuaW5nTGltaXRSRVESDgoGcHBzcmlkGAEg",
          "ASgFEhIKCmxlYWd1ZXR5cGUYAiABKAUSEAoIbGVhZ3VlaWQYAyABKAUSGgoS",
          "d2FybmluZ19saW1pdF90eXBlGAQgASgFEhUKDXdhcm5pbmdfbGltaXQYBSAB",
          "KAMSFAoMbGltaXRfZXZjaG9wGAYgASgIEhUKDWxpbWl0X2phY2twb3QYByAB",
          "KAgiKQoZUFBTUk1lbWJlcldhcm5pbmdMaW1pdFJTUBIMCgRjb2RlGAEgASgF",
          "IkUKHFN1cGVyTGVhZ3VlRGVmaWNpdFdhcm5pbmdSRVESFQoNc3VwZXJsZWFn",
          "dWVpZBgBIAEoBRIOCgZlbmFibGUYAiABKAgiLAocU3VwZXJMZWFndWVEZWZp",
          "Y2l0V2FybmluZ1JTUBIMCgRjb2RlGAEgASgIIt0BCiBTdXBlckxlYWd1ZU1l",
          "bWJlcldhcm5pbmdMaW1pdFJFURIVCg1zdXBlcmxlYWd1ZWlkGAEgASgFEhAK",
          "CGxlYWd1ZWlkGAIgASgFEhoKEndhcm5pbmdfbGltaXRfdHlwZRgDIAEoBRIV",
          "Cg13YXJuaW5nX2xpbWl0GAQgASgDEhcKD2xpbWl0X2x1Y2t5ZHJhdxgFIAEo",
          "CBIXCg9saW1pdF9jb2xvcmdhbWUYBiABKAgSFQoNbGltaXRfamFja3BvdBgH",
          "IAEoCBIUCgxsaW1pdF9ldmNob3AYCCABKAgiMAogU3VwZXJMZWFndWVNZW1i",
          "ZXJXYXJuaW5nTGltaXRSU1ASDAoEY29kZRgBIAEoBSKKAQoNTGVhZ3VlRGF0",
          "YVJFURIQCghsZWFndWVpZBgBIAEoBRIOCgZjbHViaWQYAiABKAkSGwoTbGFz",
          "dF93ZWVrX2JlZ2luX2RheRgDIAEoBRIbChN0aGlzX3dlZWtfYmVnaW5fZGF5",
          "GAQgASgFEhAKCHRpbWV6b25lGAUgASgFEgsKA3VpZBgGIAEoCSLXBAoOTGVh",
          "Z3VlRGF0YUluZm8SDgoGY2x1YmlkGAEgASgJEhAKCGNsdWJuYW1lGAIgASgJ",
          "EhAKCGNsdWJpY29uGAMgASgJEhMKC2FsbF9lYXJuaW5nGAQgASgDEhMKC2Fs",
          "bF9qYWNrcG90GAUgASgDEhUKDWFsbF9pbnN1cmFuY2UYBiABKAMSGQoRbGFz",
          "dF93ZWVrX2Vhcm5pbmcYByABKAMSGQoRbGFzdF93ZWVrX2phY2twb3QYCCAB",
          "KAMSGwoTbGFzdF93ZWVrX2luc3VyYW5jZRgJIAEoAxIZChF0aGlzX3dlZWtf",
          "ZWFybmluZxgKIAEoAxIZChF0aGlzX3dlZWtfamFja3BvdBgLIAEoAxIbChN0",
          "aGlzX3dlZWtfaW5zdXJhbmNlGAwgASgDEg8KB2FsbF9mZWUYDSABKAMSFQoN",
          "bGFzdF93ZWVrX2ZlZRgOIAEoAxIVCg10aGlzX3dlZWtfZmVlGA8gASgDEhIK",
          "CmFsbF90aWNrZXQYECABKAMSGAoQbGFzdF93ZWVrX3RpY2tldBgRIAEoAxIY",
          "ChB0aGlzX3dlZWtfdGlja2V0GBIgASgDEhIKCmFsbF9ldmNob3AYEyABKAMS",
          "GAoQbGFzdF93ZWVrX2V2Y2hvcBgUIAEoAxIYChB0aGlzX3dlZWtfZXZjaG9w",
          "GBUgASgDEhkKEWFsbF9zcGludXBfcHJvZml0GBYgASgDEh8KF2xhc3Rfd2Vl",
          "a19zcGludXBfcHJvZml0GBcgASgDEh8KF3RoaXNfd2Vla19zcGludXBfcHJv",
          "Zml0GBggASgDIq8BCg1MZWFndWVEYXRhUlNQEhAKCGxlYWd1ZWlkGAEgASgF",
          "Eh0KBGluZm8YAiADKAsyDy5MZWFndWVEYXRhSW5mbxIYChBqYWNrcG90X3Jl",
          "Y2hhcmdlGAMgASgDEhUKDWphY2twb3RfY2hpcHMYBCABKAMSFgoOdGhpc193",
          "ZWVrX2RhdGUYBSABKAkSFgoObGFzdF93ZWVrX2RhdGUYBiABKAkSDAoEY29k",
          "ZRgHIAEoBSIRCg9Kb2luV2FpdExpc3RSRVEigwEKD0pvaW5XYWl0TGlzdFJT",
          "UBIOCgZyb29taWQYASABKAkSDgoGY2x1YmlkGAIgASgJEg4KBnJlc3VsdBgD",
          "IAEoBRIOCgZyZWFzb24YBCABKAkSGgoSdnBpcF9saW1pdF9wZXJfc2V0GAUg",
          "ASgFEhQKDHZwaXBfcGVyX3NldBgGIAEoBSISChBMZWF2ZVdhaXRMaXN0UkVR",
          "IjIKEExlYXZlV2FpdExpc3RSU1ASDgoGcm9vbWlkGAEgASgJEg4KBnJlc3Vs",
          "dBgCIAEoBSKRAQoMV2FpdExpc3RVc2VyEg4KBnVzZXJpZBgBIAEoAxIRCgl1",
          "c2VyX25hbWUYAiABKAkSEQoJY2x1Yl9uYW1lGAMgASgJEhEKCXVzZXJfaWNv",
          "bhgEIAEoCRIOCgZjbHViaWQYBSABKAUSEAoIbGVhZ3VlaWQYBiABKAUSFgoO",
          "dXNlcl92aXBfbGV2ZWwYByABKAUiPwoPV2FpdExpc3RJbmZvQlJDEhwKBXVz",
          "ZXJzGAEgAygLMg0uV2FpdExpc3RVc2VyEg4KBnJvb21pZBgCIAEoCSKhAgoQ",
          "V2FpdExpc3RTZWF0SW5mbxIQCghyb29tdHlwZRgBIAEoDRINCgVibGluZBgC",
          "IAEoBRIMCgRhbnRlGAMgASgFEg4KBnJvb21pZBgEIAEoBRIOCgZjbHViaWQY",
          "BSABKAUSDgoGc2VhdGlkGAYgASgFEhEKCWxhc3RfdGltZRgHIAEoBRIMCgRu",
          "YW1lGAggASgJEhEKCWNsdWJfbmFtZRgJIAEoCRIQCghzZWF0X251bRgKIAEo",
          "BRIcCglyb29tX21vZGUYCyABKA4yCS5Sb29tTW9kZRIcCglyb29tX3R5cGUY",
          "DCABKA4yCS5Sb29tVHlwZRIcCglnYW1lX21vZGUYDSABKA4yCS5HYW1lTW9k",
          "ZRIOCgZwcHNyaWQYDiABKAUiFQoTV2FpdExpc3RTZWF0SW5mb1JFUSI7ChNX",
          "YWl0TGlzdFNlYXRJbmZvUlNQEiQKCWluZm9fbGlzdBgBIAMoCzIRLldhaXRM",
          "aXN0U2VhdEluZm8iIgoQUmVmdXNlU2l0RG93blJFURIOCgZyb29taWQYASAB",
          "KAkiOgoTU2V0Um9vbUF1dGhvcml0eVJFURIQCghsZWFndWVpZBgBIAEoBRIR",
          "CglhdXRob3JpdHkYAiABKAUiSAoTU2V0Um9vbUF1dGhvcml0eVJTUBIQCghs",
          "ZWFndWVpZBgBIAEoBRIRCglhdXRob3JpdHkYAiABKAUSDAoEY29kZRgDIAEo",
          "BSI3ChBSb29tQXV0aG9yaXR5QlJDEhAKCGxlYWd1ZWlkGAEgASgFEhEKCWF1",
          "dGhvcml0eRgCIAEoBSIkChBEaXNiYW5kTGVhZ3VlUkVREhAKCGxlYWd1ZWlk",
          "GAEgASgFIjIKEERpc2JhbmRMZWFndWVSU1ASEAoIbGVhZ3VlaWQYASABKAUS",
          "DAoEY29kZRgCIAEoBSIxCg1RdWl0TGVhZ3VlUkVREhAKCGxlYWd1ZWlkGAEg",
          "ASgFEg4KBmNsdWJpZBgCIAEoCSI/Cg1RdWl0TGVhZ3VlUlNQEhAKCGxlYWd1",
          "ZWlkGAEgASgFEg4KBmNsdWJpZBgCIAEoCRIMCgRjb2RlGAMgASgFIjQKEERl",
          "bExlYWd1ZUNsdWJSRVESEAoIbGVhZ3VlaWQYASABKAUSDgoGY2x1YmlkGAIg",
          "ASgJIlsKEERlbExlYWd1ZUNsdWJSU1ASEAoIbGVhZ3VlaWQYASABKAUSDgoG",
          "Y2x1YmlkGAIgASgJEgwKBGNvZGUYAyABKAUSFwoPbGVmdF9wYXVzZV90aW1l",
          "GAQgASgFIkEKD0xlYWd1ZVVwZGF0ZUJSQxIQCghsZWFndWVpZBgBIAEoBRIM",
          "CgR0eXBlGAIgASgFEg4KBmNsdWJpZBgDIAEoCSIhCg1MZWFndWVOYW1lUkVR",
          "EhAKCGxlYWd1ZWlkGAEgASgFIj0KDUxlYWd1ZU5hbWVSU1ASEAoIbGVhZ3Vl",
          "aWQYASABKAUSDAoEbmFtZRgCIAEoCRIMCgRjb2RlGAMgASgFIiMKEUxlYWd1",
          "ZUNsdWJDb25kUkVREg4KBmNsdWJpZBgBIAEoCSIxChFMZWFndWVDbHViQ29u",
          "ZFJTUBIOCgZjbHViaWQYASABKAUSDAoEY29kZRgCIAEoBSJIChVBbGFybUxl",
          "YWd1ZUF1dG9CYW5SU1ASDgoGY2x1YmlkGAEgASgFEhEKCWNsdWJfbmFtZRgC",
          "IAEoCRIMCgR0eXBlGAMgASgFIlIKFkFsYXJtRGVmaWNpdFdhcm5pbmdSU1AS",
          "EgoKbGVhZ3VldHlwZRgBIAEoBRIQCghsZWFndWVpZBgCIAEoBRISCgpsZWFn",
          "dWVuYW1lGAMgASgJIoMBChdMZWFndWVMaW1pdENsdWJCbGluZFJFURIQCghs",
          "ZWFndWVpZBgBIAEoBRIOCgZjbHViaWQYAiABKAkSIQoMbGltaXRfZGV0YWls",
          "GAMgASgLMgsuQmxpbmRMaW1pdBIjCgpsaW1pdF9pbmZvGAQgAygLMg8uQmxp",
          "bmRMaW1pdEluZm8ikQEKF0xlYWd1ZUxpbWl0Q2x1YkJsaW5kUlNQEgwKBGNv",
          "ZGUYASABKAUSEAoIbGVhZ3VlaWQYAiABKAUSDgoGY2x1YmlkGAMgASgJEiEK",
          "DGxpbWl0X2RldGFpbBgEIAEoCzILLkJsaW5kTGltaXQSIwoKbGltaXRfaW5m",
          "bxgFIAMoCzIPLkJsaW5kTGltaXRJbmZvIm8KHlN1cGVyTGVhZ3VlTGltaXRM",
          "ZWFndWVCbGluZFJFURIWCg5zdXBlcl9sZWFndWVpZBgBIAEoBRIQCghsZWFn",
          "dWVpZBgCIAEoBRIjCgpsaW1pdF9pbmZvGAMgAygLMg8uQmxpbmRMaW1pdElu",
          "Zm8ifQoeU3VwZXJMZWFndWVMaW1pdExlYWd1ZUJsaW5kUlNQEgwKBGNvZGUY",
          "ASABKAUSFgoOc3VwZXJfbGVhZ3VlaWQYAiABKAUSEAoIbGVhZ3VlaWQYAyAB",
          "KAUSIwoKbGltaXRfaW5mbxgEIAMoCzIPLkJsaW5kTGltaXRJbmZvKrIBCg5Q",
          "UFNST3BlcmF0aW9ucxIaChZQUFNSX0NPTkZJR1VSRV9TVUNDRUVEEAASGwoO",
          "UFBTUl9OT1RfRk9VTkQQ////////////ARIhChRQUFNSX1BFUk1JU1NJT05f",
          "RkFJTBD+//////////8BEiIKFVBQU1JfTUVNQkVSX05PVF9GT1VORBD9////",
          "//////8BEiAKE1BQU1JfQ09ORklHVVJFX0ZBSUwQ/P//////////ASrcAQoV",
          "U3VwZXJMZWFndWVPcGVyYXRpb25zEiEKHVNVUEVSTEVBR1VFX0NPTkZJR1VS",
          "RV9TVUNDRUVEEAASIgoVU1VQRVJMRUFHVUVfTk9UX0ZPVU5EEP//////////",
          "/wESKAobU1VQRVJMRUFHVUVfUEVSTUlTU0lPTl9GQUlMEP7//////////wES",
          "KQocU1VQRVJMRUFHVUVfTUVNQkVSX05PVF9GT1VORBD9//////////8BEicK",
          "GlNVUEVSTEVBR1VFX0NPTkZJR1VSRV9GQUlMEPz//////////wEq9QQKDkJs",
          "aW5kTGltaXRUeXBlEhgKFEJMSU5EX0xJTUlUX1RZUEVfTkxIEAESGAoUQkxJ",
          "TkRfTElNSVRfVFlQRV9BT0YQAhIbChdCTElORF9MSU1JVF9UWVBFX05MSF8z",
          "MRADEh0KGUJMSU5EX0xJTUlUX1RZUEVfU0lYX1BMVVMQBBIZChVCTElORF9M",
          "SU1JVF9UWVBFX1BMTzQQBRIZChVCTElORF9MSU1JVF9UWVBFX1BMTzUQBhIZ",
          "ChVCTElORF9MSU1JVF9UWVBFX1BMTzYQBxIcChhCTElORF9MSU1JVF9UWVBF",
          "X1BMTzRfSEwQCBIcChhCTElORF9MSU1JVF9UWVBFX1BMTzVfSEwQCRIcChhC",
          "TElORF9MSU1JVF9UWVBFX1BMTzZfSEwQChIeChpCTElORF9MSU1JVF9UWVBF",
          "X0ZMQVNIX05MSBALEh8KG0JMSU5EX0xJTUlUX1RZUEVfRkxBU0hfUExPNBAM",
          "EhoKFkJMSU5EX0xJTUlUX1RZUEVfUFVTT1kQDRIYChRCTElORF9MSU1JVF9U",
          "WVBFX09GQxAOEh0KGUJMSU5EX0xJTUlUX1RZUEVfTkxIX1BMTzQQDxIdChlC",
          "TElORF9MSU1JVF9UWVBFX05MSF9QTE81EBASFwoTQkxJTkRfTElNSVRfVFlQ",
          "RV9UUBAREh8KG0JMSU5EX0xJTUlUX1RZUEVfTFVDS1lfRFJBVxASEhoKFkJM",
          "SU5EX0xJTUlUX1RZUEVfQ09MT1IQExIfChtCTElORF9MSU1JVF9UWVBFX0ZM",
          "QVNIX1BMTzUQFBIcChhCTElORF9MSU1JVF9UWVBFX1RPTkdJVFMQFUIJWgcv",
          "cGJwcGdv"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.PreBaseReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PPSROperations), typeof(global::SuperLeagueOperations), typeof(global::BlindLimitType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinLeagueREQ), global::JoinLeagueREQ.Parser, new[]{ "Clubid", "Leagueid", "ContactWay" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinLeagueRSP), global::JoinLeagueRSP.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HandleJoinLeagueMsgREQ), global::HandleJoinLeagueMsgREQ.Parser, new[]{ "Clubid", "Code", "Leagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HandleJoinLeagueMsgRSP), global::HandleJoinLeagueMsgRSP.Parser, new[]{ "Leagueid", "Code", "Clubid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinLeagueListREQ), global::JoinLeagueListREQ.Parser, new[]{ "Leagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinLeagueMsgInfo), global::JoinLeagueMsgInfo.Parser, new[]{ "Clubid", "Clubname", "Time", "Clubicon" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinLeagueListRSP), global::JoinLeagueListRSP.Parser, new[]{ "Leagueid", "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinLeagueListBRC), global::JoinLeagueListBRC.Parser, new[]{ "Leagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateLeagueREQ), global::CreateLeagueREQ.Parser, new[]{ "Leaguename", "Clubid", "ContactWay" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateLeagueRSP), global::CreateLeagueRSP.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlindLimit), global::BlindLimit.Parser, new[]{ "NlhLimitStatus", "NlhLimitStart", "NlhLimitEnd", "Nlh6LimitStatus", "Nlh6LimitStart", "Nlh6LimitEnd", "PineLimitStatus", "PineLimitStart", "PineLimitEnd", "OmahaLimitStatus", "OmahaLimitStart", "OmahaLimitEnd", "MixedLimitStatus", "MixedLimitStart", "MixedLimitEnd", "PusoyLimitStatus", "PusoyLimitStart", "PusoyLimitEnd" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlindLimitInfo), global::BlindLimitInfo.Parser, new[]{ "LimitType", "LimitStatus", "LimitStart", "LimitEnd" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueMemberInfo), global::LeagueMemberInfo.Parser, new[]{ "Clubid", "Clubname", "Clubicon", "Ban", "AutobanType", "AutobanLimit", "ProfitWeek", "ProfitDay", "BanTime", "JoinTime", "BlindLimitStatus", "LimitDetail", "LimitInfo", "LuckydrawWeeklyProfit", "LuckydrawDailyProfit", "ColorgameWeeklyProfit", "ColorgameDailyProfit", "JackpotWeeklyProfit", "JackpotDailyProfit", "EvchopWeeklyProfit", "EvchopDailyProfit", "OthersWeeklyProfit", "OthersDailyProfit", "LimitLuckydraw", "LimitColorgame", "LimitJackpot", "LimitEvchop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueMemberREQ), global::LeagueMemberREQ.Parser, new[]{ "Leagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueMemberRSP), global::LeagueMemberRSP.Parser, new[]{ "Leagueid", "Info", "Autoban" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueMemberSharkIndex), global::LeagueMemberSharkIndex.Parser, new[]{ "Clubid", "Clubname", "Clubicon", "Leagueid", "Leaguename", "SuperLeagueid", "Ppsrid", "SharkIndex", "Ppstid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueMemberSharkIndexREQ), global::LeagueMemberSharkIndexREQ.Parser, new[]{ "Clubid", "Leagueid", "SuperLeagueid", "Ppsrid", "StartIndex", "Amount", "Ppstid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueMemberSharkIndexRSP), global::LeagueMemberSharkIndexRSP.Parser, new[]{ "TotalNum", "StartIndex", "Amount", "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRMemberInfo), global::PPSRMemberInfo.Parser, new[]{ "Leaguetype", "Leagueid", "Leaguename", "IsBanned", "WarningLimitType", "WarningLimit", "WeeklyProfit", "DailyProfit", "EvchopWeeklyProfit", "EvchopDailyProfit", "OthersWeeklyProfit", "OthersDailyProfit", "LimitEvchop", "LimitJackpot", "JackpotWeeklyProfit", "JackpotDailyProfit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRMemberREQ), global::PPSRMemberREQ.Parser, new[]{ "Ppsrid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRMemberRSP), global::PPSRMemberRSP.Parser, new[]{ "Ppsrid", "DeficitWarningEnable", "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueMemberInfo), global::SuperLeagueMemberInfo.Parser, new[]{ "Leagueid", "Leaguename", "IsBanned", "WarningLimitType", "WarningLimit", "WeeklyProfit", "DailyProfit", "LuckydrawWeeklyProfit", "LuckydrawDailyProfit", "ColorgameWeeklyProfit", "ColorgameDailyProfit", "JackpotWeeklyProfit", "JackpotDailyProfit", "EvchopWeeklyProfit", "EvchopDailyProfit", "OthersWeeklyProfit", "OthersDailyProfit", "LimitLuckydraw", "LimitColorgame", "LimitJackpot", "LimitEvchop", "BlindLimitStatus", "LimitInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueMemberREQ), global::SuperLeagueMemberREQ.Parser, new[]{ "Superleagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueMemberRSP), global::SuperLeagueMemberRSP.Parser, new[]{ "Superleagueid", "DeficitWarningEnable", "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueAutoBanREQ), global::LeagueAutoBanREQ.Parser, new[]{ "Leagueid", "Type", "Enable", "Clubid", "Timetype", "Limit", "LimitLuckydraw", "LimitColorgame", "LimitJackpot", "LimitEvchop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueAutoBanRSP), global::LeagueAutoBanRSP.Parser, new[]{ "Leagueid", "Type", "Code", "Clubid", "Timetype", "Limit", "LimitLuckydraw", "LimitColorgame", "LimitJackpot", "LimitEvchop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRDeficitWarningREQ), global::PPSRDeficitWarningREQ.Parser, new[]{ "Ppsrid", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRDeficitWarningRSP), global::PPSRDeficitWarningRSP.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRMemberWarningLimitREQ), global::PPSRMemberWarningLimitREQ.Parser, new[]{ "Ppsrid", "Leaguetype", "Leagueid", "WarningLimitType", "WarningLimit", "LimitEvchop", "LimitJackpot" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PPSRMemberWarningLimitRSP), global::PPSRMemberWarningLimitRSP.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueDeficitWarningREQ), global::SuperLeagueDeficitWarningREQ.Parser, new[]{ "Superleagueid", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueDeficitWarningRSP), global::SuperLeagueDeficitWarningRSP.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueMemberWarningLimitREQ), global::SuperLeagueMemberWarningLimitREQ.Parser, new[]{ "Superleagueid", "Leagueid", "WarningLimitType", "WarningLimit", "LimitLuckydraw", "LimitColorgame", "LimitJackpot", "LimitEvchop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueMemberWarningLimitRSP), global::SuperLeagueMemberWarningLimitRSP.Parser, new[]{ "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueDataREQ), global::LeagueDataREQ.Parser, new[]{ "Leagueid", "Clubid", "LastWeekBeginDay", "ThisWeekBeginDay", "Timezone", "Uid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueDataInfo), global::LeagueDataInfo.Parser, new[]{ "Clubid", "Clubname", "Clubicon", "AllEarning", "AllJackpot", "AllInsurance", "LastWeekEarning", "LastWeekJackpot", "LastWeekInsurance", "ThisWeekEarning", "ThisWeekJackpot", "ThisWeekInsurance", "AllFee", "LastWeekFee", "ThisWeekFee", "AllTicket", "LastWeekTicket", "ThisWeekTicket", "AllEvchop", "LastWeekEvchop", "ThisWeekEvchop", "AllSpinupProfit", "LastWeekSpinupProfit", "ThisWeekSpinupProfit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueDataRSP), global::LeagueDataRSP.Parser, new[]{ "Leagueid", "Info", "JackpotRecharge", "JackpotChips", "ThisWeekDate", "LastWeekDate", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinWaitListREQ), global::JoinWaitListREQ.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinWaitListRSP), global::JoinWaitListRSP.Parser, new[]{ "Roomid", "Clubid", "Result", "Reason", "VpipLimitPerSet", "VpipPerSet" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeaveWaitListREQ), global::LeaveWaitListREQ.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeaveWaitListRSP), global::LeaveWaitListRSP.Parser, new[]{ "Roomid", "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WaitListUser), global::WaitListUser.Parser, new[]{ "Userid", "UserName", "ClubName", "UserIcon", "Clubid", "Leagueid", "UserVipLevel" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WaitListInfoBRC), global::WaitListInfoBRC.Parser, new[]{ "Users", "Roomid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WaitListSeatInfo), global::WaitListSeatInfo.Parser, new[]{ "Roomtype", "Blind", "Ante", "Roomid", "Clubid", "Seatid", "LastTime", "Name", "ClubName", "SeatNum", "RoomMode", "RoomType", "GameMode", "Ppsrid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WaitListSeatInfoREQ), global::WaitListSeatInfoREQ.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WaitListSeatInfoRSP), global::WaitListSeatInfoRSP.Parser, new[]{ "InfoList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RefuseSitDownREQ), global::RefuseSitDownREQ.Parser, new[]{ "Roomid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetRoomAuthorityREQ), global::SetRoomAuthorityREQ.Parser, new[]{ "Leagueid", "Authority" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetRoomAuthorityRSP), global::SetRoomAuthorityRSP.Parser, new[]{ "Leagueid", "Authority", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomAuthorityBRC), global::RoomAuthorityBRC.Parser, new[]{ "Leagueid", "Authority" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DisbandLeagueREQ), global::DisbandLeagueREQ.Parser, new[]{ "Leagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DisbandLeagueRSP), global::DisbandLeagueRSP.Parser, new[]{ "Leagueid", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QuitLeagueREQ), global::QuitLeagueREQ.Parser, new[]{ "Leagueid", "Clubid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QuitLeagueRSP), global::QuitLeagueRSP.Parser, new[]{ "Leagueid", "Clubid", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DelLeagueClubREQ), global::DelLeagueClubREQ.Parser, new[]{ "Leagueid", "Clubid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DelLeagueClubRSP), global::DelLeagueClubRSP.Parser, new[]{ "Leagueid", "Clubid", "Code", "LeftPauseTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueUpdateBRC), global::LeagueUpdateBRC.Parser, new[]{ "Leagueid", "Type", "Clubid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueNameREQ), global::LeagueNameREQ.Parser, new[]{ "Leagueid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueNameRSP), global::LeagueNameRSP.Parser, new[]{ "Leagueid", "Name", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueClubCondREQ), global::LeagueClubCondREQ.Parser, new[]{ "Clubid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueClubCondRSP), global::LeagueClubCondRSP.Parser, new[]{ "Clubid", "Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AlarmLeagueAutoBanRSP), global::AlarmLeagueAutoBanRSP.Parser, new[]{ "Clubid", "ClubName", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AlarmDeficitWarningRSP), global::AlarmDeficitWarningRSP.Parser, new[]{ "Leaguetype", "Leagueid", "Leaguename" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueLimitClubBlindREQ), global::LeagueLimitClubBlindREQ.Parser, new[]{ "Leagueid", "Clubid", "LimitDetail", "LimitInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LeagueLimitClubBlindRSP), global::LeagueLimitClubBlindRSP.Parser, new[]{ "Code", "Leagueid", "Clubid", "LimitDetail", "LimitInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueLimitLeagueBlindREQ), global::SuperLeagueLimitLeagueBlindREQ.Parser, new[]{ "SuperLeagueid", "Leagueid", "LimitInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuperLeagueLimitLeagueBlindRSP), global::SuperLeagueLimitLeagueBlindRSP.Parser, new[]{ "Code", "SuperLeagueid", "Leagueid", "LimitInfo" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum PPSROperations {
  /// <summary>
  ///設置成功
  /// </summary>
  [pbr::OriginalName("PPSR_CONFIGURE_SUCCEED")] PpsrConfigureSucceed = 0,
  /// <summary>
  ///此 PPSR 不存在
  /// </summary>
  [pbr::OriginalName("PPSR_NOT_FOUND")] PpsrNotFound = -1,
  /// <summary>
  ///權限不足
  /// </summary>
  [pbr::OriginalName("PPSR_PERMISSION_FAIL")] PpsrPermissionFail = -2,
  /// <summary>
  ///設置對象不存在
  /// </summary>
  [pbr::OriginalName("PPSR_MEMBER_NOT_FOUND")] PpsrMemberNotFound = -3,
  /// <summary>
  ///其他失敗
  /// </summary>
  [pbr::OriginalName("PPSR_CONFIGURE_FAIL")] PpsrConfigureFail = -4,
}

public enum SuperLeagueOperations {
  /// <summary>
  ///設置成功
  /// </summary>
  [pbr::OriginalName("SUPERLEAGUE_CONFIGURE_SUCCEED")] SuperleagueConfigureSucceed = 0,
  /// <summary>
  ///此 SuperLeague 不存在
  /// </summary>
  [pbr::OriginalName("SUPERLEAGUE_NOT_FOUND")] SuperleagueNotFound = -1,
  /// <summary>
  ///權限不足
  /// </summary>
  [pbr::OriginalName("SUPERLEAGUE_PERMISSION_FAIL")] SuperleaguePermissionFail = -2,
  /// <summary>
  ///設置對象不存在
  /// </summary>
  [pbr::OriginalName("SUPERLEAGUE_MEMBER_NOT_FOUND")] SuperleagueMemberNotFound = -3,
  /// <summary>
  ///其他失敗
  /// </summary>
  [pbr::OriginalName("SUPERLEAGUE_CONFIGURE_FAIL")] SuperleagueConfigureFail = -4,
}

public enum BlindLimitType {
  [pbr::OriginalName("BLIND_LIMIT_TYPE_NLH")] Nlh = 1,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_AOF")] Aof = 2,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_NLH_31")] Nlh31 = 3,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_SIX_PLUS")] SixPlus = 4,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PLO4")] Plo4 = 5,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PLO5")] Plo5 = 6,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PLO6")] Plo6 = 7,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PLO4_HL")] Plo4Hl = 8,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PLO5_HL")] Plo5Hl = 9,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PLO6_HL")] Plo6Hl = 10,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_FLASH_NLH")] FlashNlh = 11,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_FLASH_PLO4")] FlashPlo4 = 12,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_PUSOY")] Pusoy = 13,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_OFC")] Ofc = 14,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_NLH_PLO4")] NlhPlo4 = 15,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_NLH_PLO5")] NlhPlo5 = 16,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_TP")] Tp = 17,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_LUCKY_DRAW")] LuckyDraw = 18,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_COLOR")] Color = 19,
  [pbr::OriginalName("BLIND_LIMIT_TYPE_FLASH_PLO5")] FlashPlo5 = 20,
  /// <summary>
  ///new_game_proto
  ///BLIND_LIMIT_TYPE_NEWGAME    = 1000;
  /// </summary>
  [pbr::OriginalName("BLIND_LIMIT_TYPE_TONGITS")] Tongits = 21,
}

#endregion

#region Messages
public sealed partial class JoinLeagueREQ : pb::IMessage<JoinLeagueREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinLeagueREQ> _parser = new pb::MessageParser<JoinLeagueREQ>(() => new JoinLeagueREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinLeagueREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueREQ(JoinLeagueREQ other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    leagueid_ = other.leagueid_;
    contactWay_ = other.contactWay_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueREQ Clone() {
    return new JoinLeagueREQ(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "contact_way" field.</summary>
  public const int ContactWayFieldNumber = 3;
  private readonly static string ContactWayDefaultValue = "";

  private string contactWay_;
  /// <summary>
  /// 俱乐部联系方式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ContactWay {
    get { return contactWay_ ?? ContactWayDefaultValue; }
    set {
      contactWay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "contact_way" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasContactWay {
    get { return contactWay_ != null; }
  }
  /// <summary>Clears the value of the "contact_way" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearContactWay() {
    contactWay_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinLeagueREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinLeagueREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Leagueid != other.Leagueid) return false;
    if (ContactWay != other.ContactWay) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasContactWay) hash ^= ContactWay.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasContactWay) {
      output.WriteRawTag(26);
      output.WriteString(ContactWay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasContactWay) {
      output.WriteRawTag(26);
      output.WriteString(ContactWay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasContactWay) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactWay);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinLeagueREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasContactWay) {
      ContactWay = other.ContactWay;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          ContactWay = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          ContactWay = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///
///code:
///0申请成功 
///-1已经在申请列表
///1俱乐部星数不够，
///2总fee不够,
///3俱乐部已过期 
///-3联盟不存在, 
///-4已经在此联盟, 
///-5超过加入上限, 
///-6失败
/// </summary>
public sealed partial class JoinLeagueRSP : pb::IMessage<JoinLeagueRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinLeagueRSP> _parser = new pb::MessageParser<JoinLeagueRSP>(() => new JoinLeagueRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinLeagueRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueRSP(JoinLeagueRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueRSP Clone() {
    return new JoinLeagueRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinLeagueRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinLeagueRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinLeagueRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class HandleJoinLeagueMsgREQ : pb::IMessage<HandleJoinLeagueMsgREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<HandleJoinLeagueMsgREQ> _parser = new pb::MessageParser<HandleJoinLeagueMsgREQ>(() => new HandleJoinLeagueMsgREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<HandleJoinLeagueMsgREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HandleJoinLeagueMsgREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HandleJoinLeagueMsgREQ(HandleJoinLeagueMsgREQ other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    code_ = other.code_;
    leagueid_ = other.leagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HandleJoinLeagueMsgREQ Clone() {
    return new HandleJoinLeagueMsgREQ(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 1同意|-1拒绝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 3;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as HandleJoinLeagueMsgREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(HandleJoinLeagueMsgREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Code != other.Code) return false;
    if (Leagueid != other.Leagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (HasLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (HasLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(HandleJoinLeagueMsgREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
        case 24: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
        case 24: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// 
///-1俱乐部不存在, -2俱乐部不能加入，-3联盟已满, -4俱乐部有牌局未结束, -5联盟异常, 1需要审批
/// </summary>
public sealed partial class HandleJoinLeagueMsgRSP : pb::IMessage<HandleJoinLeagueMsgRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<HandleJoinLeagueMsgRSP> _parser = new pb::MessageParser<HandleJoinLeagueMsgRSP>(() => new HandleJoinLeagueMsgRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<HandleJoinLeagueMsgRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HandleJoinLeagueMsgRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HandleJoinLeagueMsgRSP(HandleJoinLeagueMsgRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    code_ = other.code_;
    clubid_ = other.clubid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HandleJoinLeagueMsgRSP Clone() {
    return new HandleJoinLeagueMsgRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 3;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as HandleJoinLeagueMsgRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(HandleJoinLeagueMsgRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Code != other.Code) return false;
    if (Clubid != other.Clubid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (HasClubid) {
      output.WriteRawTag(26);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (HasClubid) {
      output.WriteRawTag(26);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(HandleJoinLeagueMsgRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
        case 26: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
        case 26: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class JoinLeagueListREQ : pb::IMessage<JoinLeagueListREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinLeagueListREQ> _parser = new pb::MessageParser<JoinLeagueListREQ>(() => new JoinLeagueListREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinLeagueListREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListREQ(JoinLeagueListREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListREQ Clone() {
    return new JoinLeagueListREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinLeagueListREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinLeagueListREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinLeagueListREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class JoinLeagueMsgInfo : pb::IMessage<JoinLeagueMsgInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinLeagueMsgInfo> _parser = new pb::MessageParser<JoinLeagueMsgInfo>(() => new JoinLeagueMsgInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinLeagueMsgInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueMsgInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueMsgInfo(JoinLeagueMsgInfo other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    clubname_ = other.clubname_;
    time_ = other.time_;
    clubicon_ = other.clubicon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueMsgInfo Clone() {
    return new JoinLeagueMsgInfo(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "clubname" field.</summary>
  public const int ClubnameFieldNumber = 2;
  private readonly static string ClubnameDefaultValue = "";

  private string clubname_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubname {
    get { return clubname_ ?? ClubnameDefaultValue; }
    set {
      clubname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubname {
    get { return clubname_ != null; }
  }
  /// <summary>Clears the value of the "clubname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubname() {
    clubname_ = null;
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 3;
  private readonly static long TimeDefaultValue = 0L;

  private long time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Time {
    get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      time_ = value;
    }
  }
  /// <summary>Gets whether the "time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubicon" field.</summary>
  public const int ClubiconFieldNumber = 4;
  private readonly static string ClubiconDefaultValue = "";

  private string clubicon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubicon {
    get { return clubicon_ ?? ClubiconDefaultValue; }
    set {
      clubicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubicon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubicon {
    get { return clubicon_ != null; }
  }
  /// <summary>Clears the value of the "clubicon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubicon() {
    clubicon_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinLeagueMsgInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinLeagueMsgInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Clubname != other.Clubname) return false;
    if (Time != other.Time) return false;
    if (Clubicon != other.Clubicon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasClubname) hash ^= Clubname.GetHashCode();
    if (HasTime) hash ^= Time.GetHashCode();
    if (HasClubicon) hash ^= Clubicon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasTime) {
      output.WriteRawTag(24);
      output.WriteInt64(Time);
    }
    if (HasClubicon) {
      output.WriteRawTag(34);
      output.WriteString(Clubicon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasTime) {
      output.WriteRawTag(24);
      output.WriteInt64(Time);
    }
    if (HasClubicon) {
      output.WriteRawTag(34);
      output.WriteString(Clubicon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasClubname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubname);
    }
    if (HasTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (HasClubicon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubicon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinLeagueMsgInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasClubname) {
      Clubname = other.Clubname;
    }
    if (other.HasTime) {
      Time = other.Time;
    }
    if (other.HasClubicon) {
      Clubicon = other.Clubicon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 24: {
          Time = input.ReadInt64();
          break;
        }
        case 34: {
          Clubicon = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 24: {
          Time = input.ReadInt64();
          break;
        }
        case 34: {
          Clubicon = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class JoinLeagueListRSP : pb::IMessage<JoinLeagueListRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinLeagueListRSP> _parser = new pb::MessageParser<JoinLeagueListRSP>(() => new JoinLeagueListRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinLeagueListRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListRSP(JoinLeagueListRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    info_ = other.info_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListRSP Clone() {
    return new JoinLeagueListRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::JoinLeagueMsgInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(18, global::JoinLeagueMsgInfo.Parser);
  private readonly pbc::RepeatedField<global::JoinLeagueMsgInfo> info_ = new pbc::RepeatedField<global::JoinLeagueMsgInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::JoinLeagueMsgInfo> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinLeagueListRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinLeagueListRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if(!info_.Equals(other.info_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    hash ^= info_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    info_.WriteTo(output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    info_.WriteTo(ref output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    size += info_.CalculateSize(_repeated_info_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinLeagueListRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    info_.Add(other.info_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          info_.AddEntriesFrom(ref input, _repeated_info_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class JoinLeagueListBRC : pb::IMessage<JoinLeagueListBRC>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinLeagueListBRC> _parser = new pb::MessageParser<JoinLeagueListBRC>(() => new JoinLeagueListBRC());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinLeagueListBRC> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListBRC() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListBRC(JoinLeagueListBRC other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinLeagueListBRC Clone() {
    return new JoinLeagueListBRC(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinLeagueListBRC);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinLeagueListBRC other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinLeagueListBRC other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CreateLeagueREQ : pb::IMessage<CreateLeagueREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CreateLeagueREQ> _parser = new pb::MessageParser<CreateLeagueREQ>(() => new CreateLeagueREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CreateLeagueREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CreateLeagueREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CreateLeagueREQ(CreateLeagueREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leaguename_ = other.leaguename_;
    clubid_ = other.clubid_;
    contactWay_ = other.contactWay_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CreateLeagueREQ Clone() {
    return new CreateLeagueREQ(this);
  }

  /// <summary>Field number for the "leaguename" field.</summary>
  public const int LeaguenameFieldNumber = 1;
  private readonly static string LeaguenameDefaultValue = "";

  private string leaguename_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Leaguename {
    get { return leaguename_ ?? LeaguenameDefaultValue; }
    set {
      leaguename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "leaguename" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguename {
    get { return leaguename_ != null; }
  }
  /// <summary>Clears the value of the "leaguename" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguename() {
    leaguename_ = null;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static int ClubidDefaultValue = 0;

  private int clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Clubid {
    get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clubid_ = value;
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "contact_way" field.</summary>
  public const int ContactWayFieldNumber = 3;
  private readonly static string ContactWayDefaultValue = "";

  private string contactWay_;
  /// <summary>
  /// 俱乐部联系方式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ContactWay {
    get { return contactWay_ ?? ContactWayDefaultValue; }
    set {
      contactWay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "contact_way" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasContactWay {
    get { return contactWay_ != null; }
  }
  /// <summary>Clears the value of the "contact_way" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearContactWay() {
    contactWay_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CreateLeagueREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CreateLeagueREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leaguename != other.Leaguename) return false;
    if (Clubid != other.Clubid) return false;
    if (ContactWay != other.ContactWay) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeaguename) hash ^= Leaguename.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasContactWay) hash ^= ContactWay.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeaguename) {
      output.WriteRawTag(10);
      output.WriteString(Leaguename);
    }
    if (HasClubid) {
      output.WriteRawTag(16);
      output.WriteInt32(Clubid);
    }
    if (HasContactWay) {
      output.WriteRawTag(26);
      output.WriteString(ContactWay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeaguename) {
      output.WriteRawTag(10);
      output.WriteString(Leaguename);
    }
    if (HasClubid) {
      output.WriteRawTag(16);
      output.WriteInt32(Clubid);
    }
    if (HasContactWay) {
      output.WriteRawTag(26);
      output.WriteString(ContactWay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeaguename) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Leaguename);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
    }
    if (HasContactWay) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactWay);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CreateLeagueREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeaguename) {
      Leaguename = other.Leaguename;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasContactWay) {
      ContactWay = other.ContactWay;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Leaguename = input.ReadString();
          break;
        }
        case 16: {
          Clubid = input.ReadInt32();
          break;
        }
        case 26: {
          ContactWay = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Leaguename = input.ReadString();
          break;
        }
        case 16: {
          Clubid = input.ReadInt32();
          break;
        }
        case 26: {
          ContactWay = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CreateLeagueRSP : pb::IMessage<CreateLeagueRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CreateLeagueRSP> _parser = new pb::MessageParser<CreateLeagueRSP>(() => new CreateLeagueRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CreateLeagueRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CreateLeagueRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CreateLeagueRSP(CreateLeagueRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CreateLeagueRSP Clone() {
    return new CreateLeagueRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -1名字不能全为空, -2超出创建联盟上限, -3超出加入联盟上限, -4俱乐部有牌局未结束 -5联盟名字重复 -10失败, 1俱乐部星级不够2星以上，2总fee不够，3俱乐部已过期 0成功 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CreateLeagueRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CreateLeagueRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CreateLeagueRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class BlindLimit : pb::IMessage<BlindLimit>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<BlindLimit> _parser = new pb::MessageParser<BlindLimit>(() => new BlindLimit());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<BlindLimit> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlindLimit() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlindLimit(BlindLimit other) : this() {
    _hasBits0 = other._hasBits0;
    nlhLimitStatus_ = other.nlhLimitStatus_;
    nlhLimitStart_ = other.nlhLimitStart_;
    nlhLimitEnd_ = other.nlhLimitEnd_;
    nlh6LimitStatus_ = other.nlh6LimitStatus_;
    nlh6LimitStart_ = other.nlh6LimitStart_;
    nlh6LimitEnd_ = other.nlh6LimitEnd_;
    pineLimitStatus_ = other.pineLimitStatus_;
    pineLimitStart_ = other.pineLimitStart_;
    pineLimitEnd_ = other.pineLimitEnd_;
    omahaLimitStatus_ = other.omahaLimitStatus_;
    omahaLimitStart_ = other.omahaLimitStart_;
    omahaLimitEnd_ = other.omahaLimitEnd_;
    mixedLimitStatus_ = other.mixedLimitStatus_;
    mixedLimitStart_ = other.mixedLimitStart_;
    mixedLimitEnd_ = other.mixedLimitEnd_;
    pusoyLimitStatus_ = other.pusoyLimitStatus_;
    pusoyLimitStart_ = other.pusoyLimitStart_;
    pusoyLimitEnd_ = other.pusoyLimitEnd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlindLimit Clone() {
    return new BlindLimit(this);
  }

  /// <summary>Field number for the "nlh_limit_status" field.</summary>
  public const int NlhLimitStatusFieldNumber = 1;
  private readonly static int NlhLimitStatusDefaultValue = 0;

  private int nlhLimitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int NlhLimitStatus {
    get { if ((_hasBits0 & 1) != 0) { return nlhLimitStatus_; } else { return NlhLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 1;
      nlhLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "nlh_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNlhLimitStatus {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "nlh_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNlhLimitStatus() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "nlh_limit_start" field.</summary>
  public const int NlhLimitStartFieldNumber = 2;
  private readonly static long NlhLimitStartDefaultValue = 0L;

  private long nlhLimitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NlhLimitStart {
    get { if ((_hasBits0 & 2) != 0) { return nlhLimitStart_; } else { return NlhLimitStartDefaultValue; } }
    set {
      _hasBits0 |= 2;
      nlhLimitStart_ = value;
    }
  }
  /// <summary>Gets whether the "nlh_limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNlhLimitStart {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "nlh_limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNlhLimitStart() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "nlh_limit_end" field.</summary>
  public const int NlhLimitEndFieldNumber = 3;
  private readonly static long NlhLimitEndDefaultValue = 0L;

  private long nlhLimitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NlhLimitEnd {
    get { if ((_hasBits0 & 4) != 0) { return nlhLimitEnd_; } else { return NlhLimitEndDefaultValue; } }
    set {
      _hasBits0 |= 4;
      nlhLimitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "nlh_limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNlhLimitEnd {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "nlh_limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNlhLimitEnd() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "nlh6_limit_status" field.</summary>
  public const int Nlh6LimitStatusFieldNumber = 4;
  private readonly static int Nlh6LimitStatusDefaultValue = 0;

  private int nlh6LimitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Nlh6LimitStatus {
    get { if ((_hasBits0 & 8) != 0) { return nlh6LimitStatus_; } else { return Nlh6LimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 8;
      nlh6LimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "nlh6_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNlh6LimitStatus {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "nlh6_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNlh6LimitStatus() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "nlh6_limit_start" field.</summary>
  public const int Nlh6LimitStartFieldNumber = 5;
  private readonly static long Nlh6LimitStartDefaultValue = 0L;

  private long nlh6LimitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Nlh6LimitStart {
    get { if ((_hasBits0 & 16) != 0) { return nlh6LimitStart_; } else { return Nlh6LimitStartDefaultValue; } }
    set {
      _hasBits0 |= 16;
      nlh6LimitStart_ = value;
    }
  }
  /// <summary>Gets whether the "nlh6_limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNlh6LimitStart {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "nlh6_limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNlh6LimitStart() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "nlh6_limit_end" field.</summary>
  public const int Nlh6LimitEndFieldNumber = 6;
  private readonly static long Nlh6LimitEndDefaultValue = 0L;

  private long nlh6LimitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Nlh6LimitEnd {
    get { if ((_hasBits0 & 32) != 0) { return nlh6LimitEnd_; } else { return Nlh6LimitEndDefaultValue; } }
    set {
      _hasBits0 |= 32;
      nlh6LimitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "nlh6_limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNlh6LimitEnd {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "nlh6_limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNlh6LimitEnd() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "pine_limit_status" field.</summary>
  public const int PineLimitStatusFieldNumber = 7;
  private readonly static int PineLimitStatusDefaultValue = 0;

  private int pineLimitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PineLimitStatus {
    get { if ((_hasBits0 & 64) != 0) { return pineLimitStatus_; } else { return PineLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 64;
      pineLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "pine_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPineLimitStatus {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "pine_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPineLimitStatus() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "pine_limit_start" field.</summary>
  public const int PineLimitStartFieldNumber = 8;
  private readonly static long PineLimitStartDefaultValue = 0L;

  private long pineLimitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PineLimitStart {
    get { if ((_hasBits0 & 128) != 0) { return pineLimitStart_; } else { return PineLimitStartDefaultValue; } }
    set {
      _hasBits0 |= 128;
      pineLimitStart_ = value;
    }
  }
  /// <summary>Gets whether the "pine_limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPineLimitStart {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "pine_limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPineLimitStart() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "pine_limit_end" field.</summary>
  public const int PineLimitEndFieldNumber = 9;
  private readonly static long PineLimitEndDefaultValue = 0L;

  private long pineLimitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PineLimitEnd {
    get { if ((_hasBits0 & 256) != 0) { return pineLimitEnd_; } else { return PineLimitEndDefaultValue; } }
    set {
      _hasBits0 |= 256;
      pineLimitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "pine_limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPineLimitEnd {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "pine_limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPineLimitEnd() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "omaha_limit_status" field.</summary>
  public const int OmahaLimitStatusFieldNumber = 10;
  private readonly static int OmahaLimitStatusDefaultValue = 0;

  private int omahaLimitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int OmahaLimitStatus {
    get { if ((_hasBits0 & 512) != 0) { return omahaLimitStatus_; } else { return OmahaLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 512;
      omahaLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "omaha_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOmahaLimitStatus {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "omaha_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOmahaLimitStatus() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "omaha_limit_start" field.</summary>
  public const int OmahaLimitStartFieldNumber = 11;
  private readonly static long OmahaLimitStartDefaultValue = 0L;

  private long omahaLimitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OmahaLimitStart {
    get { if ((_hasBits0 & 1024) != 0) { return omahaLimitStart_; } else { return OmahaLimitStartDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      omahaLimitStart_ = value;
    }
  }
  /// <summary>Gets whether the "omaha_limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOmahaLimitStart {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "omaha_limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOmahaLimitStart() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "omaha_limit_end" field.</summary>
  public const int OmahaLimitEndFieldNumber = 12;
  private readonly static long OmahaLimitEndDefaultValue = 0L;

  private long omahaLimitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OmahaLimitEnd {
    get { if ((_hasBits0 & 2048) != 0) { return omahaLimitEnd_; } else { return OmahaLimitEndDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      omahaLimitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "omaha_limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOmahaLimitEnd {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "omaha_limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOmahaLimitEnd() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "mixed_limit_status" field.</summary>
  public const int MixedLimitStatusFieldNumber = 13;
  private readonly static int MixedLimitStatusDefaultValue = 0;

  private int mixedLimitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MixedLimitStatus {
    get { if ((_hasBits0 & 4096) != 0) { return mixedLimitStatus_; } else { return MixedLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      mixedLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "mixed_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMixedLimitStatus {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "mixed_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMixedLimitStatus() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "mixed_limit_start" field.</summary>
  public const int MixedLimitStartFieldNumber = 14;
  private readonly static long MixedLimitStartDefaultValue = 0L;

  private long mixedLimitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MixedLimitStart {
    get { if ((_hasBits0 & 8192) != 0) { return mixedLimitStart_; } else { return MixedLimitStartDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      mixedLimitStart_ = value;
    }
  }
  /// <summary>Gets whether the "mixed_limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMixedLimitStart {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "mixed_limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMixedLimitStart() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "mixed_limit_end" field.</summary>
  public const int MixedLimitEndFieldNumber = 15;
  private readonly static long MixedLimitEndDefaultValue = 0L;

  private long mixedLimitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MixedLimitEnd {
    get { if ((_hasBits0 & 16384) != 0) { return mixedLimitEnd_; } else { return MixedLimitEndDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      mixedLimitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "mixed_limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMixedLimitEnd {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "mixed_limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMixedLimitEnd() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "pusoy_limit_status" field.</summary>
  public const int PusoyLimitStatusFieldNumber = 16;
  private readonly static int PusoyLimitStatusDefaultValue = 0;

  private int pusoyLimitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PusoyLimitStatus {
    get { if ((_hasBits0 & 32768) != 0) { return pusoyLimitStatus_; } else { return PusoyLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      pusoyLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "pusoy_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPusoyLimitStatus {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "pusoy_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPusoyLimitStatus() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "pusoy_limit_start" field.</summary>
  public const int PusoyLimitStartFieldNumber = 17;
  private readonly static long PusoyLimitStartDefaultValue = 0L;

  private long pusoyLimitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PusoyLimitStart {
    get { if ((_hasBits0 & 65536) != 0) { return pusoyLimitStart_; } else { return PusoyLimitStartDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      pusoyLimitStart_ = value;
    }
  }
  /// <summary>Gets whether the "pusoy_limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPusoyLimitStart {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "pusoy_limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPusoyLimitStart() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "pusoy_limit_end" field.</summary>
  public const int PusoyLimitEndFieldNumber = 18;
  private readonly static long PusoyLimitEndDefaultValue = 0L;

  private long pusoyLimitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PusoyLimitEnd {
    get { if ((_hasBits0 & 131072) != 0) { return pusoyLimitEnd_; } else { return PusoyLimitEndDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      pusoyLimitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "pusoy_limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPusoyLimitEnd {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "pusoy_limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPusoyLimitEnd() {
    _hasBits0 &= ~131072;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as BlindLimit);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(BlindLimit other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NlhLimitStatus != other.NlhLimitStatus) return false;
    if (NlhLimitStart != other.NlhLimitStart) return false;
    if (NlhLimitEnd != other.NlhLimitEnd) return false;
    if (Nlh6LimitStatus != other.Nlh6LimitStatus) return false;
    if (Nlh6LimitStart != other.Nlh6LimitStart) return false;
    if (Nlh6LimitEnd != other.Nlh6LimitEnd) return false;
    if (PineLimitStatus != other.PineLimitStatus) return false;
    if (PineLimitStart != other.PineLimitStart) return false;
    if (PineLimitEnd != other.PineLimitEnd) return false;
    if (OmahaLimitStatus != other.OmahaLimitStatus) return false;
    if (OmahaLimitStart != other.OmahaLimitStart) return false;
    if (OmahaLimitEnd != other.OmahaLimitEnd) return false;
    if (MixedLimitStatus != other.MixedLimitStatus) return false;
    if (MixedLimitStart != other.MixedLimitStart) return false;
    if (MixedLimitEnd != other.MixedLimitEnd) return false;
    if (PusoyLimitStatus != other.PusoyLimitStatus) return false;
    if (PusoyLimitStart != other.PusoyLimitStart) return false;
    if (PusoyLimitEnd != other.PusoyLimitEnd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNlhLimitStatus) hash ^= NlhLimitStatus.GetHashCode();
    if (HasNlhLimitStart) hash ^= NlhLimitStart.GetHashCode();
    if (HasNlhLimitEnd) hash ^= NlhLimitEnd.GetHashCode();
    if (HasNlh6LimitStatus) hash ^= Nlh6LimitStatus.GetHashCode();
    if (HasNlh6LimitStart) hash ^= Nlh6LimitStart.GetHashCode();
    if (HasNlh6LimitEnd) hash ^= Nlh6LimitEnd.GetHashCode();
    if (HasPineLimitStatus) hash ^= PineLimitStatus.GetHashCode();
    if (HasPineLimitStart) hash ^= PineLimitStart.GetHashCode();
    if (HasPineLimitEnd) hash ^= PineLimitEnd.GetHashCode();
    if (HasOmahaLimitStatus) hash ^= OmahaLimitStatus.GetHashCode();
    if (HasOmahaLimitStart) hash ^= OmahaLimitStart.GetHashCode();
    if (HasOmahaLimitEnd) hash ^= OmahaLimitEnd.GetHashCode();
    if (HasMixedLimitStatus) hash ^= MixedLimitStatus.GetHashCode();
    if (HasMixedLimitStart) hash ^= MixedLimitStart.GetHashCode();
    if (HasMixedLimitEnd) hash ^= MixedLimitEnd.GetHashCode();
    if (HasPusoyLimitStatus) hash ^= PusoyLimitStatus.GetHashCode();
    if (HasPusoyLimitStart) hash ^= PusoyLimitStart.GetHashCode();
    if (HasPusoyLimitEnd) hash ^= PusoyLimitEnd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasNlhLimitStatus) {
      output.WriteRawTag(8);
      output.WriteInt32(NlhLimitStatus);
    }
    if (HasNlhLimitStart) {
      output.WriteRawTag(16);
      output.WriteInt64(NlhLimitStart);
    }
    if (HasNlhLimitEnd) {
      output.WriteRawTag(24);
      output.WriteInt64(NlhLimitEnd);
    }
    if (HasNlh6LimitStatus) {
      output.WriteRawTag(32);
      output.WriteInt32(Nlh6LimitStatus);
    }
    if (HasNlh6LimitStart) {
      output.WriteRawTag(40);
      output.WriteInt64(Nlh6LimitStart);
    }
    if (HasNlh6LimitEnd) {
      output.WriteRawTag(48);
      output.WriteInt64(Nlh6LimitEnd);
    }
    if (HasPineLimitStatus) {
      output.WriteRawTag(56);
      output.WriteInt32(PineLimitStatus);
    }
    if (HasPineLimitStart) {
      output.WriteRawTag(64);
      output.WriteInt64(PineLimitStart);
    }
    if (HasPineLimitEnd) {
      output.WriteRawTag(72);
      output.WriteInt64(PineLimitEnd);
    }
    if (HasOmahaLimitStatus) {
      output.WriteRawTag(80);
      output.WriteInt32(OmahaLimitStatus);
    }
    if (HasOmahaLimitStart) {
      output.WriteRawTag(88);
      output.WriteInt64(OmahaLimitStart);
    }
    if (HasOmahaLimitEnd) {
      output.WriteRawTag(96);
      output.WriteInt64(OmahaLimitEnd);
    }
    if (HasMixedLimitStatus) {
      output.WriteRawTag(104);
      output.WriteInt32(MixedLimitStatus);
    }
    if (HasMixedLimitStart) {
      output.WriteRawTag(112);
      output.WriteInt64(MixedLimitStart);
    }
    if (HasMixedLimitEnd) {
      output.WriteRawTag(120);
      output.WriteInt64(MixedLimitEnd);
    }
    if (HasPusoyLimitStatus) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(PusoyLimitStatus);
    }
    if (HasPusoyLimitStart) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PusoyLimitStart);
    }
    if (HasPusoyLimitEnd) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(PusoyLimitEnd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasNlhLimitStatus) {
      output.WriteRawTag(8);
      output.WriteInt32(NlhLimitStatus);
    }
    if (HasNlhLimitStart) {
      output.WriteRawTag(16);
      output.WriteInt64(NlhLimitStart);
    }
    if (HasNlhLimitEnd) {
      output.WriteRawTag(24);
      output.WriteInt64(NlhLimitEnd);
    }
    if (HasNlh6LimitStatus) {
      output.WriteRawTag(32);
      output.WriteInt32(Nlh6LimitStatus);
    }
    if (HasNlh6LimitStart) {
      output.WriteRawTag(40);
      output.WriteInt64(Nlh6LimitStart);
    }
    if (HasNlh6LimitEnd) {
      output.WriteRawTag(48);
      output.WriteInt64(Nlh6LimitEnd);
    }
    if (HasPineLimitStatus) {
      output.WriteRawTag(56);
      output.WriteInt32(PineLimitStatus);
    }
    if (HasPineLimitStart) {
      output.WriteRawTag(64);
      output.WriteInt64(PineLimitStart);
    }
    if (HasPineLimitEnd) {
      output.WriteRawTag(72);
      output.WriteInt64(PineLimitEnd);
    }
    if (HasOmahaLimitStatus) {
      output.WriteRawTag(80);
      output.WriteInt32(OmahaLimitStatus);
    }
    if (HasOmahaLimitStart) {
      output.WriteRawTag(88);
      output.WriteInt64(OmahaLimitStart);
    }
    if (HasOmahaLimitEnd) {
      output.WriteRawTag(96);
      output.WriteInt64(OmahaLimitEnd);
    }
    if (HasMixedLimitStatus) {
      output.WriteRawTag(104);
      output.WriteInt32(MixedLimitStatus);
    }
    if (HasMixedLimitStart) {
      output.WriteRawTag(112);
      output.WriteInt64(MixedLimitStart);
    }
    if (HasMixedLimitEnd) {
      output.WriteRawTag(120);
      output.WriteInt64(MixedLimitEnd);
    }
    if (HasPusoyLimitStatus) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(PusoyLimitStatus);
    }
    if (HasPusoyLimitStart) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PusoyLimitStart);
    }
    if (HasPusoyLimitEnd) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(PusoyLimitEnd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasNlhLimitStatus) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NlhLimitStatus);
    }
    if (HasNlhLimitStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NlhLimitStart);
    }
    if (HasNlhLimitEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NlhLimitEnd);
    }
    if (HasNlh6LimitStatus) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nlh6LimitStatus);
    }
    if (HasNlh6LimitStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nlh6LimitStart);
    }
    if (HasNlh6LimitEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nlh6LimitEnd);
    }
    if (HasPineLimitStatus) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PineLimitStatus);
    }
    if (HasPineLimitStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PineLimitStart);
    }
    if (HasPineLimitEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PineLimitEnd);
    }
    if (HasOmahaLimitStatus) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OmahaLimitStatus);
    }
    if (HasOmahaLimitStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OmahaLimitStart);
    }
    if (HasOmahaLimitEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OmahaLimitEnd);
    }
    if (HasMixedLimitStatus) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MixedLimitStatus);
    }
    if (HasMixedLimitStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MixedLimitStart);
    }
    if (HasMixedLimitEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MixedLimitEnd);
    }
    if (HasPusoyLimitStatus) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PusoyLimitStatus);
    }
    if (HasPusoyLimitStart) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PusoyLimitStart);
    }
    if (HasPusoyLimitEnd) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PusoyLimitEnd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(BlindLimit other) {
    if (other == null) {
      return;
    }
    if (other.HasNlhLimitStatus) {
      NlhLimitStatus = other.NlhLimitStatus;
    }
    if (other.HasNlhLimitStart) {
      NlhLimitStart = other.NlhLimitStart;
    }
    if (other.HasNlhLimitEnd) {
      NlhLimitEnd = other.NlhLimitEnd;
    }
    if (other.HasNlh6LimitStatus) {
      Nlh6LimitStatus = other.Nlh6LimitStatus;
    }
    if (other.HasNlh6LimitStart) {
      Nlh6LimitStart = other.Nlh6LimitStart;
    }
    if (other.HasNlh6LimitEnd) {
      Nlh6LimitEnd = other.Nlh6LimitEnd;
    }
    if (other.HasPineLimitStatus) {
      PineLimitStatus = other.PineLimitStatus;
    }
    if (other.HasPineLimitStart) {
      PineLimitStart = other.PineLimitStart;
    }
    if (other.HasPineLimitEnd) {
      PineLimitEnd = other.PineLimitEnd;
    }
    if (other.HasOmahaLimitStatus) {
      OmahaLimitStatus = other.OmahaLimitStatus;
    }
    if (other.HasOmahaLimitStart) {
      OmahaLimitStart = other.OmahaLimitStart;
    }
    if (other.HasOmahaLimitEnd) {
      OmahaLimitEnd = other.OmahaLimitEnd;
    }
    if (other.HasMixedLimitStatus) {
      MixedLimitStatus = other.MixedLimitStatus;
    }
    if (other.HasMixedLimitStart) {
      MixedLimitStart = other.MixedLimitStart;
    }
    if (other.HasMixedLimitEnd) {
      MixedLimitEnd = other.MixedLimitEnd;
    }
    if (other.HasPusoyLimitStatus) {
      PusoyLimitStatus = other.PusoyLimitStatus;
    }
    if (other.HasPusoyLimitStart) {
      PusoyLimitStart = other.PusoyLimitStart;
    }
    if (other.HasPusoyLimitEnd) {
      PusoyLimitEnd = other.PusoyLimitEnd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NlhLimitStatus = input.ReadInt32();
          break;
        }
        case 16: {
          NlhLimitStart = input.ReadInt64();
          break;
        }
        case 24: {
          NlhLimitEnd = input.ReadInt64();
          break;
        }
        case 32: {
          Nlh6LimitStatus = input.ReadInt32();
          break;
        }
        case 40: {
          Nlh6LimitStart = input.ReadInt64();
          break;
        }
        case 48: {
          Nlh6LimitEnd = input.ReadInt64();
          break;
        }
        case 56: {
          PineLimitStatus = input.ReadInt32();
          break;
        }
        case 64: {
          PineLimitStart = input.ReadInt64();
          break;
        }
        case 72: {
          PineLimitEnd = input.ReadInt64();
          break;
        }
        case 80: {
          OmahaLimitStatus = input.ReadInt32();
          break;
        }
        case 88: {
          OmahaLimitStart = input.ReadInt64();
          break;
        }
        case 96: {
          OmahaLimitEnd = input.ReadInt64();
          break;
        }
        case 104: {
          MixedLimitStatus = input.ReadInt32();
          break;
        }
        case 112: {
          MixedLimitStart = input.ReadInt64();
          break;
        }
        case 120: {
          MixedLimitEnd = input.ReadInt64();
          break;
        }
        case 128: {
          PusoyLimitStatus = input.ReadInt32();
          break;
        }
        case 136: {
          PusoyLimitStart = input.ReadInt64();
          break;
        }
        case 144: {
          PusoyLimitEnd = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          NlhLimitStatus = input.ReadInt32();
          break;
        }
        case 16: {
          NlhLimitStart = input.ReadInt64();
          break;
        }
        case 24: {
          NlhLimitEnd = input.ReadInt64();
          break;
        }
        case 32: {
          Nlh6LimitStatus = input.ReadInt32();
          break;
        }
        case 40: {
          Nlh6LimitStart = input.ReadInt64();
          break;
        }
        case 48: {
          Nlh6LimitEnd = input.ReadInt64();
          break;
        }
        case 56: {
          PineLimitStatus = input.ReadInt32();
          break;
        }
        case 64: {
          PineLimitStart = input.ReadInt64();
          break;
        }
        case 72: {
          PineLimitEnd = input.ReadInt64();
          break;
        }
        case 80: {
          OmahaLimitStatus = input.ReadInt32();
          break;
        }
        case 88: {
          OmahaLimitStart = input.ReadInt64();
          break;
        }
        case 96: {
          OmahaLimitEnd = input.ReadInt64();
          break;
        }
        case 104: {
          MixedLimitStatus = input.ReadInt32();
          break;
        }
        case 112: {
          MixedLimitStart = input.ReadInt64();
          break;
        }
        case 120: {
          MixedLimitEnd = input.ReadInt64();
          break;
        }
        case 128: {
          PusoyLimitStatus = input.ReadInt32();
          break;
        }
        case 136: {
          PusoyLimitStart = input.ReadInt64();
          break;
        }
        case 144: {
          PusoyLimitEnd = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class BlindLimitInfo : pb::IMessage<BlindLimitInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<BlindLimitInfo> _parser = new pb::MessageParser<BlindLimitInfo>(() => new BlindLimitInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<BlindLimitInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlindLimitInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlindLimitInfo(BlindLimitInfo other) : this() {
    _hasBits0 = other._hasBits0;
    limitType_ = other.limitType_;
    limitStatus_ = other.limitStatus_;
    limitStart_ = other.limitStart_;
    limitEnd_ = other.limitEnd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlindLimitInfo Clone() {
    return new BlindLimitInfo(this);
  }

  /// <summary>Field number for the "limit_type" field.</summary>
  public const int LimitTypeFieldNumber = 1;
  private readonly static int LimitTypeDefaultValue = 0;

  private int limitType_;
  /// <summary>
  ///enum BlindLimitType
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LimitType {
    get { if ((_hasBits0 & 1) != 0) { return limitType_; } else { return LimitTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      limitType_ = value;
    }
  }
  /// <summary>Gets whether the "limit_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "limit_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "limit_status" field.</summary>
  public const int LimitStatusFieldNumber = 2;
  private readonly static int LimitStatusDefaultValue = 0;

  private int limitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LimitStatus {
    get { if ((_hasBits0 & 2) != 0) { return limitStatus_; } else { return LimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 2;
      limitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitStatus {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitStatus() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "limit_start" field.</summary>
  public const int LimitStartFieldNumber = 3;
  private readonly static long LimitStartDefaultValue = 0L;

  private long limitStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LimitStart {
    get { if ((_hasBits0 & 4) != 0) { return limitStart_; } else { return LimitStartDefaultValue; } }
    set {
      _hasBits0 |= 4;
      limitStart_ = value;
    }
  }
  /// <summary>Gets whether the "limit_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitStart {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "limit_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitStart() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "limit_end" field.</summary>
  public const int LimitEndFieldNumber = 4;
  private readonly static long LimitEndDefaultValue = 0L;

  private long limitEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LimitEnd {
    get { if ((_hasBits0 & 8) != 0) { return limitEnd_; } else { return LimitEndDefaultValue; } }
    set {
      _hasBits0 |= 8;
      limitEnd_ = value;
    }
  }
  /// <summary>Gets whether the "limit_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEnd {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "limit_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEnd() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as BlindLimitInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(BlindLimitInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LimitType != other.LimitType) return false;
    if (LimitStatus != other.LimitStatus) return false;
    if (LimitStart != other.LimitStart) return false;
    if (LimitEnd != other.LimitEnd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLimitType) hash ^= LimitType.GetHashCode();
    if (HasLimitStatus) hash ^= LimitStatus.GetHashCode();
    if (HasLimitStart) hash ^= LimitStart.GetHashCode();
    if (HasLimitEnd) hash ^= LimitEnd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLimitType) {
      output.WriteRawTag(8);
      output.WriteInt32(LimitType);
    }
    if (HasLimitStatus) {
      output.WriteRawTag(16);
      output.WriteInt32(LimitStatus);
    }
    if (HasLimitStart) {
      output.WriteRawTag(24);
      output.WriteInt64(LimitStart);
    }
    if (HasLimitEnd) {
      output.WriteRawTag(32);
      output.WriteInt64(LimitEnd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLimitType) {
      output.WriteRawTag(8);
      output.WriteInt32(LimitType);
    }
    if (HasLimitStatus) {
      output.WriteRawTag(16);
      output.WriteInt32(LimitStatus);
    }
    if (HasLimitStart) {
      output.WriteRawTag(24);
      output.WriteInt64(LimitStart);
    }
    if (HasLimitEnd) {
      output.WriteRawTag(32);
      output.WriteInt64(LimitEnd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLimitType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitType);
    }
    if (HasLimitStatus) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitStatus);
    }
    if (HasLimitStart) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimitStart);
    }
    if (HasLimitEnd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimitEnd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(BlindLimitInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasLimitType) {
      LimitType = other.LimitType;
    }
    if (other.HasLimitStatus) {
      LimitStatus = other.LimitStatus;
    }
    if (other.HasLimitStart) {
      LimitStart = other.LimitStart;
    }
    if (other.HasLimitEnd) {
      LimitEnd = other.LimitEnd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LimitType = input.ReadInt32();
          break;
        }
        case 16: {
          LimitStatus = input.ReadInt32();
          break;
        }
        case 24: {
          LimitStart = input.ReadInt64();
          break;
        }
        case 32: {
          LimitEnd = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          LimitType = input.ReadInt32();
          break;
        }
        case 16: {
          LimitStatus = input.ReadInt32();
          break;
        }
        case 24: {
          LimitStart = input.ReadInt64();
          break;
        }
        case 32: {
          LimitEnd = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueMemberInfo : pb::IMessage<LeagueMemberInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueMemberInfo> _parser = new pb::MessageParser<LeagueMemberInfo>(() => new LeagueMemberInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueMemberInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberInfo(LeagueMemberInfo other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    clubname_ = other.clubname_;
    clubicon_ = other.clubicon_;
    ban_ = other.ban_;
    autobanType_ = other.autobanType_;
    autobanLimit_ = other.autobanLimit_;
    profitWeek_ = other.profitWeek_;
    profitDay_ = other.profitDay_;
    banTime_ = other.banTime_;
    joinTime_ = other.joinTime_;
    blindLimitStatus_ = other.blindLimitStatus_;
    limitDetail_ = other.limitDetail_ != null ? other.limitDetail_.Clone() : null;
    limitInfo_ = other.limitInfo_.Clone();
    luckydrawWeeklyProfit_ = other.luckydrawWeeklyProfit_;
    luckydrawDailyProfit_ = other.luckydrawDailyProfit_;
    colorgameWeeklyProfit_ = other.colorgameWeeklyProfit_;
    colorgameDailyProfit_ = other.colorgameDailyProfit_;
    jackpotWeeklyProfit_ = other.jackpotWeeklyProfit_;
    jackpotDailyProfit_ = other.jackpotDailyProfit_;
    evchopWeeklyProfit_ = other.evchopWeeklyProfit_;
    evchopDailyProfit_ = other.evchopDailyProfit_;
    othersWeeklyProfit_ = other.othersWeeklyProfit_;
    othersDailyProfit_ = other.othersDailyProfit_;
    limitLuckydraw_ = other.limitLuckydraw_;
    limitColorgame_ = other.limitColorgame_;
    limitJackpot_ = other.limitJackpot_;
    limitEvchop_ = other.limitEvchop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberInfo Clone() {
    return new LeagueMemberInfo(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static int ClubidDefaultValue = 0;

  private int clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Clubid {
    get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clubid_ = value;
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubname" field.</summary>
  public const int ClubnameFieldNumber = 2;
  private readonly static string ClubnameDefaultValue = "";

  private string clubname_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubname {
    get { return clubname_ ?? ClubnameDefaultValue; }
    set {
      clubname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubname {
    get { return clubname_ != null; }
  }
  /// <summary>Clears the value of the "clubname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubname() {
    clubname_ = null;
  }

  /// <summary>Field number for the "clubicon" field.</summary>
  public const int ClubiconFieldNumber = 3;
  private readonly static string ClubiconDefaultValue = "";

  private string clubicon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubicon {
    get { return clubicon_ ?? ClubiconDefaultValue; }
    set {
      clubicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubicon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubicon {
    get { return clubicon_ != null; }
  }
  /// <summary>Clears the value of the "clubicon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubicon() {
    clubicon_ = null;
  }

  /// <summary>Field number for the "ban" field.</summary>
  public const int BanFieldNumber = 4;
  private readonly static int BanDefaultValue = 0;

  private int ban_;
  /// <summary>
  /// 1: manual, 2: unban, 3: auto_baned
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ban {
    get { if ((_hasBits0 & 2) != 0) { return ban_; } else { return BanDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ban_ = value;
    }
  }
  /// <summary>Gets whether the "ban" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBan {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ban" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBan() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "autoban_type" field.</summary>
  public const int AutobanTypeFieldNumber = 5;
  private readonly static int AutobanTypeDefaultValue = 0;

  private int autobanType_;
  /// <summary>
  /// 0: week, 1: day
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AutobanType {
    get { if ((_hasBits0 & 4) != 0) { return autobanType_; } else { return AutobanTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      autobanType_ = value;
    }
  }
  /// <summary>Gets whether the "autoban_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutobanType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "autoban_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutobanType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "autoban_limit" field.</summary>
  public const int AutobanLimitFieldNumber = 6;
  private readonly static long AutobanLimitDefaultValue = 0L;

  private long autobanLimit_;
  /// <summary>
  /// 0: 无上限
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AutobanLimit {
    get { if ((_hasBits0 & 8) != 0) { return autobanLimit_; } else { return AutobanLimitDefaultValue; } }
    set {
      _hasBits0 |= 8;
      autobanLimit_ = value;
    }
  }
  /// <summary>Gets whether the "autoban_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutobanLimit {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "autoban_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutobanLimit() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "profit_week" field.</summary>
  public const int ProfitWeekFieldNumber = 7;
  private readonly static long ProfitWeekDefaultValue = 0L;

  private long profitWeek_;
  /// <summary>
  ///the outdated version of the profit calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ProfitWeek {
    get { if ((_hasBits0 & 16) != 0) { return profitWeek_; } else { return ProfitWeekDefaultValue; } }
    set {
      _hasBits0 |= 16;
      profitWeek_ = value;
    }
  }
  /// <summary>Gets whether the "profit_week" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProfitWeek {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "profit_week" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProfitWeek() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "profit_day" field.</summary>
  public const int ProfitDayFieldNumber = 8;
  private readonly static long ProfitDayDefaultValue = 0L;

  private long profitDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ProfitDay {
    get { if ((_hasBits0 & 32) != 0) { return profitDay_; } else { return ProfitDayDefaultValue; } }
    set {
      _hasBits0 |= 32;
      profitDay_ = value;
    }
  }
  /// <summary>Gets whether the "profit_day" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProfitDay {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "profit_day" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProfitDay() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "ban_time" field.</summary>
  public const int BanTimeFieldNumber = 9;
  private readonly static int BanTimeDefaultValue = 0;

  private int banTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BanTime {
    get { if ((_hasBits0 & 64) != 0) { return banTime_; } else { return BanTimeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      banTime_ = value;
    }
  }
  /// <summary>Gets whether the "ban_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBanTime {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "ban_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBanTime() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "join_time" field.</summary>
  public const int JoinTimeFieldNumber = 10;
  private readonly static int JoinTimeDefaultValue = 0;

  private int joinTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int JoinTime {
    get { if ((_hasBits0 & 128) != 0) { return joinTime_; } else { return JoinTimeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      joinTime_ = value;
    }
  }
  /// <summary>Gets whether the "join_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJoinTime {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "join_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJoinTime() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "blind_limit_status" field.</summary>
  public const int BlindLimitStatusFieldNumber = 11;
  private readonly static bool BlindLimitStatusDefaultValue = false;

  private bool blindLimitStatus_;
  /// <summary>
  /// 1 表示有限制俱乐部的可见牌桌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BlindLimitStatus {
    get { if ((_hasBits0 & 256) != 0) { return blindLimitStatus_; } else { return BlindLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 256;
      blindLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "blind_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBlindLimitStatus {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "blind_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBlindLimitStatus() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "limit_detail" field.</summary>
  public const int LimitDetailFieldNumber = 12;
  private global::BlindLimit limitDetail_;
  /// <summary>
  /// 舊版 已廢棄, 現在使用 BlindLimitInfo
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::BlindLimit LimitDetail {
    get { return limitDetail_; }
    set {
      limitDetail_ = value;
    }
  }

  /// <summary>Field number for the "limit_info" field.</summary>
  public const int LimitInfoFieldNumber = 13;
  private static readonly pb::FieldCodec<global::BlindLimitInfo> _repeated_limitInfo_codec
      = pb::FieldCodec.ForMessage(106, global::BlindLimitInfo.Parser);
  private readonly pbc::RepeatedField<global::BlindLimitInfo> limitInfo_ = new pbc::RepeatedField<global::BlindLimitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::BlindLimitInfo> LimitInfo {
    get { return limitInfo_; }
  }

  /// <summary>Field number for the "luckydraw_weekly_profit" field.</summary>
  public const int LuckydrawWeeklyProfitFieldNumber = 14;
  private readonly static long LuckydrawWeeklyProfitDefaultValue = 0L;

  private long luckydrawWeeklyProfit_;
  /// <summary>
  ///the latest version of the profit calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LuckydrawWeeklyProfit {
    get { if ((_hasBits0 & 512) != 0) { return luckydrawWeeklyProfit_; } else { return LuckydrawWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 512;
      luckydrawWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "luckydraw_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLuckydrawWeeklyProfit {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "luckydraw_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLuckydrawWeeklyProfit() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "luckydraw_daily_profit" field.</summary>
  public const int LuckydrawDailyProfitFieldNumber = 15;
  private readonly static long LuckydrawDailyProfitDefaultValue = 0L;

  private long luckydrawDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LuckydrawDailyProfit {
    get { if ((_hasBits0 & 1024) != 0) { return luckydrawDailyProfit_; } else { return LuckydrawDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      luckydrawDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "luckydraw_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLuckydrawDailyProfit {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "luckydraw_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLuckydrawDailyProfit() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "colorgame_weekly_profit" field.</summary>
  public const int ColorgameWeeklyProfitFieldNumber = 16;
  private readonly static long ColorgameWeeklyProfitDefaultValue = 0L;

  private long colorgameWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ColorgameWeeklyProfit {
    get { if ((_hasBits0 & 2048) != 0) { return colorgameWeeklyProfit_; } else { return ColorgameWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      colorgameWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "colorgame_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorgameWeeklyProfit {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "colorgame_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorgameWeeklyProfit() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "colorgame_daily_profit" field.</summary>
  public const int ColorgameDailyProfitFieldNumber = 17;
  private readonly static long ColorgameDailyProfitDefaultValue = 0L;

  private long colorgameDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ColorgameDailyProfit {
    get { if ((_hasBits0 & 4096) != 0) { return colorgameDailyProfit_; } else { return ColorgameDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      colorgameDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "colorgame_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorgameDailyProfit {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "colorgame_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorgameDailyProfit() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "jackpot_weekly_profit" field.</summary>
  public const int JackpotWeeklyProfitFieldNumber = 18;
  private readonly static long JackpotWeeklyProfitDefaultValue = 0L;

  private long jackpotWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotWeeklyProfit {
    get { if ((_hasBits0 & 8192) != 0) { return jackpotWeeklyProfit_; } else { return JackpotWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      jackpotWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotWeeklyProfit {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotWeeklyProfit() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "jackpot_daily_profit" field.</summary>
  public const int JackpotDailyProfitFieldNumber = 19;
  private readonly static long JackpotDailyProfitDefaultValue = 0L;

  private long jackpotDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotDailyProfit {
    get { if ((_hasBits0 & 16384) != 0) { return jackpotDailyProfit_; } else { return JackpotDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      jackpotDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotDailyProfit {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotDailyProfit() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "evchop_weekly_profit" field.</summary>
  public const int EvchopWeeklyProfitFieldNumber = 20;
  private readonly static long EvchopWeeklyProfitDefaultValue = 0L;

  private long evchopWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EvchopWeeklyProfit {
    get { if ((_hasBits0 & 32768) != 0) { return evchopWeeklyProfit_; } else { return EvchopWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      evchopWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "evchop_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEvchopWeeklyProfit {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "evchop_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEvchopWeeklyProfit() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "evchop_daily_profit" field.</summary>
  public const int EvchopDailyProfitFieldNumber = 21;
  private readonly static long EvchopDailyProfitDefaultValue = 0L;

  private long evchopDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EvchopDailyProfit {
    get { if ((_hasBits0 & 65536) != 0) { return evchopDailyProfit_; } else { return EvchopDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      evchopDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "evchop_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEvchopDailyProfit {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "evchop_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEvchopDailyProfit() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "others_weekly_profit" field.</summary>
  public const int OthersWeeklyProfitFieldNumber = 22;
  private readonly static long OthersWeeklyProfitDefaultValue = 0L;

  private long othersWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OthersWeeklyProfit {
    get { if ((_hasBits0 & 131072) != 0) { return othersWeeklyProfit_; } else { return OthersWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      othersWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "others_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOthersWeeklyProfit {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "others_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOthersWeeklyProfit() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "others_daily_profit" field.</summary>
  public const int OthersDailyProfitFieldNumber = 23;
  private readonly static long OthersDailyProfitDefaultValue = 0L;

  private long othersDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OthersDailyProfit {
    get { if ((_hasBits0 & 262144) != 0) { return othersDailyProfit_; } else { return OthersDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      othersDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "others_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOthersDailyProfit {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "others_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOthersDailyProfit() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "limit_luckydraw" field.</summary>
  public const int LimitLuckydrawFieldNumber = 24;
  private readonly static bool LimitLuckydrawDefaultValue = false;

  private bool limitLuckydraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitLuckydraw {
    get { if ((_hasBits0 & 524288) != 0) { return limitLuckydraw_; } else { return LimitLuckydrawDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      limitLuckydraw_ = value;
    }
  }
  /// <summary>Gets whether the "limit_luckydraw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitLuckydraw {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "limit_luckydraw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitLuckydraw() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "limit_colorgame" field.</summary>
  public const int LimitColorgameFieldNumber = 25;
  private readonly static bool LimitColorgameDefaultValue = false;

  private bool limitColorgame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitColorgame {
    get { if ((_hasBits0 & 1048576) != 0) { return limitColorgame_; } else { return LimitColorgameDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      limitColorgame_ = value;
    }
  }
  /// <summary>Gets whether the "limit_colorgame" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitColorgame {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "limit_colorgame" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitColorgame() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 26;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 2097152) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 27;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 4194304) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~4194304;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueMemberInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueMemberInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Clubname != other.Clubname) return false;
    if (Clubicon != other.Clubicon) return false;
    if (Ban != other.Ban) return false;
    if (AutobanType != other.AutobanType) return false;
    if (AutobanLimit != other.AutobanLimit) return false;
    if (ProfitWeek != other.ProfitWeek) return false;
    if (ProfitDay != other.ProfitDay) return false;
    if (BanTime != other.BanTime) return false;
    if (JoinTime != other.JoinTime) return false;
    if (BlindLimitStatus != other.BlindLimitStatus) return false;
    if (!object.Equals(LimitDetail, other.LimitDetail)) return false;
    if(!limitInfo_.Equals(other.limitInfo_)) return false;
    if (LuckydrawWeeklyProfit != other.LuckydrawWeeklyProfit) return false;
    if (LuckydrawDailyProfit != other.LuckydrawDailyProfit) return false;
    if (ColorgameWeeklyProfit != other.ColorgameWeeklyProfit) return false;
    if (ColorgameDailyProfit != other.ColorgameDailyProfit) return false;
    if (JackpotWeeklyProfit != other.JackpotWeeklyProfit) return false;
    if (JackpotDailyProfit != other.JackpotDailyProfit) return false;
    if (EvchopWeeklyProfit != other.EvchopWeeklyProfit) return false;
    if (EvchopDailyProfit != other.EvchopDailyProfit) return false;
    if (OthersWeeklyProfit != other.OthersWeeklyProfit) return false;
    if (OthersDailyProfit != other.OthersDailyProfit) return false;
    if (LimitLuckydraw != other.LimitLuckydraw) return false;
    if (LimitColorgame != other.LimitColorgame) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasClubname) hash ^= Clubname.GetHashCode();
    if (HasClubicon) hash ^= Clubicon.GetHashCode();
    if (HasBan) hash ^= Ban.GetHashCode();
    if (HasAutobanType) hash ^= AutobanType.GetHashCode();
    if (HasAutobanLimit) hash ^= AutobanLimit.GetHashCode();
    if (HasProfitWeek) hash ^= ProfitWeek.GetHashCode();
    if (HasProfitDay) hash ^= ProfitDay.GetHashCode();
    if (HasBanTime) hash ^= BanTime.GetHashCode();
    if (HasJoinTime) hash ^= JoinTime.GetHashCode();
    if (HasBlindLimitStatus) hash ^= BlindLimitStatus.GetHashCode();
    if (limitDetail_ != null) hash ^= LimitDetail.GetHashCode();
    hash ^= limitInfo_.GetHashCode();
    if (HasLuckydrawWeeklyProfit) hash ^= LuckydrawWeeklyProfit.GetHashCode();
    if (HasLuckydrawDailyProfit) hash ^= LuckydrawDailyProfit.GetHashCode();
    if (HasColorgameWeeklyProfit) hash ^= ColorgameWeeklyProfit.GetHashCode();
    if (HasColorgameDailyProfit) hash ^= ColorgameDailyProfit.GetHashCode();
    if (HasJackpotWeeklyProfit) hash ^= JackpotWeeklyProfit.GetHashCode();
    if (HasJackpotDailyProfit) hash ^= JackpotDailyProfit.GetHashCode();
    if (HasEvchopWeeklyProfit) hash ^= EvchopWeeklyProfit.GetHashCode();
    if (HasEvchopDailyProfit) hash ^= EvchopDailyProfit.GetHashCode();
    if (HasOthersWeeklyProfit) hash ^= OthersWeeklyProfit.GetHashCode();
    if (HasOthersDailyProfit) hash ^= OthersDailyProfit.GetHashCode();
    if (HasLimitLuckydraw) hash ^= LimitLuckydraw.GetHashCode();
    if (HasLimitColorgame) hash ^= LimitColorgame.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(8);
      output.WriteInt32(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasClubicon) {
      output.WriteRawTag(26);
      output.WriteString(Clubicon);
    }
    if (HasBan) {
      output.WriteRawTag(32);
      output.WriteInt32(Ban);
    }
    if (HasAutobanType) {
      output.WriteRawTag(40);
      output.WriteInt32(AutobanType);
    }
    if (HasAutobanLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(AutobanLimit);
    }
    if (HasProfitWeek) {
      output.WriteRawTag(56);
      output.WriteInt64(ProfitWeek);
    }
    if (HasProfitDay) {
      output.WriteRawTag(64);
      output.WriteInt64(ProfitDay);
    }
    if (HasBanTime) {
      output.WriteRawTag(72);
      output.WriteInt32(BanTime);
    }
    if (HasJoinTime) {
      output.WriteRawTag(80);
      output.WriteInt32(JoinTime);
    }
    if (HasBlindLimitStatus) {
      output.WriteRawTag(88);
      output.WriteBool(BlindLimitStatus);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(LimitDetail);
    }
    limitInfo_.WriteTo(output, _repeated_limitInfo_codec);
    if (HasLuckydrawWeeklyProfit) {
      output.WriteRawTag(112);
      output.WriteInt64(LuckydrawWeeklyProfit);
    }
    if (HasLuckydrawDailyProfit) {
      output.WriteRawTag(120);
      output.WriteInt64(LuckydrawDailyProfit);
    }
    if (HasColorgameWeeklyProfit) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(ColorgameWeeklyProfit);
    }
    if (HasColorgameDailyProfit) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(ColorgameDailyProfit);
    }
    if (HasJackpotWeeklyProfit) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(JackpotDailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(OthersDailyProfit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(192, 1);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(200, 1);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(208, 1);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(216, 1);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(8);
      output.WriteInt32(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasClubicon) {
      output.WriteRawTag(26);
      output.WriteString(Clubicon);
    }
    if (HasBan) {
      output.WriteRawTag(32);
      output.WriteInt32(Ban);
    }
    if (HasAutobanType) {
      output.WriteRawTag(40);
      output.WriteInt32(AutobanType);
    }
    if (HasAutobanLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(AutobanLimit);
    }
    if (HasProfitWeek) {
      output.WriteRawTag(56);
      output.WriteInt64(ProfitWeek);
    }
    if (HasProfitDay) {
      output.WriteRawTag(64);
      output.WriteInt64(ProfitDay);
    }
    if (HasBanTime) {
      output.WriteRawTag(72);
      output.WriteInt32(BanTime);
    }
    if (HasJoinTime) {
      output.WriteRawTag(80);
      output.WriteInt32(JoinTime);
    }
    if (HasBlindLimitStatus) {
      output.WriteRawTag(88);
      output.WriteBool(BlindLimitStatus);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(LimitDetail);
    }
    limitInfo_.WriteTo(ref output, _repeated_limitInfo_codec);
    if (HasLuckydrawWeeklyProfit) {
      output.WriteRawTag(112);
      output.WriteInt64(LuckydrawWeeklyProfit);
    }
    if (HasLuckydrawDailyProfit) {
      output.WriteRawTag(120);
      output.WriteInt64(LuckydrawDailyProfit);
    }
    if (HasColorgameWeeklyProfit) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(ColorgameWeeklyProfit);
    }
    if (HasColorgameDailyProfit) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(ColorgameDailyProfit);
    }
    if (HasJackpotWeeklyProfit) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(JackpotDailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(OthersDailyProfit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(192, 1);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(200, 1);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(208, 1);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(216, 1);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
    }
    if (HasClubname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubname);
    }
    if (HasClubicon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubicon);
    }
    if (HasBan) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ban);
    }
    if (HasAutobanType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutobanType);
    }
    if (HasAutobanLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AutobanLimit);
    }
    if (HasProfitWeek) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProfitWeek);
    }
    if (HasProfitDay) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProfitDay);
    }
    if (HasBanTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BanTime);
    }
    if (HasJoinTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinTime);
    }
    if (HasBlindLimitStatus) {
      size += 1 + 1;
    }
    if (limitDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitDetail);
    }
    size += limitInfo_.CalculateSize(_repeated_limitInfo_codec);
    if (HasLuckydrawWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LuckydrawWeeklyProfit);
    }
    if (HasLuckydrawDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LuckydrawDailyProfit);
    }
    if (HasColorgameWeeklyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ColorgameWeeklyProfit);
    }
    if (HasColorgameDailyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ColorgameDailyProfit);
    }
    if (HasJackpotWeeklyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(JackpotDailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OthersDailyProfit);
    }
    if (HasLimitLuckydraw) {
      size += 2 + 1;
    }
    if (HasLimitColorgame) {
      size += 2 + 1;
    }
    if (HasLimitJackpot) {
      size += 2 + 1;
    }
    if (HasLimitEvchop) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueMemberInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasClubname) {
      Clubname = other.Clubname;
    }
    if (other.HasClubicon) {
      Clubicon = other.Clubicon;
    }
    if (other.HasBan) {
      Ban = other.Ban;
    }
    if (other.HasAutobanType) {
      AutobanType = other.AutobanType;
    }
    if (other.HasAutobanLimit) {
      AutobanLimit = other.AutobanLimit;
    }
    if (other.HasProfitWeek) {
      ProfitWeek = other.ProfitWeek;
    }
    if (other.HasProfitDay) {
      ProfitDay = other.ProfitDay;
    }
    if (other.HasBanTime) {
      BanTime = other.BanTime;
    }
    if (other.HasJoinTime) {
      JoinTime = other.JoinTime;
    }
    if (other.HasBlindLimitStatus) {
      BlindLimitStatus = other.BlindLimitStatus;
    }
    if (other.limitDetail_ != null) {
      if (limitDetail_ == null) {
        LimitDetail = new global::BlindLimit();
      }
      LimitDetail.MergeFrom(other.LimitDetail);
    }
    limitInfo_.Add(other.limitInfo_);
    if (other.HasLuckydrawWeeklyProfit) {
      LuckydrawWeeklyProfit = other.LuckydrawWeeklyProfit;
    }
    if (other.HasLuckydrawDailyProfit) {
      LuckydrawDailyProfit = other.LuckydrawDailyProfit;
    }
    if (other.HasColorgameWeeklyProfit) {
      ColorgameWeeklyProfit = other.ColorgameWeeklyProfit;
    }
    if (other.HasColorgameDailyProfit) {
      ColorgameDailyProfit = other.ColorgameDailyProfit;
    }
    if (other.HasJackpotWeeklyProfit) {
      JackpotWeeklyProfit = other.JackpotWeeklyProfit;
    }
    if (other.HasJackpotDailyProfit) {
      JackpotDailyProfit = other.JackpotDailyProfit;
    }
    if (other.HasEvchopWeeklyProfit) {
      EvchopWeeklyProfit = other.EvchopWeeklyProfit;
    }
    if (other.HasEvchopDailyProfit) {
      EvchopDailyProfit = other.EvchopDailyProfit;
    }
    if (other.HasOthersWeeklyProfit) {
      OthersWeeklyProfit = other.OthersWeeklyProfit;
    }
    if (other.HasOthersDailyProfit) {
      OthersDailyProfit = other.OthersDailyProfit;
    }
    if (other.HasLimitLuckydraw) {
      LimitLuckydraw = other.LimitLuckydraw;
    }
    if (other.HasLimitColorgame) {
      LimitColorgame = other.LimitColorgame;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Clubid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 26: {
          Clubicon = input.ReadString();
          break;
        }
        case 32: {
          Ban = input.ReadInt32();
          break;
        }
        case 40: {
          AutobanType = input.ReadInt32();
          break;
        }
        case 48: {
          AutobanLimit = input.ReadInt64();
          break;
        }
        case 56: {
          ProfitWeek = input.ReadInt64();
          break;
        }
        case 64: {
          ProfitDay = input.ReadInt64();
          break;
        }
        case 72: {
          BanTime = input.ReadInt32();
          break;
        }
        case 80: {
          JoinTime = input.ReadInt32();
          break;
        }
        case 88: {
          BlindLimitStatus = input.ReadBool();
          break;
        }
        case 98: {
          if (limitDetail_ == null) {
            LimitDetail = new global::BlindLimit();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
        case 106: {
          limitInfo_.AddEntriesFrom(input, _repeated_limitInfo_codec);
          break;
        }
        case 112: {
          LuckydrawWeeklyProfit = input.ReadInt64();
          break;
        }
        case 120: {
          LuckydrawDailyProfit = input.ReadInt64();
          break;
        }
        case 128: {
          ColorgameWeeklyProfit = input.ReadInt64();
          break;
        }
        case 136: {
          ColorgameDailyProfit = input.ReadInt64();
          break;
        }
        case 144: {
          JackpotWeeklyProfit = input.ReadInt64();
          break;
        }
        case 152: {
          JackpotDailyProfit = input.ReadInt64();
          break;
        }
        case 160: {
          EvchopWeeklyProfit = input.ReadInt64();
          break;
        }
        case 168: {
          EvchopDailyProfit = input.ReadInt64();
          break;
        }
        case 176: {
          OthersWeeklyProfit = input.ReadInt64();
          break;
        }
        case 184: {
          OthersDailyProfit = input.ReadInt64();
          break;
        }
        case 192: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 200: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 208: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 216: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Clubid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 26: {
          Clubicon = input.ReadString();
          break;
        }
        case 32: {
          Ban = input.ReadInt32();
          break;
        }
        case 40: {
          AutobanType = input.ReadInt32();
          break;
        }
        case 48: {
          AutobanLimit = input.ReadInt64();
          break;
        }
        case 56: {
          ProfitWeek = input.ReadInt64();
          break;
        }
        case 64: {
          ProfitDay = input.ReadInt64();
          break;
        }
        case 72: {
          BanTime = input.ReadInt32();
          break;
        }
        case 80: {
          JoinTime = input.ReadInt32();
          break;
        }
        case 88: {
          BlindLimitStatus = input.ReadBool();
          break;
        }
        case 98: {
          if (limitDetail_ == null) {
            LimitDetail = new global::BlindLimit();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
        case 106: {
          limitInfo_.AddEntriesFrom(ref input, _repeated_limitInfo_codec);
          break;
        }
        case 112: {
          LuckydrawWeeklyProfit = input.ReadInt64();
          break;
        }
        case 120: {
          LuckydrawDailyProfit = input.ReadInt64();
          break;
        }
        case 128: {
          ColorgameWeeklyProfit = input.ReadInt64();
          break;
        }
        case 136: {
          ColorgameDailyProfit = input.ReadInt64();
          break;
        }
        case 144: {
          JackpotWeeklyProfit = input.ReadInt64();
          break;
        }
        case 152: {
          JackpotDailyProfit = input.ReadInt64();
          break;
        }
        case 160: {
          EvchopWeeklyProfit = input.ReadInt64();
          break;
        }
        case 168: {
          EvchopDailyProfit = input.ReadInt64();
          break;
        }
        case 176: {
          OthersWeeklyProfit = input.ReadInt64();
          break;
        }
        case 184: {
          OthersDailyProfit = input.ReadInt64();
          break;
        }
        case 192: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 200: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 208: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 216: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueMemberREQ : pb::IMessage<LeagueMemberREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueMemberREQ> _parser = new pb::MessageParser<LeagueMemberREQ>(() => new LeagueMemberREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueMemberREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberREQ(LeagueMemberREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberREQ Clone() {
    return new LeagueMemberREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueMemberREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueMemberREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueMemberREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueMemberRSP : pb::IMessage<LeagueMemberRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueMemberRSP> _parser = new pb::MessageParser<LeagueMemberRSP>(() => new LeagueMemberRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueMemberRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberRSP(LeagueMemberRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    info_ = other.info_.Clone();
    autoban_ = other.autoban_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberRSP Clone() {
    return new LeagueMemberRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::LeagueMemberInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(26, global::LeagueMemberInfo.Parser);
  private readonly pbc::RepeatedField<global::LeagueMemberInfo> info_ = new pbc::RepeatedField<global::LeagueMemberInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::LeagueMemberInfo> Info {
    get { return info_; }
  }

  /// <summary>Field number for the "autoban" field.</summary>
  public const int AutobanFieldNumber = 4;
  private readonly static bool AutobanDefaultValue = false;

  private bool autoban_;
  /// <summary>
  /// true: enable; false: disable
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Autoban {
    get { if ((_hasBits0 & 2) != 0) { return autoban_; } else { return AutobanDefaultValue; } }
    set {
      _hasBits0 |= 2;
      autoban_ = value;
    }
  }
  /// <summary>Gets whether the "autoban" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutoban {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "autoban" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutoban() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueMemberRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueMemberRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if(!info_.Equals(other.info_)) return false;
    if (Autoban != other.Autoban) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    hash ^= info_.GetHashCode();
    if (HasAutoban) hash ^= Autoban.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    info_.WriteTo(output, _repeated_info_codec);
    if (HasAutoban) {
      output.WriteRawTag(32);
      output.WriteBool(Autoban);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    info_.WriteTo(ref output, _repeated_info_codec);
    if (HasAutoban) {
      output.WriteRawTag(32);
      output.WriteBool(Autoban);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    size += info_.CalculateSize(_repeated_info_codec);
    if (HasAutoban) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueMemberRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    info_.Add(other.info_);
    if (other.HasAutoban) {
      Autoban = other.Autoban;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
        case 32: {
          Autoban = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          info_.AddEntriesFrom(ref input, _repeated_info_codec);
          break;
        }
        case 32: {
          Autoban = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueMemberSharkIndex : pb::IMessage<LeagueMemberSharkIndex>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueMemberSharkIndex> _parser = new pb::MessageParser<LeagueMemberSharkIndex>(() => new LeagueMemberSharkIndex());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueMemberSharkIndex> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndex() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndex(LeagueMemberSharkIndex other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    clubname_ = other.clubname_;
    clubicon_ = other.clubicon_;
    leagueid_ = other.leagueid_;
    leaguename_ = other.leaguename_;
    superLeagueid_ = other.superLeagueid_;
    ppsrid_ = other.ppsrid_;
    sharkIndex_ = other.sharkIndex_;
    ppstid_ = other.ppstid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndex Clone() {
    return new LeagueMemberSharkIndex(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "clubname" field.</summary>
  public const int ClubnameFieldNumber = 2;
  private readonly static string ClubnameDefaultValue = "";

  private string clubname_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubname {
    get { return clubname_ ?? ClubnameDefaultValue; }
    set {
      clubname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubname {
    get { return clubname_ != null; }
  }
  /// <summary>Clears the value of the "clubname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubname() {
    clubname_ = null;
  }

  /// <summary>Field number for the "clubicon" field.</summary>
  public const int ClubiconFieldNumber = 3;
  private readonly static string ClubiconDefaultValue = "";

  private string clubicon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubicon {
    get { return clubicon_ ?? ClubiconDefaultValue; }
    set {
      clubicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubicon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubicon {
    get { return clubicon_ != null; }
  }
  /// <summary>Clears the value of the "clubicon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubicon() {
    clubicon_ = null;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 4;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leaguename" field.</summary>
  public const int LeaguenameFieldNumber = 5;
  private readonly static string LeaguenameDefaultValue = "";

  private string leaguename_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Leaguename {
    get { return leaguename_ ?? LeaguenameDefaultValue; }
    set {
      leaguename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "leaguename" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguename {
    get { return leaguename_ != null; }
  }
  /// <summary>Clears the value of the "leaguename" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguename() {
    leaguename_ = null;
  }

  /// <summary>Field number for the "super_leagueid" field.</summary>
  public const int SuperLeagueidFieldNumber = 6;
  private readonly static int SuperLeagueidDefaultValue = 0;

  private int superLeagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SuperLeagueid {
    get { if ((_hasBits0 & 2) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      superLeagueid_ = value;
    }
  }
  /// <summary>Gets whether the "super_leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "super_leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 7;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 4) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 4;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "shark_index" field.</summary>
  public const int SharkIndexFieldNumber = 8;
  private readonly static int SharkIndexDefaultValue = 0;

  private int sharkIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SharkIndex {
    get { if ((_hasBits0 & 8) != 0) { return sharkIndex_; } else { return SharkIndexDefaultValue; } }
    set {
      _hasBits0 |= 8;
      sharkIndex_ = value;
    }
  }
  /// <summary>Gets whether the "shark_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSharkIndex {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "shark_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSharkIndex() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ppstid" field.</summary>
  public const int PpstidFieldNumber = 9;
  private readonly static int PpstidDefaultValue = 0;

  private int ppstid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppstid {
    get { if ((_hasBits0 & 16) != 0) { return ppstid_; } else { return PpstidDefaultValue; } }
    set {
      _hasBits0 |= 16;
      ppstid_ = value;
    }
  }
  /// <summary>Gets whether the "ppstid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpstid {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ppstid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpstid() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueMemberSharkIndex);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueMemberSharkIndex other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Clubname != other.Clubname) return false;
    if (Clubicon != other.Clubicon) return false;
    if (Leagueid != other.Leagueid) return false;
    if (Leaguename != other.Leaguename) return false;
    if (SuperLeagueid != other.SuperLeagueid) return false;
    if (Ppsrid != other.Ppsrid) return false;
    if (SharkIndex != other.SharkIndex) return false;
    if (Ppstid != other.Ppstid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasClubname) hash ^= Clubname.GetHashCode();
    if (HasClubicon) hash ^= Clubicon.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasLeaguename) hash ^= Leaguename.GetHashCode();
    if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (HasSharkIndex) hash ^= SharkIndex.GetHashCode();
    if (HasPpstid) hash ^= Ppstid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasClubicon) {
      output.WriteRawTag(26);
      output.WriteString(Clubicon);
    }
    if (HasLeagueid) {
      output.WriteRawTag(32);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(42);
      output.WriteString(Leaguename);
    }
    if (HasSuperLeagueid) {
      output.WriteRawTag(48);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasPpsrid) {
      output.WriteRawTag(56);
      output.WriteInt32(Ppsrid);
    }
    if (HasSharkIndex) {
      output.WriteRawTag(64);
      output.WriteInt32(SharkIndex);
    }
    if (HasPpstid) {
      output.WriteRawTag(72);
      output.WriteInt32(Ppstid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasClubicon) {
      output.WriteRawTag(26);
      output.WriteString(Clubicon);
    }
    if (HasLeagueid) {
      output.WriteRawTag(32);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(42);
      output.WriteString(Leaguename);
    }
    if (HasSuperLeagueid) {
      output.WriteRawTag(48);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasPpsrid) {
      output.WriteRawTag(56);
      output.WriteInt32(Ppsrid);
    }
    if (HasSharkIndex) {
      output.WriteRawTag(64);
      output.WriteInt32(SharkIndex);
    }
    if (HasPpstid) {
      output.WriteRawTag(72);
      output.WriteInt32(Ppstid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasClubname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubname);
    }
    if (HasClubicon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubicon);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasLeaguename) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Leaguename);
    }
    if (HasSuperLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
    }
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (HasSharkIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SharkIndex);
    }
    if (HasPpstid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppstid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueMemberSharkIndex other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasClubname) {
      Clubname = other.Clubname;
    }
    if (other.HasClubicon) {
      Clubicon = other.Clubicon;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasLeaguename) {
      Leaguename = other.Leaguename;
    }
    if (other.HasSuperLeagueid) {
      SuperLeagueid = other.SuperLeagueid;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    if (other.HasSharkIndex) {
      SharkIndex = other.SharkIndex;
    }
    if (other.HasPpstid) {
      Ppstid = other.Ppstid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 26: {
          Clubicon = input.ReadString();
          break;
        }
        case 32: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 42: {
          Leaguename = input.ReadString();
          break;
        }
        case 48: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 56: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 64: {
          SharkIndex = input.ReadInt32();
          break;
        }
        case 72: {
          Ppstid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 26: {
          Clubicon = input.ReadString();
          break;
        }
        case 32: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 42: {
          Leaguename = input.ReadString();
          break;
        }
        case 48: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 56: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 64: {
          SharkIndex = input.ReadInt32();
          break;
        }
        case 72: {
          Ppstid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueMemberSharkIndexREQ : pb::IMessage<LeagueMemberSharkIndexREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueMemberSharkIndexREQ> _parser = new pb::MessageParser<LeagueMemberSharkIndexREQ>(() => new LeagueMemberSharkIndexREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueMemberSharkIndexREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndexREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndexREQ(LeagueMemberSharkIndexREQ other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    leagueid_ = other.leagueid_;
    superLeagueid_ = other.superLeagueid_;
    ppsrid_ = other.ppsrid_;
    startIndex_ = other.startIndex_;
    amount_ = other.amount_;
    ppstid_ = other.ppstid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndexREQ Clone() {
    return new LeagueMemberSharkIndexREQ(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "super_leagueid" field.</summary>
  public const int SuperLeagueidFieldNumber = 3;
  private readonly static int SuperLeagueidDefaultValue = 0;

  private int superLeagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SuperLeagueid {
    get { if ((_hasBits0 & 2) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      superLeagueid_ = value;
    }
  }
  /// <summary>Gets whether the "super_leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "super_leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 4;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 4) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 4;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "start_index" field.</summary>
  public const int StartIndexFieldNumber = 5;
  private readonly static int StartIndexDefaultValue = 0;

  private int startIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int StartIndex {
    get { if ((_hasBits0 & 8) != 0) { return startIndex_; } else { return StartIndexDefaultValue; } }
    set {
      _hasBits0 |= 8;
      startIndex_ = value;
    }
  }
  /// <summary>Gets whether the "start_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartIndex {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "start_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartIndex() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 6;
  private readonly static int AmountDefaultValue = 0;

  private int amount_;
  /// <summary>
  /// set 0 to send all items once
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Amount {
    get { if ((_hasBits0 & 16) != 0) { return amount_; } else { return AmountDefaultValue; } }
    set {
      _hasBits0 |= 16;
      amount_ = value;
    }
  }
  /// <summary>Gets whether the "amount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAmount {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "amount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAmount() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ppstid" field.</summary>
  public const int PpstidFieldNumber = 7;
  private readonly static int PpstidDefaultValue = 0;

  private int ppstid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppstid {
    get { if ((_hasBits0 & 32) != 0) { return ppstid_; } else { return PpstidDefaultValue; } }
    set {
      _hasBits0 |= 32;
      ppstid_ = value;
    }
  }
  /// <summary>Gets whether the "ppstid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpstid {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ppstid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpstid() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueMemberSharkIndexREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueMemberSharkIndexREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Leagueid != other.Leagueid) return false;
    if (SuperLeagueid != other.SuperLeagueid) return false;
    if (Ppsrid != other.Ppsrid) return false;
    if (StartIndex != other.StartIndex) return false;
    if (Amount != other.Amount) return false;
    if (Ppstid != other.Ppstid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (HasStartIndex) hash ^= StartIndex.GetHashCode();
    if (HasAmount) hash ^= Amount.GetHashCode();
    if (HasPpstid) hash ^= Ppstid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasSuperLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasPpsrid) {
      output.WriteRawTag(32);
      output.WriteInt32(Ppsrid);
    }
    if (HasStartIndex) {
      output.WriteRawTag(40);
      output.WriteInt32(StartIndex);
    }
    if (HasAmount) {
      output.WriteRawTag(48);
      output.WriteInt32(Amount);
    }
    if (HasPpstid) {
      output.WriteRawTag(56);
      output.WriteInt32(Ppstid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasSuperLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasPpsrid) {
      output.WriteRawTag(32);
      output.WriteInt32(Ppsrid);
    }
    if (HasStartIndex) {
      output.WriteRawTag(40);
      output.WriteInt32(StartIndex);
    }
    if (HasAmount) {
      output.WriteRawTag(48);
      output.WriteInt32(Amount);
    }
    if (HasPpstid) {
      output.WriteRawTag(56);
      output.WriteInt32(Ppstid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasSuperLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
    }
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (HasStartIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartIndex);
    }
    if (HasAmount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    if (HasPpstid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppstid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueMemberSharkIndexREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasSuperLeagueid) {
      SuperLeagueid = other.SuperLeagueid;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    if (other.HasStartIndex) {
      StartIndex = other.StartIndex;
    }
    if (other.HasAmount) {
      Amount = other.Amount;
    }
    if (other.HasPpstid) {
      Ppstid = other.Ppstid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 24: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 32: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 40: {
          StartIndex = input.ReadInt32();
          break;
        }
        case 48: {
          Amount = input.ReadInt32();
          break;
        }
        case 56: {
          Ppstid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 24: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 32: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 40: {
          StartIndex = input.ReadInt32();
          break;
        }
        case 48: {
          Amount = input.ReadInt32();
          break;
        }
        case 56: {
          Ppstid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueMemberSharkIndexRSP : pb::IMessage<LeagueMemberSharkIndexRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueMemberSharkIndexRSP> _parser = new pb::MessageParser<LeagueMemberSharkIndexRSP>(() => new LeagueMemberSharkIndexRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueMemberSharkIndexRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndexRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndexRSP(LeagueMemberSharkIndexRSP other) : this() {
    _hasBits0 = other._hasBits0;
    totalNum_ = other.totalNum_;
    startIndex_ = other.startIndex_;
    amount_ = other.amount_;
    info_ = other.info_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueMemberSharkIndexRSP Clone() {
    return new LeagueMemberSharkIndexRSP(this);
  }

  /// <summary>Field number for the "total_num" field.</summary>
  public const int TotalNumFieldNumber = 1;
  private readonly static int TotalNumDefaultValue = 0;

  private int totalNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TotalNum {
    get { if ((_hasBits0 & 1) != 0) { return totalNum_; } else { return TotalNumDefaultValue; } }
    set {
      _hasBits0 |= 1;
      totalNum_ = value;
    }
  }
  /// <summary>Gets whether the "total_num" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTotalNum {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "total_num" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTotalNum() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "start_index" field.</summary>
  public const int StartIndexFieldNumber = 2;
  private readonly static int StartIndexDefaultValue = 0;

  private int startIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int StartIndex {
    get { if ((_hasBits0 & 2) != 0) { return startIndex_; } else { return StartIndexDefaultValue; } }
    set {
      _hasBits0 |= 2;
      startIndex_ = value;
    }
  }
  /// <summary>Gets whether the "start_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartIndex {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "start_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartIndex() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 3;
  private readonly static int AmountDefaultValue = 0;

  private int amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Amount {
    get { if ((_hasBits0 & 4) != 0) { return amount_; } else { return AmountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      amount_ = value;
    }
  }
  /// <summary>Gets whether the "amount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAmount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "amount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAmount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 4;
  private static readonly pb::FieldCodec<global::LeagueMemberSharkIndex> _repeated_info_codec
      = pb::FieldCodec.ForMessage(34, global::LeagueMemberSharkIndex.Parser);
  private readonly pbc::RepeatedField<global::LeagueMemberSharkIndex> info_ = new pbc::RepeatedField<global::LeagueMemberSharkIndex>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::LeagueMemberSharkIndex> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueMemberSharkIndexRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueMemberSharkIndexRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TotalNum != other.TotalNum) return false;
    if (StartIndex != other.StartIndex) return false;
    if (Amount != other.Amount) return false;
    if(!info_.Equals(other.info_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTotalNum) hash ^= TotalNum.GetHashCode();
    if (HasStartIndex) hash ^= StartIndex.GetHashCode();
    if (HasAmount) hash ^= Amount.GetHashCode();
    hash ^= info_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTotalNum) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalNum);
    }
    if (HasStartIndex) {
      output.WriteRawTag(16);
      output.WriteInt32(StartIndex);
    }
    if (HasAmount) {
      output.WriteRawTag(24);
      output.WriteInt32(Amount);
    }
    info_.WriteTo(output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTotalNum) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalNum);
    }
    if (HasStartIndex) {
      output.WriteRawTag(16);
      output.WriteInt32(StartIndex);
    }
    if (HasAmount) {
      output.WriteRawTag(24);
      output.WriteInt32(Amount);
    }
    info_.WriteTo(ref output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTotalNum) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
    }
    if (HasStartIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartIndex);
    }
    if (HasAmount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    size += info_.CalculateSize(_repeated_info_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueMemberSharkIndexRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasTotalNum) {
      TotalNum = other.TotalNum;
    }
    if (other.HasStartIndex) {
      StartIndex = other.StartIndex;
    }
    if (other.HasAmount) {
      Amount = other.Amount;
    }
    info_.Add(other.info_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TotalNum = input.ReadInt32();
          break;
        }
        case 16: {
          StartIndex = input.ReadInt32();
          break;
        }
        case 24: {
          Amount = input.ReadInt32();
          break;
        }
        case 34: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TotalNum = input.ReadInt32();
          break;
        }
        case 16: {
          StartIndex = input.ReadInt32();
          break;
        }
        case 24: {
          Amount = input.ReadInt32();
          break;
        }
        case 34: {
          info_.AddEntriesFrom(ref input, _repeated_info_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRMemberInfo : pb::IMessage<PPSRMemberInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRMemberInfo> _parser = new pb::MessageParser<PPSRMemberInfo>(() => new PPSRMemberInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRMemberInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberInfo(PPSRMemberInfo other) : this() {
    _hasBits0 = other._hasBits0;
    leaguetype_ = other.leaguetype_;
    leagueid_ = other.leagueid_;
    leaguename_ = other.leaguename_;
    isBanned_ = other.isBanned_;
    warningLimitType_ = other.warningLimitType_;
    warningLimit_ = other.warningLimit_;
    weeklyProfit_ = other.weeklyProfit_;
    dailyProfit_ = other.dailyProfit_;
    evchopWeeklyProfit_ = other.evchopWeeklyProfit_;
    evchopDailyProfit_ = other.evchopDailyProfit_;
    othersWeeklyProfit_ = other.othersWeeklyProfit_;
    othersDailyProfit_ = other.othersDailyProfit_;
    limitEvchop_ = other.limitEvchop_;
    limitJackpot_ = other.limitJackpot_;
    jackpotWeeklyProfit_ = other.jackpotWeeklyProfit_;
    jackpotDailyProfit_ = other.jackpotDailyProfit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberInfo Clone() {
    return new PPSRMemberInfo(this);
  }

  /// <summary>Field number for the "leaguetype" field.</summary>
  public const int LeaguetypeFieldNumber = 1;
  private readonly static int LeaguetypeDefaultValue = 0;

  private int leaguetype_;
  /// <summary>
  ///0: superleague, 1: league
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leaguetype {
    get { if ((_hasBits0 & 1) != 0) { return leaguetype_; } else { return LeaguetypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leaguetype_ = value;
    }
  }
  /// <summary>Gets whether the "leaguetype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguetype {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leaguetype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguetype() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "leaguename" field.</summary>
  public const int LeaguenameFieldNumber = 3;
  private readonly static string LeaguenameDefaultValue = "";

  private string leaguename_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Leaguename {
    get { return leaguename_ ?? LeaguenameDefaultValue; }
    set {
      leaguename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "leaguename" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguename {
    get { return leaguename_ != null; }
  }
  /// <summary>Clears the value of the "leaguename" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguename() {
    leaguename_ = null;
  }

  /// <summary>Field number for the "is_banned" field.</summary>
  public const int IsBannedFieldNumber = 4;
  private readonly static int IsBannedDefaultValue = 0;

  private int isBanned_;
  /// <summary>
  ///1: banned, 2: unbanned 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IsBanned {
    get { if ((_hasBits0 & 4) != 0) { return isBanned_; } else { return IsBannedDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isBanned_ = value;
    }
  }
  /// <summary>Gets whether the "is_banned" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsBanned {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_banned" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsBanned() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "warning_limit_type" field.</summary>
  public const int WarningLimitTypeFieldNumber = 5;
  private readonly static int WarningLimitTypeDefaultValue = 0;

  private int warningLimitType_;
  /// <summary>
  ///0: weekly, 1: daily
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int WarningLimitType {
    get { if ((_hasBits0 & 8) != 0) { return warningLimitType_; } else { return WarningLimitTypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      warningLimitType_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimitType {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimitType() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "warning_limit" field.</summary>
  public const int WarningLimitFieldNumber = 6;
  private readonly static long WarningLimitDefaultValue = 0L;

  private long warningLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long WarningLimit {
    get { if ((_hasBits0 & 16) != 0) { return warningLimit_; } else { return WarningLimitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      warningLimit_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "weekly_profit" field.</summary>
  public const int WeeklyProfitFieldNumber = 7;
  private readonly static long WeeklyProfitDefaultValue = 0L;

  private long weeklyProfit_;
  /// <summary>
  ///the outdated version of the profit calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long WeeklyProfit {
    get { if ((_hasBits0 & 32) != 0) { return weeklyProfit_; } else { return WeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 32;
      weeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWeeklyProfit {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWeeklyProfit() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "daily_profit" field.</summary>
  public const int DailyProfitFieldNumber = 8;
  private readonly static long DailyProfitDefaultValue = 0L;

  private long dailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DailyProfit {
    get { if ((_hasBits0 & 64) != 0) { return dailyProfit_; } else { return DailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 64;
      dailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDailyProfit {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDailyProfit() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "evchop_weekly_profit" field.</summary>
  public const int EvchopWeeklyProfitFieldNumber = 9;
  private readonly static long EvchopWeeklyProfitDefaultValue = 0L;

  private long evchopWeeklyProfit_;
  /// <summary>
  ///the latest version of the profit calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EvchopWeeklyProfit {
    get { if ((_hasBits0 & 128) != 0) { return evchopWeeklyProfit_; } else { return EvchopWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 128;
      evchopWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "evchop_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEvchopWeeklyProfit {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "evchop_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEvchopWeeklyProfit() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "evchop_daily_profit" field.</summary>
  public const int EvchopDailyProfitFieldNumber = 10;
  private readonly static long EvchopDailyProfitDefaultValue = 0L;

  private long evchopDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EvchopDailyProfit {
    get { if ((_hasBits0 & 256) != 0) { return evchopDailyProfit_; } else { return EvchopDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 256;
      evchopDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "evchop_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEvchopDailyProfit {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "evchop_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEvchopDailyProfit() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "others_weekly_profit" field.</summary>
  public const int OthersWeeklyProfitFieldNumber = 11;
  private readonly static long OthersWeeklyProfitDefaultValue = 0L;

  private long othersWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OthersWeeklyProfit {
    get { if ((_hasBits0 & 512) != 0) { return othersWeeklyProfit_; } else { return OthersWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 512;
      othersWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "others_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOthersWeeklyProfit {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "others_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOthersWeeklyProfit() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "others_daily_profit" field.</summary>
  public const int OthersDailyProfitFieldNumber = 12;
  private readonly static long OthersDailyProfitDefaultValue = 0L;

  private long othersDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OthersDailyProfit {
    get { if ((_hasBits0 & 1024) != 0) { return othersDailyProfit_; } else { return OthersDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      othersDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "others_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOthersDailyProfit {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "others_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOthersDailyProfit() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 13;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 2048) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 14;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 4096) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "jackpot_weekly_profit" field.</summary>
  public const int JackpotWeeklyProfitFieldNumber = 15;
  private readonly static long JackpotWeeklyProfitDefaultValue = 0L;

  private long jackpotWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotWeeklyProfit {
    get { if ((_hasBits0 & 8192) != 0) { return jackpotWeeklyProfit_; } else { return JackpotWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      jackpotWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotWeeklyProfit {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotWeeklyProfit() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "jackpot_daily_profit" field.</summary>
  public const int JackpotDailyProfitFieldNumber = 16;
  private readonly static long JackpotDailyProfitDefaultValue = 0L;

  private long jackpotDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotDailyProfit {
    get { if ((_hasBits0 & 16384) != 0) { return jackpotDailyProfit_; } else { return JackpotDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      jackpotDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotDailyProfit {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotDailyProfit() {
    _hasBits0 &= ~16384;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRMemberInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRMemberInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leaguetype != other.Leaguetype) return false;
    if (Leagueid != other.Leagueid) return false;
    if (Leaguename != other.Leaguename) return false;
    if (IsBanned != other.IsBanned) return false;
    if (WarningLimitType != other.WarningLimitType) return false;
    if (WarningLimit != other.WarningLimit) return false;
    if (WeeklyProfit != other.WeeklyProfit) return false;
    if (DailyProfit != other.DailyProfit) return false;
    if (EvchopWeeklyProfit != other.EvchopWeeklyProfit) return false;
    if (EvchopDailyProfit != other.EvchopDailyProfit) return false;
    if (OthersWeeklyProfit != other.OthersWeeklyProfit) return false;
    if (OthersDailyProfit != other.OthersDailyProfit) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    if (JackpotWeeklyProfit != other.JackpotWeeklyProfit) return false;
    if (JackpotDailyProfit != other.JackpotDailyProfit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeaguetype) hash ^= Leaguetype.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasLeaguename) hash ^= Leaguename.GetHashCode();
    if (HasIsBanned) hash ^= IsBanned.GetHashCode();
    if (HasWarningLimitType) hash ^= WarningLimitType.GetHashCode();
    if (HasWarningLimit) hash ^= WarningLimit.GetHashCode();
    if (HasWeeklyProfit) hash ^= WeeklyProfit.GetHashCode();
    if (HasDailyProfit) hash ^= DailyProfit.GetHashCode();
    if (HasEvchopWeeklyProfit) hash ^= EvchopWeeklyProfit.GetHashCode();
    if (HasEvchopDailyProfit) hash ^= EvchopDailyProfit.GetHashCode();
    if (HasOthersWeeklyProfit) hash ^= OthersWeeklyProfit.GetHashCode();
    if (HasOthersDailyProfit) hash ^= OthersDailyProfit.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (HasJackpotWeeklyProfit) hash ^= JackpotWeeklyProfit.GetHashCode();
    if (HasJackpotDailyProfit) hash ^= JackpotDailyProfit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeaguetype) {
      output.WriteRawTag(8);
      output.WriteInt32(Leaguetype);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(26);
      output.WriteString(Leaguename);
    }
    if (HasIsBanned) {
      output.WriteRawTag(32);
      output.WriteInt32(IsBanned);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(40);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(WarningLimit);
    }
    if (HasWeeklyProfit) {
      output.WriteRawTag(56);
      output.WriteInt64(WeeklyProfit);
    }
    if (HasDailyProfit) {
      output.WriteRawTag(64);
      output.WriteInt64(DailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      output.WriteRawTag(72);
      output.WriteInt64(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      output.WriteRawTag(80);
      output.WriteInt64(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      output.WriteRawTag(88);
      output.WriteInt64(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      output.WriteRawTag(96);
      output.WriteInt64(OthersDailyProfit);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(104);
      output.WriteBool(LimitEvchop);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(112);
      output.WriteBool(LimitJackpot);
    }
    if (HasJackpotWeeklyProfit) {
      output.WriteRawTag(120);
      output.WriteInt64(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(JackpotDailyProfit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeaguetype) {
      output.WriteRawTag(8);
      output.WriteInt32(Leaguetype);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(26);
      output.WriteString(Leaguename);
    }
    if (HasIsBanned) {
      output.WriteRawTag(32);
      output.WriteInt32(IsBanned);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(40);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(WarningLimit);
    }
    if (HasWeeklyProfit) {
      output.WriteRawTag(56);
      output.WriteInt64(WeeklyProfit);
    }
    if (HasDailyProfit) {
      output.WriteRawTag(64);
      output.WriteInt64(DailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      output.WriteRawTag(72);
      output.WriteInt64(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      output.WriteRawTag(80);
      output.WriteInt64(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      output.WriteRawTag(88);
      output.WriteInt64(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      output.WriteRawTag(96);
      output.WriteInt64(OthersDailyProfit);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(104);
      output.WriteBool(LimitEvchop);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(112);
      output.WriteBool(LimitJackpot);
    }
    if (HasJackpotWeeklyProfit) {
      output.WriteRawTag(120);
      output.WriteInt64(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(JackpotDailyProfit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeaguetype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leaguetype);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasLeaguename) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Leaguename);
    }
    if (HasIsBanned) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBanned);
    }
    if (HasWarningLimitType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningLimitType);
    }
    if (HasWarningLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarningLimit);
    }
    if (HasWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WeeklyProfit);
    }
    if (HasDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OthersDailyProfit);
    }
    if (HasLimitEvchop) {
      size += 1 + 1;
    }
    if (HasLimitJackpot) {
      size += 1 + 1;
    }
    if (HasJackpotWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(JackpotDailyProfit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRMemberInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasLeaguetype) {
      Leaguetype = other.Leaguetype;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasLeaguename) {
      Leaguename = other.Leaguename;
    }
    if (other.HasIsBanned) {
      IsBanned = other.IsBanned;
    }
    if (other.HasWarningLimitType) {
      WarningLimitType = other.WarningLimitType;
    }
    if (other.HasWarningLimit) {
      WarningLimit = other.WarningLimit;
    }
    if (other.HasWeeklyProfit) {
      WeeklyProfit = other.WeeklyProfit;
    }
    if (other.HasDailyProfit) {
      DailyProfit = other.DailyProfit;
    }
    if (other.HasEvchopWeeklyProfit) {
      EvchopWeeklyProfit = other.EvchopWeeklyProfit;
    }
    if (other.HasEvchopDailyProfit) {
      EvchopDailyProfit = other.EvchopDailyProfit;
    }
    if (other.HasOthersWeeklyProfit) {
      OthersWeeklyProfit = other.OthersWeeklyProfit;
    }
    if (other.HasOthersDailyProfit) {
      OthersDailyProfit = other.OthersDailyProfit;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    if (other.HasJackpotWeeklyProfit) {
      JackpotWeeklyProfit = other.JackpotWeeklyProfit;
    }
    if (other.HasJackpotDailyProfit) {
      JackpotDailyProfit = other.JackpotDailyProfit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leaguetype = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          Leaguename = input.ReadString();
          break;
        }
        case 32: {
          IsBanned = input.ReadInt32();
          break;
        }
        case 40: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 48: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 56: {
          WeeklyProfit = input.ReadInt64();
          break;
        }
        case 64: {
          DailyProfit = input.ReadInt64();
          break;
        }
        case 72: {
          EvchopWeeklyProfit = input.ReadInt64();
          break;
        }
        case 80: {
          EvchopDailyProfit = input.ReadInt64();
          break;
        }
        case 88: {
          OthersWeeklyProfit = input.ReadInt64();
          break;
        }
        case 96: {
          OthersDailyProfit = input.ReadInt64();
          break;
        }
        case 104: {
          LimitEvchop = input.ReadBool();
          break;
        }
        case 112: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 120: {
          JackpotWeeklyProfit = input.ReadInt64();
          break;
        }
        case 128: {
          JackpotDailyProfit = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leaguetype = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          Leaguename = input.ReadString();
          break;
        }
        case 32: {
          IsBanned = input.ReadInt32();
          break;
        }
        case 40: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 48: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 56: {
          WeeklyProfit = input.ReadInt64();
          break;
        }
        case 64: {
          DailyProfit = input.ReadInt64();
          break;
        }
        case 72: {
          EvchopWeeklyProfit = input.ReadInt64();
          break;
        }
        case 80: {
          EvchopDailyProfit = input.ReadInt64();
          break;
        }
        case 88: {
          OthersWeeklyProfit = input.ReadInt64();
          break;
        }
        case 96: {
          OthersDailyProfit = input.ReadInt64();
          break;
        }
        case 104: {
          LimitEvchop = input.ReadBool();
          break;
        }
        case 112: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 120: {
          JackpotWeeklyProfit = input.ReadInt64();
          break;
        }
        case 128: {
          JackpotDailyProfit = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRMemberREQ : pb::IMessage<PPSRMemberREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRMemberREQ> _parser = new pb::MessageParser<PPSRMemberREQ>(() => new PPSRMemberREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRMemberREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberREQ(PPSRMemberREQ other) : this() {
    _hasBits0 = other._hasBits0;
    ppsrid_ = other.ppsrid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberREQ Clone() {
    return new PPSRMemberREQ(this);
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 1;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 1) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRMemberREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRMemberREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ppsrid != other.Ppsrid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRMemberREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRMemberRSP : pb::IMessage<PPSRMemberRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRMemberRSP> _parser = new pb::MessageParser<PPSRMemberRSP>(() => new PPSRMemberRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRMemberRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberRSP(PPSRMemberRSP other) : this() {
    _hasBits0 = other._hasBits0;
    ppsrid_ = other.ppsrid_;
    deficitWarningEnable_ = other.deficitWarningEnable_;
    info_ = other.info_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberRSP Clone() {
    return new PPSRMemberRSP(this);
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 1;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 1) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "deficit_warning_enable" field.</summary>
  public const int DeficitWarningEnableFieldNumber = 2;
  private readonly static bool DeficitWarningEnableDefaultValue = false;

  private bool deficitWarningEnable_;
  /// <summary>
  ///true: on, false: off
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DeficitWarningEnable {
    get { if ((_hasBits0 & 2) != 0) { return deficitWarningEnable_; } else { return DeficitWarningEnableDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deficitWarningEnable_ = value;
    }
  }
  /// <summary>Gets whether the "deficit_warning_enable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeficitWarningEnable {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "deficit_warning_enable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeficitWarningEnable() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PPSRMemberInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(26, global::PPSRMemberInfo.Parser);
  private readonly pbc::RepeatedField<global::PPSRMemberInfo> info_ = new pbc::RepeatedField<global::PPSRMemberInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::PPSRMemberInfo> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRMemberRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRMemberRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ppsrid != other.Ppsrid) return false;
    if (DeficitWarningEnable != other.DeficitWarningEnable) return false;
    if(!info_.Equals(other.info_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (HasDeficitWarningEnable) hash ^= DeficitWarningEnable.GetHashCode();
    hash ^= info_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (HasDeficitWarningEnable) {
      output.WriteRawTag(16);
      output.WriteBool(DeficitWarningEnable);
    }
    info_.WriteTo(output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (HasDeficitWarningEnable) {
      output.WriteRawTag(16);
      output.WriteBool(DeficitWarningEnable);
    }
    info_.WriteTo(ref output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (HasDeficitWarningEnable) {
      size += 1 + 1;
    }
    size += info_.CalculateSize(_repeated_info_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRMemberRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    if (other.HasDeficitWarningEnable) {
      DeficitWarningEnable = other.DeficitWarningEnable;
    }
    info_.Add(other.info_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 16: {
          DeficitWarningEnable = input.ReadBool();
          break;
        }
        case 26: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 16: {
          DeficitWarningEnable = input.ReadBool();
          break;
        }
        case 26: {
          info_.AddEntriesFrom(ref input, _repeated_info_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueMemberInfo : pb::IMessage<SuperLeagueMemberInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueMemberInfo> _parser = new pb::MessageParser<SuperLeagueMemberInfo>(() => new SuperLeagueMemberInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueMemberInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberInfo(SuperLeagueMemberInfo other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    leaguename_ = other.leaguename_;
    isBanned_ = other.isBanned_;
    warningLimitType_ = other.warningLimitType_;
    warningLimit_ = other.warningLimit_;
    weeklyProfit_ = other.weeklyProfit_;
    dailyProfit_ = other.dailyProfit_;
    luckydrawWeeklyProfit_ = other.luckydrawWeeklyProfit_;
    luckydrawDailyProfit_ = other.luckydrawDailyProfit_;
    colorgameWeeklyProfit_ = other.colorgameWeeklyProfit_;
    colorgameDailyProfit_ = other.colorgameDailyProfit_;
    jackpotWeeklyProfit_ = other.jackpotWeeklyProfit_;
    jackpotDailyProfit_ = other.jackpotDailyProfit_;
    evchopWeeklyProfit_ = other.evchopWeeklyProfit_;
    evchopDailyProfit_ = other.evchopDailyProfit_;
    othersWeeklyProfit_ = other.othersWeeklyProfit_;
    othersDailyProfit_ = other.othersDailyProfit_;
    limitLuckydraw_ = other.limitLuckydraw_;
    limitColorgame_ = other.limitColorgame_;
    limitJackpot_ = other.limitJackpot_;
    limitEvchop_ = other.limitEvchop_;
    blindLimitStatus_ = other.blindLimitStatus_;
    limitInfo_ = other.limitInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberInfo Clone() {
    return new SuperLeagueMemberInfo(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leaguename" field.</summary>
  public const int LeaguenameFieldNumber = 2;
  private readonly static string LeaguenameDefaultValue = "";

  private string leaguename_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Leaguename {
    get { return leaguename_ ?? LeaguenameDefaultValue; }
    set {
      leaguename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "leaguename" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguename {
    get { return leaguename_ != null; }
  }
  /// <summary>Clears the value of the "leaguename" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguename() {
    leaguename_ = null;
  }

  /// <summary>Field number for the "is_banned" field.</summary>
  public const int IsBannedFieldNumber = 3;
  private readonly static int IsBannedDefaultValue = 0;

  private int isBanned_;
  /// <summary>
  ///1: banned, 2: unbanned
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IsBanned {
    get { if ((_hasBits0 & 2) != 0) { return isBanned_; } else { return IsBannedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isBanned_ = value;
    }
  }
  /// <summary>Gets whether the "is_banned" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsBanned {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_banned" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsBanned() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "warning_limit_type" field.</summary>
  public const int WarningLimitTypeFieldNumber = 4;
  private readonly static int WarningLimitTypeDefaultValue = 0;

  private int warningLimitType_;
  /// <summary>
  ///0: weekly, 1: daily
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int WarningLimitType {
    get { if ((_hasBits0 & 4) != 0) { return warningLimitType_; } else { return WarningLimitTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      warningLimitType_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimitType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimitType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "warning_limit" field.</summary>
  public const int WarningLimitFieldNumber = 5;
  private readonly static long WarningLimitDefaultValue = 0L;

  private long warningLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long WarningLimit {
    get { if ((_hasBits0 & 8) != 0) { return warningLimit_; } else { return WarningLimitDefaultValue; } }
    set {
      _hasBits0 |= 8;
      warningLimit_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimit {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimit() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "weekly_profit" field.</summary>
  public const int WeeklyProfitFieldNumber = 6;
  private readonly static long WeeklyProfitDefaultValue = 0L;

  private long weeklyProfit_;
  /// <summary>
  ///the outdated version of the profit calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long WeeklyProfit {
    get { if ((_hasBits0 & 16) != 0) { return weeklyProfit_; } else { return WeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      weeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWeeklyProfit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWeeklyProfit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "daily_profit" field.</summary>
  public const int DailyProfitFieldNumber = 7;
  private readonly static long DailyProfitDefaultValue = 0L;

  private long dailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DailyProfit {
    get { if ((_hasBits0 & 32) != 0) { return dailyProfit_; } else { return DailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 32;
      dailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDailyProfit {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDailyProfit() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "luckydraw_weekly_profit" field.</summary>
  public const int LuckydrawWeeklyProfitFieldNumber = 8;
  private readonly static long LuckydrawWeeklyProfitDefaultValue = 0L;

  private long luckydrawWeeklyProfit_;
  /// <summary>
  ///the latest version of the profit calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LuckydrawWeeklyProfit {
    get { if ((_hasBits0 & 64) != 0) { return luckydrawWeeklyProfit_; } else { return LuckydrawWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 64;
      luckydrawWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "luckydraw_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLuckydrawWeeklyProfit {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "luckydraw_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLuckydrawWeeklyProfit() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "luckydraw_daily_profit" field.</summary>
  public const int LuckydrawDailyProfitFieldNumber = 9;
  private readonly static long LuckydrawDailyProfitDefaultValue = 0L;

  private long luckydrawDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LuckydrawDailyProfit {
    get { if ((_hasBits0 & 128) != 0) { return luckydrawDailyProfit_; } else { return LuckydrawDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 128;
      luckydrawDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "luckydraw_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLuckydrawDailyProfit {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "luckydraw_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLuckydrawDailyProfit() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "colorgame_weekly_profit" field.</summary>
  public const int ColorgameWeeklyProfitFieldNumber = 10;
  private readonly static long ColorgameWeeklyProfitDefaultValue = 0L;

  private long colorgameWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ColorgameWeeklyProfit {
    get { if ((_hasBits0 & 256) != 0) { return colorgameWeeklyProfit_; } else { return ColorgameWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 256;
      colorgameWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "colorgame_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorgameWeeklyProfit {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "colorgame_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorgameWeeklyProfit() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "colorgame_daily_profit" field.</summary>
  public const int ColorgameDailyProfitFieldNumber = 11;
  private readonly static long ColorgameDailyProfitDefaultValue = 0L;

  private long colorgameDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ColorgameDailyProfit {
    get { if ((_hasBits0 & 512) != 0) { return colorgameDailyProfit_; } else { return ColorgameDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 512;
      colorgameDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "colorgame_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColorgameDailyProfit {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "colorgame_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColorgameDailyProfit() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "jackpot_weekly_profit" field.</summary>
  public const int JackpotWeeklyProfitFieldNumber = 12;
  private readonly static long JackpotWeeklyProfitDefaultValue = 0L;

  private long jackpotWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotWeeklyProfit {
    get { if ((_hasBits0 & 1024) != 0) { return jackpotWeeklyProfit_; } else { return JackpotWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      jackpotWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotWeeklyProfit {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotWeeklyProfit() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "jackpot_daily_profit" field.</summary>
  public const int JackpotDailyProfitFieldNumber = 13;
  private readonly static long JackpotDailyProfitDefaultValue = 0L;

  private long jackpotDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotDailyProfit {
    get { if ((_hasBits0 & 2048) != 0) { return jackpotDailyProfit_; } else { return JackpotDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      jackpotDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotDailyProfit {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotDailyProfit() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "evchop_weekly_profit" field.</summary>
  public const int EvchopWeeklyProfitFieldNumber = 14;
  private readonly static long EvchopWeeklyProfitDefaultValue = 0L;

  private long evchopWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EvchopWeeklyProfit {
    get { if ((_hasBits0 & 4096) != 0) { return evchopWeeklyProfit_; } else { return EvchopWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      evchopWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "evchop_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEvchopWeeklyProfit {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "evchop_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEvchopWeeklyProfit() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "evchop_daily_profit" field.</summary>
  public const int EvchopDailyProfitFieldNumber = 15;
  private readonly static long EvchopDailyProfitDefaultValue = 0L;

  private long evchopDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EvchopDailyProfit {
    get { if ((_hasBits0 & 8192) != 0) { return evchopDailyProfit_; } else { return EvchopDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      evchopDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "evchop_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEvchopDailyProfit {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "evchop_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEvchopDailyProfit() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "others_weekly_profit" field.</summary>
  public const int OthersWeeklyProfitFieldNumber = 16;
  private readonly static long OthersWeeklyProfitDefaultValue = 0L;

  private long othersWeeklyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OthersWeeklyProfit {
    get { if ((_hasBits0 & 16384) != 0) { return othersWeeklyProfit_; } else { return OthersWeeklyProfitDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      othersWeeklyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "others_weekly_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOthersWeeklyProfit {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "others_weekly_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOthersWeeklyProfit() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "others_daily_profit" field.</summary>
  public const int OthersDailyProfitFieldNumber = 17;
  private readonly static long OthersDailyProfitDefaultValue = 0L;

  private long othersDailyProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OthersDailyProfit {
    get { if ((_hasBits0 & 32768) != 0) { return othersDailyProfit_; } else { return OthersDailyProfitDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      othersDailyProfit_ = value;
    }
  }
  /// <summary>Gets whether the "others_daily_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOthersDailyProfit {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "others_daily_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOthersDailyProfit() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "limit_luckydraw" field.</summary>
  public const int LimitLuckydrawFieldNumber = 18;
  private readonly static bool LimitLuckydrawDefaultValue = false;

  private bool limitLuckydraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitLuckydraw {
    get { if ((_hasBits0 & 65536) != 0) { return limitLuckydraw_; } else { return LimitLuckydrawDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      limitLuckydraw_ = value;
    }
  }
  /// <summary>Gets whether the "limit_luckydraw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitLuckydraw {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "limit_luckydraw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitLuckydraw() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "limit_colorgame" field.</summary>
  public const int LimitColorgameFieldNumber = 19;
  private readonly static bool LimitColorgameDefaultValue = false;

  private bool limitColorgame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitColorgame {
    get { if ((_hasBits0 & 131072) != 0) { return limitColorgame_; } else { return LimitColorgameDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      limitColorgame_ = value;
    }
  }
  /// <summary>Gets whether the "limit_colorgame" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitColorgame {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "limit_colorgame" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitColorgame() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 20;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 262144) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 21;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 524288) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "blind_limit_status" field.</summary>
  public const int BlindLimitStatusFieldNumber = 22;
  private readonly static bool BlindLimitStatusDefaultValue = false;

  private bool blindLimitStatus_;
  /// <summary>
  /// 1 表示有限制聯盟的可见牌桌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BlindLimitStatus {
    get { if ((_hasBits0 & 1048576) != 0) { return blindLimitStatus_; } else { return BlindLimitStatusDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      blindLimitStatus_ = value;
    }
  }
  /// <summary>Gets whether the "blind_limit_status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBlindLimitStatus {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "blind_limit_status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBlindLimitStatus() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "limit_info" field.</summary>
  public const int LimitInfoFieldNumber = 23;
  private static readonly pb::FieldCodec<global::BlindLimitInfo> _repeated_limitInfo_codec
      = pb::FieldCodec.ForMessage(186, global::BlindLimitInfo.Parser);
  private readonly pbc::RepeatedField<global::BlindLimitInfo> limitInfo_ = new pbc::RepeatedField<global::BlindLimitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::BlindLimitInfo> LimitInfo {
    get { return limitInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueMemberInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueMemberInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Leaguename != other.Leaguename) return false;
    if (IsBanned != other.IsBanned) return false;
    if (WarningLimitType != other.WarningLimitType) return false;
    if (WarningLimit != other.WarningLimit) return false;
    if (WeeklyProfit != other.WeeklyProfit) return false;
    if (DailyProfit != other.DailyProfit) return false;
    if (LuckydrawWeeklyProfit != other.LuckydrawWeeklyProfit) return false;
    if (LuckydrawDailyProfit != other.LuckydrawDailyProfit) return false;
    if (ColorgameWeeklyProfit != other.ColorgameWeeklyProfit) return false;
    if (ColorgameDailyProfit != other.ColorgameDailyProfit) return false;
    if (JackpotWeeklyProfit != other.JackpotWeeklyProfit) return false;
    if (JackpotDailyProfit != other.JackpotDailyProfit) return false;
    if (EvchopWeeklyProfit != other.EvchopWeeklyProfit) return false;
    if (EvchopDailyProfit != other.EvchopDailyProfit) return false;
    if (OthersWeeklyProfit != other.OthersWeeklyProfit) return false;
    if (OthersDailyProfit != other.OthersDailyProfit) return false;
    if (LimitLuckydraw != other.LimitLuckydraw) return false;
    if (LimitColorgame != other.LimitColorgame) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    if (BlindLimitStatus != other.BlindLimitStatus) return false;
    if(!limitInfo_.Equals(other.limitInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasLeaguename) hash ^= Leaguename.GetHashCode();
    if (HasIsBanned) hash ^= IsBanned.GetHashCode();
    if (HasWarningLimitType) hash ^= WarningLimitType.GetHashCode();
    if (HasWarningLimit) hash ^= WarningLimit.GetHashCode();
    if (HasWeeklyProfit) hash ^= WeeklyProfit.GetHashCode();
    if (HasDailyProfit) hash ^= DailyProfit.GetHashCode();
    if (HasLuckydrawWeeklyProfit) hash ^= LuckydrawWeeklyProfit.GetHashCode();
    if (HasLuckydrawDailyProfit) hash ^= LuckydrawDailyProfit.GetHashCode();
    if (HasColorgameWeeklyProfit) hash ^= ColorgameWeeklyProfit.GetHashCode();
    if (HasColorgameDailyProfit) hash ^= ColorgameDailyProfit.GetHashCode();
    if (HasJackpotWeeklyProfit) hash ^= JackpotWeeklyProfit.GetHashCode();
    if (HasJackpotDailyProfit) hash ^= JackpotDailyProfit.GetHashCode();
    if (HasEvchopWeeklyProfit) hash ^= EvchopWeeklyProfit.GetHashCode();
    if (HasEvchopDailyProfit) hash ^= EvchopDailyProfit.GetHashCode();
    if (HasOthersWeeklyProfit) hash ^= OthersWeeklyProfit.GetHashCode();
    if (HasOthersDailyProfit) hash ^= OthersDailyProfit.GetHashCode();
    if (HasLimitLuckydraw) hash ^= LimitLuckydraw.GetHashCode();
    if (HasLimitColorgame) hash ^= LimitColorgame.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (HasBlindLimitStatus) hash ^= BlindLimitStatus.GetHashCode();
    hash ^= limitInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(18);
      output.WriteString(Leaguename);
    }
    if (HasIsBanned) {
      output.WriteRawTag(24);
      output.WriteInt32(IsBanned);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(32);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(40);
      output.WriteInt64(WarningLimit);
    }
    if (HasWeeklyProfit) {
      output.WriteRawTag(48);
      output.WriteInt64(WeeklyProfit);
    }
    if (HasDailyProfit) {
      output.WriteRawTag(56);
      output.WriteInt64(DailyProfit);
    }
    if (HasLuckydrawWeeklyProfit) {
      output.WriteRawTag(64);
      output.WriteInt64(LuckydrawWeeklyProfit);
    }
    if (HasLuckydrawDailyProfit) {
      output.WriteRawTag(72);
      output.WriteInt64(LuckydrawDailyProfit);
    }
    if (HasColorgameWeeklyProfit) {
      output.WriteRawTag(80);
      output.WriteInt64(ColorgameWeeklyProfit);
    }
    if (HasColorgameDailyProfit) {
      output.WriteRawTag(88);
      output.WriteInt64(ColorgameDailyProfit);
    }
    if (HasJackpotWeeklyProfit) {
      output.WriteRawTag(96);
      output.WriteInt64(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      output.WriteRawTag(104);
      output.WriteInt64(JackpotDailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      output.WriteRawTag(112);
      output.WriteInt64(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      output.WriteRawTag(120);
      output.WriteInt64(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(OthersDailyProfit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(144, 1);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(152, 1);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(160, 1);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(168, 1);
      output.WriteBool(LimitEvchop);
    }
    if (HasBlindLimitStatus) {
      output.WriteRawTag(176, 1);
      output.WriteBool(BlindLimitStatus);
    }
    limitInfo_.WriteTo(output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(18);
      output.WriteString(Leaguename);
    }
    if (HasIsBanned) {
      output.WriteRawTag(24);
      output.WriteInt32(IsBanned);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(32);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(40);
      output.WriteInt64(WarningLimit);
    }
    if (HasWeeklyProfit) {
      output.WriteRawTag(48);
      output.WriteInt64(WeeklyProfit);
    }
    if (HasDailyProfit) {
      output.WriteRawTag(56);
      output.WriteInt64(DailyProfit);
    }
    if (HasLuckydrawWeeklyProfit) {
      output.WriteRawTag(64);
      output.WriteInt64(LuckydrawWeeklyProfit);
    }
    if (HasLuckydrawDailyProfit) {
      output.WriteRawTag(72);
      output.WriteInt64(LuckydrawDailyProfit);
    }
    if (HasColorgameWeeklyProfit) {
      output.WriteRawTag(80);
      output.WriteInt64(ColorgameWeeklyProfit);
    }
    if (HasColorgameDailyProfit) {
      output.WriteRawTag(88);
      output.WriteInt64(ColorgameDailyProfit);
    }
    if (HasJackpotWeeklyProfit) {
      output.WriteRawTag(96);
      output.WriteInt64(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      output.WriteRawTag(104);
      output.WriteInt64(JackpotDailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      output.WriteRawTag(112);
      output.WriteInt64(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      output.WriteRawTag(120);
      output.WriteInt64(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(OthersDailyProfit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(144, 1);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(152, 1);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(160, 1);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(168, 1);
      output.WriteBool(LimitEvchop);
    }
    if (HasBlindLimitStatus) {
      output.WriteRawTag(176, 1);
      output.WriteBool(BlindLimitStatus);
    }
    limitInfo_.WriteTo(ref output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasLeaguename) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Leaguename);
    }
    if (HasIsBanned) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBanned);
    }
    if (HasWarningLimitType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningLimitType);
    }
    if (HasWarningLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarningLimit);
    }
    if (HasWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WeeklyProfit);
    }
    if (HasDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DailyProfit);
    }
    if (HasLuckydrawWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LuckydrawWeeklyProfit);
    }
    if (HasLuckydrawDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LuckydrawDailyProfit);
    }
    if (HasColorgameWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ColorgameWeeklyProfit);
    }
    if (HasColorgameDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ColorgameDailyProfit);
    }
    if (HasJackpotWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotWeeklyProfit);
    }
    if (HasJackpotDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotDailyProfit);
    }
    if (HasEvchopWeeklyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EvchopWeeklyProfit);
    }
    if (HasEvchopDailyProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EvchopDailyProfit);
    }
    if (HasOthersWeeklyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OthersWeeklyProfit);
    }
    if (HasOthersDailyProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OthersDailyProfit);
    }
    if (HasLimitLuckydraw) {
      size += 2 + 1;
    }
    if (HasLimitColorgame) {
      size += 2 + 1;
    }
    if (HasLimitJackpot) {
      size += 2 + 1;
    }
    if (HasLimitEvchop) {
      size += 2 + 1;
    }
    if (HasBlindLimitStatus) {
      size += 2 + 1;
    }
    size += limitInfo_.CalculateSize(_repeated_limitInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueMemberInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasLeaguename) {
      Leaguename = other.Leaguename;
    }
    if (other.HasIsBanned) {
      IsBanned = other.IsBanned;
    }
    if (other.HasWarningLimitType) {
      WarningLimitType = other.WarningLimitType;
    }
    if (other.HasWarningLimit) {
      WarningLimit = other.WarningLimit;
    }
    if (other.HasWeeklyProfit) {
      WeeklyProfit = other.WeeklyProfit;
    }
    if (other.HasDailyProfit) {
      DailyProfit = other.DailyProfit;
    }
    if (other.HasLuckydrawWeeklyProfit) {
      LuckydrawWeeklyProfit = other.LuckydrawWeeklyProfit;
    }
    if (other.HasLuckydrawDailyProfit) {
      LuckydrawDailyProfit = other.LuckydrawDailyProfit;
    }
    if (other.HasColorgameWeeklyProfit) {
      ColorgameWeeklyProfit = other.ColorgameWeeklyProfit;
    }
    if (other.HasColorgameDailyProfit) {
      ColorgameDailyProfit = other.ColorgameDailyProfit;
    }
    if (other.HasJackpotWeeklyProfit) {
      JackpotWeeklyProfit = other.JackpotWeeklyProfit;
    }
    if (other.HasJackpotDailyProfit) {
      JackpotDailyProfit = other.JackpotDailyProfit;
    }
    if (other.HasEvchopWeeklyProfit) {
      EvchopWeeklyProfit = other.EvchopWeeklyProfit;
    }
    if (other.HasEvchopDailyProfit) {
      EvchopDailyProfit = other.EvchopDailyProfit;
    }
    if (other.HasOthersWeeklyProfit) {
      OthersWeeklyProfit = other.OthersWeeklyProfit;
    }
    if (other.HasOthersDailyProfit) {
      OthersDailyProfit = other.OthersDailyProfit;
    }
    if (other.HasLimitLuckydraw) {
      LimitLuckydraw = other.LimitLuckydraw;
    }
    if (other.HasLimitColorgame) {
      LimitColorgame = other.LimitColorgame;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    if (other.HasBlindLimitStatus) {
      BlindLimitStatus = other.BlindLimitStatus;
    }
    limitInfo_.Add(other.limitInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Leaguename = input.ReadString();
          break;
        }
        case 24: {
          IsBanned = input.ReadInt32();
          break;
        }
        case 32: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 40: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 48: {
          WeeklyProfit = input.ReadInt64();
          break;
        }
        case 56: {
          DailyProfit = input.ReadInt64();
          break;
        }
        case 64: {
          LuckydrawWeeklyProfit = input.ReadInt64();
          break;
        }
        case 72: {
          LuckydrawDailyProfit = input.ReadInt64();
          break;
        }
        case 80: {
          ColorgameWeeklyProfit = input.ReadInt64();
          break;
        }
        case 88: {
          ColorgameDailyProfit = input.ReadInt64();
          break;
        }
        case 96: {
          JackpotWeeklyProfit = input.ReadInt64();
          break;
        }
        case 104: {
          JackpotDailyProfit = input.ReadInt64();
          break;
        }
        case 112: {
          EvchopWeeklyProfit = input.ReadInt64();
          break;
        }
        case 120: {
          EvchopDailyProfit = input.ReadInt64();
          break;
        }
        case 128: {
          OthersWeeklyProfit = input.ReadInt64();
          break;
        }
        case 136: {
          OthersDailyProfit = input.ReadInt64();
          break;
        }
        case 144: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 152: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 160: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 168: {
          LimitEvchop = input.ReadBool();
          break;
        }
        case 176: {
          BlindLimitStatus = input.ReadBool();
          break;
        }
        case 186: {
          limitInfo_.AddEntriesFrom(input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Leaguename = input.ReadString();
          break;
        }
        case 24: {
          IsBanned = input.ReadInt32();
          break;
        }
        case 32: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 40: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 48: {
          WeeklyProfit = input.ReadInt64();
          break;
        }
        case 56: {
          DailyProfit = input.ReadInt64();
          break;
        }
        case 64: {
          LuckydrawWeeklyProfit = input.ReadInt64();
          break;
        }
        case 72: {
          LuckydrawDailyProfit = input.ReadInt64();
          break;
        }
        case 80: {
          ColorgameWeeklyProfit = input.ReadInt64();
          break;
        }
        case 88: {
          ColorgameDailyProfit = input.ReadInt64();
          break;
        }
        case 96: {
          JackpotWeeklyProfit = input.ReadInt64();
          break;
        }
        case 104: {
          JackpotDailyProfit = input.ReadInt64();
          break;
        }
        case 112: {
          EvchopWeeklyProfit = input.ReadInt64();
          break;
        }
        case 120: {
          EvchopDailyProfit = input.ReadInt64();
          break;
        }
        case 128: {
          OthersWeeklyProfit = input.ReadInt64();
          break;
        }
        case 136: {
          OthersDailyProfit = input.ReadInt64();
          break;
        }
        case 144: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 152: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 160: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 168: {
          LimitEvchop = input.ReadBool();
          break;
        }
        case 176: {
          BlindLimitStatus = input.ReadBool();
          break;
        }
        case 186: {
          limitInfo_.AddEntriesFrom(ref input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueMemberREQ : pb::IMessage<SuperLeagueMemberREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueMemberREQ> _parser = new pb::MessageParser<SuperLeagueMemberREQ>(() => new SuperLeagueMemberREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueMemberREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberREQ(SuperLeagueMemberREQ other) : this() {
    _hasBits0 = other._hasBits0;
    superleagueid_ = other.superleagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberREQ Clone() {
    return new SuperLeagueMemberREQ(this);
  }

  /// <summary>Field number for the "superleagueid" field.</summary>
  public const int SuperleagueidFieldNumber = 1;
  private readonly static int SuperleagueidDefaultValue = 0;

  private int superleagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Superleagueid {
    get { if ((_hasBits0 & 1) != 0) { return superleagueid_; } else { return SuperleagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      superleagueid_ = value;
    }
  }
  /// <summary>Gets whether the "superleagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperleagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "superleagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperleagueid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueMemberREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueMemberREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Superleagueid != other.Superleagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSuperleagueid) hash ^= Superleagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSuperleagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Superleagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueMemberREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasSuperleagueid) {
      Superleagueid = other.Superleagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueMemberRSP : pb::IMessage<SuperLeagueMemberRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueMemberRSP> _parser = new pb::MessageParser<SuperLeagueMemberRSP>(() => new SuperLeagueMemberRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueMemberRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberRSP(SuperLeagueMemberRSP other) : this() {
    _hasBits0 = other._hasBits0;
    superleagueid_ = other.superleagueid_;
    deficitWarningEnable_ = other.deficitWarningEnable_;
    info_ = other.info_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberRSP Clone() {
    return new SuperLeagueMemberRSP(this);
  }

  /// <summary>Field number for the "superleagueid" field.</summary>
  public const int SuperleagueidFieldNumber = 1;
  private readonly static int SuperleagueidDefaultValue = 0;

  private int superleagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Superleagueid {
    get { if ((_hasBits0 & 1) != 0) { return superleagueid_; } else { return SuperleagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      superleagueid_ = value;
    }
  }
  /// <summary>Gets whether the "superleagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperleagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "superleagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperleagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "deficit_warning_enable" field.</summary>
  public const int DeficitWarningEnableFieldNumber = 2;
  private readonly static bool DeficitWarningEnableDefaultValue = false;

  private bool deficitWarningEnable_;
  /// <summary>
  ///true: on, false: off
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DeficitWarningEnable {
    get { if ((_hasBits0 & 2) != 0) { return deficitWarningEnable_; } else { return DeficitWarningEnableDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deficitWarningEnable_ = value;
    }
  }
  /// <summary>Gets whether the "deficit_warning_enable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeficitWarningEnable {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "deficit_warning_enable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeficitWarningEnable() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::SuperLeagueMemberInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(26, global::SuperLeagueMemberInfo.Parser);
  private readonly pbc::RepeatedField<global::SuperLeagueMemberInfo> info_ = new pbc::RepeatedField<global::SuperLeagueMemberInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::SuperLeagueMemberInfo> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueMemberRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueMemberRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Superleagueid != other.Superleagueid) return false;
    if (DeficitWarningEnable != other.DeficitWarningEnable) return false;
    if(!info_.Equals(other.info_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSuperleagueid) hash ^= Superleagueid.GetHashCode();
    if (HasDeficitWarningEnable) hash ^= DeficitWarningEnable.GetHashCode();
    hash ^= info_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (HasDeficitWarningEnable) {
      output.WriteRawTag(16);
      output.WriteBool(DeficitWarningEnable);
    }
    info_.WriteTo(output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (HasDeficitWarningEnable) {
      output.WriteRawTag(16);
      output.WriteBool(DeficitWarningEnable);
    }
    info_.WriteTo(ref output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSuperleagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Superleagueid);
    }
    if (HasDeficitWarningEnable) {
      size += 1 + 1;
    }
    size += info_.CalculateSize(_repeated_info_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueMemberRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasSuperleagueid) {
      Superleagueid = other.Superleagueid;
    }
    if (other.HasDeficitWarningEnable) {
      DeficitWarningEnable = other.DeficitWarningEnable;
    }
    info_.Add(other.info_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
        case 16: {
          DeficitWarningEnable = input.ReadBool();
          break;
        }
        case 26: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
        case 16: {
          DeficitWarningEnable = input.ReadBool();
          break;
        }
        case 26: {
          info_.AddEntriesFrom(ref input, _repeated_info_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// set autoban config
/// </summary>
public sealed partial class LeagueAutoBanREQ : pb::IMessage<LeagueAutoBanREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueAutoBanREQ> _parser = new pb::MessageParser<LeagueAutoBanREQ>(() => new LeagueAutoBanREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueAutoBanREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueAutoBanREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueAutoBanREQ(LeagueAutoBanREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    type_ = other.type_;
    enable_ = other.enable_;
    clubid_ = other.clubid_;
    timetype_ = other.timetype_;
    limit_ = other.limit_;
    limitLuckydraw_ = other.limitLuckydraw_;
    limitColorgame_ = other.limitColorgame_;
    limitJackpot_ = other.limitJackpot_;
    limitEvchop_ = other.limitEvchop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueAutoBanREQ Clone() {
    return new LeagueAutoBanREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private readonly static int TypeDefaultValue = 0;

  private int type_;
  /// <summary>
  /// req type: 0: config enable; 1:config club
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 3;
  private readonly static bool EnableDefaultValue = false;

  private bool enable_;
  /// <summary>
  /// enable autoban
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enable {
    get { if ((_hasBits0 & 4) != 0) { return enable_; } else { return EnableDefaultValue; } }
    set {
      _hasBits0 |= 4;
      enable_ = value;
    }
  }
  /// <summary>Gets whether the "enable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnable {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "enable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnable() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 4;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  /// <summary>
  /// type:1 need
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "timetype" field.</summary>
  public const int TimetypeFieldNumber = 5;
  private readonly static int TimetypeDefaultValue = 0;

  private int timetype_;
  /// <summary>
  /// type:1 need. autoban_type: week, day
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Timetype {
    get { if ((_hasBits0 & 8) != 0) { return timetype_; } else { return TimetypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      timetype_ = value;
    }
  }
  /// <summary>Gets whether the "timetype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimetype {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "timetype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimetype() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 6;
  private readonly static long LimitDefaultValue = 0L;

  private long limit_;
  /// <summary>
  /// type:1 need. autoban_limit: 0: no limit
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Limit {
    get { if ((_hasBits0 & 16) != 0) { return limit_; } else { return LimitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      limit_ = value;
    }
  }
  /// <summary>Gets whether the "limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "limit_luckydraw" field.</summary>
  public const int LimitLuckydrawFieldNumber = 7;
  private readonly static bool LimitLuckydrawDefaultValue = false;

  private bool limitLuckydraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitLuckydraw {
    get { if ((_hasBits0 & 32) != 0) { return limitLuckydraw_; } else { return LimitLuckydrawDefaultValue; } }
    set {
      _hasBits0 |= 32;
      limitLuckydraw_ = value;
    }
  }
  /// <summary>Gets whether the "limit_luckydraw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitLuckydraw {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "limit_luckydraw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitLuckydraw() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "limit_colorgame" field.</summary>
  public const int LimitColorgameFieldNumber = 8;
  private readonly static bool LimitColorgameDefaultValue = false;

  private bool limitColorgame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitColorgame {
    get { if ((_hasBits0 & 64) != 0) { return limitColorgame_; } else { return LimitColorgameDefaultValue; } }
    set {
      _hasBits0 |= 64;
      limitColorgame_ = value;
    }
  }
  /// <summary>Gets whether the "limit_colorgame" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitColorgame {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "limit_colorgame" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitColorgame() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 9;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 128) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 128;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 10;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 256) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 256;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueAutoBanREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueAutoBanREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Type != other.Type) return false;
    if (Enable != other.Enable) return false;
    if (Clubid != other.Clubid) return false;
    if (Timetype != other.Timetype) return false;
    if (Limit != other.Limit) return false;
    if (LimitLuckydraw != other.LimitLuckydraw) return false;
    if (LimitColorgame != other.LimitColorgame) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasEnable) hash ^= Enable.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasTimetype) hash ^= Timetype.GetHashCode();
    if (HasLimit) hash ^= Limit.GetHashCode();
    if (HasLimitLuckydraw) hash ^= LimitLuckydraw.GetHashCode();
    if (HasLimitColorgame) hash ^= LimitColorgame.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (HasEnable) {
      output.WriteRawTag(24);
      output.WriteBool(Enable);
    }
    if (HasClubid) {
      output.WriteRawTag(34);
      output.WriteString(Clubid);
    }
    if (HasTimetype) {
      output.WriteRawTag(40);
      output.WriteInt32(Timetype);
    }
    if (HasLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(Limit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(56);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(64);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(72);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(80);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (HasEnable) {
      output.WriteRawTag(24);
      output.WriteBool(Enable);
    }
    if (HasClubid) {
      output.WriteRawTag(34);
      output.WriteString(Clubid);
    }
    if (HasTimetype) {
      output.WriteRawTag(40);
      output.WriteInt32(Timetype);
    }
    if (HasLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(Limit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(56);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(64);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(72);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(80);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (HasEnable) {
      size += 1 + 1;
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasTimetype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timetype);
    }
    if (HasLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
    }
    if (HasLimitLuckydraw) {
      size += 1 + 1;
    }
    if (HasLimitColorgame) {
      size += 1 + 1;
    }
    if (HasLimitJackpot) {
      size += 1 + 1;
    }
    if (HasLimitEvchop) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueAutoBanREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasEnable) {
      Enable = other.Enable;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasTimetype) {
      Timetype = other.Timetype;
    }
    if (other.HasLimit) {
      Limit = other.Limit;
    }
    if (other.HasLimitLuckydraw) {
      LimitLuckydraw = other.LimitLuckydraw;
    }
    if (other.HasLimitColorgame) {
      LimitColorgame = other.LimitColorgame;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Enable = input.ReadBool();
          break;
        }
        case 34: {
          Clubid = input.ReadString();
          break;
        }
        case 40: {
          Timetype = input.ReadInt32();
          break;
        }
        case 48: {
          Limit = input.ReadInt64();
          break;
        }
        case 56: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 64: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 72: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 80: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Enable = input.ReadBool();
          break;
        }
        case 34: {
          Clubid = input.ReadString();
          break;
        }
        case 40: {
          Timetype = input.ReadInt32();
          break;
        }
        case 48: {
          Limit = input.ReadInt64();
          break;
        }
        case 56: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 64: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 72: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 80: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueAutoBanRSP : pb::IMessage<LeagueAutoBanRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueAutoBanRSP> _parser = new pb::MessageParser<LeagueAutoBanRSP>(() => new LeagueAutoBanRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueAutoBanRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueAutoBanRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueAutoBanRSP(LeagueAutoBanRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    type_ = other.type_;
    code_ = other.code_;
    clubid_ = other.clubid_;
    timetype_ = other.timetype_;
    limit_ = other.limit_;
    limitLuckydraw_ = other.limitLuckydraw_;
    limitColorgame_ = other.limitColorgame_;
    limitJackpot_ = other.limitJackpot_;
    limitEvchop_ = other.limitEvchop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueAutoBanRSP Clone() {
    return new LeagueAutoBanRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  /// <summary>
  /// copy from req
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private readonly static int TypeDefaultValue = 0;

  private int type_;
  /// <summary>
  /// copy from req
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 0: success; -3: clubid no in leaguea; -2: auth fail; -1: error; -4:club baned; -5: clubid owner
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 4) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 4;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  /// <summary>
  /// copy from req
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "timetype" field.</summary>
  public const int TimetypeFieldNumber = 5;
  private readonly static int TimetypeDefaultValue = 0;

  private int timetype_;
  /// <summary>
  /// copy from req
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Timetype {
    get { if ((_hasBits0 & 8) != 0) { return timetype_; } else { return TimetypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      timetype_ = value;
    }
  }
  /// <summary>Gets whether the "timetype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimetype {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "timetype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimetype() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 6;
  private readonly static long LimitDefaultValue = 0L;

  private long limit_;
  /// <summary>
  /// copy from req
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Limit {
    get { if ((_hasBits0 & 16) != 0) { return limit_; } else { return LimitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      limit_ = value;
    }
  }
  /// <summary>Gets whether the "limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "limit_luckydraw" field.</summary>
  public const int LimitLuckydrawFieldNumber = 7;
  private readonly static bool LimitLuckydrawDefaultValue = false;

  private bool limitLuckydraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitLuckydraw {
    get { if ((_hasBits0 & 32) != 0) { return limitLuckydraw_; } else { return LimitLuckydrawDefaultValue; } }
    set {
      _hasBits0 |= 32;
      limitLuckydraw_ = value;
    }
  }
  /// <summary>Gets whether the "limit_luckydraw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitLuckydraw {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "limit_luckydraw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitLuckydraw() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "limit_colorgame" field.</summary>
  public const int LimitColorgameFieldNumber = 8;
  private readonly static bool LimitColorgameDefaultValue = false;

  private bool limitColorgame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitColorgame {
    get { if ((_hasBits0 & 64) != 0) { return limitColorgame_; } else { return LimitColorgameDefaultValue; } }
    set {
      _hasBits0 |= 64;
      limitColorgame_ = value;
    }
  }
  /// <summary>Gets whether the "limit_colorgame" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitColorgame {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "limit_colorgame" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitColorgame() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 9;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 128) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 128;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 10;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 256) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 256;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueAutoBanRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueAutoBanRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Type != other.Type) return false;
    if (Code != other.Code) return false;
    if (Clubid != other.Clubid) return false;
    if (Timetype != other.Timetype) return false;
    if (Limit != other.Limit) return false;
    if (LimitLuckydraw != other.LimitLuckydraw) return false;
    if (LimitColorgame != other.LimitColorgame) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasTimetype) hash ^= Timetype.GetHashCode();
    if (HasLimit) hash ^= Limit.GetHashCode();
    if (HasLimitLuckydraw) hash ^= LimitLuckydraw.GetHashCode();
    if (HasLimitColorgame) hash ^= LimitColorgame.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (HasClubid) {
      output.WriteRawTag(34);
      output.WriteString(Clubid);
    }
    if (HasTimetype) {
      output.WriteRawTag(40);
      output.WriteInt32(Timetype);
    }
    if (HasLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(Limit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(56);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(64);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(72);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(80);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (HasClubid) {
      output.WriteRawTag(34);
      output.WriteString(Clubid);
    }
    if (HasTimetype) {
      output.WriteRawTag(40);
      output.WriteInt32(Timetype);
    }
    if (HasLimit) {
      output.WriteRawTag(48);
      output.WriteInt64(Limit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(56);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(64);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(72);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(80);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasTimetype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timetype);
    }
    if (HasLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
    }
    if (HasLimitLuckydraw) {
      size += 1 + 1;
    }
    if (HasLimitColorgame) {
      size += 1 + 1;
    }
    if (HasLimitJackpot) {
      size += 1 + 1;
    }
    if (HasLimitEvchop) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueAutoBanRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasTimetype) {
      Timetype = other.Timetype;
    }
    if (other.HasLimit) {
      Limit = other.Limit;
    }
    if (other.HasLimitLuckydraw) {
      LimitLuckydraw = other.LimitLuckydraw;
    }
    if (other.HasLimitColorgame) {
      LimitColorgame = other.LimitColorgame;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
        case 34: {
          Clubid = input.ReadString();
          break;
        }
        case 40: {
          Timetype = input.ReadInt32();
          break;
        }
        case 48: {
          Limit = input.ReadInt64();
          break;
        }
        case 56: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 64: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 72: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 80: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
        case 34: {
          Clubid = input.ReadString();
          break;
        }
        case 40: {
          Timetype = input.ReadInt32();
          break;
        }
        case 48: {
          Limit = input.ReadInt64();
          break;
        }
        case 56: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 64: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 72: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 80: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRDeficitWarningREQ : pb::IMessage<PPSRDeficitWarningREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRDeficitWarningREQ> _parser = new pb::MessageParser<PPSRDeficitWarningREQ>(() => new PPSRDeficitWarningREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRDeficitWarningREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRDeficitWarningREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRDeficitWarningREQ(PPSRDeficitWarningREQ other) : this() {
    _hasBits0 = other._hasBits0;
    ppsrid_ = other.ppsrid_;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRDeficitWarningREQ Clone() {
    return new PPSRDeficitWarningREQ(this);
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 1;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 1) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 2;
  private readonly static bool EnableDefaultValue = false;

  private bool enable_;
  /// <summary>
  ///0: off, 1: on
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enable {
    get { if ((_hasBits0 & 2) != 0) { return enable_; } else { return EnableDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enable_ = value;
    }
  }
  /// <summary>Gets whether the "enable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnable {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnable() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRDeficitWarningREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRDeficitWarningREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ppsrid != other.Ppsrid) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (HasEnable) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (HasEnable) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (HasEnable) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (HasEnable) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRDeficitWarningREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    if (other.HasEnable) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRDeficitWarningRSP : pb::IMessage<PPSRDeficitWarningRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRDeficitWarningRSP> _parser = new pb::MessageParser<PPSRDeficitWarningRSP>(() => new PPSRDeficitWarningRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRDeficitWarningRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRDeficitWarningRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRDeficitWarningRSP(PPSRDeficitWarningRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRDeficitWarningRSP Clone() {
    return new PPSRDeficitWarningRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  ///0: succeed, -1: fail
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRDeficitWarningRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRDeficitWarningRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRDeficitWarningRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRMemberWarningLimitREQ : pb::IMessage<PPSRMemberWarningLimitREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRMemberWarningLimitREQ> _parser = new pb::MessageParser<PPSRMemberWarningLimitREQ>(() => new PPSRMemberWarningLimitREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRMemberWarningLimitREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberWarningLimitREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberWarningLimitREQ(PPSRMemberWarningLimitREQ other) : this() {
    _hasBits0 = other._hasBits0;
    ppsrid_ = other.ppsrid_;
    leaguetype_ = other.leaguetype_;
    leagueid_ = other.leagueid_;
    warningLimitType_ = other.warningLimitType_;
    warningLimit_ = other.warningLimit_;
    limitEvchop_ = other.limitEvchop_;
    limitJackpot_ = other.limitJackpot_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberWarningLimitREQ Clone() {
    return new PPSRMemberWarningLimitREQ(this);
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 1;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 1) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leaguetype" field.</summary>
  public const int LeaguetypeFieldNumber = 2;
  private readonly static int LeaguetypeDefaultValue = 0;

  private int leaguetype_;
  /// <summary>
  ///0: superleague, 1: league
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leaguetype {
    get { if ((_hasBits0 & 2) != 0) { return leaguetype_; } else { return LeaguetypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leaguetype_ = value;
    }
  }
  /// <summary>Gets whether the "leaguetype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguetype {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leaguetype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguetype() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 3;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 4;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "warning_limit_type" field.</summary>
  public const int WarningLimitTypeFieldNumber = 4;
  private readonly static int WarningLimitTypeDefaultValue = 0;

  private int warningLimitType_;
  /// <summary>
  ///0: weekly, 1: daily
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int WarningLimitType {
    get { if ((_hasBits0 & 8) != 0) { return warningLimitType_; } else { return WarningLimitTypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      warningLimitType_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimitType {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimitType() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "warning_limit" field.</summary>
  public const int WarningLimitFieldNumber = 5;
  private readonly static long WarningLimitDefaultValue = 0L;

  private long warningLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long WarningLimit {
    get { if ((_hasBits0 & 16) != 0) { return warningLimit_; } else { return WarningLimitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      warningLimit_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 6;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 32) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 32;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 7;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 64) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 64;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRMemberWarningLimitREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRMemberWarningLimitREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ppsrid != other.Ppsrid) return false;
    if (Leaguetype != other.Leaguetype) return false;
    if (Leagueid != other.Leagueid) return false;
    if (WarningLimitType != other.WarningLimitType) return false;
    if (WarningLimit != other.WarningLimit) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (HasLeaguetype) hash ^= Leaguetype.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasWarningLimitType) hash ^= WarningLimitType.GetHashCode();
    if (HasWarningLimit) hash ^= WarningLimit.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (HasLeaguetype) {
      output.WriteRawTag(16);
      output.WriteInt32(Leaguetype);
    }
    if (HasLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(Leagueid);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(32);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(40);
      output.WriteInt64(WarningLimit);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(48);
      output.WriteBool(LimitEvchop);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(56);
      output.WriteBool(LimitJackpot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPpsrid) {
      output.WriteRawTag(8);
      output.WriteInt32(Ppsrid);
    }
    if (HasLeaguetype) {
      output.WriteRawTag(16);
      output.WriteInt32(Leaguetype);
    }
    if (HasLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(Leagueid);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(32);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(40);
      output.WriteInt64(WarningLimit);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(48);
      output.WriteBool(LimitEvchop);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(56);
      output.WriteBool(LimitJackpot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (HasLeaguetype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leaguetype);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasWarningLimitType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningLimitType);
    }
    if (HasWarningLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarningLimit);
    }
    if (HasLimitEvchop) {
      size += 1 + 1;
    }
    if (HasLimitJackpot) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRMemberWarningLimitREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    if (other.HasLeaguetype) {
      Leaguetype = other.Leaguetype;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasWarningLimitType) {
      WarningLimitType = other.WarningLimitType;
    }
    if (other.HasWarningLimit) {
      WarningLimit = other.WarningLimit;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 16: {
          Leaguetype = input.ReadInt32();
          break;
        }
        case 24: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 32: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 40: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 48: {
          LimitEvchop = input.ReadBool();
          break;
        }
        case 56: {
          LimitJackpot = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Ppsrid = input.ReadInt32();
          break;
        }
        case 16: {
          Leaguetype = input.ReadInt32();
          break;
        }
        case 24: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 32: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 40: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 48: {
          LimitEvchop = input.ReadBool();
          break;
        }
        case 56: {
          LimitJackpot = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class PPSRMemberWarningLimitRSP : pb::IMessage<PPSRMemberWarningLimitRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PPSRMemberWarningLimitRSP> _parser = new pb::MessageParser<PPSRMemberWarningLimitRSP>(() => new PPSRMemberWarningLimitRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PPSRMemberWarningLimitRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberWarningLimitRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberWarningLimitRSP(PPSRMemberWarningLimitRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PPSRMemberWarningLimitRSP Clone() {
    return new PPSRMemberWarningLimitRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 0: succeed, -1: fail
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PPSRMemberWarningLimitRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PPSRMemberWarningLimitRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PPSRMemberWarningLimitRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueDeficitWarningREQ : pb::IMessage<SuperLeagueDeficitWarningREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueDeficitWarningREQ> _parser = new pb::MessageParser<SuperLeagueDeficitWarningREQ>(() => new SuperLeagueDeficitWarningREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueDeficitWarningREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueDeficitWarningREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueDeficitWarningREQ(SuperLeagueDeficitWarningREQ other) : this() {
    _hasBits0 = other._hasBits0;
    superleagueid_ = other.superleagueid_;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueDeficitWarningREQ Clone() {
    return new SuperLeagueDeficitWarningREQ(this);
  }

  /// <summary>Field number for the "superleagueid" field.</summary>
  public const int SuperleagueidFieldNumber = 1;
  private readonly static int SuperleagueidDefaultValue = 0;

  private int superleagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Superleagueid {
    get { if ((_hasBits0 & 1) != 0) { return superleagueid_; } else { return SuperleagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      superleagueid_ = value;
    }
  }
  /// <summary>Gets whether the "superleagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperleagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "superleagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperleagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 2;
  private readonly static bool EnableDefaultValue = false;

  private bool enable_;
  /// <summary>
  ///0: off, 1: on
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enable {
    get { if ((_hasBits0 & 2) != 0) { return enable_; } else { return EnableDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enable_ = value;
    }
  }
  /// <summary>Gets whether the "enable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnable {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnable() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueDeficitWarningREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueDeficitWarningREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Superleagueid != other.Superleagueid) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSuperleagueid) hash ^= Superleagueid.GetHashCode();
    if (HasEnable) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (HasEnable) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (HasEnable) {
      output.WriteRawTag(16);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSuperleagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Superleagueid);
    }
    if (HasEnable) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueDeficitWarningREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasSuperleagueid) {
      Superleagueid = other.Superleagueid;
    }
    if (other.HasEnable) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueDeficitWarningRSP : pb::IMessage<SuperLeagueDeficitWarningRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueDeficitWarningRSP> _parser = new pb::MessageParser<SuperLeagueDeficitWarningRSP>(() => new SuperLeagueDeficitWarningRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueDeficitWarningRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueDeficitWarningRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueDeficitWarningRSP(SuperLeagueDeficitWarningRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueDeficitWarningRSP Clone() {
    return new SuperLeagueDeficitWarningRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static bool CodeDefaultValue = false;

  private bool code_;
  /// <summary>
  /// 0: succeed, -1: fail
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueDeficitWarningRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueDeficitWarningRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteBool(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteBool(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueDeficitWarningRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueMemberWarningLimitREQ : pb::IMessage<SuperLeagueMemberWarningLimitREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueMemberWarningLimitREQ> _parser = new pb::MessageParser<SuperLeagueMemberWarningLimitREQ>(() => new SuperLeagueMemberWarningLimitREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueMemberWarningLimitREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberWarningLimitREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberWarningLimitREQ(SuperLeagueMemberWarningLimitREQ other) : this() {
    _hasBits0 = other._hasBits0;
    superleagueid_ = other.superleagueid_;
    leagueid_ = other.leagueid_;
    warningLimitType_ = other.warningLimitType_;
    warningLimit_ = other.warningLimit_;
    limitLuckydraw_ = other.limitLuckydraw_;
    limitColorgame_ = other.limitColorgame_;
    limitJackpot_ = other.limitJackpot_;
    limitEvchop_ = other.limitEvchop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberWarningLimitREQ Clone() {
    return new SuperLeagueMemberWarningLimitREQ(this);
  }

  /// <summary>Field number for the "superleagueid" field.</summary>
  public const int SuperleagueidFieldNumber = 1;
  private readonly static int SuperleagueidDefaultValue = 0;

  private int superleagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Superleagueid {
    get { if ((_hasBits0 & 1) != 0) { return superleagueid_; } else { return SuperleagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      superleagueid_ = value;
    }
  }
  /// <summary>Gets whether the "superleagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperleagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "superleagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperleagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "warning_limit_type" field.</summary>
  public const int WarningLimitTypeFieldNumber = 3;
  private readonly static int WarningLimitTypeDefaultValue = 0;

  private int warningLimitType_;
  /// <summary>
  ///0: weekly, 1: daily
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int WarningLimitType {
    get { if ((_hasBits0 & 4) != 0) { return warningLimitType_; } else { return WarningLimitTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      warningLimitType_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimitType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimitType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "warning_limit" field.</summary>
  public const int WarningLimitFieldNumber = 4;
  private readonly static long WarningLimitDefaultValue = 0L;

  private long warningLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long WarningLimit {
    get { if ((_hasBits0 & 8) != 0) { return warningLimit_; } else { return WarningLimitDefaultValue; } }
    set {
      _hasBits0 |= 8;
      warningLimit_ = value;
    }
  }
  /// <summary>Gets whether the "warning_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWarningLimit {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "warning_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWarningLimit() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "limit_luckydraw" field.</summary>
  public const int LimitLuckydrawFieldNumber = 5;
  private readonly static bool LimitLuckydrawDefaultValue = false;

  private bool limitLuckydraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitLuckydraw {
    get { if ((_hasBits0 & 16) != 0) { return limitLuckydraw_; } else { return LimitLuckydrawDefaultValue; } }
    set {
      _hasBits0 |= 16;
      limitLuckydraw_ = value;
    }
  }
  /// <summary>Gets whether the "limit_luckydraw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitLuckydraw {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "limit_luckydraw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitLuckydraw() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "limit_colorgame" field.</summary>
  public const int LimitColorgameFieldNumber = 6;
  private readonly static bool LimitColorgameDefaultValue = false;

  private bool limitColorgame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitColorgame {
    get { if ((_hasBits0 & 32) != 0) { return limitColorgame_; } else { return LimitColorgameDefaultValue; } }
    set {
      _hasBits0 |= 32;
      limitColorgame_ = value;
    }
  }
  /// <summary>Gets whether the "limit_colorgame" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitColorgame {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "limit_colorgame" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitColorgame() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "limit_jackpot" field.</summary>
  public const int LimitJackpotFieldNumber = 7;
  private readonly static bool LimitJackpotDefaultValue = false;

  private bool limitJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitJackpot {
    get { if ((_hasBits0 & 64) != 0) { return limitJackpot_; } else { return LimitJackpotDefaultValue; } }
    set {
      _hasBits0 |= 64;
      limitJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "limit_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitJackpot {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "limit_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitJackpot() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "limit_evchop" field.</summary>
  public const int LimitEvchopFieldNumber = 8;
  private readonly static bool LimitEvchopDefaultValue = false;

  private bool limitEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LimitEvchop {
    get { if ((_hasBits0 & 128) != 0) { return limitEvchop_; } else { return LimitEvchopDefaultValue; } }
    set {
      _hasBits0 |= 128;
      limitEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "limit_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitEvchop {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "limit_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitEvchop() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueMemberWarningLimitREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueMemberWarningLimitREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Superleagueid != other.Superleagueid) return false;
    if (Leagueid != other.Leagueid) return false;
    if (WarningLimitType != other.WarningLimitType) return false;
    if (WarningLimit != other.WarningLimit) return false;
    if (LimitLuckydraw != other.LimitLuckydraw) return false;
    if (LimitColorgame != other.LimitColorgame) return false;
    if (LimitJackpot != other.LimitJackpot) return false;
    if (LimitEvchop != other.LimitEvchop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSuperleagueid) hash ^= Superleagueid.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasWarningLimitType) hash ^= WarningLimitType.GetHashCode();
    if (HasWarningLimit) hash ^= WarningLimit.GetHashCode();
    if (HasLimitLuckydraw) hash ^= LimitLuckydraw.GetHashCode();
    if (HasLimitColorgame) hash ^= LimitColorgame.GetHashCode();
    if (HasLimitJackpot) hash ^= LimitJackpot.GetHashCode();
    if (HasLimitEvchop) hash ^= LimitEvchop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(24);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(32);
      output.WriteInt64(WarningLimit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(40);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(48);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(56);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(64);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSuperleagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Superleagueid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasWarningLimitType) {
      output.WriteRawTag(24);
      output.WriteInt32(WarningLimitType);
    }
    if (HasWarningLimit) {
      output.WriteRawTag(32);
      output.WriteInt64(WarningLimit);
    }
    if (HasLimitLuckydraw) {
      output.WriteRawTag(40);
      output.WriteBool(LimitLuckydraw);
    }
    if (HasLimitColorgame) {
      output.WriteRawTag(48);
      output.WriteBool(LimitColorgame);
    }
    if (HasLimitJackpot) {
      output.WriteRawTag(56);
      output.WriteBool(LimitJackpot);
    }
    if (HasLimitEvchop) {
      output.WriteRawTag(64);
      output.WriteBool(LimitEvchop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSuperleagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Superleagueid);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasWarningLimitType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningLimitType);
    }
    if (HasWarningLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarningLimit);
    }
    if (HasLimitLuckydraw) {
      size += 1 + 1;
    }
    if (HasLimitColorgame) {
      size += 1 + 1;
    }
    if (HasLimitJackpot) {
      size += 1 + 1;
    }
    if (HasLimitEvchop) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueMemberWarningLimitREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasSuperleagueid) {
      Superleagueid = other.Superleagueid;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasWarningLimitType) {
      WarningLimitType = other.WarningLimitType;
    }
    if (other.HasWarningLimit) {
      WarningLimit = other.WarningLimit;
    }
    if (other.HasLimitLuckydraw) {
      LimitLuckydraw = other.LimitLuckydraw;
    }
    if (other.HasLimitColorgame) {
      LimitColorgame = other.LimitColorgame;
    }
    if (other.HasLimitJackpot) {
      LimitJackpot = other.LimitJackpot;
    }
    if (other.HasLimitEvchop) {
      LimitEvchop = other.LimitEvchop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 24: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 32: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 40: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 48: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 56: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 64: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Superleagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 24: {
          WarningLimitType = input.ReadInt32();
          break;
        }
        case 32: {
          WarningLimit = input.ReadInt64();
          break;
        }
        case 40: {
          LimitLuckydraw = input.ReadBool();
          break;
        }
        case 48: {
          LimitColorgame = input.ReadBool();
          break;
        }
        case 56: {
          LimitJackpot = input.ReadBool();
          break;
        }
        case 64: {
          LimitEvchop = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueMemberWarningLimitRSP : pb::IMessage<SuperLeagueMemberWarningLimitRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueMemberWarningLimitRSP> _parser = new pb::MessageParser<SuperLeagueMemberWarningLimitRSP>(() => new SuperLeagueMemberWarningLimitRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueMemberWarningLimitRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberWarningLimitRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberWarningLimitRSP(SuperLeagueMemberWarningLimitRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueMemberWarningLimitRSP Clone() {
    return new SuperLeagueMemberWarningLimitRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 0: succeed, -1: fail
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueMemberWarningLimitRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueMemberWarningLimitRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueMemberWarningLimitRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueDataREQ : pb::IMessage<LeagueDataREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueDataREQ> _parser = new pb::MessageParser<LeagueDataREQ>(() => new LeagueDataREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueDataREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataREQ(LeagueDataREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    lastWeekBeginDay_ = other.lastWeekBeginDay_;
    thisWeekBeginDay_ = other.thisWeekBeginDay_;
    timezone_ = other.timezone_;
    uid_ = other.uid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataREQ Clone() {
    return new LeagueDataREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "last_week_begin_day" field.</summary>
  public const int LastWeekBeginDayFieldNumber = 3;
  private readonly static int LastWeekBeginDayDefaultValue = 0;

  private int lastWeekBeginDay_;
  /// <summary>
  ///弃用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LastWeekBeginDay {
    get { if ((_hasBits0 & 2) != 0) { return lastWeekBeginDay_; } else { return LastWeekBeginDayDefaultValue; } }
    set {
      _hasBits0 |= 2;
      lastWeekBeginDay_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_begin_day" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekBeginDay {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "last_week_begin_day" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekBeginDay() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "this_week_begin_day" field.</summary>
  public const int ThisWeekBeginDayFieldNumber = 4;
  private readonly static int ThisWeekBeginDayDefaultValue = 0;

  private int thisWeekBeginDay_;
  /// <summary>
  ///20200423开始变成时间戳 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ThisWeekBeginDay {
    get { if ((_hasBits0 & 4) != 0) { return thisWeekBeginDay_; } else { return ThisWeekBeginDayDefaultValue; } }
    set {
      _hasBits0 |= 4;
      thisWeekBeginDay_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_begin_day" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekBeginDay {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "this_week_begin_day" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekBeginDay() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "timezone" field.</summary>
  public const int TimezoneFieldNumber = 5;
  private readonly static int TimezoneDefaultValue = 0;

  private int timezone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Timezone {
    get { if ((_hasBits0 & 8) != 0) { return timezone_; } else { return TimezoneDefaultValue; } }
    set {
      _hasBits0 |= 8;
      timezone_ = value;
    }
  }
  /// <summary>Gets whether the "timezone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimezone {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "timezone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimezone() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 6;
  private readonly static string UidDefaultValue = "";

  private string uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Uid {
    get { return uid_ ?? UidDefaultValue; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "uid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUid {
    get { return uid_ != null; }
  }
  /// <summary>Clears the value of the "uid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUid() {
    uid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueDataREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueDataREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    if (LastWeekBeginDay != other.LastWeekBeginDay) return false;
    if (ThisWeekBeginDay != other.ThisWeekBeginDay) return false;
    if (Timezone != other.Timezone) return false;
    if (Uid != other.Uid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasLastWeekBeginDay) hash ^= LastWeekBeginDay.GetHashCode();
    if (HasThisWeekBeginDay) hash ^= ThisWeekBeginDay.GetHashCode();
    if (HasTimezone) hash ^= Timezone.GetHashCode();
    if (HasUid) hash ^= Uid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasLastWeekBeginDay) {
      output.WriteRawTag(24);
      output.WriteInt32(LastWeekBeginDay);
    }
    if (HasThisWeekBeginDay) {
      output.WriteRawTag(32);
      output.WriteInt32(ThisWeekBeginDay);
    }
    if (HasTimezone) {
      output.WriteRawTag(40);
      output.WriteInt32(Timezone);
    }
    if (HasUid) {
      output.WriteRawTag(50);
      output.WriteString(Uid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasLastWeekBeginDay) {
      output.WriteRawTag(24);
      output.WriteInt32(LastWeekBeginDay);
    }
    if (HasThisWeekBeginDay) {
      output.WriteRawTag(32);
      output.WriteInt32(ThisWeekBeginDay);
    }
    if (HasTimezone) {
      output.WriteRawTag(40);
      output.WriteInt32(Timezone);
    }
    if (HasUid) {
      output.WriteRawTag(50);
      output.WriteString(Uid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasLastWeekBeginDay) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastWeekBeginDay);
    }
    if (HasThisWeekBeginDay) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThisWeekBeginDay);
    }
    if (HasTimezone) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
    }
    if (HasUid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueDataREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasLastWeekBeginDay) {
      LastWeekBeginDay = other.LastWeekBeginDay;
    }
    if (other.HasThisWeekBeginDay) {
      ThisWeekBeginDay = other.ThisWeekBeginDay;
    }
    if (other.HasTimezone) {
      Timezone = other.Timezone;
    }
    if (other.HasUid) {
      Uid = other.Uid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          LastWeekBeginDay = input.ReadInt32();
          break;
        }
        case 32: {
          ThisWeekBeginDay = input.ReadInt32();
          break;
        }
        case 40: {
          Timezone = input.ReadInt32();
          break;
        }
        case 50: {
          Uid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          LastWeekBeginDay = input.ReadInt32();
          break;
        }
        case 32: {
          ThisWeekBeginDay = input.ReadInt32();
          break;
        }
        case 40: {
          Timezone = input.ReadInt32();
          break;
        }
        case 50: {
          Uid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueDataInfo : pb::IMessage<LeagueDataInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueDataInfo> _parser = new pb::MessageParser<LeagueDataInfo>(() => new LeagueDataInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueDataInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataInfo(LeagueDataInfo other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    clubname_ = other.clubname_;
    clubicon_ = other.clubicon_;
    allEarning_ = other.allEarning_;
    allJackpot_ = other.allJackpot_;
    allInsurance_ = other.allInsurance_;
    lastWeekEarning_ = other.lastWeekEarning_;
    lastWeekJackpot_ = other.lastWeekJackpot_;
    lastWeekInsurance_ = other.lastWeekInsurance_;
    thisWeekEarning_ = other.thisWeekEarning_;
    thisWeekJackpot_ = other.thisWeekJackpot_;
    thisWeekInsurance_ = other.thisWeekInsurance_;
    allFee_ = other.allFee_;
    lastWeekFee_ = other.lastWeekFee_;
    thisWeekFee_ = other.thisWeekFee_;
    allTicket_ = other.allTicket_;
    lastWeekTicket_ = other.lastWeekTicket_;
    thisWeekTicket_ = other.thisWeekTicket_;
    allEvchop_ = other.allEvchop_;
    lastWeekEvchop_ = other.lastWeekEvchop_;
    thisWeekEvchop_ = other.thisWeekEvchop_;
    allSpinupProfit_ = other.allSpinupProfit_;
    lastWeekSpinupProfit_ = other.lastWeekSpinupProfit_;
    thisWeekSpinupProfit_ = other.thisWeekSpinupProfit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataInfo Clone() {
    return new LeagueDataInfo(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "clubname" field.</summary>
  public const int ClubnameFieldNumber = 2;
  private readonly static string ClubnameDefaultValue = "";

  private string clubname_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubname {
    get { return clubname_ ?? ClubnameDefaultValue; }
    set {
      clubname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubname {
    get { return clubname_ != null; }
  }
  /// <summary>Clears the value of the "clubname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubname() {
    clubname_ = null;
  }

  /// <summary>Field number for the "clubicon" field.</summary>
  public const int ClubiconFieldNumber = 3;
  private readonly static string ClubiconDefaultValue = "";

  private string clubicon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubicon {
    get { return clubicon_ ?? ClubiconDefaultValue; }
    set {
      clubicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubicon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubicon {
    get { return clubicon_ != null; }
  }
  /// <summary>Clears the value of the "clubicon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubicon() {
    clubicon_ = null;
  }

  /// <summary>Field number for the "all_earning" field.</summary>
  public const int AllEarningFieldNumber = 4;
  private readonly static long AllEarningDefaultValue = 0L;

  private long allEarning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllEarning {
    get { if ((_hasBits0 & 1) != 0) { return allEarning_; } else { return AllEarningDefaultValue; } }
    set {
      _hasBits0 |= 1;
      allEarning_ = value;
    }
  }
  /// <summary>Gets whether the "all_earning" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllEarning {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "all_earning" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllEarning() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "all_jackpot" field.</summary>
  public const int AllJackpotFieldNumber = 5;
  private readonly static long AllJackpotDefaultValue = 0L;

  private long allJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllJackpot {
    get { if ((_hasBits0 & 2) != 0) { return allJackpot_; } else { return AllJackpotDefaultValue; } }
    set {
      _hasBits0 |= 2;
      allJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "all_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllJackpot {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "all_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllJackpot() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "all_insurance" field.</summary>
  public const int AllInsuranceFieldNumber = 6;
  private readonly static long AllInsuranceDefaultValue = 0L;

  private long allInsurance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllInsurance {
    get { if ((_hasBits0 & 4) != 0) { return allInsurance_; } else { return AllInsuranceDefaultValue; } }
    set {
      _hasBits0 |= 4;
      allInsurance_ = value;
    }
  }
  /// <summary>Gets whether the "all_insurance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllInsurance {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "all_insurance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllInsurance() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "last_week_earning" field.</summary>
  public const int LastWeekEarningFieldNumber = 7;
  private readonly static long LastWeekEarningDefaultValue = 0L;

  private long lastWeekEarning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekEarning {
    get { if ((_hasBits0 & 8) != 0) { return lastWeekEarning_; } else { return LastWeekEarningDefaultValue; } }
    set {
      _hasBits0 |= 8;
      lastWeekEarning_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_earning" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekEarning {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "last_week_earning" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekEarning() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "last_week_jackpot" field.</summary>
  public const int LastWeekJackpotFieldNumber = 8;
  private readonly static long LastWeekJackpotDefaultValue = 0L;

  private long lastWeekJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekJackpot {
    get { if ((_hasBits0 & 16) != 0) { return lastWeekJackpot_; } else { return LastWeekJackpotDefaultValue; } }
    set {
      _hasBits0 |= 16;
      lastWeekJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekJackpot {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "last_week_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekJackpot() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "last_week_insurance" field.</summary>
  public const int LastWeekInsuranceFieldNumber = 9;
  private readonly static long LastWeekInsuranceDefaultValue = 0L;

  private long lastWeekInsurance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekInsurance {
    get { if ((_hasBits0 & 32) != 0) { return lastWeekInsurance_; } else { return LastWeekInsuranceDefaultValue; } }
    set {
      _hasBits0 |= 32;
      lastWeekInsurance_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_insurance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekInsurance {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "last_week_insurance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekInsurance() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "this_week_earning" field.</summary>
  public const int ThisWeekEarningFieldNumber = 10;
  private readonly static long ThisWeekEarningDefaultValue = 0L;

  private long thisWeekEarning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekEarning {
    get { if ((_hasBits0 & 64) != 0) { return thisWeekEarning_; } else { return ThisWeekEarningDefaultValue; } }
    set {
      _hasBits0 |= 64;
      thisWeekEarning_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_earning" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekEarning {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "this_week_earning" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekEarning() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "this_week_jackpot" field.</summary>
  public const int ThisWeekJackpotFieldNumber = 11;
  private readonly static long ThisWeekJackpotDefaultValue = 0L;

  private long thisWeekJackpot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekJackpot {
    get { if ((_hasBits0 & 128) != 0) { return thisWeekJackpot_; } else { return ThisWeekJackpotDefaultValue; } }
    set {
      _hasBits0 |= 128;
      thisWeekJackpot_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_jackpot" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekJackpot {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "this_week_jackpot" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekJackpot() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "this_week_insurance" field.</summary>
  public const int ThisWeekInsuranceFieldNumber = 12;
  private readonly static long ThisWeekInsuranceDefaultValue = 0L;

  private long thisWeekInsurance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekInsurance {
    get { if ((_hasBits0 & 256) != 0) { return thisWeekInsurance_; } else { return ThisWeekInsuranceDefaultValue; } }
    set {
      _hasBits0 |= 256;
      thisWeekInsurance_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_insurance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekInsurance {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "this_week_insurance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekInsurance() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "all_fee" field.</summary>
  public const int AllFeeFieldNumber = 13;
  private readonly static long AllFeeDefaultValue = 0L;

  private long allFee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllFee {
    get { if ((_hasBits0 & 512) != 0) { return allFee_; } else { return AllFeeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      allFee_ = value;
    }
  }
  /// <summary>Gets whether the "all_fee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllFee {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "all_fee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllFee() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "last_week_fee" field.</summary>
  public const int LastWeekFeeFieldNumber = 14;
  private readonly static long LastWeekFeeDefaultValue = 0L;

  private long lastWeekFee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekFee {
    get { if ((_hasBits0 & 1024) != 0) { return lastWeekFee_; } else { return LastWeekFeeDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      lastWeekFee_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_fee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekFee {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "last_week_fee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekFee() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "this_week_fee" field.</summary>
  public const int ThisWeekFeeFieldNumber = 15;
  private readonly static long ThisWeekFeeDefaultValue = 0L;

  private long thisWeekFee_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekFee {
    get { if ((_hasBits0 & 2048) != 0) { return thisWeekFee_; } else { return ThisWeekFeeDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      thisWeekFee_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_fee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekFee {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "this_week_fee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekFee() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "all_ticket" field.</summary>
  public const int AllTicketFieldNumber = 16;
  private readonly static long AllTicketDefaultValue = 0L;

  private long allTicket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllTicket {
    get { if ((_hasBits0 & 4096) != 0) { return allTicket_; } else { return AllTicketDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      allTicket_ = value;
    }
  }
  /// <summary>Gets whether the "all_ticket" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllTicket {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "all_ticket" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllTicket() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "last_week_ticket" field.</summary>
  public const int LastWeekTicketFieldNumber = 17;
  private readonly static long LastWeekTicketDefaultValue = 0L;

  private long lastWeekTicket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekTicket {
    get { if ((_hasBits0 & 8192) != 0) { return lastWeekTicket_; } else { return LastWeekTicketDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      lastWeekTicket_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_ticket" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekTicket {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "last_week_ticket" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekTicket() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "this_week_ticket" field.</summary>
  public const int ThisWeekTicketFieldNumber = 18;
  private readonly static long ThisWeekTicketDefaultValue = 0L;

  private long thisWeekTicket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekTicket {
    get { if ((_hasBits0 & 16384) != 0) { return thisWeekTicket_; } else { return ThisWeekTicketDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      thisWeekTicket_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_ticket" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekTicket {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "this_week_ticket" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekTicket() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "all_evchop" field.</summary>
  public const int AllEvchopFieldNumber = 19;
  private readonly static long AllEvchopDefaultValue = 0L;

  private long allEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllEvchop {
    get { if ((_hasBits0 & 32768) != 0) { return allEvchop_; } else { return AllEvchopDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      allEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "all_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllEvchop {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "all_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllEvchop() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "last_week_evchop" field.</summary>
  public const int LastWeekEvchopFieldNumber = 20;
  private readonly static long LastWeekEvchopDefaultValue = 0L;

  private long lastWeekEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekEvchop {
    get { if ((_hasBits0 & 65536) != 0) { return lastWeekEvchop_; } else { return LastWeekEvchopDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      lastWeekEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekEvchop {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "last_week_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekEvchop() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "this_week_evchop" field.</summary>
  public const int ThisWeekEvchopFieldNumber = 21;
  private readonly static long ThisWeekEvchopDefaultValue = 0L;

  private long thisWeekEvchop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekEvchop {
    get { if ((_hasBits0 & 131072) != 0) { return thisWeekEvchop_; } else { return ThisWeekEvchopDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      thisWeekEvchop_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_evchop" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekEvchop {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "this_week_evchop" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekEvchop() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "all_spinup_profit" field.</summary>
  public const int AllSpinupProfitFieldNumber = 22;
  private readonly static long AllSpinupProfitDefaultValue = 0L;

  private long allSpinupProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AllSpinupProfit {
    get { if ((_hasBits0 & 262144) != 0) { return allSpinupProfit_; } else { return AllSpinupProfitDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      allSpinupProfit_ = value;
    }
  }
  /// <summary>Gets whether the "all_spinup_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllSpinupProfit {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "all_spinup_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllSpinupProfit() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "last_week_spinup_profit" field.</summary>
  public const int LastWeekSpinupProfitFieldNumber = 23;
  private readonly static long LastWeekSpinupProfitDefaultValue = 0L;

  private long lastWeekSpinupProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastWeekSpinupProfit {
    get { if ((_hasBits0 & 524288) != 0) { return lastWeekSpinupProfit_; } else { return LastWeekSpinupProfitDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      lastWeekSpinupProfit_ = value;
    }
  }
  /// <summary>Gets whether the "last_week_spinup_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekSpinupProfit {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "last_week_spinup_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekSpinupProfit() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "this_week_spinup_profit" field.</summary>
  public const int ThisWeekSpinupProfitFieldNumber = 24;
  private readonly static long ThisWeekSpinupProfitDefaultValue = 0L;

  private long thisWeekSpinupProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ThisWeekSpinupProfit {
    get { if ((_hasBits0 & 1048576) != 0) { return thisWeekSpinupProfit_; } else { return ThisWeekSpinupProfitDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      thisWeekSpinupProfit_ = value;
    }
  }
  /// <summary>Gets whether the "this_week_spinup_profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekSpinupProfit {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "this_week_spinup_profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekSpinupProfit() {
    _hasBits0 &= ~1048576;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueDataInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueDataInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Clubname != other.Clubname) return false;
    if (Clubicon != other.Clubicon) return false;
    if (AllEarning != other.AllEarning) return false;
    if (AllJackpot != other.AllJackpot) return false;
    if (AllInsurance != other.AllInsurance) return false;
    if (LastWeekEarning != other.LastWeekEarning) return false;
    if (LastWeekJackpot != other.LastWeekJackpot) return false;
    if (LastWeekInsurance != other.LastWeekInsurance) return false;
    if (ThisWeekEarning != other.ThisWeekEarning) return false;
    if (ThisWeekJackpot != other.ThisWeekJackpot) return false;
    if (ThisWeekInsurance != other.ThisWeekInsurance) return false;
    if (AllFee != other.AllFee) return false;
    if (LastWeekFee != other.LastWeekFee) return false;
    if (ThisWeekFee != other.ThisWeekFee) return false;
    if (AllTicket != other.AllTicket) return false;
    if (LastWeekTicket != other.LastWeekTicket) return false;
    if (ThisWeekTicket != other.ThisWeekTicket) return false;
    if (AllEvchop != other.AllEvchop) return false;
    if (LastWeekEvchop != other.LastWeekEvchop) return false;
    if (ThisWeekEvchop != other.ThisWeekEvchop) return false;
    if (AllSpinupProfit != other.AllSpinupProfit) return false;
    if (LastWeekSpinupProfit != other.LastWeekSpinupProfit) return false;
    if (ThisWeekSpinupProfit != other.ThisWeekSpinupProfit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasClubname) hash ^= Clubname.GetHashCode();
    if (HasClubicon) hash ^= Clubicon.GetHashCode();
    if (HasAllEarning) hash ^= AllEarning.GetHashCode();
    if (HasAllJackpot) hash ^= AllJackpot.GetHashCode();
    if (HasAllInsurance) hash ^= AllInsurance.GetHashCode();
    if (HasLastWeekEarning) hash ^= LastWeekEarning.GetHashCode();
    if (HasLastWeekJackpot) hash ^= LastWeekJackpot.GetHashCode();
    if (HasLastWeekInsurance) hash ^= LastWeekInsurance.GetHashCode();
    if (HasThisWeekEarning) hash ^= ThisWeekEarning.GetHashCode();
    if (HasThisWeekJackpot) hash ^= ThisWeekJackpot.GetHashCode();
    if (HasThisWeekInsurance) hash ^= ThisWeekInsurance.GetHashCode();
    if (HasAllFee) hash ^= AllFee.GetHashCode();
    if (HasLastWeekFee) hash ^= LastWeekFee.GetHashCode();
    if (HasThisWeekFee) hash ^= ThisWeekFee.GetHashCode();
    if (HasAllTicket) hash ^= AllTicket.GetHashCode();
    if (HasLastWeekTicket) hash ^= LastWeekTicket.GetHashCode();
    if (HasThisWeekTicket) hash ^= ThisWeekTicket.GetHashCode();
    if (HasAllEvchop) hash ^= AllEvchop.GetHashCode();
    if (HasLastWeekEvchop) hash ^= LastWeekEvchop.GetHashCode();
    if (HasThisWeekEvchop) hash ^= ThisWeekEvchop.GetHashCode();
    if (HasAllSpinupProfit) hash ^= AllSpinupProfit.GetHashCode();
    if (HasLastWeekSpinupProfit) hash ^= LastWeekSpinupProfit.GetHashCode();
    if (HasThisWeekSpinupProfit) hash ^= ThisWeekSpinupProfit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasClubicon) {
      output.WriteRawTag(26);
      output.WriteString(Clubicon);
    }
    if (HasAllEarning) {
      output.WriteRawTag(32);
      output.WriteInt64(AllEarning);
    }
    if (HasAllJackpot) {
      output.WriteRawTag(40);
      output.WriteInt64(AllJackpot);
    }
    if (HasAllInsurance) {
      output.WriteRawTag(48);
      output.WriteInt64(AllInsurance);
    }
    if (HasLastWeekEarning) {
      output.WriteRawTag(56);
      output.WriteInt64(LastWeekEarning);
    }
    if (HasLastWeekJackpot) {
      output.WriteRawTag(64);
      output.WriteInt64(LastWeekJackpot);
    }
    if (HasLastWeekInsurance) {
      output.WriteRawTag(72);
      output.WriteInt64(LastWeekInsurance);
    }
    if (HasThisWeekEarning) {
      output.WriteRawTag(80);
      output.WriteInt64(ThisWeekEarning);
    }
    if (HasThisWeekJackpot) {
      output.WriteRawTag(88);
      output.WriteInt64(ThisWeekJackpot);
    }
    if (HasThisWeekInsurance) {
      output.WriteRawTag(96);
      output.WriteInt64(ThisWeekInsurance);
    }
    if (HasAllFee) {
      output.WriteRawTag(104);
      output.WriteInt64(AllFee);
    }
    if (HasLastWeekFee) {
      output.WriteRawTag(112);
      output.WriteInt64(LastWeekFee);
    }
    if (HasThisWeekFee) {
      output.WriteRawTag(120);
      output.WriteInt64(ThisWeekFee);
    }
    if (HasAllTicket) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(AllTicket);
    }
    if (HasLastWeekTicket) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(LastWeekTicket);
    }
    if (HasThisWeekTicket) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(ThisWeekTicket);
    }
    if (HasAllEvchop) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(AllEvchop);
    }
    if (HasLastWeekEvchop) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(LastWeekEvchop);
    }
    if (HasThisWeekEvchop) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(ThisWeekEvchop);
    }
    if (HasAllSpinupProfit) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(AllSpinupProfit);
    }
    if (HasLastWeekSpinupProfit) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(LastWeekSpinupProfit);
    }
    if (HasThisWeekSpinupProfit) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(ThisWeekSpinupProfit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (HasClubname) {
      output.WriteRawTag(18);
      output.WriteString(Clubname);
    }
    if (HasClubicon) {
      output.WriteRawTag(26);
      output.WriteString(Clubicon);
    }
    if (HasAllEarning) {
      output.WriteRawTag(32);
      output.WriteInt64(AllEarning);
    }
    if (HasAllJackpot) {
      output.WriteRawTag(40);
      output.WriteInt64(AllJackpot);
    }
    if (HasAllInsurance) {
      output.WriteRawTag(48);
      output.WriteInt64(AllInsurance);
    }
    if (HasLastWeekEarning) {
      output.WriteRawTag(56);
      output.WriteInt64(LastWeekEarning);
    }
    if (HasLastWeekJackpot) {
      output.WriteRawTag(64);
      output.WriteInt64(LastWeekJackpot);
    }
    if (HasLastWeekInsurance) {
      output.WriteRawTag(72);
      output.WriteInt64(LastWeekInsurance);
    }
    if (HasThisWeekEarning) {
      output.WriteRawTag(80);
      output.WriteInt64(ThisWeekEarning);
    }
    if (HasThisWeekJackpot) {
      output.WriteRawTag(88);
      output.WriteInt64(ThisWeekJackpot);
    }
    if (HasThisWeekInsurance) {
      output.WriteRawTag(96);
      output.WriteInt64(ThisWeekInsurance);
    }
    if (HasAllFee) {
      output.WriteRawTag(104);
      output.WriteInt64(AllFee);
    }
    if (HasLastWeekFee) {
      output.WriteRawTag(112);
      output.WriteInt64(LastWeekFee);
    }
    if (HasThisWeekFee) {
      output.WriteRawTag(120);
      output.WriteInt64(ThisWeekFee);
    }
    if (HasAllTicket) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(AllTicket);
    }
    if (HasLastWeekTicket) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(LastWeekTicket);
    }
    if (HasThisWeekTicket) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(ThisWeekTicket);
    }
    if (HasAllEvchop) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(AllEvchop);
    }
    if (HasLastWeekEvchop) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(LastWeekEvchop);
    }
    if (HasThisWeekEvchop) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(ThisWeekEvchop);
    }
    if (HasAllSpinupProfit) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(AllSpinupProfit);
    }
    if (HasLastWeekSpinupProfit) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(LastWeekSpinupProfit);
    }
    if (HasThisWeekSpinupProfit) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(ThisWeekSpinupProfit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasClubname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubname);
    }
    if (HasClubicon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubicon);
    }
    if (HasAllEarning) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllEarning);
    }
    if (HasAllJackpot) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllJackpot);
    }
    if (HasAllInsurance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllInsurance);
    }
    if (HasLastWeekEarning) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastWeekEarning);
    }
    if (HasLastWeekJackpot) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastWeekJackpot);
    }
    if (HasLastWeekInsurance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastWeekInsurance);
    }
    if (HasThisWeekEarning) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekEarning);
    }
    if (HasThisWeekJackpot) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekJackpot);
    }
    if (HasThisWeekInsurance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekInsurance);
    }
    if (HasAllFee) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllFee);
    }
    if (HasLastWeekFee) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastWeekFee);
    }
    if (HasThisWeekFee) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekFee);
    }
    if (HasAllTicket) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(AllTicket);
    }
    if (HasLastWeekTicket) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastWeekTicket);
    }
    if (HasThisWeekTicket) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekTicket);
    }
    if (HasAllEvchop) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(AllEvchop);
    }
    if (HasLastWeekEvchop) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastWeekEvchop);
    }
    if (HasThisWeekEvchop) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekEvchop);
    }
    if (HasAllSpinupProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(AllSpinupProfit);
    }
    if (HasLastWeekSpinupProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastWeekSpinupProfit);
    }
    if (HasThisWeekSpinupProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ThisWeekSpinupProfit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueDataInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasClubname) {
      Clubname = other.Clubname;
    }
    if (other.HasClubicon) {
      Clubicon = other.Clubicon;
    }
    if (other.HasAllEarning) {
      AllEarning = other.AllEarning;
    }
    if (other.HasAllJackpot) {
      AllJackpot = other.AllJackpot;
    }
    if (other.HasAllInsurance) {
      AllInsurance = other.AllInsurance;
    }
    if (other.HasLastWeekEarning) {
      LastWeekEarning = other.LastWeekEarning;
    }
    if (other.HasLastWeekJackpot) {
      LastWeekJackpot = other.LastWeekJackpot;
    }
    if (other.HasLastWeekInsurance) {
      LastWeekInsurance = other.LastWeekInsurance;
    }
    if (other.HasThisWeekEarning) {
      ThisWeekEarning = other.ThisWeekEarning;
    }
    if (other.HasThisWeekJackpot) {
      ThisWeekJackpot = other.ThisWeekJackpot;
    }
    if (other.HasThisWeekInsurance) {
      ThisWeekInsurance = other.ThisWeekInsurance;
    }
    if (other.HasAllFee) {
      AllFee = other.AllFee;
    }
    if (other.HasLastWeekFee) {
      LastWeekFee = other.LastWeekFee;
    }
    if (other.HasThisWeekFee) {
      ThisWeekFee = other.ThisWeekFee;
    }
    if (other.HasAllTicket) {
      AllTicket = other.AllTicket;
    }
    if (other.HasLastWeekTicket) {
      LastWeekTicket = other.LastWeekTicket;
    }
    if (other.HasThisWeekTicket) {
      ThisWeekTicket = other.ThisWeekTicket;
    }
    if (other.HasAllEvchop) {
      AllEvchop = other.AllEvchop;
    }
    if (other.HasLastWeekEvchop) {
      LastWeekEvchop = other.LastWeekEvchop;
    }
    if (other.HasThisWeekEvchop) {
      ThisWeekEvchop = other.ThisWeekEvchop;
    }
    if (other.HasAllSpinupProfit) {
      AllSpinupProfit = other.AllSpinupProfit;
    }
    if (other.HasLastWeekSpinupProfit) {
      LastWeekSpinupProfit = other.LastWeekSpinupProfit;
    }
    if (other.HasThisWeekSpinupProfit) {
      ThisWeekSpinupProfit = other.ThisWeekSpinupProfit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 26: {
          Clubicon = input.ReadString();
          break;
        }
        case 32: {
          AllEarning = input.ReadInt64();
          break;
        }
        case 40: {
          AllJackpot = input.ReadInt64();
          break;
        }
        case 48: {
          AllInsurance = input.ReadInt64();
          break;
        }
        case 56: {
          LastWeekEarning = input.ReadInt64();
          break;
        }
        case 64: {
          LastWeekJackpot = input.ReadInt64();
          break;
        }
        case 72: {
          LastWeekInsurance = input.ReadInt64();
          break;
        }
        case 80: {
          ThisWeekEarning = input.ReadInt64();
          break;
        }
        case 88: {
          ThisWeekJackpot = input.ReadInt64();
          break;
        }
        case 96: {
          ThisWeekInsurance = input.ReadInt64();
          break;
        }
        case 104: {
          AllFee = input.ReadInt64();
          break;
        }
        case 112: {
          LastWeekFee = input.ReadInt64();
          break;
        }
        case 120: {
          ThisWeekFee = input.ReadInt64();
          break;
        }
        case 128: {
          AllTicket = input.ReadInt64();
          break;
        }
        case 136: {
          LastWeekTicket = input.ReadInt64();
          break;
        }
        case 144: {
          ThisWeekTicket = input.ReadInt64();
          break;
        }
        case 152: {
          AllEvchop = input.ReadInt64();
          break;
        }
        case 160: {
          LastWeekEvchop = input.ReadInt64();
          break;
        }
        case 168: {
          ThisWeekEvchop = input.ReadInt64();
          break;
        }
        case 176: {
          AllSpinupProfit = input.ReadInt64();
          break;
        }
        case 184: {
          LastWeekSpinupProfit = input.ReadInt64();
          break;
        }
        case 192: {
          ThisWeekSpinupProfit = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
        case 18: {
          Clubname = input.ReadString();
          break;
        }
        case 26: {
          Clubicon = input.ReadString();
          break;
        }
        case 32: {
          AllEarning = input.ReadInt64();
          break;
        }
        case 40: {
          AllJackpot = input.ReadInt64();
          break;
        }
        case 48: {
          AllInsurance = input.ReadInt64();
          break;
        }
        case 56: {
          LastWeekEarning = input.ReadInt64();
          break;
        }
        case 64: {
          LastWeekJackpot = input.ReadInt64();
          break;
        }
        case 72: {
          LastWeekInsurance = input.ReadInt64();
          break;
        }
        case 80: {
          ThisWeekEarning = input.ReadInt64();
          break;
        }
        case 88: {
          ThisWeekJackpot = input.ReadInt64();
          break;
        }
        case 96: {
          ThisWeekInsurance = input.ReadInt64();
          break;
        }
        case 104: {
          AllFee = input.ReadInt64();
          break;
        }
        case 112: {
          LastWeekFee = input.ReadInt64();
          break;
        }
        case 120: {
          ThisWeekFee = input.ReadInt64();
          break;
        }
        case 128: {
          AllTicket = input.ReadInt64();
          break;
        }
        case 136: {
          LastWeekTicket = input.ReadInt64();
          break;
        }
        case 144: {
          ThisWeekTicket = input.ReadInt64();
          break;
        }
        case 152: {
          AllEvchop = input.ReadInt64();
          break;
        }
        case 160: {
          LastWeekEvchop = input.ReadInt64();
          break;
        }
        case 168: {
          ThisWeekEvchop = input.ReadInt64();
          break;
        }
        case 176: {
          AllSpinupProfit = input.ReadInt64();
          break;
        }
        case 184: {
          LastWeekSpinupProfit = input.ReadInt64();
          break;
        }
        case 192: {
          ThisWeekSpinupProfit = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueDataRSP : pb::IMessage<LeagueDataRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueDataRSP> _parser = new pb::MessageParser<LeagueDataRSP>(() => new LeagueDataRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueDataRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataRSP(LeagueDataRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    info_ = other.info_.Clone();
    jackpotRecharge_ = other.jackpotRecharge_;
    jackpotChips_ = other.jackpotChips_;
    thisWeekDate_ = other.thisWeekDate_;
    lastWeekDate_ = other.lastWeekDate_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueDataRSP Clone() {
    return new LeagueDataRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::LeagueDataInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(18, global::LeagueDataInfo.Parser);
  private readonly pbc::RepeatedField<global::LeagueDataInfo> info_ = new pbc::RepeatedField<global::LeagueDataInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::LeagueDataInfo> Info {
    get { return info_; }
  }

  /// <summary>Field number for the "jackpot_recharge" field.</summary>
  public const int JackpotRechargeFieldNumber = 3;
  private readonly static long JackpotRechargeDefaultValue = 0L;

  private long jackpotRecharge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotRecharge {
    get { if ((_hasBits0 & 2) != 0) { return jackpotRecharge_; } else { return JackpotRechargeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      jackpotRecharge_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_recharge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotRecharge {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_recharge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotRecharge() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "jackpot_chips" field.</summary>
  public const int JackpotChipsFieldNumber = 4;
  private readonly static long JackpotChipsDefaultValue = 0L;

  private long jackpotChips_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long JackpotChips {
    get { if ((_hasBits0 & 4) != 0) { return jackpotChips_; } else { return JackpotChipsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      jackpotChips_ = value;
    }
  }
  /// <summary>Gets whether the "jackpot_chips" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJackpotChips {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "jackpot_chips" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJackpotChips() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "this_week_date" field.</summary>
  public const int ThisWeekDateFieldNumber = 5;
  private readonly static string ThisWeekDateDefaultValue = "";

  private string thisWeekDate_;
  /// <summary>
  ///相对于盟主俱乐部本周(周一至周日)日期：格式(20200406-20200412)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ThisWeekDate {
    get { return thisWeekDate_ ?? ThisWeekDateDefaultValue; }
    set {
      thisWeekDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "this_week_date" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThisWeekDate {
    get { return thisWeekDate_ != null; }
  }
  /// <summary>Clears the value of the "this_week_date" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThisWeekDate() {
    thisWeekDate_ = null;
  }

  /// <summary>Field number for the "last_week_date" field.</summary>
  public const int LastWeekDateFieldNumber = 6;
  private readonly static string LastWeekDateDefaultValue = "";

  private string lastWeekDate_;
  /// <summary>
  ///相对于盟主俱乐部上周(上周一至上周日)日期：格式(20200330-20200405)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LastWeekDate {
    get { return lastWeekDate_ ?? LastWeekDateDefaultValue; }
    set {
      lastWeekDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "last_week_date" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastWeekDate {
    get { return lastWeekDate_ != null; }
  }
  /// <summary>Clears the value of the "last_week_date" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastWeekDate() {
    lastWeekDate_ = null;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 7;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 0 成功 -1 没有权限
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 8) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueDataRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueDataRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if(!info_.Equals(other.info_)) return false;
    if (JackpotRecharge != other.JackpotRecharge) return false;
    if (JackpotChips != other.JackpotChips) return false;
    if (ThisWeekDate != other.ThisWeekDate) return false;
    if (LastWeekDate != other.LastWeekDate) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    hash ^= info_.GetHashCode();
    if (HasJackpotRecharge) hash ^= JackpotRecharge.GetHashCode();
    if (HasJackpotChips) hash ^= JackpotChips.GetHashCode();
    if (HasThisWeekDate) hash ^= ThisWeekDate.GetHashCode();
    if (HasLastWeekDate) hash ^= LastWeekDate.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    info_.WriteTo(output, _repeated_info_codec);
    if (HasJackpotRecharge) {
      output.WriteRawTag(24);
      output.WriteInt64(JackpotRecharge);
    }
    if (HasJackpotChips) {
      output.WriteRawTag(32);
      output.WriteInt64(JackpotChips);
    }
    if (HasThisWeekDate) {
      output.WriteRawTag(42);
      output.WriteString(ThisWeekDate);
    }
    if (HasLastWeekDate) {
      output.WriteRawTag(50);
      output.WriteString(LastWeekDate);
    }
    if (HasCode) {
      output.WriteRawTag(56);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    info_.WriteTo(ref output, _repeated_info_codec);
    if (HasJackpotRecharge) {
      output.WriteRawTag(24);
      output.WriteInt64(JackpotRecharge);
    }
    if (HasJackpotChips) {
      output.WriteRawTag(32);
      output.WriteInt64(JackpotChips);
    }
    if (HasThisWeekDate) {
      output.WriteRawTag(42);
      output.WriteString(ThisWeekDate);
    }
    if (HasLastWeekDate) {
      output.WriteRawTag(50);
      output.WriteString(LastWeekDate);
    }
    if (HasCode) {
      output.WriteRawTag(56);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    size += info_.CalculateSize(_repeated_info_codec);
    if (HasJackpotRecharge) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotRecharge);
    }
    if (HasJackpotChips) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotChips);
    }
    if (HasThisWeekDate) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ThisWeekDate);
    }
    if (HasLastWeekDate) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastWeekDate);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueDataRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    info_.Add(other.info_);
    if (other.HasJackpotRecharge) {
      JackpotRecharge = other.JackpotRecharge;
    }
    if (other.HasJackpotChips) {
      JackpotChips = other.JackpotChips;
    }
    if (other.HasThisWeekDate) {
      ThisWeekDate = other.ThisWeekDate;
    }
    if (other.HasLastWeekDate) {
      LastWeekDate = other.LastWeekDate;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
        case 24: {
          JackpotRecharge = input.ReadInt64();
          break;
        }
        case 32: {
          JackpotChips = input.ReadInt64();
          break;
        }
        case 42: {
          ThisWeekDate = input.ReadString();
          break;
        }
        case 50: {
          LastWeekDate = input.ReadString();
          break;
        }
        case 56: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          info_.AddEntriesFrom(ref input, _repeated_info_codec);
          break;
        }
        case 24: {
          JackpotRecharge = input.ReadInt64();
          break;
        }
        case 32: {
          JackpotChips = input.ReadInt64();
          break;
        }
        case 42: {
          ThisWeekDate = input.ReadString();
          break;
        }
        case 50: {
          LastWeekDate = input.ReadString();
          break;
        }
        case 56: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class JoinWaitListREQ : pb::IMessage<JoinWaitListREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinWaitListREQ> _parser = new pb::MessageParser<JoinWaitListREQ>(() => new JoinWaitListREQ());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinWaitListREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinWaitListREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinWaitListREQ(JoinWaitListREQ other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinWaitListREQ Clone() {
    return new JoinWaitListREQ(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinWaitListREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinWaitListREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinWaitListREQ other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

public sealed partial class JoinWaitListRSP : pb::IMessage<JoinWaitListRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<JoinWaitListRSP> _parser = new pb::MessageParser<JoinWaitListRSP>(() => new JoinWaitListRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<JoinWaitListRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinWaitListRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinWaitListRSP(JoinWaitListRSP other) : this() {
    _hasBits0 = other._hasBits0;
    roomid_ = other.roomid_;
    clubid_ = other.clubid_;
    result_ = other.result_;
    reason_ = other.reason_;
    vpipLimitPerSet_ = other.vpipLimitPerSet_;
    vpipPerSet_ = other.vpipPerSet_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public JoinWaitListRSP Clone() {
    return new JoinWaitListRSP(this);
  }

  /// <summary>Field number for the "roomid" field.</summary>
  public const int RoomidFieldNumber = 1;
  private readonly static string RoomidDefaultValue = "";

  private string roomid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Roomid {
    get { return roomid_ ?? RoomidDefaultValue; }
    set {
      roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "roomid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomid {
    get { return roomid_ != null; }
  }
  /// <summary>Clears the value of the "roomid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomid() {
    roomid_ = null;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private readonly static int ResultDefaultValue = 0;

  private int result_;
  /// <summary>
  /// 0成功 其他如下
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Result {
    get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
    set {
      _hasBits0 |= 1;
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasResult {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearResult() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 4;
  private readonly static string ReasonDefaultValue = "";

  private string reason_;
  /// <summary>
  /// -1已经坐下了，
  /// -2已经在等待列表，
  /// -3不支持，
  /// -4桌子有空位，
  /// -5筹码不足，
  /// -6俱乐部过期，
  /// -15 SIT_ERR_VPIP = -15;		// VPIP入池率限制
  /// -16 SIT_ERR_HANDS_NUM = -16;	// 手牌数不够
  /// -18 SIT_ERR_VPIP_PER_SET = -18;	//本局vpip不够 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Reason {
    get { return reason_ ?? ReasonDefaultValue; }
    set {
      reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReason {
    get { return reason_ != null; }
  }
  /// <summary>Clears the value of the "reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReason() {
    reason_ = null;
  }

  /// <summary>Field number for the "vpip_limit_per_set" field.</summary>
  public const int VpipLimitPerSetFieldNumber = 5;
  private readonly static int VpipLimitPerSetDefaultValue = 0;

  private int vpipLimitPerSet_;
  /// <summary>
  ///本局vpip 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int VpipLimitPerSet {
    get { if ((_hasBits0 & 2) != 0) { return vpipLimitPerSet_; } else { return VpipLimitPerSetDefaultValue; } }
    set {
      _hasBits0 |= 2;
      vpipLimitPerSet_ = value;
    }
  }
  /// <summary>Gets whether the "vpip_limit_per_set" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVpipLimitPerSet {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "vpip_limit_per_set" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVpipLimitPerSet() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "vpip_per_set" field.</summary>
  public const int VpipPerSetFieldNumber = 6;
  private readonly static int VpipPerSetDefaultValue = 0;

  private int vpipPerSet_;
  /// <summary>
  ///用户当前vpip
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int VpipPerSet {
    get { if ((_hasBits0 & 4) != 0) { return vpipPerSet_; } else { return VpipPerSetDefaultValue; } }
    set {
      _hasBits0 |= 4;
      vpipPerSet_ = value;
    }
  }
  /// <summary>Gets whether the "vpip_per_set" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVpipPerSet {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "vpip_per_set" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVpipPerSet() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as JoinWaitListRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(JoinWaitListRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomid != other.Roomid) return false;
    if (Clubid != other.Clubid) return false;
    if (Result != other.Result) return false;
    if (Reason != other.Reason) return false;
    if (VpipLimitPerSet != other.VpipLimitPerSet) return false;
    if (VpipPerSet != other.VpipPerSet) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRoomid) hash ^= Roomid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasResult) hash ^= Result.GetHashCode();
    if (HasReason) hash ^= Reason.GetHashCode();
    if (HasVpipLimitPerSet) hash ^= VpipLimitPerSet.GetHashCode();
    if (HasVpipPerSet) hash ^= VpipPerSet.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRoomid) {
      output.WriteRawTag(10);
      output.WriteString(Roomid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasResult) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (HasReason) {
      output.WriteRawTag(34);
      output.WriteString(Reason);
    }
    if (HasVpipLimitPerSet) {
      output.WriteRawTag(40);
      output.WriteInt32(VpipLimitPerSet);
    }
    if (HasVpipPerSet) {
      output.WriteRawTag(48);
      output.WriteInt32(VpipPerSet);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRoomid) {
      output.WriteRawTag(10);
      output.WriteString(Roomid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasResult) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (HasReason) {
      output.WriteRawTag(34);
      output.WriteString(Reason);
    }
    if (HasVpipLimitPerSet) {
      output.WriteRawTag(40);
      output.WriteInt32(VpipLimitPerSet);
    }
    if (HasVpipPerSet) {
      output.WriteRawTag(48);
      output.WriteInt32(VpipPerSet);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRoomid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (HasReason) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
    }
    if (HasVpipLimitPerSet) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VpipLimitPerSet);
    }
    if (HasVpipPerSet) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VpipPerSet);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(JoinWaitListRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasRoomid) {
      Roomid = other.Roomid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasResult) {
      Result = other.Result;
    }
    if (other.HasReason) {
      Reason = other.Reason;
    }
    if (other.HasVpipLimitPerSet) {
      VpipLimitPerSet = other.VpipLimitPerSet;
    }
    if (other.HasVpipPerSet) {
      VpipPerSet = other.VpipPerSet;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Roomid = input.ReadString();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 34: {
          Reason = input.ReadString();
          break;
        }
        case 40: {
          VpipLimitPerSet = input.ReadInt32();
          break;
        }
        case 48: {
          VpipPerSet = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Roomid = input.ReadString();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 34: {
          Reason = input.ReadString();
          break;
        }
        case 40: {
          VpipLimitPerSet = input.ReadInt32();
          break;
        }
        case 48: {
          VpipPerSet = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeaveWaitListREQ : pb::IMessage<LeaveWaitListREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeaveWaitListREQ> _parser = new pb::MessageParser<LeaveWaitListREQ>(() => new LeaveWaitListREQ());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeaveWaitListREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeaveWaitListREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeaveWaitListREQ(LeaveWaitListREQ other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeaveWaitListREQ Clone() {
    return new LeaveWaitListREQ(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeaveWaitListREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeaveWaitListREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeaveWaitListREQ other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

public sealed partial class LeaveWaitListRSP : pb::IMessage<LeaveWaitListRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeaveWaitListRSP> _parser = new pb::MessageParser<LeaveWaitListRSP>(() => new LeaveWaitListRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeaveWaitListRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeaveWaitListRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeaveWaitListRSP(LeaveWaitListRSP other) : this() {
    _hasBits0 = other._hasBits0;
    roomid_ = other.roomid_;
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeaveWaitListRSP Clone() {
    return new LeaveWaitListRSP(this);
  }

  /// <summary>Field number for the "roomid" field.</summary>
  public const int RoomidFieldNumber = 1;
  private readonly static string RoomidDefaultValue = "";

  private string roomid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Roomid {
    get { return roomid_ ?? RoomidDefaultValue; }
    set {
      roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "roomid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomid {
    get { return roomid_ != null; }
  }
  /// <summary>Clears the value of the "roomid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomid() {
    roomid_ = null;
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private readonly static int ResultDefaultValue = 0;

  private int result_;
  /// <summary>
  /// -1不在等待列表，0成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Result {
    get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
    set {
      _hasBits0 |= 1;
      result_ = value;
    }
  }
  /// <summary>Gets whether the "result" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasResult {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "result" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearResult() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeaveWaitListRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeaveWaitListRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomid != other.Roomid) return false;
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRoomid) hash ^= Roomid.GetHashCode();
    if (HasResult) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRoomid) {
      output.WriteRawTag(10);
      output.WriteString(Roomid);
    }
    if (HasResult) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRoomid) {
      output.WriteRawTag(10);
      output.WriteString(Roomid);
    }
    if (HasResult) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRoomid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
    }
    if (HasResult) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeaveWaitListRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasRoomid) {
      Roomid = other.Roomid;
    }
    if (other.HasResult) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Roomid = input.ReadString();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Roomid = input.ReadString();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class WaitListUser : pb::IMessage<WaitListUser>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<WaitListUser> _parser = new pb::MessageParser<WaitListUser>(() => new WaitListUser());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<WaitListUser> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListUser() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListUser(WaitListUser other) : this() {
    _hasBits0 = other._hasBits0;
    userid_ = other.userid_;
    userName_ = other.userName_;
    clubName_ = other.clubName_;
    userIcon_ = other.userIcon_;
    clubid_ = other.clubid_;
    leagueid_ = other.leagueid_;
    userVipLevel_ = other.userVipLevel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListUser Clone() {
    return new WaitListUser(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private readonly static long UseridDefaultValue = 0L;

  private long userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Userid {
    get { if ((_hasBits0 & 1) != 0) { return userid_; } else { return UseridDefaultValue; } }
    set {
      _hasBits0 |= 1;
      userid_ = value;
    }
  }
  /// <summary>Gets whether the "userid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUserid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "userid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUserid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "user_name" field.</summary>
  public const int UserNameFieldNumber = 2;
  private readonly static string UserNameDefaultValue = "";

  private string userName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string UserName {
    get { return userName_ ?? UserNameDefaultValue; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "user_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUserName {
    get { return userName_ != null; }
  }
  /// <summary>Clears the value of the "user_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUserName() {
    userName_ = null;
  }

  /// <summary>Field number for the "club_name" field.</summary>
  public const int ClubNameFieldNumber = 3;
  private readonly static string ClubNameDefaultValue = "";

  private string clubName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClubName {
    get { return clubName_ ?? ClubNameDefaultValue; }
    set {
      clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "club_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubName {
    get { return clubName_ != null; }
  }
  /// <summary>Clears the value of the "club_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubName() {
    clubName_ = null;
  }

  /// <summary>Field number for the "user_icon" field.</summary>
  public const int UserIconFieldNumber = 4;
  private readonly static string UserIconDefaultValue = "";

  private string userIcon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string UserIcon {
    get { return userIcon_ ?? UserIconDefaultValue; }
    set {
      userIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "user_icon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUserIcon {
    get { return userIcon_ != null; }
  }
  /// <summary>Clears the value of the "user_icon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUserIcon() {
    userIcon_ = null;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 5;
  private readonly static int ClubidDefaultValue = 0;

  private int clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Clubid {
    get { if ((_hasBits0 & 2) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clubid_ = value;
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 6;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 4;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "user_vip_level" field.</summary>
  public const int UserVipLevelFieldNumber = 7;
  private readonly static int UserVipLevelDefaultValue = 0;

  private int userVipLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int UserVipLevel {
    get { if ((_hasBits0 & 8) != 0) { return userVipLevel_; } else { return UserVipLevelDefaultValue; } }
    set {
      _hasBits0 |= 8;
      userVipLevel_ = value;
    }
  }
  /// <summary>Gets whether the "user_vip_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUserVipLevel {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "user_vip_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUserVipLevel() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as WaitListUser);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(WaitListUser other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (UserName != other.UserName) return false;
    if (ClubName != other.ClubName) return false;
    if (UserIcon != other.UserIcon) return false;
    if (Clubid != other.Clubid) return false;
    if (Leagueid != other.Leagueid) return false;
    if (UserVipLevel != other.UserVipLevel) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasUserid) hash ^= Userid.GetHashCode();
    if (HasUserName) hash ^= UserName.GetHashCode();
    if (HasClubName) hash ^= ClubName.GetHashCode();
    if (HasUserIcon) hash ^= UserIcon.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasUserVipLevel) hash ^= UserVipLevel.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasUserid) {
      output.WriteRawTag(8);
      output.WriteInt64(Userid);
    }
    if (HasUserName) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (HasClubName) {
      output.WriteRawTag(26);
      output.WriteString(ClubName);
    }
    if (HasUserIcon) {
      output.WriteRawTag(34);
      output.WriteString(UserIcon);
    }
    if (HasClubid) {
      output.WriteRawTag(40);
      output.WriteInt32(Clubid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(48);
      output.WriteInt32(Leagueid);
    }
    if (HasUserVipLevel) {
      output.WriteRawTag(56);
      output.WriteInt32(UserVipLevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasUserid) {
      output.WriteRawTag(8);
      output.WriteInt64(Userid);
    }
    if (HasUserName) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (HasClubName) {
      output.WriteRawTag(26);
      output.WriteString(ClubName);
    }
    if (HasUserIcon) {
      output.WriteRawTag(34);
      output.WriteString(UserIcon);
    }
    if (HasClubid) {
      output.WriteRawTag(40);
      output.WriteInt32(Clubid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(48);
      output.WriteInt32(Leagueid);
    }
    if (HasUserVipLevel) {
      output.WriteRawTag(56);
      output.WriteInt32(UserVipLevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasUserid) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Userid);
    }
    if (HasUserName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (HasClubName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
    }
    if (HasUserIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIcon);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasUserVipLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserVipLevel);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(WaitListUser other) {
    if (other == null) {
      return;
    }
    if (other.HasUserid) {
      Userid = other.Userid;
    }
    if (other.HasUserName) {
      UserName = other.UserName;
    }
    if (other.HasClubName) {
      ClubName = other.ClubName;
    }
    if (other.HasUserIcon) {
      UserIcon = other.UserIcon;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasUserVipLevel) {
      UserVipLevel = other.UserVipLevel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Userid = input.ReadInt64();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 26: {
          ClubName = input.ReadString();
          break;
        }
        case 34: {
          UserIcon = input.ReadString();
          break;
        }
        case 40: {
          Clubid = input.ReadInt32();
          break;
        }
        case 48: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 56: {
          UserVipLevel = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Userid = input.ReadInt64();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 26: {
          ClubName = input.ReadString();
          break;
        }
        case 34: {
          UserIcon = input.ReadString();
          break;
        }
        case 40: {
          Clubid = input.ReadInt32();
          break;
        }
        case 48: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 56: {
          UserVipLevel = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class WaitListInfoBRC : pb::IMessage<WaitListInfoBRC>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<WaitListInfoBRC> _parser = new pb::MessageParser<WaitListInfoBRC>(() => new WaitListInfoBRC());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<WaitListInfoBRC> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListInfoBRC() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListInfoBRC(WaitListInfoBRC other) : this() {
    users_ = other.users_.Clone();
    roomid_ = other.roomid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListInfoBRC Clone() {
    return new WaitListInfoBRC(this);
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WaitListUser> _repeated_users_codec
      = pb::FieldCodec.ForMessage(10, global::WaitListUser.Parser);
  private readonly pbc::RepeatedField<global::WaitListUser> users_ = new pbc::RepeatedField<global::WaitListUser>();
  /// <summary>
  /// 等待列表里的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::WaitListUser> Users {
    get { return users_; }
  }

  /// <summary>Field number for the "roomid" field.</summary>
  public const int RoomidFieldNumber = 2;
  private readonly static string RoomidDefaultValue = "";

  private string roomid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Roomid {
    get { return roomid_ ?? RoomidDefaultValue; }
    set {
      roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "roomid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomid {
    get { return roomid_ != null; }
  }
  /// <summary>Clears the value of the "roomid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomid() {
    roomid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as WaitListInfoBRC);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(WaitListInfoBRC other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!users_.Equals(other.users_)) return false;
    if (Roomid != other.Roomid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= users_.GetHashCode();
    if (HasRoomid) hash ^= Roomid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    users_.WriteTo(output, _repeated_users_codec);
    if (HasRoomid) {
      output.WriteRawTag(18);
      output.WriteString(Roomid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    users_.WriteTo(ref output, _repeated_users_codec);
    if (HasRoomid) {
      output.WriteRawTag(18);
      output.WriteString(Roomid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += users_.CalculateSize(_repeated_users_codec);
    if (HasRoomid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(WaitListInfoBRC other) {
    if (other == null) {
      return;
    }
    users_.Add(other.users_);
    if (other.HasRoomid) {
      Roomid = other.Roomid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
        case 18: {
          Roomid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          users_.AddEntriesFrom(ref input, _repeated_users_codec);
          break;
        }
        case 18: {
          Roomid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class WaitListSeatInfo : pb::IMessage<WaitListSeatInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<WaitListSeatInfo> _parser = new pb::MessageParser<WaitListSeatInfo>(() => new WaitListSeatInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<WaitListSeatInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfo(WaitListSeatInfo other) : this() {
    _hasBits0 = other._hasBits0;
    roomtype_ = other.roomtype_;
    blind_ = other.blind_;
    ante_ = other.ante_;
    roomid_ = other.roomid_;
    clubid_ = other.clubid_;
    seatid_ = other.seatid_;
    lastTime_ = other.lastTime_;
    name_ = other.name_;
    clubName_ = other.clubName_;
    seatNum_ = other.seatNum_;
    roomMode_ = other.roomMode_;
    roomType_ = other.roomType_;
    gameMode_ = other.gameMode_;
    ppsrid_ = other.ppsrid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfo Clone() {
    return new WaitListSeatInfo(this);
  }

  /// <summary>Field number for the "roomtype" field.</summary>
  public const int RoomtypeFieldNumber = 1;
  private readonly static uint RoomtypeDefaultValue = 0;

  private uint roomtype_;
  /// <summary>
  /// 1 OMAHA 6人桌 | 2 OMAHA 9人桌 | 3 Cash 6人桌 | 4 Cash 9人桌 | 8 OMAHA 2人桌 | 9 Cash 2人桌 | 10 OFC 2人桌 | 11 OFC 3人桌 | 15 6+ 2人 | 16 6+ 6人 | 17 6+ 9人
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Roomtype {
    get { if ((_hasBits0 & 1) != 0) { return roomtype_; } else { return RoomtypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      roomtype_ = value;
    }
  }
  /// <summary>Gets whether the "roomtype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomtype {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "roomtype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomtype() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "blind" field.</summary>
  public const int BlindFieldNumber = 2;
  private readonly static int BlindDefaultValue = 0;

  private int blind_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Blind {
    get { if ((_hasBits0 & 2) != 0) { return blind_; } else { return BlindDefaultValue; } }
    set {
      _hasBits0 |= 2;
      blind_ = value;
    }
  }
  /// <summary>Gets whether the "blind" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBlind {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "blind" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBlind() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ante" field.</summary>
  public const int AnteFieldNumber = 3;
  private readonly static int AnteDefaultValue = 0;

  private int ante_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ante {
    get { if ((_hasBits0 & 4) != 0) { return ante_; } else { return AnteDefaultValue; } }
    set {
      _hasBits0 |= 4;
      ante_ = value;
    }
  }
  /// <summary>Gets whether the "ante" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAnte {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ante" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAnte() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "roomid" field.</summary>
  public const int RoomidFieldNumber = 4;
  private readonly static int RoomidDefaultValue = 0;

  private int roomid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Roomid {
    get { if ((_hasBits0 & 8) != 0) { return roomid_; } else { return RoomidDefaultValue; } }
    set {
      _hasBits0 |= 8;
      roomid_ = value;
    }
  }
  /// <summary>Gets whether the "roomid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomid {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "roomid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomid() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 5;
  private readonly static int ClubidDefaultValue = 0;

  private int clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Clubid {
    get { if ((_hasBits0 & 16) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
    set {
      _hasBits0 |= 16;
      clubid_ = value;
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "seatid" field.</summary>
  public const int SeatidFieldNumber = 6;
  private readonly static int SeatidDefaultValue = 0;

  private int seatid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Seatid {
    get { if ((_hasBits0 & 32) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
    set {
      _hasBits0 |= 32;
      seatid_ = value;
    }
  }
  /// <summary>Gets whether the "seatid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeatid {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "seatid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeatid() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "last_time" field.</summary>
  public const int LastTimeFieldNumber = 7;
  private readonly static int LastTimeDefaultValue = 0;

  private int lastTime_;
  /// <summary>
  /// 剩余时间，单位秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LastTime {
    get { if ((_hasBits0 & 64) != 0) { return lastTime_; } else { return LastTimeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      lastTime_ = value;
    }
  }
  /// <summary>Gets whether the "last_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastTime {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "last_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastTime() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 8;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "club_name" field.</summary>
  public const int ClubNameFieldNumber = 9;
  private readonly static string ClubNameDefaultValue = "";

  private string clubName_;
  /// <summary>
  ///房间所属俱乐部名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClubName {
    get { return clubName_ ?? ClubNameDefaultValue; }
    set {
      clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "club_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubName {
    get { return clubName_ != null; }
  }
  /// <summary>Clears the value of the "club_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubName() {
    clubName_ = null;
  }

  /// <summary>Field number for the "seat_num" field.</summary>
  public const int SeatNumFieldNumber = 10;
  private readonly static int SeatNumDefaultValue = 0;

  private int seatNum_;
  /// <summary>
  ///房间table座位数	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SeatNum {
    get { if ((_hasBits0 & 128) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
    set {
      _hasBits0 |= 128;
      seatNum_ = value;
    }
  }
  /// <summary>Gets whether the "seat_num" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeatNum {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "seat_num" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeatNum() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "room_mode" field.</summary>
  public const int RoomModeFieldNumber = 11;
  private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

  private global::Texas.Protocol.RoomMode roomMode_;
  /// <summary>
  ///房间属性，如俱乐部/大厅
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Texas.Protocol.RoomMode RoomMode {
    get { if ((_hasBits0 & 256) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      roomMode_ = value;
    }
  }
  /// <summary>Gets whether the "room_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomMode {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "room_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomMode() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 12;
  private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

  private global::Texas.Protocol.RoomType roomType_;
  /// <summary>
  ///房间类型，如nlh/plp
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Texas.Protocol.RoomType RoomType {
    get { if ((_hasBits0 & 512) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      roomType_ = value;
    }
  }
  /// <summary>Gets whether the "room_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomType {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "room_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomType() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "game_mode" field.</summary>
  public const int GameModeFieldNumber = 13;
  private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

  private global::Texas.Protocol.GameMode gameMode_;
  /// <summary>
  ///房间游戏玩法，如cash/sng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Texas.Protocol.GameMode GameMode {
    get { if ((_hasBits0 & 1024) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      gameMode_ = value;
    }
  }
  /// <summary>Gets whether the "game_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameMode {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "game_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameMode() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "ppsrid" field.</summary>
  public const int PpsridFieldNumber = 14;
  private readonly static int PpsridDefaultValue = 0;

  private int ppsrid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ppsrid {
    get { if ((_hasBits0 & 2048) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      ppsrid_ = value;
    }
  }
  /// <summary>Gets whether the "ppsrid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPpsrid {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "ppsrid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPpsrid() {
    _hasBits0 &= ~2048;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as WaitListSeatInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(WaitListSeatInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomtype != other.Roomtype) return false;
    if (Blind != other.Blind) return false;
    if (Ante != other.Ante) return false;
    if (Roomid != other.Roomid) return false;
    if (Clubid != other.Clubid) return false;
    if (Seatid != other.Seatid) return false;
    if (LastTime != other.LastTime) return false;
    if (Name != other.Name) return false;
    if (ClubName != other.ClubName) return false;
    if (SeatNum != other.SeatNum) return false;
    if (RoomMode != other.RoomMode) return false;
    if (RoomType != other.RoomType) return false;
    if (GameMode != other.GameMode) return false;
    if (Ppsrid != other.Ppsrid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRoomtype) hash ^= Roomtype.GetHashCode();
    if (HasBlind) hash ^= Blind.GetHashCode();
    if (HasAnte) hash ^= Ante.GetHashCode();
    if (HasRoomid) hash ^= Roomid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasSeatid) hash ^= Seatid.GetHashCode();
    if (HasLastTime) hash ^= LastTime.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasClubName) hash ^= ClubName.GetHashCode();
    if (HasSeatNum) hash ^= SeatNum.GetHashCode();
    if (HasRoomMode) hash ^= RoomMode.GetHashCode();
    if (HasRoomType) hash ^= RoomType.GetHashCode();
    if (HasGameMode) hash ^= GameMode.GetHashCode();
    if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRoomtype) {
      output.WriteRawTag(8);
      output.WriteUInt32(Roomtype);
    }
    if (HasBlind) {
      output.WriteRawTag(16);
      output.WriteInt32(Blind);
    }
    if (HasAnte) {
      output.WriteRawTag(24);
      output.WriteInt32(Ante);
    }
    if (HasRoomid) {
      output.WriteRawTag(32);
      output.WriteInt32(Roomid);
    }
    if (HasClubid) {
      output.WriteRawTag(40);
      output.WriteInt32(Clubid);
    }
    if (HasSeatid) {
      output.WriteRawTag(48);
      output.WriteInt32(Seatid);
    }
    if (HasLastTime) {
      output.WriteRawTag(56);
      output.WriteInt32(LastTime);
    }
    if (HasName) {
      output.WriteRawTag(66);
      output.WriteString(Name);
    }
    if (HasClubName) {
      output.WriteRawTag(74);
      output.WriteString(ClubName);
    }
    if (HasSeatNum) {
      output.WriteRawTag(80);
      output.WriteInt32(SeatNum);
    }
    if (HasRoomMode) {
      output.WriteRawTag(88);
      output.WriteEnum((int) RoomMode);
    }
    if (HasRoomType) {
      output.WriteRawTag(96);
      output.WriteEnum((int) RoomType);
    }
    if (HasGameMode) {
      output.WriteRawTag(104);
      output.WriteEnum((int) GameMode);
    }
    if (HasPpsrid) {
      output.WriteRawTag(112);
      output.WriteInt32(Ppsrid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRoomtype) {
      output.WriteRawTag(8);
      output.WriteUInt32(Roomtype);
    }
    if (HasBlind) {
      output.WriteRawTag(16);
      output.WriteInt32(Blind);
    }
    if (HasAnte) {
      output.WriteRawTag(24);
      output.WriteInt32(Ante);
    }
    if (HasRoomid) {
      output.WriteRawTag(32);
      output.WriteInt32(Roomid);
    }
    if (HasClubid) {
      output.WriteRawTag(40);
      output.WriteInt32(Clubid);
    }
    if (HasSeatid) {
      output.WriteRawTag(48);
      output.WriteInt32(Seatid);
    }
    if (HasLastTime) {
      output.WriteRawTag(56);
      output.WriteInt32(LastTime);
    }
    if (HasName) {
      output.WriteRawTag(66);
      output.WriteString(Name);
    }
    if (HasClubName) {
      output.WriteRawTag(74);
      output.WriteString(ClubName);
    }
    if (HasSeatNum) {
      output.WriteRawTag(80);
      output.WriteInt32(SeatNum);
    }
    if (HasRoomMode) {
      output.WriteRawTag(88);
      output.WriteEnum((int) RoomMode);
    }
    if (HasRoomType) {
      output.WriteRawTag(96);
      output.WriteEnum((int) RoomType);
    }
    if (HasGameMode) {
      output.WriteRawTag(104);
      output.WriteEnum((int) GameMode);
    }
    if (HasPpsrid) {
      output.WriteRawTag(112);
      output.WriteInt32(Ppsrid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRoomtype) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roomtype);
    }
    if (HasBlind) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blind);
    }
    if (HasAnte) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ante);
    }
    if (HasRoomid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
    }
    if (HasSeatid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
    }
    if (HasLastTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasClubName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
    }
    if (HasSeatNum) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (HasRoomMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
    }
    if (HasRoomType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
    }
    if (HasGameMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
    }
    if (HasPpsrid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(WaitListSeatInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasRoomtype) {
      Roomtype = other.Roomtype;
    }
    if (other.HasBlind) {
      Blind = other.Blind;
    }
    if (other.HasAnte) {
      Ante = other.Ante;
    }
    if (other.HasRoomid) {
      Roomid = other.Roomid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasSeatid) {
      Seatid = other.Seatid;
    }
    if (other.HasLastTime) {
      LastTime = other.LastTime;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasClubName) {
      ClubName = other.ClubName;
    }
    if (other.HasSeatNum) {
      SeatNum = other.SeatNum;
    }
    if (other.HasRoomMode) {
      RoomMode = other.RoomMode;
    }
    if (other.HasRoomType) {
      RoomType = other.RoomType;
    }
    if (other.HasGameMode) {
      GameMode = other.GameMode;
    }
    if (other.HasPpsrid) {
      Ppsrid = other.Ppsrid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Roomtype = input.ReadUInt32();
          break;
        }
        case 16: {
          Blind = input.ReadInt32();
          break;
        }
        case 24: {
          Ante = input.ReadInt32();
          break;
        }
        case 32: {
          Roomid = input.ReadInt32();
          break;
        }
        case 40: {
          Clubid = input.ReadInt32();
          break;
        }
        case 48: {
          Seatid = input.ReadInt32();
          break;
        }
        case 56: {
          LastTime = input.ReadInt32();
          break;
        }
        case 66: {
          Name = input.ReadString();
          break;
        }
        case 74: {
          ClubName = input.ReadString();
          break;
        }
        case 80: {
          SeatNum = input.ReadInt32();
          break;
        }
        case 88: {
          RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
          break;
        }
        case 96: {
          RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
          break;
        }
        case 104: {
          GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
          break;
        }
        case 112: {
          Ppsrid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Roomtype = input.ReadUInt32();
          break;
        }
        case 16: {
          Blind = input.ReadInt32();
          break;
        }
        case 24: {
          Ante = input.ReadInt32();
          break;
        }
        case 32: {
          Roomid = input.ReadInt32();
          break;
        }
        case 40: {
          Clubid = input.ReadInt32();
          break;
        }
        case 48: {
          Seatid = input.ReadInt32();
          break;
        }
        case 56: {
          LastTime = input.ReadInt32();
          break;
        }
        case 66: {
          Name = input.ReadString();
          break;
        }
        case 74: {
          ClubName = input.ReadString();
          break;
        }
        case 80: {
          SeatNum = input.ReadInt32();
          break;
        }
        case 88: {
          RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
          break;
        }
        case 96: {
          RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
          break;
        }
        case 104: {
          GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
          break;
        }
        case 112: {
          Ppsrid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class WaitListSeatInfoREQ : pb::IMessage<WaitListSeatInfoREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<WaitListSeatInfoREQ> _parser = new pb::MessageParser<WaitListSeatInfoREQ>(() => new WaitListSeatInfoREQ());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<WaitListSeatInfoREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfoREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfoREQ(WaitListSeatInfoREQ other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfoREQ Clone() {
    return new WaitListSeatInfoREQ(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as WaitListSeatInfoREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(WaitListSeatInfoREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(WaitListSeatInfoREQ other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

public sealed partial class WaitListSeatInfoRSP : pb::IMessage<WaitListSeatInfoRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<WaitListSeatInfoRSP> _parser = new pb::MessageParser<WaitListSeatInfoRSP>(() => new WaitListSeatInfoRSP());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<WaitListSeatInfoRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfoRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfoRSP(WaitListSeatInfoRSP other) : this() {
    infoList_ = other.infoList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WaitListSeatInfoRSP Clone() {
    return new WaitListSeatInfoRSP(this);
  }

  /// <summary>Field number for the "info_list" field.</summary>
  public const int InfoListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WaitListSeatInfo> _repeated_infoList_codec
      = pb::FieldCodec.ForMessage(10, global::WaitListSeatInfo.Parser);
  private readonly pbc::RepeatedField<global::WaitListSeatInfo> infoList_ = new pbc::RepeatedField<global::WaitListSeatInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::WaitListSeatInfo> InfoList {
    get { return infoList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as WaitListSeatInfoRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(WaitListSeatInfoRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!infoList_.Equals(other.infoList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= infoList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    infoList_.WriteTo(output, _repeated_infoList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    infoList_.WriteTo(ref output, _repeated_infoList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += infoList_.CalculateSize(_repeated_infoList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(WaitListSeatInfoRSP other) {
    if (other == null) {
      return;
    }
    infoList_.Add(other.infoList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          infoList_.AddEntriesFrom(ref input, _repeated_infoList_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RefuseSitDownREQ : pb::IMessage<RefuseSitDownREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RefuseSitDownREQ> _parser = new pb::MessageParser<RefuseSitDownREQ>(() => new RefuseSitDownREQ());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<RefuseSitDownREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RefuseSitDownREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RefuseSitDownREQ(RefuseSitDownREQ other) : this() {
    roomid_ = other.roomid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RefuseSitDownREQ Clone() {
    return new RefuseSitDownREQ(this);
  }

  /// <summary>Field number for the "roomid" field.</summary>
  public const int RoomidFieldNumber = 1;
  private readonly static string RoomidDefaultValue = "";

  private string roomid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Roomid {
    get { return roomid_ ?? RoomidDefaultValue; }
    set {
      roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "roomid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoomid {
    get { return roomid_ != null; }
  }
  /// <summary>Clears the value of the "roomid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoomid() {
    roomid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as RefuseSitDownREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(RefuseSitDownREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomid != other.Roomid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRoomid) hash ^= Roomid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRoomid) {
      output.WriteRawTag(10);
      output.WriteString(Roomid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRoomid) {
      output.WriteRawTag(10);
      output.WriteString(Roomid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRoomid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(RefuseSitDownREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasRoomid) {
      Roomid = other.Roomid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Roomid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Roomid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SetRoomAuthorityREQ : pb::IMessage<SetRoomAuthorityREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SetRoomAuthorityREQ> _parser = new pb::MessageParser<SetRoomAuthorityREQ>(() => new SetRoomAuthorityREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SetRoomAuthorityREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SetRoomAuthorityREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SetRoomAuthorityREQ(SetRoomAuthorityREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    authority_ = other.authority_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SetRoomAuthorityREQ Clone() {
    return new SetRoomAuthorityREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "authority" field.</summary>
  public const int AuthorityFieldNumber = 2;
  private readonly static int AuthorityDefaultValue = 0;

  private int authority_;
  /// <summary>
  /// 1本俱乐部开局|2所有俱乐部开局
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Authority {
    get { if ((_hasBits0 & 2) != 0) { return authority_; } else { return AuthorityDefaultValue; } }
    set {
      _hasBits0 |= 2;
      authority_ = value;
    }
  }
  /// <summary>Gets whether the "authority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAuthority {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "authority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAuthority() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SetRoomAuthorityREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SetRoomAuthorityREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Authority != other.Authority) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasAuthority) hash ^= Authority.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasAuthority) {
      output.WriteRawTag(16);
      output.WriteInt32(Authority);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasAuthority) {
      output.WriteRawTag(16);
      output.WriteInt32(Authority);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasAuthority) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Authority);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SetRoomAuthorityREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasAuthority) {
      Authority = other.Authority;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Authority = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Authority = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SetRoomAuthorityRSP : pb::IMessage<SetRoomAuthorityRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SetRoomAuthorityRSP> _parser = new pb::MessageParser<SetRoomAuthorityRSP>(() => new SetRoomAuthorityRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SetRoomAuthorityRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SetRoomAuthorityRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SetRoomAuthorityRSP(SetRoomAuthorityRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    authority_ = other.authority_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SetRoomAuthorityRSP Clone() {
    return new SetRoomAuthorityRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "authority" field.</summary>
  public const int AuthorityFieldNumber = 2;
  private readonly static int AuthorityDefaultValue = 0;

  private int authority_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Authority {
    get { if ((_hasBits0 & 2) != 0) { return authority_; } else { return AuthorityDefaultValue; } }
    set {
      _hasBits0 |= 2;
      authority_ = value;
    }
  }
  /// <summary>Gets whether the "authority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAuthority {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "authority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAuthority() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 4) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SetRoomAuthorityRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SetRoomAuthorityRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Authority != other.Authority) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasAuthority) hash ^= Authority.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasAuthority) {
      output.WriteRawTag(16);
      output.WriteInt32(Authority);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasAuthority) {
      output.WriteRawTag(16);
      output.WriteInt32(Authority);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasAuthority) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Authority);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SetRoomAuthorityRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasAuthority) {
      Authority = other.Authority;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Authority = input.ReadInt32();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Authority = input.ReadInt32();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RoomAuthorityBRC : pb::IMessage<RoomAuthorityBRC>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RoomAuthorityBRC> _parser = new pb::MessageParser<RoomAuthorityBRC>(() => new RoomAuthorityBRC());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<RoomAuthorityBRC> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RoomAuthorityBRC() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RoomAuthorityBRC(RoomAuthorityBRC other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    authority_ = other.authority_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RoomAuthorityBRC Clone() {
    return new RoomAuthorityBRC(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "authority" field.</summary>
  public const int AuthorityFieldNumber = 2;
  private readonly static int AuthorityDefaultValue = 0;

  private int authority_;
  /// <summary>
  /// 1盟主俱乐部开局|2所有俱乐部开局
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Authority {
    get { if ((_hasBits0 & 2) != 0) { return authority_; } else { return AuthorityDefaultValue; } }
    set {
      _hasBits0 |= 2;
      authority_ = value;
    }
  }
  /// <summary>Gets whether the "authority" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAuthority {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "authority" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAuthority() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as RoomAuthorityBRC);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(RoomAuthorityBRC other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Authority != other.Authority) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasAuthority) hash ^= Authority.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasAuthority) {
      output.WriteRawTag(16);
      output.WriteInt32(Authority);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasAuthority) {
      output.WriteRawTag(16);
      output.WriteInt32(Authority);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasAuthority) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Authority);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(RoomAuthorityBRC other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasAuthority) {
      Authority = other.Authority;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Authority = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Authority = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DisbandLeagueREQ : pb::IMessage<DisbandLeagueREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DisbandLeagueREQ> _parser = new pb::MessageParser<DisbandLeagueREQ>(() => new DisbandLeagueREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DisbandLeagueREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DisbandLeagueREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DisbandLeagueREQ(DisbandLeagueREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DisbandLeagueREQ Clone() {
    return new DisbandLeagueREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DisbandLeagueREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DisbandLeagueREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DisbandLeagueREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DisbandLeagueRSP : pb::IMessage<DisbandLeagueRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DisbandLeagueRSP> _parser = new pb::MessageParser<DisbandLeagueRSP>(() => new DisbandLeagueRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DisbandLeagueRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DisbandLeagueRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DisbandLeagueRSP(DisbandLeagueRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DisbandLeagueRSP Clone() {
    return new DisbandLeagueRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -1联盟不存在 -2不是创建者 -3联盟存在牌桌 0成功 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DisbandLeagueRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DisbandLeagueRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DisbandLeagueRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class QuitLeagueREQ : pb::IMessage<QuitLeagueREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<QuitLeagueREQ> _parser = new pb::MessageParser<QuitLeagueREQ>(() => new QuitLeagueREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<QuitLeagueREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public QuitLeagueREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public QuitLeagueREQ(QuitLeagueREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public QuitLeagueREQ Clone() {
    return new QuitLeagueREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as QuitLeagueREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(QuitLeagueREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(QuitLeagueREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class QuitLeagueRSP : pb::IMessage<QuitLeagueRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<QuitLeagueRSP> _parser = new pb::MessageParser<QuitLeagueRSP>(() => new QuitLeagueRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<QuitLeagueRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public QuitLeagueRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public QuitLeagueRSP(QuitLeagueRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public QuitLeagueRSP Clone() {
    return new QuitLeagueRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -1联盟不存在 -2存在牌桌 0成功 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as QuitLeagueRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(QuitLeagueRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(QuitLeagueRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DelLeagueClubREQ : pb::IMessage<DelLeagueClubREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DelLeagueClubREQ> _parser = new pb::MessageParser<DelLeagueClubREQ>(() => new DelLeagueClubREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DelLeagueClubREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DelLeagueClubREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DelLeagueClubREQ(DelLeagueClubREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DelLeagueClubREQ Clone() {
    return new DelLeagueClubREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DelLeagueClubREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DelLeagueClubREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DelLeagueClubREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DelLeagueClubRSP : pb::IMessage<DelLeagueClubRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DelLeagueClubRSP> _parser = new pb::MessageParser<DelLeagueClubRSP>(() => new DelLeagueClubRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DelLeagueClubRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DelLeagueClubRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DelLeagueClubRSP(DelLeagueClubRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    code_ = other.code_;
    leftPauseTime_ = other.leftPauseTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DelLeagueClubRSP Clone() {
    return new DelLeagueClubRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -1联盟不存在 -2存在牌桌 -3俱乐部不在联盟中 -4俱乐部id为盟主俱乐部 -5没有暂停俱乐部  -6暂停超过10分钟 0成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "left_pause_time" field.</summary>
  public const int LeftPauseTimeFieldNumber = 4;
  private readonly static int LeftPauseTimeDefaultValue = 0;

  private int leftPauseTime_;
  /// <summary>
  ///暂停剩余时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LeftPauseTime {
    get { if ((_hasBits0 & 4) != 0) { return leftPauseTime_; } else { return LeftPauseTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      leftPauseTime_ = value;
    }
  }
  /// <summary>Gets whether the "left_pause_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeftPauseTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "left_pause_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeftPauseTime() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DelLeagueClubRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DelLeagueClubRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    if (Code != other.Code) return false;
    if (LeftPauseTime != other.LeftPauseTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasLeftPauseTime) hash ^= LeftPauseTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (HasLeftPauseTime) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftPauseTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (HasLeftPauseTime) {
      output.WriteRawTag(32);
      output.WriteInt32(LeftPauseTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasLeftPauseTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftPauseTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DelLeagueClubRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasLeftPauseTime) {
      LeftPauseTime = other.LeftPauseTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
        case 32: {
          LeftPauseTime = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
        case 32: {
          LeftPauseTime = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueUpdateBRC : pb::IMessage<LeagueUpdateBRC>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueUpdateBRC> _parser = new pb::MessageParser<LeagueUpdateBRC>(() => new LeagueUpdateBRC());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueUpdateBRC> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueUpdateBRC() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueUpdateBRC(LeagueUpdateBRC other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    type_ = other.type_;
    clubid_ = other.clubid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueUpdateBRC Clone() {
    return new LeagueUpdateBRC(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private readonly static int TypeDefaultValue = 0;

  private int type_;
  /// <summary>
  /// 0创建|1退出|2加入
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 3;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueUpdateBRC);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueUpdateBRC other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Type != other.Type) return false;
    if (Clubid != other.Clubid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (HasClubid) {
      output.WriteRawTag(26);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (HasClubid) {
      output.WriteRawTag(26);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueUpdateBRC other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueNameREQ : pb::IMessage<LeagueNameREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueNameREQ> _parser = new pb::MessageParser<LeagueNameREQ>(() => new LeagueNameREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueNameREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueNameREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueNameREQ(LeagueNameREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueNameREQ Clone() {
    return new LeagueNameREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueNameREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueNameREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueNameREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueNameRSP : pb::IMessage<LeagueNameRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueNameRSP> _parser = new pb::MessageParser<LeagueNameRSP>(() => new LeagueNameRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueNameRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueNameRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueNameRSP(LeagueNameRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    name_ = other.name_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueNameRSP Clone() {
    return new LeagueNameRSP(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// 0成功 1不存在
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueNameRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueNameRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Name != other.Name) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasCode) {
      output.WriteRawTag(24);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueNameRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueClubCondREQ : pb::IMessage<LeagueClubCondREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueClubCondREQ> _parser = new pb::MessageParser<LeagueClubCondREQ>(() => new LeagueClubCondREQ());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueClubCondREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueClubCondREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueClubCondREQ(LeagueClubCondREQ other) : this() {
    clubid_ = other.clubid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueClubCondREQ Clone() {
    return new LeagueClubCondREQ(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueClubCondREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueClubCondREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(10);
      output.WriteString(Clubid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueClubCondREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Clubid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueClubCondRSP : pb::IMessage<LeagueClubCondRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueClubCondRSP> _parser = new pb::MessageParser<LeagueClubCondRSP>(() => new LeagueClubCondRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueClubCondRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueClubCondRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueClubCondRSP(LeagueClubCondRSP other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    code_ = other.code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueClubCondRSP Clone() {
    return new LeagueClubCondRSP(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static int ClubidDefaultValue = 0;

  private int clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Clubid {
    get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clubid_ = value;
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -5超出上限 1俱乐部星级不够2星以上，2总fee不够，3俱乐部已过期 4:俱乐部已经加入超级联盟 0通过 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueClubCondRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueClubCondRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (Code != other.Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasCode) hash ^= Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(8);
      output.WriteInt32(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(8);
      output.WriteInt32(Clubid);
    }
    if (HasCode) {
      output.WriteRawTag(16);
      output.WriteInt32(Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
    }
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueClubCondRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Clubid = input.ReadInt32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Clubid = input.ReadInt32();
          break;
        }
        case 16: {
          Code = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// 联盟自动封禁预警
/// </summary>
public sealed partial class AlarmLeagueAutoBanRSP : pb::IMessage<AlarmLeagueAutoBanRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<AlarmLeagueAutoBanRSP> _parser = new pb::MessageParser<AlarmLeagueAutoBanRSP>(() => new AlarmLeagueAutoBanRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<AlarmLeagueAutoBanRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AlarmLeagueAutoBanRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AlarmLeagueAutoBanRSP(AlarmLeagueAutoBanRSP other) : this() {
    _hasBits0 = other._hasBits0;
    clubid_ = other.clubid_;
    clubName_ = other.clubName_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AlarmLeagueAutoBanRSP Clone() {
    return new AlarmLeagueAutoBanRSP(this);
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 1;
  private readonly static int ClubidDefaultValue = 0;

  private int clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Clubid {
    get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clubid_ = value;
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "club_name" field.</summary>
  public const int ClubNameFieldNumber = 2;
  private readonly static string ClubNameDefaultValue = "";

  private string clubName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClubName {
    get { return clubName_ ?? ClubNameDefaultValue; }
    set {
      clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "club_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubName {
    get { return clubName_ != null; }
  }
  /// <summary>Clears the value of the "club_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubName() {
    clubName_ = null;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private readonly static int TypeDefaultValue = 0;

  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as AlarmLeagueAutoBanRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(AlarmLeagueAutoBanRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Clubid != other.Clubid) return false;
    if (ClubName != other.ClubName) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (HasClubName) hash ^= ClubName.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClubid) {
      output.WriteRawTag(8);
      output.WriteInt32(Clubid);
    }
    if (HasClubName) {
      output.WriteRawTag(18);
      output.WriteString(ClubName);
    }
    if (HasType) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClubid) {
      output.WriteRawTag(8);
      output.WriteInt32(Clubid);
    }
    if (HasClubName) {
      output.WriteRawTag(18);
      output.WriteString(ClubName);
    }
    if (HasType) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
    }
    if (HasClubName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(AlarmLeagueAutoBanRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.HasClubName) {
      ClubName = other.ClubName;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Clubid = input.ReadInt32();
          break;
        }
        case 18: {
          ClubName = input.ReadString();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Clubid = input.ReadInt32();
          break;
        }
        case 18: {
          ClubName = input.ReadString();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class AlarmDeficitWarningRSP : pb::IMessage<AlarmDeficitWarningRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<AlarmDeficitWarningRSP> _parser = new pb::MessageParser<AlarmDeficitWarningRSP>(() => new AlarmDeficitWarningRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<AlarmDeficitWarningRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AlarmDeficitWarningRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AlarmDeficitWarningRSP(AlarmDeficitWarningRSP other) : this() {
    _hasBits0 = other._hasBits0;
    leaguetype_ = other.leaguetype_;
    leagueid_ = other.leagueid_;
    leaguename_ = other.leaguename_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AlarmDeficitWarningRSP Clone() {
    return new AlarmDeficitWarningRSP(this);
  }

  /// <summary>Field number for the "leaguetype" field.</summary>
  public const int LeaguetypeFieldNumber = 1;
  private readonly static int LeaguetypeDefaultValue = 0;

  private int leaguetype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leaguetype {
    get { if ((_hasBits0 & 1) != 0) { return leaguetype_; } else { return LeaguetypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leaguetype_ = value;
    }
  }
  /// <summary>Gets whether the "leaguetype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguetype {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leaguetype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguetype() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "leaguename" field.</summary>
  public const int LeaguenameFieldNumber = 3;
  private readonly static string LeaguenameDefaultValue = "";

  private string leaguename_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Leaguename {
    get { return leaguename_ ?? LeaguenameDefaultValue; }
    set {
      leaguename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "leaguename" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeaguename {
    get { return leaguename_ != null; }
  }
  /// <summary>Clears the value of the "leaguename" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeaguename() {
    leaguename_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as AlarmDeficitWarningRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(AlarmDeficitWarningRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leaguetype != other.Leaguetype) return false;
    if (Leagueid != other.Leagueid) return false;
    if (Leaguename != other.Leaguename) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeaguetype) hash ^= Leaguetype.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasLeaguename) hash ^= Leaguename.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeaguetype) {
      output.WriteRawTag(8);
      output.WriteInt32(Leaguetype);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(26);
      output.WriteString(Leaguename);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeaguetype) {
      output.WriteRawTag(8);
      output.WriteInt32(Leaguetype);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasLeaguename) {
      output.WriteRawTag(26);
      output.WriteString(Leaguename);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeaguetype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leaguetype);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasLeaguename) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Leaguename);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(AlarmDeficitWarningRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasLeaguetype) {
      Leaguetype = other.Leaguetype;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasLeaguename) {
      Leaguename = other.Leaguename;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leaguetype = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          Leaguename = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leaguetype = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          Leaguename = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueLimitClubBlindREQ : pb::IMessage<LeagueLimitClubBlindREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueLimitClubBlindREQ> _parser = new pb::MessageParser<LeagueLimitClubBlindREQ>(() => new LeagueLimitClubBlindREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueLimitClubBlindREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueLimitClubBlindREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueLimitClubBlindREQ(LeagueLimitClubBlindREQ other) : this() {
    _hasBits0 = other._hasBits0;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    limitDetail_ = other.limitDetail_ != null ? other.limitDetail_.Clone() : null;
    limitInfo_ = other.limitInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueLimitClubBlindREQ Clone() {
    return new LeagueLimitClubBlindREQ(this);
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 1;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 2;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "limit_detail" field.</summary>
  public const int LimitDetailFieldNumber = 3;
  private global::BlindLimit limitDetail_;
  /// <summary>
  /// 舊版 已廢棄 現在使用 BlindLimitInfo
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::BlindLimit LimitDetail {
    get { return limitDetail_; }
    set {
      limitDetail_ = value;
    }
  }

  /// <summary>Field number for the "limit_info" field.</summary>
  public const int LimitInfoFieldNumber = 4;
  private static readonly pb::FieldCodec<global::BlindLimitInfo> _repeated_limitInfo_codec
      = pb::FieldCodec.ForMessage(34, global::BlindLimitInfo.Parser);
  private readonly pbc::RepeatedField<global::BlindLimitInfo> limitInfo_ = new pbc::RepeatedField<global::BlindLimitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::BlindLimitInfo> LimitInfo {
    get { return limitInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueLimitClubBlindREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueLimitClubBlindREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    if (!object.Equals(LimitDetail, other.LimitDetail)) return false;
    if(!limitInfo_.Equals(other.limitInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (limitDetail_ != null) hash ^= LimitDetail.GetHashCode();
    hash ^= limitInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LimitDetail);
    }
    limitInfo_.WriteTo(output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(18);
      output.WriteString(Clubid);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LimitDetail);
    }
    limitInfo_.WriteTo(ref output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (limitDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitDetail);
    }
    size += limitInfo_.CalculateSize(_repeated_limitInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueLimitClubBlindREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.limitDetail_ != null) {
      if (limitDetail_ == null) {
        LimitDetail = new global::BlindLimit();
      }
      LimitDetail.MergeFrom(other.LimitDetail);
    }
    limitInfo_.Add(other.limitInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 26: {
          if (limitDetail_ == null) {
            LimitDetail = new global::BlindLimit();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
        case 34: {
          limitInfo_.AddEntriesFrom(input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 18: {
          Clubid = input.ReadString();
          break;
        }
        case 26: {
          if (limitDetail_ == null) {
            LimitDetail = new global::BlindLimit();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
        case 34: {
          limitInfo_.AddEntriesFrom(ref input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LeagueLimitClubBlindRSP : pb::IMessage<LeagueLimitClubBlindRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LeagueLimitClubBlindRSP> _parser = new pb::MessageParser<LeagueLimitClubBlindRSP>(() => new LeagueLimitClubBlindRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LeagueLimitClubBlindRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueLimitClubBlindRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueLimitClubBlindRSP(LeagueLimitClubBlindRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    leagueid_ = other.leagueid_;
    clubid_ = other.clubid_;
    limitDetail_ = other.limitDetail_ != null ? other.limitDetail_.Clone() : null;
    limitInfo_ = other.limitInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LeagueLimitClubBlindRSP Clone() {
    return new LeagueLimitClubBlindRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -1: 传参为空或有错, -2: 非管理员, -3: 俱乐部不在该联盟, -5: 非盟主俱乐部
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "clubid" field.</summary>
  public const int ClubidFieldNumber = 3;
  private readonly static string ClubidDefaultValue = "";

  private string clubid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Clubid {
    get { return clubid_ ?? ClubidDefaultValue; }
    set {
      clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clubid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClubid {
    get { return clubid_ != null; }
  }
  /// <summary>Clears the value of the "clubid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClubid() {
    clubid_ = null;
  }

  /// <summary>Field number for the "limit_detail" field.</summary>
  public const int LimitDetailFieldNumber = 4;
  private global::BlindLimit limitDetail_;
  /// <summary>
  /// 舊版 已廢棄 現在使用 BlindLimitInfo
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::BlindLimit LimitDetail {
    get { return limitDetail_; }
    set {
      limitDetail_ = value;
    }
  }

  /// <summary>Field number for the "limit_info" field.</summary>
  public const int LimitInfoFieldNumber = 5;
  private static readonly pb::FieldCodec<global::BlindLimitInfo> _repeated_limitInfo_codec
      = pb::FieldCodec.ForMessage(42, global::BlindLimitInfo.Parser);
  private readonly pbc::RepeatedField<global::BlindLimitInfo> limitInfo_ = new pbc::RepeatedField<global::BlindLimitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::BlindLimitInfo> LimitInfo {
    get { return limitInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LeagueLimitClubBlindRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LeagueLimitClubBlindRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Leagueid != other.Leagueid) return false;
    if (Clubid != other.Clubid) return false;
    if (!object.Equals(LimitDetail, other.LimitDetail)) return false;
    if(!limitInfo_.Equals(other.limitInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    if (HasClubid) hash ^= Clubid.GetHashCode();
    if (limitDetail_ != null) hash ^= LimitDetail.GetHashCode();
    hash ^= limitInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(26);
      output.WriteString(Clubid);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LimitDetail);
    }
    limitInfo_.WriteTo(output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    if (HasClubid) {
      output.WriteRawTag(26);
      output.WriteString(Clubid);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LimitDetail);
    }
    limitInfo_.WriteTo(ref output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    if (HasClubid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
    }
    if (limitDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitDetail);
    }
    size += limitInfo_.CalculateSize(_repeated_limitInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LeagueLimitClubBlindRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    if (other.HasClubid) {
      Clubid = other.Clubid;
    }
    if (other.limitDetail_ != null) {
      if (limitDetail_ == null) {
        LimitDetail = new global::BlindLimit();
      }
      LimitDetail.MergeFrom(other.LimitDetail);
    }
    limitInfo_.Add(other.limitInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          Clubid = input.ReadString();
          break;
        }
        case 34: {
          if (limitDetail_ == null) {
            LimitDetail = new global::BlindLimit();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
        case 42: {
          limitInfo_.AddEntriesFrom(input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          Clubid = input.ReadString();
          break;
        }
        case 34: {
          if (limitDetail_ == null) {
            LimitDetail = new global::BlindLimit();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
        case 42: {
          limitInfo_.AddEntriesFrom(ref input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueLimitLeagueBlindREQ : pb::IMessage<SuperLeagueLimitLeagueBlindREQ>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueLimitLeagueBlindREQ> _parser = new pb::MessageParser<SuperLeagueLimitLeagueBlindREQ>(() => new SuperLeagueLimitLeagueBlindREQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueLimitLeagueBlindREQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueLimitLeagueBlindREQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueLimitLeagueBlindREQ(SuperLeagueLimitLeagueBlindREQ other) : this() {
    _hasBits0 = other._hasBits0;
    superLeagueid_ = other.superLeagueid_;
    leagueid_ = other.leagueid_;
    limitInfo_ = other.limitInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueLimitLeagueBlindREQ Clone() {
    return new SuperLeagueLimitLeagueBlindREQ(this);
  }

  /// <summary>Field number for the "super_leagueid" field.</summary>
  public const int SuperLeagueidFieldNumber = 1;
  private readonly static int SuperLeagueidDefaultValue = 0;

  private int superLeagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SuperLeagueid {
    get { if ((_hasBits0 & 1) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      superLeagueid_ = value;
    }
  }
  /// <summary>Gets whether the "super_leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperLeagueid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "super_leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperLeagueid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 2;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "limit_info" field.</summary>
  public const int LimitInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::BlindLimitInfo> _repeated_limitInfo_codec
      = pb::FieldCodec.ForMessage(26, global::BlindLimitInfo.Parser);
  private readonly pbc::RepeatedField<global::BlindLimitInfo> limitInfo_ = new pbc::RepeatedField<global::BlindLimitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::BlindLimitInfo> LimitInfo {
    get { return limitInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueLimitLeagueBlindREQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueLimitLeagueBlindREQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SuperLeagueid != other.SuperLeagueid) return false;
    if (Leagueid != other.Leagueid) return false;
    if(!limitInfo_.Equals(other.limitInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    hash ^= limitInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSuperLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    limitInfo_.WriteTo(output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSuperLeagueid) {
      output.WriteRawTag(8);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(Leagueid);
    }
    limitInfo_.WriteTo(ref output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSuperLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    size += limitInfo_.CalculateSize(_repeated_limitInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueLimitLeagueBlindREQ other) {
    if (other == null) {
      return;
    }
    if (other.HasSuperLeagueid) {
      SuperLeagueid = other.SuperLeagueid;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    limitInfo_.Add(other.limitInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          limitInfo_.AddEntriesFrom(input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 16: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 26: {
          limitInfo_.AddEntriesFrom(ref input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SuperLeagueLimitLeagueBlindRSP : pb::IMessage<SuperLeagueLimitLeagueBlindRSP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SuperLeagueLimitLeagueBlindRSP> _parser = new pb::MessageParser<SuperLeagueLimitLeagueBlindRSP>(() => new SuperLeagueLimitLeagueBlindRSP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SuperLeagueLimitLeagueBlindRSP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LeagueReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueLimitLeagueBlindRSP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueLimitLeagueBlindRSP(SuperLeagueLimitLeagueBlindRSP other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    superLeagueid_ = other.superLeagueid_;
    leagueid_ = other.leagueid_;
    limitInfo_ = other.limitInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SuperLeagueLimitLeagueBlindRSP Clone() {
    return new SuperLeagueLimitLeagueBlindRSP(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  /// -1: 传参为空或有错, -2: 非管理员, -3: 聯盟不在该超聯, -5: 非主聯盟
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "super_leagueid" field.</summary>
  public const int SuperLeagueidFieldNumber = 2;
  private readonly static int SuperLeagueidDefaultValue = 0;

  private int superLeagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SuperLeagueid {
    get { if ((_hasBits0 & 2) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      superLeagueid_ = value;
    }
  }
  /// <summary>Gets whether the "super_leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuperLeagueid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "super_leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuperLeagueid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "leagueid" field.</summary>
  public const int LeagueidFieldNumber = 3;
  private readonly static int LeagueidDefaultValue = 0;

  private int leagueid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leagueid {
    get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
    set {
      _hasBits0 |= 4;
      leagueid_ = value;
    }
  }
  /// <summary>Gets whether the "leagueid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeagueid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "leagueid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeagueid() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "limit_info" field.</summary>
  public const int LimitInfoFieldNumber = 4;
  private static readonly pb::FieldCodec<global::BlindLimitInfo> _repeated_limitInfo_codec
      = pb::FieldCodec.ForMessage(34, global::BlindLimitInfo.Parser);
  private readonly pbc::RepeatedField<global::BlindLimitInfo> limitInfo_ = new pbc::RepeatedField<global::BlindLimitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::BlindLimitInfo> LimitInfo {
    get { return limitInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SuperLeagueLimitLeagueBlindRSP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SuperLeagueLimitLeagueBlindRSP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (SuperLeagueid != other.SuperLeagueid) return false;
    if (Leagueid != other.Leagueid) return false;
    if(!limitInfo_.Equals(other.limitInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
    if (HasLeagueid) hash ^= Leagueid.GetHashCode();
    hash ^= limitInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (HasSuperLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(Leagueid);
    }
    limitInfo_.WriteTo(output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (HasSuperLeagueid) {
      output.WriteRawTag(16);
      output.WriteInt32(SuperLeagueid);
    }
    if (HasLeagueid) {
      output.WriteRawTag(24);
      output.WriteInt32(Leagueid);
    }
    limitInfo_.WriteTo(ref output, _repeated_limitInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasSuperLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
    }
    if (HasLeagueid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
    }
    size += limitInfo_.CalculateSize(_repeated_limitInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SuperLeagueLimitLeagueBlindRSP other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasSuperLeagueid) {
      SuperLeagueid = other.SuperLeagueid;
    }
    if (other.HasLeagueid) {
      Leagueid = other.Leagueid;
    }
    limitInfo_.Add(other.limitInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 16: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 24: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 34: {
          limitInfo_.AddEntriesFrom(input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 16: {
          SuperLeagueid = input.ReadInt32();
          break;
        }
        case 24: {
          Leagueid = input.ReadInt32();
          break;
        }
        case 34: {
          limitInfo_.AddEntriesFrom(ref input, _repeated_limitInfo_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
