// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: create_club_room.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from create_club_room.proto</summary>
  public static partial class CreateClubRoomReflection {

    #region Descriptor
    /// <summary>File descriptor for create_club_room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CreateClubRoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZjcmVhdGVfY2x1Yl9yb29tLnByb3RvGg5wcmVfYmFzZS5wcm90bxoKYmFz",
            "ZS5wcm90bxoKcGluZS5wcm90byLTFwoRQ3JlYXRlQ2x1YlJvb21SRVESFgoJ",
            "cm9vbV9uYW1lGAEgASgJSACIAQESEgoFYmxpbmQYAiABKANIAYgBARIRCgRh",
            "bnRlGAMgASgDSAKIAQESFgoJbWluX2J1eWluGAQgASgDSAOIAQESFgoJZ2Ft",
            "ZV90aW1lGAUgASgFSASIAQESGAoLYWN0aW9uX3RpbWUYBiABKAVIBYgBARIU",
            "CgdmZWV0eXBlGAcgASgFSAaIAQESFQoIZmVlcG9pbnQYCCABKAVIB4gBARIX",
            "CgphdXRoX2xpbWl0GAkgASgISAiIAQESEwoGY2x1YmlkGAogASgJSAmIAQES",
            "FQoIc2VhdF9udW0YCyABKAVICogBARIQCgNjYXAYDCABKAVIC4gBARIcCgR0",
            "eXBlGA0gASgOMgkuUm9vbVR5cGVIDIgBARIWCgltYXhfYnV5aW4YDiABKANI",
            "DYgBARIVCgh0aW1lem9uZRgPIAEoBUgOiAEBEhMKBnJvb21pZBgQIAEoCUgP",
            "iAEBEhoKDWRlZmF1bHRfYnV5aW4YESABKANIEIgBARIfChJpc19ydW5fbXVs",
            "dGlfdGltZXMYEiABKAhIEYgBARIZCgxpc19pbnN1cmFuY2UYEyABKAhIEogB",
            "ARIVCghsZWFndWVpZBgUIAEoBUgTiAEBEhYKCWdwc19saW1pdBgVIAEoCEgU",
            "iAEBEhUKCGlwX2xpbWl0GBYgASgISBWIAQESEwoGY2l0eWlkGBcgASgFSBaI",
            "AQESFwoKYXV0b19zdGFydBgYIAEoBUgXiAEBEiEKCWdhbWVfbW9kZRgZIAEo",
            "DjIJLkdhbWVNb2RlSBiIAQESHQoQY2FsbHRpbWVfbWludXRlcxgaIAEoBUgZ",
            "iAEBEhsKDndpdGhkcmF3X2NoaXBzGBsgASgISBqIAQESJAoXaXNfYXV0b19k",
            "ZWxheV9yb29tX292ZXIYHCABKAhIG4gBARInChphdXRvX2RlbGF5X3Jvb21f",
            "b3Zlcl90aW1lcxgdIAEoBUgciAEBEiAKE2lzX2F1dG9fY3JlYXRlX3Jvb20Y",
            "HiABKAhIHYgBARIcCg9jcmVhdG9yX3VzZXJfaWQYHyABKANIHogBARIXCgp2",
            "cGlwX2xpbWl0GCAgASgFSB+IAQESFQoIbW9kdWxlaWQYISABKANIIIgBARIX",
            "CgptdWx0aV9vcGlkGCIgASgJSCGIAQESFAoHY2FuX3VzZRgjIAEoCEgiiAEB",
            "EhsKDmZvcmJpZGRlbl9jaGF0GCQgASgISCOIAQESFgoJaXNfZXZjaG9wGCUg",
            "ASgISCSIAQESHwoSdnBpcF9saW1pdF9wZXJfc2V0GCYgASgFSCWIAQESHgoR",
            "bWluX2hhbmRzX3Blcl9zZXQYJyABKAVIJogBARIZCgxwYXNzd2RfbGltaXQY",
            "KCABKAhIJ4gBARIbCg5zdXBlcl9sZWFndWVpZBgpIAEoBUgoiAEBEh4KEXN1",
            "cGVyX2xlYWd1ZV90eXBlGCogASgFSCmIAQESEwoLYW50ZV91cF92ZWMYKyAD",
            "KAMSGgoNZGVyaXZlX3Jvb21pZBgsIAEoBUgqiAEBEhcKCmlzX2NhcHRjaGEY",
            "LSABKAhIK4gBARIWCglpc19iYW5fcGMYLiABKAhILIgBARIaCg1pc19jaGVj",
            "a19tYWlsGC8gASgISC2IAQESKgodc2V2ZW5fZGV1Y2VfcmV3YXJkX211bHRp",
            "cGxpZXIYMCABKAVILogBARIgChNmb3JiaWRkZW5fY2hhdF9tb2RlGDEgASgF",
            "SC+IAQESGQoMaXNfdmlwX3RhYmxlGDIgASgISDCIAQESKgodZW50ZXJfcm9v",
            "bV9jaGlwc19wcmVyZXF1aXNpdGUYMyABKANIMYgBARITCgZwcHNyaWQYNCAB",
            "KAVIMogBARIXCgppc19qYWNrcG90GDUgASgISDOIAQESHQoQaXNfY2VydGlm",
            "aWNhdGlvbhg2IAEoCEg0iAEBEhoKDXBhcmVudF9yb29taWQYNyABKAVINYgB",
            "ARIfChJwYXJlbnRfcm9vbV9oYW5kbGUYOCABKA1INogBARIZCgxib21icG90",
            "X3R5cGUYOSABKAVIN4gBARIgChNjeWNsZV9ib21icG90X2hhbmRzGDogASgF",
            "SDiIAQESIgoVY3ljbGVfYm9tYnBvdF9zZWNvbmRzGDsgASgFSDmIAQESGwoO",
            "bWluX2JvbWJfdGltZXMYPCABKAVIOogBARIbCg5tYXhfYm9tYl90aW1lcxg9",
            "IAEoBUg7iAEBEiUKGGJvbWJwb3RfYWRkaXRpb25hbF9ib2FyZBg+IAEoBUg8",
            "iAEBEh0KEGFkZGl0aW9uYWxfYm9hcmQYPyABKAVIPYgBARIQCghiYW5fY2x1",
            "YhhAIAMoBRITCgtiYW5fY291bnRyeRhBIAMoCRIkChdpc19zZXF1ZW50aWFs",
            "X3ZpZXdfY2FyZBhCIAEoCEg+iAEBEiYKGWlzX2JvbWJwb3Rfd2l0aG91dF9l",
            "dmNob3AYQyABKAhIP4gBAUIMCgpfcm9vbV9uYW1lQggKBl9ibGluZEIHCgVf",
            "YW50ZUIMCgpfbWluX2J1eWluQgwKCl9nYW1lX3RpbWVCDgoMX2FjdGlvbl90",
            "aW1lQgoKCF9mZWV0eXBlQgsKCV9mZWVwb2ludEINCgtfYXV0aF9saW1pdEIJ",
            "CgdfY2x1YmlkQgsKCV9zZWF0X251bUIGCgRfY2FwQgcKBV90eXBlQgwKCl9t",
            "YXhfYnV5aW5CCwoJX3RpbWV6b25lQgkKB19yb29taWRCEAoOX2RlZmF1bHRf",
            "YnV5aW5CFQoTX2lzX3J1bl9tdWx0aV90aW1lc0IPCg1faXNfaW5zdXJhbmNl",
            "QgsKCV9sZWFndWVpZEIMCgpfZ3BzX2xpbWl0QgsKCV9pcF9saW1pdEIJCgdf",
            "Y2l0eWlkQg0KC19hdXRvX3N0YXJ0QgwKCl9nYW1lX21vZGVCEwoRX2NhbGx0",
            "aW1lX21pbnV0ZXNCEQoPX3dpdGhkcmF3X2NoaXBzQhoKGF9pc19hdXRvX2Rl",
            "bGF5X3Jvb21fb3ZlckIdChtfYXV0b19kZWxheV9yb29tX292ZXJfdGltZXNC",
            "FgoUX2lzX2F1dG9fY3JlYXRlX3Jvb21CEgoQX2NyZWF0b3JfdXNlcl9pZEIN",
            "CgtfdnBpcF9saW1pdEILCglfbW9kdWxlaWRCDQoLX211bHRpX29waWRCCgoI",
            "X2Nhbl91c2VCEQoPX2ZvcmJpZGRlbl9jaGF0QgwKCl9pc19ldmNob3BCFQoT",
            "X3ZwaXBfbGltaXRfcGVyX3NldEIUChJfbWluX2hhbmRzX3Blcl9zZXRCDwoN",
            "X3Bhc3N3ZF9saW1pdEIRCg9fc3VwZXJfbGVhZ3VlaWRCFAoSX3N1cGVyX2xl",
            "YWd1ZV90eXBlQhAKDl9kZXJpdmVfcm9vbWlkQg0KC19pc19jYXB0Y2hhQgwK",
            "Cl9pc19iYW5fcGNCEAoOX2lzX2NoZWNrX21haWxCIAoeX3NldmVuX2RldWNl",
            "X3Jld2FyZF9tdWx0aXBsaWVyQhYKFF9mb3JiaWRkZW5fY2hhdF9tb2RlQg8K",
            "DV9pc192aXBfdGFibGVCIAoeX2VudGVyX3Jvb21fY2hpcHNfcHJlcmVxdWlz",
            "aXRlQgkKB19wcHNyaWRCDQoLX2lzX2phY2twb3RCEwoRX2lzX2NlcnRpZmlj",
            "YXRpb25CEAoOX3BhcmVudF9yb29taWRCFQoTX3BhcmVudF9yb29tX2hhbmRs",
            "ZUIPCg1fYm9tYnBvdF90eXBlQhYKFF9jeWNsZV9ib21icG90X2hhbmRzQhgK",
            "Fl9jeWNsZV9ib21icG90X3NlY29uZHNCEQoPX21pbl9ib21iX3RpbWVzQhEK",
            "D19tYXhfYm9tYl90aW1lc0IbChlfYm9tYnBvdF9hZGRpdGlvbmFsX2JvYXJk",
            "QhMKEV9hZGRpdGlvbmFsX2JvYXJkQhoKGF9pc19zZXF1ZW50aWFsX3ZpZXdf",
            "Y2FyZEIcChpfaXNfYm9tYnBvdF93aXRob3V0X2V2Y2hvcCKAAQoRQ3JlYXRl",
            "Q2x1YlJvb21SU1ASEQoEY29kZRgBIAEoBUgAiAEBEhMKBnJlYXNvbhgCIAEo",
            "CUgBiAEBEiEKCXJvb21faW5mbxgDIAEoCzIJLlJvb21JbmZvSAKIAQFCBwoF",
            "X2NvZGVCCQoHX3JlYXNvbkIMCgpfcm9vbV9pbmZvQhpaBy9wYnBwZ2+qAg5U",
            "ZXhhcy5Qcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.PreBaseReflection.Descriptor, global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.PineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CreateClubRoomREQ), global::Texas.Protocol.CreateClubRoomREQ.Parser, new[]{ "RoomName", "Blind", "Ante", "MinBuyin", "GameTime", "ActionTime", "Feetype", "Feepoint", "AuthLimit", "Clubid", "SeatNum", "Cap", "Type", "MaxBuyin", "Timezone", "Roomid", "DefaultBuyin", "IsRunMultiTimes", "IsInsurance", "Leagueid", "GpsLimit", "IpLimit", "Cityid", "AutoStart", "GameMode", "CalltimeMinutes", "WithdrawChips", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "CreatorUserId", "VpipLimit", "Moduleid", "MultiOpid", "CanUse", "ForbiddenChat", "IsEvchop", "VpipLimitPerSet", "MinHandsPerSet", "PasswdLimit", "SuperLeagueid", "SuperLeagueType", "AnteUpVec", "DeriveRoomid", "IsCaptcha", "IsBanPc", "IsCheckMail", "SevenDeuceRewardMultiplier", "ForbiddenChatMode", "IsVipTable", "EnterRoomChipsPrerequisite", "Ppsrid", "IsJackpot", "IsCertification", "ParentRoomid", "ParentRoomHandle", "BombpotType", "CycleBombpotHands", "CycleBombpotSeconds", "MinBombTimes", "MaxBombTimes", "BombpotAdditionalBoard", "AdditionalBoard", "BanClub", "BanCountry", "IsSequentialViewCard", "IsBombpotWithoutEvchop" }, new[]{ "RoomName", "Blind", "Ante", "MinBuyin", "GameTime", "ActionTime", "Feetype", "Feepoint", "AuthLimit", "Clubid", "SeatNum", "Cap", "Type", "MaxBuyin", "Timezone", "Roomid", "DefaultBuyin", "IsRunMultiTimes", "IsInsurance", "Leagueid", "GpsLimit", "IpLimit", "Cityid", "AutoStart", "GameMode", "CalltimeMinutes", "WithdrawChips", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "CreatorUserId", "VpipLimit", "Moduleid", "MultiOpid", "CanUse", "ForbiddenChat", "IsEvchop", "VpipLimitPerSet", "MinHandsPerSet", "PasswdLimit", "SuperLeagueid", "SuperLeagueType", "DeriveRoomid", "IsCaptcha", "IsBanPc", "IsCheckMail", "SevenDeuceRewardMultiplier", "ForbiddenChatMode", "IsVipTable", "EnterRoomChipsPrerequisite", "Ppsrid", "IsJackpot", "IsCertification", "ParentRoomid", "ParentRoomHandle", "BombpotType", "CycleBombpotHands", "CycleBombpotSeconds", "MinBombTimes", "MaxBombTimes", "BombpotAdditionalBoard", "AdditionalBoard", "IsSequentialViewCard", "IsBombpotWithoutEvchop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CreateClubRoomRSP), global::Texas.Protocol.CreateClubRoomRSP.Parser, new[]{ "Code", "Reason", "RoomInfo" }, new[]{ "Code", "Reason", "RoomInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateClubRoomREQ : pb::IMessage<CreateClubRoomREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateClubRoomREQ> _parser = new pb::MessageParser<CreateClubRoomREQ>(() => new CreateClubRoomREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateClubRoomREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CreateClubRoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateClubRoomREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateClubRoomREQ(CreateClubRoomREQ other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      roomName_ = other.roomName_;
      blind_ = other.blind_;
      ante_ = other.ante_;
      minBuyin_ = other.minBuyin_;
      gameTime_ = other.gameTime_;
      actionTime_ = other.actionTime_;
      feetype_ = other.feetype_;
      feepoint_ = other.feepoint_;
      authLimit_ = other.authLimit_;
      clubid_ = other.clubid_;
      seatNum_ = other.seatNum_;
      cap_ = other.cap_;
      type_ = other.type_;
      maxBuyin_ = other.maxBuyin_;
      timezone_ = other.timezone_;
      roomid_ = other.roomid_;
      defaultBuyin_ = other.defaultBuyin_;
      isRunMultiTimes_ = other.isRunMultiTimes_;
      isInsurance_ = other.isInsurance_;
      leagueid_ = other.leagueid_;
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      cityid_ = other.cityid_;
      autoStart_ = other.autoStart_;
      gameMode_ = other.gameMode_;
      calltimeMinutes_ = other.calltimeMinutes_;
      withdrawChips_ = other.withdrawChips_;
      isAutoDelayRoomOver_ = other.isAutoDelayRoomOver_;
      autoDelayRoomOverTimes_ = other.autoDelayRoomOverTimes_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      creatorUserId_ = other.creatorUserId_;
      vpipLimit_ = other.vpipLimit_;
      moduleid_ = other.moduleid_;
      multiOpid_ = other.multiOpid_;
      canUse_ = other.canUse_;
      forbiddenChat_ = other.forbiddenChat_;
      isEvchop_ = other.isEvchop_;
      vpipLimitPerSet_ = other.vpipLimitPerSet_;
      minHandsPerSet_ = other.minHandsPerSet_;
      passwdLimit_ = other.passwdLimit_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      anteUpVec_ = other.anteUpVec_.Clone();
      deriveRoomid_ = other.deriveRoomid_;
      isCaptcha_ = other.isCaptcha_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      sevenDeuceRewardMultiplier_ = other.sevenDeuceRewardMultiplier_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      isVipTable_ = other.isVipTable_;
      enterRoomChipsPrerequisite_ = other.enterRoomChipsPrerequisite_;
      ppsrid_ = other.ppsrid_;
      isJackpot_ = other.isJackpot_;
      isCertification_ = other.isCertification_;
      parentRoomid_ = other.parentRoomid_;
      parentRoomHandle_ = other.parentRoomHandle_;
      bombpotType_ = other.bombpotType_;
      cycleBombpotHands_ = other.cycleBombpotHands_;
      cycleBombpotSeconds_ = other.cycleBombpotSeconds_;
      minBombTimes_ = other.minBombTimes_;
      maxBombTimes_ = other.maxBombTimes_;
      bombpotAdditionalBoard_ = other.bombpotAdditionalBoard_;
      additionalBoard_ = other.additionalBoard_;
      banClub_ = other.banClub_.Clone();
      banCountry_ = other.banCountry_.Clone();
      isSequentialViewCard_ = other.isSequentialViewCard_;
      isBombpotWithoutEvchop_ = other.isBombpotWithoutEvchop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateClubRoomREQ Clone() {
      return new CreateClubRoomREQ(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 2;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    /// <summary>
    ///盲注,小盲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 1) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 3;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 2) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "min_buyin" field.</summary>
    public const int MinBuyinFieldNumber = 4;
    private readonly static long MinBuyinDefaultValue = 0L;

    private long minBuyin_;
    /// <summary>
    ///最小买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBuyin {
      get { if ((_hasBits0 & 4) != 0) { return minBuyin_; } else { return MinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBuyin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBuyin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 5;
    private readonly static int GameTimeDefaultValue = 0;

    private int gameTime_;
    /// <summary>
    ///游戏时长,单位分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameTime {
      get { if ((_hasBits0 & 8) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 6;
    private readonly static int ActionTimeDefaultValue = 0;

    private int actionTime_;
    /// <summary>
    ///下注时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionTime {
      get { if ((_hasBits0 & 16) != 0) { return actionTime_; } else { return ActionTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        actionTime_ = value;
      }
    }
    /// <summary>Gets whether the "action_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "action_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "feetype" field.</summary>
    public const int FeetypeFieldNumber = 7;
    private readonly static int FeetypeDefaultValue = 0;

    private int feetype_;
    /// <summary>
    ///fee类型， 1 买入收取服务费  2 每局fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feetype {
      get { if ((_hasBits0 & 32) != 0) { return feetype_; } else { return FeetypeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        feetype_ = value;
      }
    }
    /// <summary>Gets whether the "feetype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeetype {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "feetype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeetype() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 8;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    /// <summary>
    ///fee比例，3代表%3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 64) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 64;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "auth_limit" field.</summary>
    public const int AuthLimitFieldNumber = 9;
    private readonly static bool AuthLimitDefaultValue = false;

    private bool authLimit_;
    /// <summary>
    ///是否授权买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AuthLimit {
      get { if ((_hasBits0 & 128) != 0) { return authLimit_; } else { return AuthLimitDefaultValue; } }
      set {
        _hasBits0 |= 128;
        authLimit_ = value;
      }
    }
    /// <summary>Gets whether the "auth_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuthLimit {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "auth_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuthLimit() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 10;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 11;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 256) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 256;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 12;
    private readonly static int CapDefaultValue = 0;

    private int cap_;
    /// <summary>
    ///50表示5倍大盲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cap {
      get { if ((_hasBits0 & 512) != 0) { return cap_; } else { return CapDefaultValue; } }
      set {
        _hasBits0 |= 512;
        cap_ = value;
      }
    }
    /// <summary>Gets whether the "cap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCap {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "cap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCap() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 13;
    private readonly static global::Texas.Protocol.RoomType TypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType Type {
      get { if ((_hasBits0 & 1024) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "max_buyin" field.</summary>
    public const int MaxBuyinFieldNumber = 14;
    private readonly static long MaxBuyinDefaultValue = 0L;

    private long maxBuyin_;
    /// <summary>
    ///最大买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxBuyin {
      get { if ((_hasBits0 & 2048) != 0) { return maxBuyin_; } else { return MaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        maxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBuyin {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBuyin() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 15;
    private readonly static int TimezoneDefaultValue = 0;

    private int timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Timezone {
      get { if ((_hasBits0 & 4096) != 0) { return timezone_; } else { return TimezoneDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        timezone_ = value;
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimezone {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimezone() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 16;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    /// <summary>
    ///客户端不需要填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "default_buyin" field.</summary>
    public const int DefaultBuyinFieldNumber = 17;
    private readonly static long DefaultBuyinDefaultValue = 0L;

    private long defaultBuyin_;
    /// <summary>
    ///默认买入，非大厅房间，与min_buyin相同
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DefaultBuyin {
      get { if ((_hasBits0 & 8192) != 0) { return defaultBuyin_; } else { return DefaultBuyinDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        defaultBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "default_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefaultBuyin {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "default_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefaultBuyin() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "is_run_multi_times" field.</summary>
    public const int IsRunMultiTimesFieldNumber = 18;
    private readonly static bool IsRunMultiTimesDefaultValue = false;

    private bool isRunMultiTimes_;
    /// <summary>
    ///是否发多次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRunMultiTimes {
      get { if ((_hasBits0 & 16384) != 0) { return isRunMultiTimes_; } else { return IsRunMultiTimesDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        isRunMultiTimes_ = value;
      }
    }
    /// <summary>Gets whether the "is_run_multi_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRunMultiTimes {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_run_multi_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRunMultiTimes() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "is_insurance" field.</summary>
    public const int IsInsuranceFieldNumber = 19;
    private readonly static bool IsInsuranceDefaultValue = false;

    private bool isInsurance_;
    /// <summary>
    ///是否保险
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInsurance {
      get { if ((_hasBits0 & 32768) != 0) { return isInsurance_; } else { return IsInsuranceDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        isInsurance_ = value;
      }
    }
    /// <summary>Gets whether the "is_insurance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInsurance {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "is_insurance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInsurance() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 20;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    /// <summary>
    ///联盟id，如果不为0表示为联盟房
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 65536) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 21;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 131072) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 22;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 262144) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "cityid" field.</summary>
    public const int CityidFieldNumber = 23;
    private readonly static int CityidDefaultValue = 0;

    private int cityid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cityid {
      get { if ((_hasBits0 & 524288) != 0) { return cityid_; } else { return CityidDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        cityid_ = value;
      }
    }
    /// <summary>Gets whether the "cityid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCityid {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "cityid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCityid() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "auto_start" field.</summary>
    public const int AutoStartFieldNumber = 24;
    private readonly static int AutoStartDefaultValue = 0;

    private int autoStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoStart {
      get { if ((_hasBits0 & 1048576) != 0) { return autoStart_; } else { return AutoStartDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        autoStart_ = value;
      }
    }
    /// <summary>Gets whether the "auto_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoStart {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "auto_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoStart() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 25;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    /// <summary>
    ///玩法细分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 2097152) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "calltime_minutes" field.</summary>
    public const int CalltimeMinutesFieldNumber = 26;
    private readonly static int CalltimeMinutesDefaultValue = 0;

    private int calltimeMinutes_;
    /// <summary>
    ///CALLTIME房间CT时长(分钟)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalltimeMinutes {
      get { if ((_hasBits0 & 4194304) != 0) { return calltimeMinutes_; } else { return CalltimeMinutesDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        calltimeMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "calltime_minutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCalltimeMinutes {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "calltime_minutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCalltimeMinutes() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "withdraw_chips" field.</summary>
    public const int WithdrawChipsFieldNumber = 27;
    private readonly static bool WithdrawChipsDefaultValue = false;

    private bool withdrawChips_;
    /// <summary>
    /// 是否开启撤回筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WithdrawChips {
      get { if ((_hasBits0 & 8388608) != 0) { return withdrawChips_; } else { return WithdrawChipsDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        withdrawChips_ = value;
      }
    }
    /// <summary>Gets whether the "withdraw_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWithdrawChips {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "withdraw_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWithdrawChips() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "is_auto_delay_room_over" field.</summary>
    public const int IsAutoDelayRoomOverFieldNumber = 28;
    private readonly static bool IsAutoDelayRoomOverDefaultValue = false;

    private bool isAutoDelayRoomOver_;
    /// <summary>
    ///是否自动延时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoDelayRoomOver {
      get { if ((_hasBits0 & 16777216) != 0) { return isAutoDelayRoomOver_; } else { return IsAutoDelayRoomOverDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        isAutoDelayRoomOver_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_delay_room_over" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoDelayRoomOver {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_delay_room_over" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoDelayRoomOver() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "auto_delay_room_over_times" field.</summary>
    public const int AutoDelayRoomOverTimesFieldNumber = 29;
    private readonly static int AutoDelayRoomOverTimesDefaultValue = 0;

    private int autoDelayRoomOverTimes_;
    /// <summary>
    ///自动延时次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoDelayRoomOverTimes {
      get { if ((_hasBits0 & 33554432) != 0) { return autoDelayRoomOverTimes_; } else { return AutoDelayRoomOverTimesDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        autoDelayRoomOverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "auto_delay_room_over_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoDelayRoomOverTimes {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "auto_delay_room_over_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoDelayRoomOverTimes() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 30;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    /// <summary>
    ///是否自动开桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits0 & 67108864) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "creator_user_id" field.</summary>
    public const int CreatorUserIdFieldNumber = 31;
    private readonly static long CreatorUserIdDefaultValue = 0L;

    private long creatorUserId_;
    /// <summary>
    ///创建者用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CreatorUserId {
      get { if ((_hasBits0 & 134217728) != 0) { return creatorUserId_; } else { return CreatorUserIdDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        creatorUserId_ = value;
      }
    }
    /// <summary>Gets whether the "creator_user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreatorUserId {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "creator_user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreatorUserId() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "vpip_limit" field.</summary>
    public const int VpipLimitFieldNumber = 32;
    private readonly static int VpipLimitDefaultValue = 0;

    private int vpipLimit_;
    /// <summary>
    ///VPIP入池率限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VpipLimit {
      get { if ((_hasBits0 & 268435456) != 0) { return vpipLimit_; } else { return VpipLimitDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        vpipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "vpip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpipLimit {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "vpip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpipLimit() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 33;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    ///when use module create use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits0 & 536870912) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "multi_opid" field.</summary>
    public const int MultiOpidFieldNumber = 34;
    private readonly static string MultiOpidDefaultValue = "";

    private string multiOpid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MultiOpid {
      get { return multiOpid_ ?? MultiOpidDefaultValue; }
      set {
        multiOpid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "multi_opid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMultiOpid {
      get { return multiOpid_ != null; }
    }
    /// <summary>Clears the value of the "multi_opid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMultiOpid() {
      multiOpid_ = null;
    }

    /// <summary>Field number for the "can_use" field.</summary>
    public const int CanUseFieldNumber = 35;
    private readonly static bool CanUseDefaultValue = false;

    private bool canUse_;
    /// <summary>
    /// module can use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanUse {
      get { if ((_hasBits0 & 1073741824) != 0) { return canUse_; } else { return CanUseDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        canUse_ = value;
      }
    }
    /// <summary>Gets whether the "can_use" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanUse {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "can_use" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanUse() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 36;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits0 & -2147483648) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "is_evchop" field.</summary>
    public const int IsEvchopFieldNumber = 37;
    private readonly static bool IsEvchopDefaultValue = false;

    private bool isEvchop_;
    /// <summary>
    ///是否提前兑现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEvchop {
      get { if ((_hasBits1 & 1) != 0) { return isEvchop_; } else { return IsEvchopDefaultValue; } }
      set {
        _hasBits1 |= 1;
        isEvchop_ = value;
      }
    }
    /// <summary>Gets whether the "is_evchop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEvchop {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_evchop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEvchop() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "vpip_limit_per_set" field.</summary>
    public const int VpipLimitPerSetFieldNumber = 38;
    private readonly static int VpipLimitPerSetDefaultValue = 0;

    private int vpipLimitPerSet_;
    /// <summary>
    ///本局vpip 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VpipLimitPerSet {
      get { if ((_hasBits1 & 2) != 0) { return vpipLimitPerSet_; } else { return VpipLimitPerSetDefaultValue; } }
      set {
        _hasBits1 |= 2;
        vpipLimitPerSet_ = value;
      }
    }
    /// <summary>Gets whether the "vpip_limit_per_set" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpipLimitPerSet {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vpip_limit_per_set" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpipLimitPerSet() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "min_hands_per_set" field.</summary>
    public const int MinHandsPerSetFieldNumber = 39;
    private readonly static int MinHandsPerSetDefaultValue = 0;

    private int minHandsPerSet_;
    /// <summary>
    ///本局vpip检测的最低手数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinHandsPerSet {
      get { if ((_hasBits1 & 4) != 0) { return minHandsPerSet_; } else { return MinHandsPerSetDefaultValue; } }
      set {
        _hasBits1 |= 4;
        minHandsPerSet_ = value;
      }
    }
    /// <summary>Gets whether the "min_hands_per_set" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinHandsPerSet {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_hands_per_set" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinHandsPerSet() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 40;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    /// 是否密码桌,与授权买入互斥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits1 & 8) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits1 |= 8;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 41;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    /// <summary>
    ///超级联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits1 & 16) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits1 |= 16;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 42;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    ///1表示非ppst的超级联盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits1 & 32) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits1 |= 32;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "ante_up_vec" field.</summary>
    public const int AnteUpVecFieldNumber = 43;
    private static readonly pb::FieldCodec<long> _repeated_anteUpVec_codec
        = pb::FieldCodec.ForInt64(346);
    private readonly pbc::RepeatedField<long> anteUpVec_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///ante递增组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> AnteUpVec {
      get { return anteUpVec_; }
    }

    /// <summary>Field number for the "derive_roomid" field.</summary>
    public const int DeriveRoomidFieldNumber = 44;
    private readonly static int DeriveRoomidDefaultValue = 0;

    private int deriveRoomid_;
    /// <summary>
    ///该房间的自动创桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeriveRoomid {
      get { if ((_hasBits1 & 64) != 0) { return deriveRoomid_; } else { return DeriveRoomidDefaultValue; } }
      set {
        _hasBits1 |= 64;
        deriveRoomid_ = value;
      }
    }
    /// <summary>Gets whether the "derive_roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeriveRoomid {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "derive_roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeriveRoomid() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "is_captcha" field.</summary>
    public const int IsCaptchaFieldNumber = 45;
    private readonly static bool IsCaptchaDefaultValue = false;

    private bool isCaptcha_;
    /// <summary>
    ///是否人机校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCaptcha {
      get { if ((_hasBits1 & 128) != 0) { return isCaptcha_; } else { return IsCaptchaDefaultValue; } }
      set {
        _hasBits1 |= 128;
        isCaptcha_ = value;
      }
    }
    /// <summary>Gets whether the "is_captcha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCaptcha {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_captcha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCaptcha() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 46;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits1 & 256) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits1 |= 256;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 47;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits1 & 512) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits1 |= 512;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "seven_deuce_reward_multiplier" field.</summary>
    public const int SevenDeuceRewardMultiplierFieldNumber = 48;
    private readonly static int SevenDeuceRewardMultiplierDefaultValue = 0;

    private int sevenDeuceRewardMultiplier_;
    /// <summary>
    ///72o獎勵抽取大盲倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SevenDeuceRewardMultiplier {
      get { if ((_hasBits1 & 1024) != 0) { return sevenDeuceRewardMultiplier_; } else { return SevenDeuceRewardMultiplierDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        sevenDeuceRewardMultiplier_ = value;
      }
    }
    /// <summary>Gets whether the "seven_deuce_reward_multiplier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSevenDeuceRewardMultiplier {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "seven_deuce_reward_multiplier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSevenDeuceRewardMultiplier() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 49;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits1 & 2048) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "is_vip_table" field.</summary>
    public const int IsVipTableFieldNumber = 50;
    private readonly static bool IsVipTableDefaultValue = false;

    private bool isVipTable_;
    /// <summary>
    ///是否為貴賓桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVipTable {
      get { if ((_hasBits1 & 4096) != 0) { return isVipTable_; } else { return IsVipTableDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        isVipTable_ = value;
      }
    }
    /// <summary>Gets whether the "is_vip_table" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVipTable {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "is_vip_table" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVipTable() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "enter_room_chips_prerequisite" field.</summary>
    public const int EnterRoomChipsPrerequisiteFieldNumber = 51;
    private readonly static long EnterRoomChipsPrerequisiteDefaultValue = 0L;

    private long enterRoomChipsPrerequisite_;
    /// <summary>
    ///進房的最低PP幣量要求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EnterRoomChipsPrerequisite {
      get { if ((_hasBits1 & 8192) != 0) { return enterRoomChipsPrerequisite_; } else { return EnterRoomChipsPrerequisiteDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        enterRoomChipsPrerequisite_ = value;
      }
    }
    /// <summary>Gets whether the "enter_room_chips_prerequisite" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnterRoomChipsPrerequisite {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "enter_room_chips_prerequisite" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnterRoomChipsPrerequisite() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 52;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits1 & 16384) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "is_jackpot" field.</summary>
    public const int IsJackpotFieldNumber = 53;
    private readonly static bool IsJackpotDefaultValue = false;

    private bool isJackpot_;
    /// <summary>
    /// 是否開啟JP功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsJackpot {
      get { if ((_hasBits1 & 32768) != 0) { return isJackpot_; } else { return IsJackpotDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        isJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsJackpot {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "is_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsJackpot() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "is_certification" field.</summary>
    public const int IsCertificationFieldNumber = 54;
    private readonly static bool IsCertificationDefaultValue = false;

    private bool isCertification_;
    /// <summary>
    ///是否僅限制認證會員
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCertification {
      get { if ((_hasBits1 & 65536) != 0) { return isCertification_; } else { return IsCertificationDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        isCertification_ = value;
      }
    }
    /// <summary>Gets whether the "is_certification" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCertification {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "is_certification" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCertification() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "parent_roomid" field.</summary>
    public const int ParentRoomidFieldNumber = 55;
    private readonly static int ParentRoomidDefaultValue = 0;

    private int parentRoomid_;
    /// <summary>
    ///flash桌自動創房儲存原房間handle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParentRoomid {
      get { if ((_hasBits1 & 131072) != 0) { return parentRoomid_; } else { return ParentRoomidDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        parentRoomid_ = value;
      }
    }
    /// <summary>Gets whether the "parent_roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentRoomid {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "parent_roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentRoomid() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "parent_room_handle" field.</summary>
    public const int ParentRoomHandleFieldNumber = 56;
    private readonly static uint ParentRoomHandleDefaultValue = 0;

    private uint parentRoomHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ParentRoomHandle {
      get { if ((_hasBits1 & 262144) != 0) { return parentRoomHandle_; } else { return ParentRoomHandleDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        parentRoomHandle_ = value;
      }
    }
    /// <summary>Gets whether the "parent_room_handle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParentRoomHandle {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "parent_room_handle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParentRoomHandle() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "bombpot_type" field.</summary>
    public const int BombpotTypeFieldNumber = 57;
    private readonly static int BombpotTypeDefaultValue = 0;

    private int bombpotType_;
    /// <summary>
    ///bombpot use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BombpotType {
      get { if ((_hasBits1 & 524288) != 0) { return bombpotType_; } else { return BombpotTypeDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        bombpotType_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotType {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotType() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "cycle_bombpot_hands" field.</summary>
    public const int CycleBombpotHandsFieldNumber = 58;
    private readonly static int CycleBombpotHandsDefaultValue = 0;

    private int cycleBombpotHands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CycleBombpotHands {
      get { if ((_hasBits1 & 1048576) != 0) { return cycleBombpotHands_; } else { return CycleBombpotHandsDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        cycleBombpotHands_ = value;
      }
    }
    /// <summary>Gets whether the "cycle_bombpot_hands" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCycleBombpotHands {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "cycle_bombpot_hands" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCycleBombpotHands() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "cycle_bombpot_seconds" field.</summary>
    public const int CycleBombpotSecondsFieldNumber = 59;
    private readonly static int CycleBombpotSecondsDefaultValue = 0;

    private int cycleBombpotSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CycleBombpotSeconds {
      get { if ((_hasBits1 & 2097152) != 0) { return cycleBombpotSeconds_; } else { return CycleBombpotSecondsDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        cycleBombpotSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "cycle_bombpot_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCycleBombpotSeconds {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "cycle_bombpot_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCycleBombpotSeconds() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "min_bomb_times" field.</summary>
    public const int MinBombTimesFieldNumber = 60;
    private readonly static int MinBombTimesDefaultValue = 0;

    private int minBombTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBombTimes {
      get { if ((_hasBits1 & 4194304) != 0) { return minBombTimes_; } else { return MinBombTimesDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        minBombTimes_ = value;
      }
    }
    /// <summary>Gets whether the "min_bomb_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBombTimes {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "min_bomb_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBombTimes() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "max_bomb_times" field.</summary>
    public const int MaxBombTimesFieldNumber = 61;
    private readonly static int MaxBombTimesDefaultValue = 0;

    private int maxBombTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxBombTimes {
      get { if ((_hasBits1 & 8388608) != 0) { return maxBombTimes_; } else { return MaxBombTimesDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        maxBombTimes_ = value;
      }
    }
    /// <summary>Gets whether the "max_bomb_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBombTimes {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "max_bomb_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBombTimes() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "bombpot_additional_board" field.</summary>
    public const int BombpotAdditionalBoardFieldNumber = 62;
    private readonly static int BombpotAdditionalBoardDefaultValue = 0;

    private int bombpotAdditionalBoard_;
    /// <summary>
    ///觸發bombpot時額外有幾道公共牌 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BombpotAdditionalBoard {
      get { if ((_hasBits1 & 16777216) != 0) { return bombpotAdditionalBoard_; } else { return BombpotAdditionalBoardDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        bombpotAdditionalBoard_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_additional_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotAdditionalBoard {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_additional_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotAdditionalBoard() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "additional_board" field.</summary>
    public const int AdditionalBoardFieldNumber = 63;
    private readonly static int AdditionalBoardDefaultValue = 0;

    private int additionalBoard_;
    /// <summary>
    ///additional board
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdditionalBoard {
      get { if ((_hasBits1 & 33554432) != 0) { return additionalBoard_; } else { return AdditionalBoardDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        additionalBoard_ = value;
      }
    }
    /// <summary>Gets whether the "additional_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdditionalBoard {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "additional_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdditionalBoard() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "ban_club" field.</summary>
    public const int BanClubFieldNumber = 64;
    private static readonly pb::FieldCodec<int> _repeated_banClub_codec
        = pb::FieldCodec.ForInt32(514);
    private readonly pbc::RepeatedField<int> banClub_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// restriction for clubs and regions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BanClub {
      get { return banClub_; }
    }

    /// <summary>Field number for the "ban_country" field.</summary>
    public const int BanCountryFieldNumber = 65;
    private static readonly pb::FieldCodec<string> _repeated_banCountry_codec
        = pb::FieldCodec.ForString(522);
    private readonly pbc::RepeatedField<string> banCountry_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 限制注册地为某些国家的用户不能看到和加入牌桌，缩写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> BanCountry {
      get { return banCountry_; }
    }

    /// <summary>Field number for the "is_sequential_view_card" field.</summary>
    public const int IsSequentialViewCardFieldNumber = 66;
    private readonly static bool IsSequentialViewCardDefaultValue = false;

    private bool isSequentialViewCard_;
    /// <summary>
    /// 是否開啟順序看牌功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSequentialViewCard {
      get { if ((_hasBits1 & 67108864) != 0) { return isSequentialViewCard_; } else { return IsSequentialViewCardDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        isSequentialViewCard_ = value;
      }
    }
    /// <summary>Gets whether the "is_sequential_view_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSequentialViewCard {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "is_sequential_view_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSequentialViewCard() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "is_bombpot_without_evchop" field.</summary>
    public const int IsBombpotWithoutEvchopFieldNumber = 67;
    private readonly static bool IsBombpotWithoutEvchopDefaultValue = false;

    private bool isBombpotWithoutEvchop_;
    /// <summary>
    /// bombpot時不能使用evchop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBombpotWithoutEvchop {
      get { if ((_hasBits1 & 134217728) != 0) { return isBombpotWithoutEvchop_; } else { return IsBombpotWithoutEvchopDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        isBombpotWithoutEvchop_ = value;
      }
    }
    /// <summary>Gets whether the "is_bombpot_without_evchop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBombpotWithoutEvchop {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "is_bombpot_without_evchop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBombpotWithoutEvchop() {
      _hasBits1 &= ~134217728;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateClubRoomREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateClubRoomREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Blind != other.Blind) return false;
      if (Ante != other.Ante) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (GameTime != other.GameTime) return false;
      if (ActionTime != other.ActionTime) return false;
      if (Feetype != other.Feetype) return false;
      if (Feepoint != other.Feepoint) return false;
      if (AuthLimit != other.AuthLimit) return false;
      if (Clubid != other.Clubid) return false;
      if (SeatNum != other.SeatNum) return false;
      if (Cap != other.Cap) return false;
      if (Type != other.Type) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (Timezone != other.Timezone) return false;
      if (Roomid != other.Roomid) return false;
      if (DefaultBuyin != other.DefaultBuyin) return false;
      if (IsRunMultiTimes != other.IsRunMultiTimes) return false;
      if (IsInsurance != other.IsInsurance) return false;
      if (Leagueid != other.Leagueid) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (Cityid != other.Cityid) return false;
      if (AutoStart != other.AutoStart) return false;
      if (GameMode != other.GameMode) return false;
      if (CalltimeMinutes != other.CalltimeMinutes) return false;
      if (WithdrawChips != other.WithdrawChips) return false;
      if (IsAutoDelayRoomOver != other.IsAutoDelayRoomOver) return false;
      if (AutoDelayRoomOverTimes != other.AutoDelayRoomOverTimes) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (CreatorUserId != other.CreatorUserId) return false;
      if (VpipLimit != other.VpipLimit) return false;
      if (Moduleid != other.Moduleid) return false;
      if (MultiOpid != other.MultiOpid) return false;
      if (CanUse != other.CanUse) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (IsEvchop != other.IsEvchop) return false;
      if (VpipLimitPerSet != other.VpipLimitPerSet) return false;
      if (MinHandsPerSet != other.MinHandsPerSet) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if(!anteUpVec_.Equals(other.anteUpVec_)) return false;
      if (DeriveRoomid != other.DeriveRoomid) return false;
      if (IsCaptcha != other.IsCaptcha) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (SevenDeuceRewardMultiplier != other.SevenDeuceRewardMultiplier) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      if (IsVipTable != other.IsVipTable) return false;
      if (EnterRoomChipsPrerequisite != other.EnterRoomChipsPrerequisite) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (IsJackpot != other.IsJackpot) return false;
      if (IsCertification != other.IsCertification) return false;
      if (ParentRoomid != other.ParentRoomid) return false;
      if (ParentRoomHandle != other.ParentRoomHandle) return false;
      if (BombpotType != other.BombpotType) return false;
      if (CycleBombpotHands != other.CycleBombpotHands) return false;
      if (CycleBombpotSeconds != other.CycleBombpotSeconds) return false;
      if (MinBombTimes != other.MinBombTimes) return false;
      if (MaxBombTimes != other.MaxBombTimes) return false;
      if (BombpotAdditionalBoard != other.BombpotAdditionalBoard) return false;
      if (AdditionalBoard != other.AdditionalBoard) return false;
      if(!banClub_.Equals(other.banClub_)) return false;
      if(!banCountry_.Equals(other.banCountry_)) return false;
      if (IsSequentialViewCard != other.IsSequentialViewCard) return false;
      if (IsBombpotWithoutEvchop != other.IsBombpotWithoutEvchop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasMinBuyin) hash ^= MinBuyin.GetHashCode();
      if (HasGameTime) hash ^= GameTime.GetHashCode();
      if (HasActionTime) hash ^= ActionTime.GetHashCode();
      if (HasFeetype) hash ^= Feetype.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasAuthLimit) hash ^= AuthLimit.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasCap) hash ^= Cap.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasMaxBuyin) hash ^= MaxBuyin.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasDefaultBuyin) hash ^= DefaultBuyin.GetHashCode();
      if (HasIsRunMultiTimes) hash ^= IsRunMultiTimes.GetHashCode();
      if (HasIsInsurance) hash ^= IsInsurance.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasCityid) hash ^= Cityid.GetHashCode();
      if (HasAutoStart) hash ^= AutoStart.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasCalltimeMinutes) hash ^= CalltimeMinutes.GetHashCode();
      if (HasWithdrawChips) hash ^= WithdrawChips.GetHashCode();
      if (HasIsAutoDelayRoomOver) hash ^= IsAutoDelayRoomOver.GetHashCode();
      if (HasAutoDelayRoomOverTimes) hash ^= AutoDelayRoomOverTimes.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasCreatorUserId) hash ^= CreatorUserId.GetHashCode();
      if (HasVpipLimit) hash ^= VpipLimit.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasMultiOpid) hash ^= MultiOpid.GetHashCode();
      if (HasCanUse) hash ^= CanUse.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasIsEvchop) hash ^= IsEvchop.GetHashCode();
      if (HasVpipLimitPerSet) hash ^= VpipLimitPerSet.GetHashCode();
      if (HasMinHandsPerSet) hash ^= MinHandsPerSet.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      hash ^= anteUpVec_.GetHashCode();
      if (HasDeriveRoomid) hash ^= DeriveRoomid.GetHashCode();
      if (HasIsCaptcha) hash ^= IsCaptcha.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasSevenDeuceRewardMultiplier) hash ^= SevenDeuceRewardMultiplier.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (HasIsVipTable) hash ^= IsVipTable.GetHashCode();
      if (HasEnterRoomChipsPrerequisite) hash ^= EnterRoomChipsPrerequisite.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasIsJackpot) hash ^= IsJackpot.GetHashCode();
      if (HasIsCertification) hash ^= IsCertification.GetHashCode();
      if (HasParentRoomid) hash ^= ParentRoomid.GetHashCode();
      if (HasParentRoomHandle) hash ^= ParentRoomHandle.GetHashCode();
      if (HasBombpotType) hash ^= BombpotType.GetHashCode();
      if (HasCycleBombpotHands) hash ^= CycleBombpotHands.GetHashCode();
      if (HasCycleBombpotSeconds) hash ^= CycleBombpotSeconds.GetHashCode();
      if (HasMinBombTimes) hash ^= MinBombTimes.GetHashCode();
      if (HasMaxBombTimes) hash ^= MaxBombTimes.GetHashCode();
      if (HasBombpotAdditionalBoard) hash ^= BombpotAdditionalBoard.GetHashCode();
      if (HasAdditionalBoard) hash ^= AdditionalBoard.GetHashCode();
      hash ^= banClub_.GetHashCode();
      hash ^= banCountry_.GetHashCode();
      if (HasIsSequentialViewCard) hash ^= IsSequentialViewCard.GetHashCode();
      if (HasIsBombpotWithoutEvchop) hash ^= IsBombpotWithoutEvchop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomName) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (HasBlind) {
        output.WriteRawTag(16);
        output.WriteInt64(Blind);
      }
      if (HasAnte) {
        output.WriteRawTag(24);
        output.WriteInt64(Ante);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(MinBuyin);
      }
      if (HasGameTime) {
        output.WriteRawTag(40);
        output.WriteInt32(GameTime);
      }
      if (HasActionTime) {
        output.WriteRawTag(48);
        output.WriteInt32(ActionTime);
      }
      if (HasFeetype) {
        output.WriteRawTag(56);
        output.WriteInt32(Feetype);
      }
      if (HasFeepoint) {
        output.WriteRawTag(64);
        output.WriteInt32(Feepoint);
      }
      if (HasAuthLimit) {
        output.WriteRawTag(72);
        output.WriteBool(AuthLimit);
      }
      if (HasClubid) {
        output.WriteRawTag(82);
        output.WriteString(Clubid);
      }
      if (HasSeatNum) {
        output.WriteRawTag(88);
        output.WriteInt32(SeatNum);
      }
      if (HasCap) {
        output.WriteRawTag(96);
        output.WriteInt32(Cap);
      }
      if (HasType) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Type);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(112);
        output.WriteInt64(MaxBuyin);
      }
      if (HasTimezone) {
        output.WriteRawTag(120);
        output.WriteInt32(Timezone);
      }
      if (HasRoomid) {
        output.WriteRawTag(130, 1);
        output.WriteString(Roomid);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasIsRunMultiTimes) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsRunMultiTimes);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsInsurance);
      }
      if (HasLeagueid) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(168, 1);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IpLimit);
      }
      if (HasCityid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Cityid);
      }
      if (HasAutoStart) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasGameMode) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasWithdrawChips) {
        output.WriteRawTag(216, 1);
        output.WriteBool(WithdrawChips);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(CreatorUserId);
      }
      if (HasVpipLimit) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(VpipLimit);
      }
      if (HasModuleid) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(146, 2);
        output.WriteString(MultiOpid);
      }
      if (HasCanUse) {
        output.WriteRawTag(152, 2);
        output.WriteBool(CanUse);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ForbiddenChat);
      }
      if (HasIsEvchop) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsEvchop);
      }
      if (HasVpipLimitPerSet) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(VpipLimitPerSet);
      }
      if (HasMinHandsPerSet) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(MinHandsPerSet);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(192, 2);
        output.WriteBool(PasswdLimit);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(SuperLeagueType);
      }
      anteUpVec_.WriteTo(output, _repeated_anteUpVec_codec);
      if (HasDeriveRoomid) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(DeriveRoomid);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasSevenDeuceRewardMultiplier) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(SevenDeuceRewardMultiplier);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasIsVipTable) {
        output.WriteRawTag(144, 3);
        output.WriteBool(IsVipTable);
      }
      if (HasEnterRoomChipsPrerequisite) {
        output.WriteRawTag(152, 3);
        output.WriteInt64(EnterRoomChipsPrerequisite);
      }
      if (HasPpsrid) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(Ppsrid);
      }
      if (HasIsJackpot) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IsJackpot);
      }
      if (HasIsCertification) {
        output.WriteRawTag(176, 3);
        output.WriteBool(IsCertification);
      }
      if (HasParentRoomid) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ParentRoomid);
      }
      if (HasParentRoomHandle) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(ParentRoomHandle);
      }
      if (HasBombpotType) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(BombpotType);
      }
      if (HasCycleBombpotHands) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(CycleBombpotHands);
      }
      if (HasCycleBombpotSeconds) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(CycleBombpotSeconds);
      }
      if (HasMinBombTimes) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(MinBombTimes);
      }
      if (HasMaxBombTimes) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(MaxBombTimes);
      }
      if (HasBombpotAdditionalBoard) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(BombpotAdditionalBoard);
      }
      if (HasAdditionalBoard) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(AdditionalBoard);
      }
      banClub_.WriteTo(output, _repeated_banClub_codec);
      banCountry_.WriteTo(output, _repeated_banCountry_codec);
      if (HasIsSequentialViewCard) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IsSequentialViewCard);
      }
      if (HasIsBombpotWithoutEvchop) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IsBombpotWithoutEvchop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomName) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (HasBlind) {
        output.WriteRawTag(16);
        output.WriteInt64(Blind);
      }
      if (HasAnte) {
        output.WriteRawTag(24);
        output.WriteInt64(Ante);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(MinBuyin);
      }
      if (HasGameTime) {
        output.WriteRawTag(40);
        output.WriteInt32(GameTime);
      }
      if (HasActionTime) {
        output.WriteRawTag(48);
        output.WriteInt32(ActionTime);
      }
      if (HasFeetype) {
        output.WriteRawTag(56);
        output.WriteInt32(Feetype);
      }
      if (HasFeepoint) {
        output.WriteRawTag(64);
        output.WriteInt32(Feepoint);
      }
      if (HasAuthLimit) {
        output.WriteRawTag(72);
        output.WriteBool(AuthLimit);
      }
      if (HasClubid) {
        output.WriteRawTag(82);
        output.WriteString(Clubid);
      }
      if (HasSeatNum) {
        output.WriteRawTag(88);
        output.WriteInt32(SeatNum);
      }
      if (HasCap) {
        output.WriteRawTag(96);
        output.WriteInt32(Cap);
      }
      if (HasType) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Type);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(112);
        output.WriteInt64(MaxBuyin);
      }
      if (HasTimezone) {
        output.WriteRawTag(120);
        output.WriteInt32(Timezone);
      }
      if (HasRoomid) {
        output.WriteRawTag(130, 1);
        output.WriteString(Roomid);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasIsRunMultiTimes) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsRunMultiTimes);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsInsurance);
      }
      if (HasLeagueid) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(168, 1);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IpLimit);
      }
      if (HasCityid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Cityid);
      }
      if (HasAutoStart) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasGameMode) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasWithdrawChips) {
        output.WriteRawTag(216, 1);
        output.WriteBool(WithdrawChips);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(CreatorUserId);
      }
      if (HasVpipLimit) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(VpipLimit);
      }
      if (HasModuleid) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(146, 2);
        output.WriteString(MultiOpid);
      }
      if (HasCanUse) {
        output.WriteRawTag(152, 2);
        output.WriteBool(CanUse);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ForbiddenChat);
      }
      if (HasIsEvchop) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsEvchop);
      }
      if (HasVpipLimitPerSet) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(VpipLimitPerSet);
      }
      if (HasMinHandsPerSet) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(MinHandsPerSet);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(192, 2);
        output.WriteBool(PasswdLimit);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(SuperLeagueType);
      }
      anteUpVec_.WriteTo(ref output, _repeated_anteUpVec_codec);
      if (HasDeriveRoomid) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(DeriveRoomid);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasSevenDeuceRewardMultiplier) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(SevenDeuceRewardMultiplier);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasIsVipTable) {
        output.WriteRawTag(144, 3);
        output.WriteBool(IsVipTable);
      }
      if (HasEnterRoomChipsPrerequisite) {
        output.WriteRawTag(152, 3);
        output.WriteInt64(EnterRoomChipsPrerequisite);
      }
      if (HasPpsrid) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(Ppsrid);
      }
      if (HasIsJackpot) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IsJackpot);
      }
      if (HasIsCertification) {
        output.WriteRawTag(176, 3);
        output.WriteBool(IsCertification);
      }
      if (HasParentRoomid) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ParentRoomid);
      }
      if (HasParentRoomHandle) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(ParentRoomHandle);
      }
      if (HasBombpotType) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(BombpotType);
      }
      if (HasCycleBombpotHands) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(CycleBombpotHands);
      }
      if (HasCycleBombpotSeconds) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(CycleBombpotSeconds);
      }
      if (HasMinBombTimes) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(MinBombTimes);
      }
      if (HasMaxBombTimes) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(MaxBombTimes);
      }
      if (HasBombpotAdditionalBoard) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(BombpotAdditionalBoard);
      }
      if (HasAdditionalBoard) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(AdditionalBoard);
      }
      banClub_.WriteTo(ref output, _repeated_banClub_codec);
      banCountry_.WriteTo(ref output, _repeated_banCountry_codec);
      if (HasIsSequentialViewCard) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IsSequentialViewCard);
      }
      if (HasIsBombpotWithoutEvchop) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IsBombpotWithoutEvchop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasMinBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinBuyin);
      }
      if (HasGameTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (HasActionTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTime);
      }
      if (HasFeetype) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feetype);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasAuthLimit) {
        size += 1 + 1;
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasCap) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cap);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasMaxBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBuyin);
      }
      if (HasTimezone) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
      }
      if (HasRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasDefaultBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultBuyin);
      }
      if (HasIsRunMultiTimes) {
        size += 2 + 1;
      }
      if (HasIsInsurance) {
        size += 2 + 1;
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasGpsLimit) {
        size += 2 + 1;
      }
      if (HasIpLimit) {
        size += 2 + 1;
      }
      if (HasCityid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cityid);
      }
      if (HasAutoStart) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoStart);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasCalltimeMinutes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CalltimeMinutes);
      }
      if (HasWithdrawChips) {
        size += 2 + 1;
      }
      if (HasIsAutoDelayRoomOver) {
        size += 2 + 1;
      }
      if (HasAutoDelayRoomOverTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasCreatorUserId) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreatorUserId);
      }
      if (HasVpipLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VpipLimit);
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasMultiOpid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultiOpid);
      }
      if (HasCanUse) {
        size += 2 + 1;
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasIsEvchop) {
        size += 2 + 1;
      }
      if (HasVpipLimitPerSet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VpipLimitPerSet);
      }
      if (HasMinHandsPerSet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinHandsPerSet);
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      size += anteUpVec_.CalculateSize(_repeated_anteUpVec_codec);
      if (HasDeriveRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeriveRoomid);
      }
      if (HasIsCaptcha) {
        size += 2 + 1;
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasSevenDeuceRewardMultiplier) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SevenDeuceRewardMultiplier);
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (HasIsVipTable) {
        size += 2 + 1;
      }
      if (HasEnterRoomChipsPrerequisite) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EnterRoomChipsPrerequisite);
      }
      if (HasPpsrid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasIsJackpot) {
        size += 2 + 1;
      }
      if (HasIsCertification) {
        size += 2 + 1;
      }
      if (HasParentRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParentRoomid);
      }
      if (HasParentRoomHandle) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParentRoomHandle);
      }
      if (HasBombpotType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombpotType);
      }
      if (HasCycleBombpotHands) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CycleBombpotHands);
      }
      if (HasCycleBombpotSeconds) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CycleBombpotSeconds);
      }
      if (HasMinBombTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinBombTimes);
      }
      if (HasMaxBombTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBombTimes);
      }
      if (HasBombpotAdditionalBoard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombpotAdditionalBoard);
      }
      if (HasAdditionalBoard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdditionalBoard);
      }
      size += banClub_.CalculateSize(_repeated_banClub_codec);
      size += banCountry_.CalculateSize(_repeated_banCountry_codec);
      if (HasIsSequentialViewCard) {
        size += 2 + 1;
      }
      if (HasIsBombpotWithoutEvchop) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateClubRoomREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasMinBuyin) {
        MinBuyin = other.MinBuyin;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.HasActionTime) {
        ActionTime = other.ActionTime;
      }
      if (other.HasFeetype) {
        Feetype = other.Feetype;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasAuthLimit) {
        AuthLimit = other.AuthLimit;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasCap) {
        Cap = other.Cap;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasMaxBuyin) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasDefaultBuyin) {
        DefaultBuyin = other.DefaultBuyin;
      }
      if (other.HasIsRunMultiTimes) {
        IsRunMultiTimes = other.IsRunMultiTimes;
      }
      if (other.HasIsInsurance) {
        IsInsurance = other.IsInsurance;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasCityid) {
        Cityid = other.Cityid;
      }
      if (other.HasAutoStart) {
        AutoStart = other.AutoStart;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasCalltimeMinutes) {
        CalltimeMinutes = other.CalltimeMinutes;
      }
      if (other.HasWithdrawChips) {
        WithdrawChips = other.WithdrawChips;
      }
      if (other.HasIsAutoDelayRoomOver) {
        IsAutoDelayRoomOver = other.IsAutoDelayRoomOver;
      }
      if (other.HasAutoDelayRoomOverTimes) {
        AutoDelayRoomOverTimes = other.AutoDelayRoomOverTimes;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasCreatorUserId) {
        CreatorUserId = other.CreatorUserId;
      }
      if (other.HasVpipLimit) {
        VpipLimit = other.VpipLimit;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasMultiOpid) {
        MultiOpid = other.MultiOpid;
      }
      if (other.HasCanUse) {
        CanUse = other.CanUse;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasIsEvchop) {
        IsEvchop = other.IsEvchop;
      }
      if (other.HasVpipLimitPerSet) {
        VpipLimitPerSet = other.VpipLimitPerSet;
      }
      if (other.HasMinHandsPerSet) {
        MinHandsPerSet = other.MinHandsPerSet;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      anteUpVec_.Add(other.anteUpVec_);
      if (other.HasDeriveRoomid) {
        DeriveRoomid = other.DeriveRoomid;
      }
      if (other.HasIsCaptcha) {
        IsCaptcha = other.IsCaptcha;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasSevenDeuceRewardMultiplier) {
        SevenDeuceRewardMultiplier = other.SevenDeuceRewardMultiplier;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      if (other.HasIsVipTable) {
        IsVipTable = other.IsVipTable;
      }
      if (other.HasEnterRoomChipsPrerequisite) {
        EnterRoomChipsPrerequisite = other.EnterRoomChipsPrerequisite;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasIsJackpot) {
        IsJackpot = other.IsJackpot;
      }
      if (other.HasIsCertification) {
        IsCertification = other.IsCertification;
      }
      if (other.HasParentRoomid) {
        ParentRoomid = other.ParentRoomid;
      }
      if (other.HasParentRoomHandle) {
        ParentRoomHandle = other.ParentRoomHandle;
      }
      if (other.HasBombpotType) {
        BombpotType = other.BombpotType;
      }
      if (other.HasCycleBombpotHands) {
        CycleBombpotHands = other.CycleBombpotHands;
      }
      if (other.HasCycleBombpotSeconds) {
        CycleBombpotSeconds = other.CycleBombpotSeconds;
      }
      if (other.HasMinBombTimes) {
        MinBombTimes = other.MinBombTimes;
      }
      if (other.HasMaxBombTimes) {
        MaxBombTimes = other.MaxBombTimes;
      }
      if (other.HasBombpotAdditionalBoard) {
        BombpotAdditionalBoard = other.BombpotAdditionalBoard;
      }
      if (other.HasAdditionalBoard) {
        AdditionalBoard = other.AdditionalBoard;
      }
      banClub_.Add(other.banClub_);
      banCountry_.Add(other.banCountry_);
      if (other.HasIsSequentialViewCard) {
        IsSequentialViewCard = other.IsSequentialViewCard;
      }
      if (other.HasIsBombpotWithoutEvchop) {
        IsBombpotWithoutEvchop = other.IsBombpotWithoutEvchop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            Blind = input.ReadInt64();
            break;
          }
          case 24: {
            Ante = input.ReadInt64();
            break;
          }
          case 32: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 40: {
            GameTime = input.ReadInt32();
            break;
          }
          case 48: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 56: {
            Feetype = input.ReadInt32();
            break;
          }
          case 64: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 72: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 82: {
            Clubid = input.ReadString();
            break;
          }
          case 88: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 96: {
            Cap = input.ReadInt32();
            break;
          }
          case 104: {
            Type = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 112: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 120: {
            Timezone = input.ReadInt32();
            break;
          }
          case 130: {
            Roomid = input.ReadString();
            break;
          }
          case 136: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 144: {
            IsRunMultiTimes = input.ReadBool();
            break;
          }
          case 152: {
            IsInsurance = input.ReadBool();
            break;
          }
          case 160: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 168: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 176: {
            IpLimit = input.ReadBool();
            break;
          }
          case 184: {
            Cityid = input.ReadInt32();
            break;
          }
          case 192: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 200: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 208: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 216: {
            WithdrawChips = input.ReadBool();
            break;
          }
          case 224: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 232: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 240: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 248: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 256: {
            VpipLimit = input.ReadInt32();
            break;
          }
          case 264: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 274: {
            MultiOpid = input.ReadString();
            break;
          }
          case 280: {
            CanUse = input.ReadBool();
            break;
          }
          case 288: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 296: {
            IsEvchop = input.ReadBool();
            break;
          }
          case 304: {
            VpipLimitPerSet = input.ReadInt32();
            break;
          }
          case 312: {
            MinHandsPerSet = input.ReadInt32();
            break;
          }
          case 320: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 328: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 336: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 346:
          case 344: {
            anteUpVec_.AddEntriesFrom(input, _repeated_anteUpVec_codec);
            break;
          }
          case 352: {
            DeriveRoomid = input.ReadInt32();
            break;
          }
          case 360: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 368: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 376: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 384: {
            SevenDeuceRewardMultiplier = input.ReadInt32();
            break;
          }
          case 392: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 400: {
            IsVipTable = input.ReadBool();
            break;
          }
          case 408: {
            EnterRoomChipsPrerequisite = input.ReadInt64();
            break;
          }
          case 416: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 424: {
            IsJackpot = input.ReadBool();
            break;
          }
          case 432: {
            IsCertification = input.ReadBool();
            break;
          }
          case 440: {
            ParentRoomid = input.ReadInt32();
            break;
          }
          case 448: {
            ParentRoomHandle = input.ReadUInt32();
            break;
          }
          case 456: {
            BombpotType = input.ReadInt32();
            break;
          }
          case 464: {
            CycleBombpotHands = input.ReadInt32();
            break;
          }
          case 472: {
            CycleBombpotSeconds = input.ReadInt32();
            break;
          }
          case 480: {
            MinBombTimes = input.ReadInt32();
            break;
          }
          case 488: {
            MaxBombTimes = input.ReadInt32();
            break;
          }
          case 496: {
            BombpotAdditionalBoard = input.ReadInt32();
            break;
          }
          case 504: {
            AdditionalBoard = input.ReadInt32();
            break;
          }
          case 514:
          case 512: {
            banClub_.AddEntriesFrom(input, _repeated_banClub_codec);
            break;
          }
          case 522: {
            banCountry_.AddEntriesFrom(input, _repeated_banCountry_codec);
            break;
          }
          case 528: {
            IsSequentialViewCard = input.ReadBool();
            break;
          }
          case 536: {
            IsBombpotWithoutEvchop = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            Blind = input.ReadInt64();
            break;
          }
          case 24: {
            Ante = input.ReadInt64();
            break;
          }
          case 32: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 40: {
            GameTime = input.ReadInt32();
            break;
          }
          case 48: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 56: {
            Feetype = input.ReadInt32();
            break;
          }
          case 64: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 72: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 82: {
            Clubid = input.ReadString();
            break;
          }
          case 88: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 96: {
            Cap = input.ReadInt32();
            break;
          }
          case 104: {
            Type = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 112: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 120: {
            Timezone = input.ReadInt32();
            break;
          }
          case 130: {
            Roomid = input.ReadString();
            break;
          }
          case 136: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 144: {
            IsRunMultiTimes = input.ReadBool();
            break;
          }
          case 152: {
            IsInsurance = input.ReadBool();
            break;
          }
          case 160: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 168: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 176: {
            IpLimit = input.ReadBool();
            break;
          }
          case 184: {
            Cityid = input.ReadInt32();
            break;
          }
          case 192: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 200: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 208: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 216: {
            WithdrawChips = input.ReadBool();
            break;
          }
          case 224: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 232: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 240: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 248: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 256: {
            VpipLimit = input.ReadInt32();
            break;
          }
          case 264: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 274: {
            MultiOpid = input.ReadString();
            break;
          }
          case 280: {
            CanUse = input.ReadBool();
            break;
          }
          case 288: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 296: {
            IsEvchop = input.ReadBool();
            break;
          }
          case 304: {
            VpipLimitPerSet = input.ReadInt32();
            break;
          }
          case 312: {
            MinHandsPerSet = input.ReadInt32();
            break;
          }
          case 320: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 328: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 336: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 346:
          case 344: {
            anteUpVec_.AddEntriesFrom(ref input, _repeated_anteUpVec_codec);
            break;
          }
          case 352: {
            DeriveRoomid = input.ReadInt32();
            break;
          }
          case 360: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 368: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 376: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 384: {
            SevenDeuceRewardMultiplier = input.ReadInt32();
            break;
          }
          case 392: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 400: {
            IsVipTable = input.ReadBool();
            break;
          }
          case 408: {
            EnterRoomChipsPrerequisite = input.ReadInt64();
            break;
          }
          case 416: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 424: {
            IsJackpot = input.ReadBool();
            break;
          }
          case 432: {
            IsCertification = input.ReadBool();
            break;
          }
          case 440: {
            ParentRoomid = input.ReadInt32();
            break;
          }
          case 448: {
            ParentRoomHandle = input.ReadUInt32();
            break;
          }
          case 456: {
            BombpotType = input.ReadInt32();
            break;
          }
          case 464: {
            CycleBombpotHands = input.ReadInt32();
            break;
          }
          case 472: {
            CycleBombpotSeconds = input.ReadInt32();
            break;
          }
          case 480: {
            MinBombTimes = input.ReadInt32();
            break;
          }
          case 488: {
            MaxBombTimes = input.ReadInt32();
            break;
          }
          case 496: {
            BombpotAdditionalBoard = input.ReadInt32();
            break;
          }
          case 504: {
            AdditionalBoard = input.ReadInt32();
            break;
          }
          case 514:
          case 512: {
            banClub_.AddEntriesFrom(ref input, _repeated_banClub_codec);
            break;
          }
          case 522: {
            banCountry_.AddEntriesFrom(ref input, _repeated_banCountry_codec);
            break;
          }
          case 528: {
            IsSequentialViewCard = input.ReadBool();
            break;
          }
          case 536: {
            IsBombpotWithoutEvchop = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///code返回码
  ///-1：参数错误 没有权限  
  ///-2：服务器内部错误  
  ///-3：停服  
  ///-4：俱乐部到期 
  ///-5：钻石不够 
  ///-6：无权限 
  ///-7：无法创建微级别牌局 
  ///-8：不在灰度测试白名单内
  ///-9：房间暂不开放
  ///-10 : 試圖開啟jackpot牌桌但沒俱樂部啟動jackpot
  ///-11 : jackpot桌開桌錯誤
  ///-200 : ppsr 權限錯誤
  ///-201 : ppsr 盲注級別不合法
  /// </summary>
  public sealed partial class CreateClubRoomRSP : pb::IMessage<CreateClubRoomRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateClubRoomRSP> _parser = new pb::MessageParser<CreateClubRoomRSP>(() => new CreateClubRoomRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateClubRoomRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CreateClubRoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateClubRoomRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateClubRoomRSP(CreateClubRoomRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      reason_ = other.reason_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateClubRoomRSP Clone() {
      return new CreateClubRoomRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///返回码   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::Texas.Protocol.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateClubRoomRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateClubRoomRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Reason != other.Reason) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasReason) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasReason) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateClubRoomRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Texas.Protocol.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Texas.Protocol.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Texas.Protocol.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
