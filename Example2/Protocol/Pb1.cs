// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pb1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from pb1.proto</summary>
  public static partial class Pb1Reflection {

    #region Descriptor
    /// <summary>File descriptor for pb1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Pb1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglwYjEucHJvdG8aDnByZV9iYXNlLnByb3RvGgpiYXNlLnByb3RvGgpwaW5l",
            "LnByb3RvGg5jYWxsdGltZS5wcm90bxoPcHJlX2Jhc2UxLnByb3RvGgxldmNo",
            "b3AucHJvdG8aEGx1Y2t5X2RyYXcucHJvdG8izQoKClNlYXRTdGF0dXMSEwoG",
            "c2VhdGlkGAEgASgFSACIAQESJQoLYWN0aW9uX3R5cGUYAiABKA4yCy5BY3Rp",
            "b25UeXBlSAGIAQESHwoGcGxheWVyGAMgASgLMgouVXNlckJyaWVmSAKIAQES",
            "FwoKaGFuZF9jaGlwcxgEIAEoA0gDiAEBEhkKDGRlc3RvcF9jaGlwcxgFIAEo",
            "A0gEiAEBEhUKCGhhc19jYXJkGAYgASgISAWIAQESGQoMc2VhdF9yZXNlcnZl",
            "GAcgASgISAaIAQESFAoHY291bnRyeRgIIAEoCUgHiAEBEhYKCXZpcF9sZXZl",
            "bBgJIAEoDUgIiAEBEhcKCndhaXRfYmxpbmQYCiABKAhICYgBARIcCg9yZWJ1",
            "eV9sZWZ0X3RpbWUYCyABKAVICogBARIcCg9yZWJ1eV93YWl0X2F1dGgYDCAB",
            "KAhIC4gBARITCgZjbHViaWQYDSABKAlIDIgBARIUCgdncHNfbG9uGA4gASgF",
            "SA2IAQESFAoHZ3BzX2xhdBgPIAEoBUgOiAEBEhYKCWNsdWJfbmFtZRgQIAEo",
            "CUgPiAEBEhMKBnN0YXR1cxgRIAEoBUgQiAEBEikKDWNhbGx0aW1lX2luZm8Y",
            "EiABKAsyDS5DYWxsVGltZUluZm9IEYgBARIVCghpc19lbXB0eRgTIAEoCEgS",
            "iAEBEhYKCWlzX2Jvb2tlZBgUIAEoCEgTiAEBEisKHmJvb2tfY29uZmlybV9y",
            "ZW1haW5pbmdfc2Vjb25kcxgVIAEoBUgUiAEBEhkKDGh1bnRlcl9ib251cxgW",
            "IAEoA0gViAEBEhIKBWNhcmQxGBcgASgFSBaIAQESEgoFY2FyZDIYGCABKAVI",
            "F4gBARISCgVjYXJkMxgZIAEoBUgYiAEBEhIKBWNhcmQ0GBogASgFSBmIAQES",
            "EgoFY2FyZDUYGyABKAVIGogBARISCgVsZXZlbBgcIAEoBUgbiAEBEhUKCGZy",
            "YW1lX2lkGB0gASgJSByIAQESIAoTaXNfY29tcGxldGVfZGlzY2FyZBgeIAEo",
            "CEgdiAEBEhIKBWNhcmQ2GB8gASgFSB6IAQESKgoOdHBfYWN0aW9uX3R5cGUY",
            "ICABKA4yDS5UcEFjdGlvblR5cGVIH4gBARIYCgtpc19zZWVfY2FyZBghIAEo",
            "CEggiAEBQgkKB19zZWF0aWRCDgoMX2FjdGlvbl90eXBlQgkKB19wbGF5ZXJC",
            "DQoLX2hhbmRfY2hpcHNCDwoNX2Rlc3RvcF9jaGlwc0ILCglfaGFzX2NhcmRC",
            "DwoNX3NlYXRfcmVzZXJ2ZUIKCghfY291bnRyeUIMCgpfdmlwX2xldmVsQg0K",
            "C193YWl0X2JsaW5kQhIKEF9yZWJ1eV9sZWZ0X3RpbWVCEgoQX3JlYnV5X3dh",
            "aXRfYXV0aEIJCgdfY2x1YmlkQgoKCF9ncHNfbG9uQgoKCF9ncHNfbGF0QgwK",
            "Cl9jbHViX25hbWVCCQoHX3N0YXR1c0IQCg5fY2FsbHRpbWVfaW5mb0ILCglf",
            "aXNfZW1wdHlCDAoKX2lzX2Jvb2tlZEIhCh9fYm9va19jb25maXJtX3JlbWFp",
            "bmluZ19zZWNvbmRzQg8KDV9odW50ZXJfYm9udXNCCAoGX2NhcmQxQggKBl9j",
            "YXJkMkIICgZfY2FyZDNCCAoGX2NhcmQ0QggKBl9jYXJkNUIICgZfbGV2ZWxC",
            "CwoJX2ZyYW1lX2lkQhYKFF9pc19jb21wbGV0ZV9kaXNjYXJkQggKBl9jYXJk",
            "NkIRCg9fdHBfYWN0aW9uX3R5cGVCDgoMX2lzX3NlZV9jYXJkItQBCgxSaXZl",
            "clNxdWVlemUSHQoQaXNfcml2ZXJfc3F1ZWV6ZRgBIAEoCEgAiAEBEhkKDHNx",
            "dWVlemVfdGltZRgCIAEoA0gBiAEBEhsKDnNxdWVlemVfc2Vjb25kGAMgASgF",
            "SAKIAQESEAoDdWlkGAQgASgJSAOIAQESEQoEbmFtZRgFIAEoCUgEiAEBQhMK",
            "EV9pc19yaXZlcl9zcXVlZXplQg8KDV9zcXVlZXplX3RpbWVCEQoPX3NxdWVl",
            "emVfc2Vjb25kQgYKBF91aWRCBwoFX25hbWUiHAoKTXVsdGlCb2FyZBIOCgZi",
            "b2FyZHMYASADKAUiYQoRSW5zdXJhbmNlUG9vbEluZm8SEwoGcG9vbGlkGAEg",
            "ASgFSACIAQESGgoNYWxyZWFkeV9idXlpbhgCIAEoA0gBiAEBQgkKB19wb29s",
            "aWRCEAoOX2FscmVhZHlfYnV5aW4i7gcKC1RhYmxlU3RhdHVzEhcKCmlzX3Bs",
            "YXlpbmcYASABKAhIAIgBARIXCgphY3Rpb25faWR4GAIgASgFSAGIAQESEgoF",
            "ZF9pZHgYAyABKAVIAogBARITCgZzYl9pZHgYBCABKAVIA4gBARITCgZiYl9p",
            "ZHgYBSABKAVIBIgBARIZCgRzZWF0GAYgAygLMgsuU2VhdFN0YXR1cxIMCgRw",
            "b29sGAcgAygDEh8KBXN0YWdlGAggASgOMgsuUm91bmRTdGFnZUgFiAEBEg0K",
            "BWJvYXJkGAkgAygFEhAKA3RpZBgKIAEoBUgGiAEBEhsKDmlzX2ZpbmFsX3Rh",
            "YmxlGAsgASgISAeIAQESIQoMbXVsdGlfYm9hcmRzGAwgAygLMgsuTXVsdGlC",
            "b2FyZBIrCg9pbnN1cmFuY2VfcG9vbHMYDSADKAsyEi5JbnN1cmFuY2VQb29s",
            "SW5mbxIZCgxpc193YWl0X3N5bmMYDiABKAhICIgBARIrCg56b29tX2ZvbGRf",
            "c2VhdBgPIAMoCzITLlpvb21Gb2xkU2VhdFN0YXR1cxITCgZnYW1laWQYECAB",
            "KAlICYgBARIgChNpc19zaG93X2NhcmRfZW5hYmxlGBEgASgISAqIAQESIgoV",
            "aXNfYWxsX2luX3JhdGVfZW5hYmxlGBIgASgISAuIAQESFgoJZ2FtZV90eXBl",
            "GBMgASgFSAyIAQESFgoJY3VyX2JsaW5kGBQgASgDSA2IAQESHgoRbGVmdF9k",
            "aXNjYXJkX3RpbWUYGSABKAVIDogBARIgChNpc19jb21wbGV0ZV9kaXNjYXJk",
            "GBogASgISA+IAQESKQoNcml2ZXJfc3F1ZWV6ZRgbIAEoCzINLlJpdmVyU3F1",
            "ZWV6ZUgQiAEBEh4KEWlzX2R1cmluZ19kaXNjYXJkGBwgASgISBGIAQESFAoM",
            "c2Vjb25kX2JvYXJkGB0gAygFQg0KC19pc19wbGF5aW5nQg0KC19hY3Rpb25f",
            "aWR4QggKBl9kX2lkeEIJCgdfc2JfaWR4QgkKB19iYl9pZHhCCAoGX3N0YWdl",
            "QgYKBF90aWRCEQoPX2lzX2ZpbmFsX3RhYmxlQg8KDV9pc193YWl0X3N5bmNC",
            "CQoHX2dhbWVpZEIWChRfaXNfc2hvd19jYXJkX2VuYWJsZUIYChZfaXNfYWxs",
            "X2luX3JhdGVfZW5hYmxlQgwKCl9nYW1lX3R5cGVCDAoKX2N1cl9ibGluZEIU",
            "ChJfbGVmdF9kaXNjYXJkX3RpbWVCFgoUX2lzX2NvbXBsZXRlX2Rpc2NhcmRC",
            "EAoOX3JpdmVyX3NxdWVlemVCFAoSX2lzX2R1cmluZ19kaXNjYXJkIl8KDU9i",
            "c2VydmVyQnJpZWYSHgoFYnJpZWYYASABKAsyCi5Vc2VyQnJpZWZIAIgBARIW",
            "Cgl2aXBfbGV2ZWwYAiABKA1IAYgBAUIICgZfYnJpZWZCDAoKX3ZpcF9sZXZl",
            "bCLfBAoKUm9vbVN0YXR1cxIWCgl0aW1lX2xlZnQYASABKAVIAIgBARIbCgZw",
            "cm9maXQYAiADKAsyCy5Qcm9maXRJbmZvEhwKCG9ic2VydmVyGAMgAygLMgou",
            "VXNlckJyaWVmEhcKCmF1dGhfbGltaXQYBCABKAhIAYgBARIXCgppc19zdGFy",
            "dGVkGAUgASgISAKIAQESHQoQaXNfYmxpbmRfcnVubmluZxgGIAEoCEgDiAEB",
            "EhsKDmphY2twb3Rfc3RhdHVzGAcgASgFSASIAQESHwoSYWRkX3Jvb210aW1l",
            "X3F1b3RhGAggASgFSAWIAQESGQoMb2JzZXJ2ZXJfbnVtGAkgASgFSAaIAQES",
            "GQoMcGFzc3dkX2xpbWl0GAogASgISAeIAQESEwoGcGFzc3dkGAsgASgJSAiI",
            "AQESFwoKbGVhdmVfdGltZRgMIAEoBUgJiAEBEhwKD3VzZXJfbGFzdF9jaGlw",
            "cxgNIAEoA0gKiAEBEh0KEGphY2twb3RfZmVlX3R5cGUYDiABKAVIC4gBAUIM",
            "CgpfdGltZV9sZWZ0Qg0KC19hdXRoX2xpbWl0Qg0KC19pc19zdGFydGVkQhMK",
            "EV9pc19ibGluZF9ydW5uaW5nQhEKD19qYWNrcG90X3N0YXR1c0IVChNfYWRk",
            "X3Jvb210aW1lX3F1b3RhQg8KDV9vYnNlcnZlcl9udW1CDwoNX3Bhc3N3ZF9s",
            "aW1pdEIJCgdfcGFzc3dkQg0KC19sZWF2ZV90aW1lQhIKEF91c2VyX2xhc3Rf",
            "Y2hpcHNCEwoRX2phY2twb3RfZmVlX3R5cGUiCwoJUHJvZml0UkVRIrEBCglH",
            "cm91cFN0YXQSEQoEZmxhZxgBIAEoCUgAiAEBEhoKDXByb21vdGlvbl9udW0Y",
            "AiABKAVIAYgBARIWCgltYXRjaF9udW0YAyABKAVIAogBARIeChF0b3RhbF9i",
            "dXlpbl90aW1lcxgEIAEoBUgDiAEBQgcKBV9mbGFnQhAKDl9wcm9tb3Rpb25f",
            "bnVtQgwKCl9tYXRjaF9udW1CFAoSX3RvdGFsX2J1eWluX3RpbWVzIssQCglQ",
            "cm9maXRTZXQSEwoGcm9vbWlkGAEgASgJSACIAQESFwoKc3RhcnRfdGltZRgC",
            "IAEoDUgBiAEBEhgKC3NtYWxsX2JsaW5kGAMgASgDSAKIAQESGQoEaW5mbxgE",
            "IAMoCzILLlByb2ZpdEluZm8SFgoJZ2FtZV90aW1lGAUgASgFSAOIAQESFAoH",
            "ZmVldHlwZRgGIAEoBUgEiAEBEhUKCGZlZXBvaW50GAcgASgFSAWIAQESFQoI",
            "aGFuZHNudW0YCCABKAVIBogBARIWCglvd25lcmljb24YCSABKAlIB4gBARIh",
            "Cglyb29tX3R5cGUYCiABKA4yCS5Sb29tVHlwZUgIiAEBEhkKDHVwYmxpbmRf",
            "dGltZRgLIAEoBUgJiAEBEhEKBGNvc3QYDCABKANICogBARIYCgtiZWdpbl9j",
            "aGlwcxgNIAEoA0gLiAEBEhcKCnJld2FyZF9udW0YDiABKAVIDIgBARIZCgxp",
            "c19pbnN1cmFuY2UYDyABKAhIDYgBARIVCghzZWF0X251bRgQIAEoBUgOiAEB",
            "EhoKDWh1bnRlcl9yZXdhcmQYESABKANID4gBARITCgZjaGFyZ2UYEiABKANI",
            "EIgBARIWCglnYW1lX21vZGUYEyABKAVIEYgBARIRCgRhbnRlGBQgASgDSBKI",
            "AQESHAoPaXNfamFja3BvdF91c2VkGBUgASgISBOIAQESGAoLdG90YWxfYnV5",
            "aW4YFiABKANIFIgBARIbCg5zdXBlcl9sZWFndWVpZBgXIAEoBUgViAEBEhYK",
            "CWlzX2V2Y2hvcBgYIAEoCEgWiAEBEh8KEmlzX3Nub3diYWxsX2h1bnRlchgZ",
            "IAEoCEgXiAEBEhIKBXNldGlkGBogASgJSBiIAQESGQoMdG90YWxfcmV3YXJk",
            "GBsgASgFSBmIAQESIAoTc3BpbnVwX3Jld2FyZF9yYXRpbxgcIAEoBUgaiAEB",
            "EhgKC2dyb3VwX3N0YWdlGB0gASgFSBuIAQESHgoKZ3JvdXBfc3RhdBgeIAMo",
            "CzIKLkdyb3VwU3RhdBIeChFzdXBlcl9sZWFndWVfdHlwZRgfIAEoBUgciAEB",
            "EhYKCXRvdGFsX2ZlZRggIAEoA0gdiAEBEhkKDHRvdGFsX3Byb2ZpdBghIAEo",
            "A0geiAEBEisKHnVwYmxpbmRfdGltZV9hZnRlcl9yZWJ1eV9lbmRlZBgiIAEo",
            "BUgfiAEBEisKHnVwYmxpbmRfdGltZV9hZnRlcl9maW5hbF90YWJsZRgjIAEo",
            "BUggiAEBEhMKBnBwc3RpZBgkIAEoBUghiAEBEhYKCXJvb21fbmFtZRglIAEo",
            "CUgiiAEBEhAKA2NhcBgmIAEoBUgjiAEBEhMKBnBwc3JpZBgnIAEoBUgkiAEB",
            "EhkKDGJvbWJwb3RfdHlwZRgoIAEoBUgliAEBEh4KEXJhdGVfc2V0dGluZ190",
            "eXBlGCkgASgFSCaIAQESGgoNdG90YWxfYmV0dGluZxgqIAEoA0gniAEBEhQK",
            "B21pbl9iZXQYKyABKAVIKIgBARIXCgptaWRkbGVfYmV0GCwgASgFSCmIAQES",
            "FQoIaGlnaF9iZXQYLSABKAVIKogBARIdChBhZGRpdGlvbmFsX2JvYXJkGC4g",
            "ASgFSCuIAQESJQoYYm9tYnBvdF9hZGRpdGlvbmFsX2JvYXJkGC8gASgFSCyI",
            "AQESGAoLaGl0cG90X3JhdGUYMCABKAVILYgBARIXCgpib251c19jYXJkGDEg",
            "ASgFSC6IAQESGAoLZmlnaHRfbGltaXQYMiABKAVIL4gBAUIJCgdfcm9vbWlk",
            "Qg0KC19zdGFydF90aW1lQg4KDF9zbWFsbF9ibGluZEIMCgpfZ2FtZV90aW1l",
            "QgoKCF9mZWV0eXBlQgsKCV9mZWVwb2ludEILCglfaGFuZHNudW1CDAoKX293",
            "bmVyaWNvbkIMCgpfcm9vbV90eXBlQg8KDV91cGJsaW5kX3RpbWVCBwoFX2Nv",
            "c3RCDgoMX2JlZ2luX2NoaXBzQg0KC19yZXdhcmRfbnVtQg8KDV9pc19pbnN1",
            "cmFuY2VCCwoJX3NlYXRfbnVtQhAKDl9odW50ZXJfcmV3YXJkQgkKB19jaGFy",
            "Z2VCDAoKX2dhbWVfbW9kZUIHCgVfYW50ZUISChBfaXNfamFja3BvdF91c2Vk",
            "Qg4KDF90b3RhbF9idXlpbkIRCg9fc3VwZXJfbGVhZ3VlaWRCDAoKX2lzX2V2",
            "Y2hvcEIVChNfaXNfc25vd2JhbGxfaHVudGVyQggKBl9zZXRpZEIPCg1fdG90",
            "YWxfcmV3YXJkQhYKFF9zcGludXBfcmV3YXJkX3JhdGlvQg4KDF9ncm91cF9z",
            "dGFnZUIUChJfc3VwZXJfbGVhZ3VlX3R5cGVCDAoKX3RvdGFsX2ZlZUIPCg1f",
            "dG90YWxfcHJvZml0QiEKH191cGJsaW5kX3RpbWVfYWZ0ZXJfcmVidXlfZW5k",
            "ZWRCIQofX3VwYmxpbmRfdGltZV9hZnRlcl9maW5hbF90YWJsZUIJCgdfcHBz",
            "dGlkQgwKCl9yb29tX25hbWVCBgoEX2NhcEIJCgdfcHBzcmlkQg8KDV9ib21i",
            "cG90X3R5cGVCFAoSX3JhdGVfc2V0dGluZ190eXBlQhAKDl90b3RhbF9iZXR0",
            "aW5nQgoKCF9taW5fYmV0Qg0KC19taWRkbGVfYmV0QgsKCV9oaWdoX2JldEIT",
            "ChFfYWRkaXRpb25hbF9ib2FyZEIbChlfYm9tYnBvdF9hZGRpdGlvbmFsX2Jv",
            "YXJkQg4KDF9oaXRwb3RfcmF0ZUINCgtfYm9udXNfY2FyZEIOCgxfZmlnaHRf",
            "bGltaXQiJAoJUHJvZml0UlNQEhcKA3NldBgBIAMoCzIKLlByb2ZpdFNldCLy",
            "AQoSTHVja3lEcmF3U2V0RGV0YWlsEhQKB3VzZXJfaWQYASABKANIAIgBARIW",
            "Cgl1c2VyX25hbWUYAiABKAlIAYgBARIVCghpY29uX3VybBgDIAEoCUgCiAEB",
            "EhUKCGRyYXdfbnVtGAQgASgFSAOIAQESEwoGcHJvZml0GAUgASgDSASIAQES",
            "GgoNY2VydGlmaWNhdGlvbhgGIAEoBUgFiAEBQgoKCF91c2VyX2lkQgwKCl91",
            "c2VyX25hbWVCCwoJX2ljb25fdXJsQgsKCV9kcmF3X251bUIJCgdfcHJvZml0",
            "QhAKDl9jZXJ0aWZpY2F0aW9uIq4BCgxMdWNreURyYXdTZXQSEQoEZGF0ZRgB",
            "IAEoDUgAiAEBEhYKCW93bmVyaWNvbhgCIAEoCUgBiAEBEiUKBmNvbmZpZxgD",
            "IAEoCzIQLkx1Y2t5RHJhd0NvbmZpZ0gCiAEBEhkKDHRvdGFsX3Byb2ZpdBgE",
            "IAEoA0gDiAEBQgcKBV9kYXRlQgwKCl9vd25lcmljb25CCQoHX2NvbmZpZ0IP",
            "Cg1fdG90YWxfcHJvZml0Iq8CCgtHYW1lRGF0YVJFURITCgZjbHViaWQYASAB",
            "KAlIAIgBARISCgVidGltZRgCIAEoDUgBiAEBEhIKBWV0aW1lGAMgASgNSAKI",
            "AQESFQoIbGVhZ3VlaWQYBCABKAVIA4gBARIWCglhZ2VudF91aWQYBSABKANI",
            "BIgBARIXCgpiZWdpbl9kYXRlGAYgASgNSAWIAQESFQoIZW5kX2RhdGUYByAB",
            "KA1IBogBARIbCg5zdXBlcl9sZWFndWVpZBgIIAEoBUgHiAEBQgkKB19jbHVi",
            "aWRCCAoGX2J0aW1lQggKBl9ldGltZUILCglfbGVhZ3VlaWRCDAoKX2FnZW50",
            "X3VpZEINCgtfYmVnaW5fZGF0ZUILCglfZW5kX2RhdGVCEQoPX3N1cGVyX2xl",
            "YWd1ZWlkIrsDCgtHYW1lRGF0YVJTUBIXCgNzZXQYASADKAsyCi5Qcm9maXRT",
            "ZXQSFgoJdG90YWxfZmVlGAIgASgDSACIAQESGAoLdG90YWxfaGFuZHMYAyAB",
            "KAVIAYgBARIYCgt0b3RhbF9nYW1lcxgEIAEoBUgCiAEBEhkKDHRvdGFsX3By",
            "b2ZpdBgFIAEoA0gDiAEBEh8KEnRvdGFsX3NwaW51cF9idXlpbhgGIAEoA0gE",
            "iAEBEiAKE3RvdGFsX3NwaW51cF9yZXdhcmQYByABKANIBYgBARIgChN0b3Rh",
            "bF9zcGludXBfcHJvZml0GAggASgDSAaIAQESEQoEY29kZRgJIAEoBUgHiAEB",
            "EiUKDmx1Y2t5X2RyYXdfc2V0GAogAygLMg0uTHVja3lEcmF3U2V0QgwKCl90",
            "b3RhbF9mZWVCDgoMX3RvdGFsX2hhbmRzQg4KDF90b3RhbF9nYW1lc0IPCg1f",
            "dG90YWxfcHJvZml0QhUKE190b3RhbF9zcGludXBfYnV5aW5CFgoUX3RvdGFs",
            "X3NwaW51cF9yZXdhcmRCFgoUX3RvdGFsX3NwaW51cF9wcm9maXRCBwoFX2Nv",
            "ZGUimgEKEEdhbWVTZXREZXRhaWxSRVESEgoFc2V0aWQYASABKAlIAIgBARIT",
            "CgZjbHViaWQYAiABKAlIAYgBARIVCghsZWFndWVpZBgDIAEoBUgCiAEBEhYK",
            "CWFnZW50X3VpZBgEIAEoA0gDiAEBQggKBl9zZXRpZEIJCgdfY2x1YmlkQgsK",
            "CV9sZWFndWVpZEIMCgpfYWdlbnRfdWlkIkkKEEdhbWVTZXREZXRhaWxSU1AS",
            "EQoEY29kZRgBIAEoBUgAiAEBEhkKBGluZm8YAiADKAsyCy5Qcm9maXRJbmZv",
            "QgcKBV9jb2RlIrsBChVMdWNreURyYXdTZXREZXRhaWxSRVESEgoFc2V0aWQY",
            "ASABKAlIAIgBARIRCgRkYXRlGAIgASgNSAGIAQESEwoGY2x1YmlkGAMgASgJ",
            "SAKIAQESFQoIbGVhZ3VlaWQYBCABKAVIA4gBARIWCglhZ2VudF91aWQYBSAB",
            "KANIBIgBAUIICgZfc2V0aWRCBwoFX2RhdGVCCQoHX2NsdWJpZEILCglfbGVh",
            "Z3VlaWRCDAoKX2FnZW50X3VpZCJYChVMdWNreURyYXdTZXREZXRhaWxSU1AS",
            "EQoEY29kZRgBIAEoBUgAiAEBEiMKBmRldGFpbBgCIAMoCzITLkx1Y2t5RHJh",
            "d1NldERldGFpbEIHCgVfY29kZSIPCg1Qcm9maXRMaXN0UkVRIiwKDVByb2Zp",
            "dExpc3RSU1ASGwoGcHJvZml0GAEgAygLMgsuUHJvZml0SW5mbyLXBgoVTXVs",
            "dGlwbGVUYWJsZVJvb21JbmZvEhMKBnJvb21pZBgBIAEoCUgAiAEBEhMKBmNs",
            "dWJpZBgCIAEoCUgBiAEBEhUKCHJvb210eXBlGAMgASgFSAKIAQESGQoMaXNf",
            "c2F0ZWxsaXRlGAQgASgFSAOIAQESFQoIb2ZmaWNpYWwYBSABKAVIBIgBARIZ",
            "Cgxpc19pbnN1cmFuY2UYBiABKAVIBYgBARIhCglyb29tX21vZGUYByABKA4y",
            "CS5Sb29tTW9kZUgGiAEBEiEKCWdhbWVfbW9kZRgIIAEoDjIJLkdhbWVNb2Rl",
            "SAeIAQESFQoIc2VhdF9udW0YCSABKAVICIgBARISCgVibGluZBgKIAEoA0gJ",
            "iAEBEhYKCXJvb21fbmFtZRgLIAEoCUgKiAEBEhoKDWRlZmF1bHRfYnV5aW4Y",
            "DCABKANIC4gBARIQCgN0aWQYDSABKAVIDIgBARIZCgxwYXNzd2RfbGltaXQY",
            "DiABKAhIDYgBARITCgZwYXNzd2QYDyABKAlIDogBARIVCghsZWFndWVpZBgQ",
            "IAEoBUgPiAEBEhsKDnN1cGVyX2xlYWd1ZWlkGBEgASgFSBCIAQESEwoGcHBz",
            "dGlkGBIgASgFSBGIAQESEwoGcHBzcmlkGBMgASgFSBKIAQESFAoHbWluX2Jl",
            "dBgUIAEoBUgTiAEBEhcKCm1pZGRsZV9iZXQYFSABKAVIFIgBARIVCghoaWdo",
            "X2JldBgWIAEoBUgViAEBQgkKB19yb29taWRCCQoHX2NsdWJpZEILCglfcm9v",
            "bXR5cGVCDwoNX2lzX3NhdGVsbGl0ZUILCglfb2ZmaWNpYWxCDwoNX2lzX2lu",
            "c3VyYW5jZUIMCgpfcm9vbV9tb2RlQgwKCl9nYW1lX21vZGVCCwoJX3NlYXRf",
            "bnVtQggKBl9ibGluZEIMCgpfcm9vbV9uYW1lQhAKDl9kZWZhdWx0X2J1eWlu",
            "QgYKBF90aWRCDwoNX3Bhc3N3ZF9saW1pdEIJCgdfcGFzc3dkQgsKCV9sZWFn",
            "dWVpZEIRCg9fc3VwZXJfbGVhZ3VlaWRCCQoHX3Bwc3RpZEIJCgdfcHBzcmlk",
            "QgoKCF9taW5fYmV0Qg0KC19taWRkbGVfYmV0QgsKCV9oaWdoX2JldCLdCgoN",
            "UGxheWluZ1N0YXR1cxINCgVjYXJkcxgBIAMoCRISCgVjYXJkMhgCIAEoBUgA",
            "iAEBEhoKDWFjdGlvbl9zZWF0aWQYAyABKAVIAYgBARIlCgthY3Rpb25fZGF0",
            "YRgEIAEoCzILLkFjdGlvbkRhdGFIAogBARIXCgptaW5fY2hpcGluGAUgASgD",
            "SAOIAQESFwoKbWF4X2NoaXBpbhgGIAEoA0gEiAEBEhgKC2FjdGlvbl90aW1l",
            "GAcgASgFSAWIAQESIQoUYWRkX2FjdGlvbl90aW1lX2Nvc3QYCCABKAVIBogB",
            "ARISCgVjYXJkMxgJIAEoBUgHiAEBEhIKBWNhcmQ0GAogASgFSAiIAQESGgoN",
            "c2hvd19zdHJhZGRsZRgLIAEoCEgJiAEBEhEKBHJvbGUYDCABKAVICogBARIb",
            "Cg5yb29tX2F1dGhvcml0eRgNIAEoCEgLiAEBEhwKD3ByZV9hY3Rpb25fdHlw",
            "ZRgOIAEoBUgMiAEBEh0KEHByZV9hY3Rpb25fY2hpcHMYDyABKANIDYgBARIY",
            "CgtiYW5uZWRfdGFsaxgQIAEoCEgOiAEBEh8KEmNyb3VwaWVyX3RpcF90aW1l",
            "cxgRIAEoBUgPiAEBEhIKBWNhcmQ1GBIgASgFSBCIAQESGgoNaXNfZGVsYXlf",
            "dGltZRgTIAEoCEgRiAEBEh4KEWlzX3VzaW5nX3RpbWViYW5rGBQgASgISBKI",
            "AQESIwoWaXNfYm9va19zZWF0X2NvbmZpcm1lZBgVIAEoCEgTiAEBEh8KEmRl",
            "YWxlcl9jaG9vc2VfdGltZRgWIAEoBUgUiAEBEigKC2V2Y2hvcF9pbmZvGBcg",
            "ASgLMg4uRXZDaG9wSW5mb0JSQ0gViAEBEhkKDGRlZmF1bHRfY2FyZBgYIAEo",
            "BUgWiAEBEh4KEXVzZXJfZGlzY2FyZF9jYXJkGBkgASgFSBeIAQESHAoPaXNf",
            "YWdyZWVfZGl2aWRlGBogASgISBiIAQESHQoQaGFkX2hhbmRfc3F1ZWV6ZRgb",
            "IAEoCEgZiAEBEiMKFmZpcnN0X2FjdGlvbl90aW1lX3Bhc3MYHCABKANIGogB",
            "ARISCgVjYXJkNhgdIAEoBUgbiAEBEhoKDWNhbl92aWV3X2hhbmQYHiABKAhI",
            "HIgBAUIICgZfY2FyZDJCEAoOX2FjdGlvbl9zZWF0aWRCDgoMX2FjdGlvbl9k",
            "YXRhQg0KC19taW5fY2hpcGluQg0KC19tYXhfY2hpcGluQg4KDF9hY3Rpb25f",
            "dGltZUIXChVfYWRkX2FjdGlvbl90aW1lX2Nvc3RCCAoGX2NhcmQzQggKBl9j",
            "YXJkNEIQCg5fc2hvd19zdHJhZGRsZUIHCgVfcm9sZUIRCg9fcm9vbV9hdXRo",
            "b3JpdHlCEgoQX3ByZV9hY3Rpb25fdHlwZUITChFfcHJlX2FjdGlvbl9jaGlw",
            "c0IOCgxfYmFubmVkX3RhbGtCFQoTX2Nyb3VwaWVyX3RpcF90aW1lc0IICgZf",
            "Y2FyZDVCEAoOX2lzX2RlbGF5X3RpbWVCFAoSX2lzX3VzaW5nX3RpbWViYW5r",
            "QhkKF19pc19ib29rX3NlYXRfY29uZmlybWVkQhUKE19kZWFsZXJfY2hvb3Nl",
            "X3RpbWVCDgoMX2V2Y2hvcF9pbmZvQg8KDV9kZWZhdWx0X2NhcmRCFAoSX3Vz",
            "ZXJfZGlzY2FyZF9jYXJkQhIKEF9pc19hZ3JlZV9kaXZpZGVCEwoRX2hhZF9o",
            "YW5kX3NxdWVlemVCGQoXX2ZpcnN0X2FjdGlvbl90aW1lX3Bhc3NCCAoGX2Nh",
            "cmQ2QhAKDl9jYW5fdmlld19oYW5kIt0BCg5DaGFuZ2VUYWJsZVJTUBIRCgRj",
            "b2RlGAEgASgFSACIAQESJwoMdGFibGVfc3RhdHVzGAIgASgLMgwuVGFibGVT",
            "dGF0dXNIAYgBARIlCgtyb29tX3N0YXR1cxgDIAEoCzILLlJvb21TdGF0dXNI",
            "AogBARIrCg5wbGF5aW5nX3N0YXR1cxgEIAEoCzIOLlBsYXlpbmdTdGF0dXNI",
            "A4gBAUIHCgVfY29kZUIPCg1fdGFibGVfc3RhdHVzQg4KDF9yb29tX3N0YXR1",
            "c0IRCg9fcGxheWluZ19zdGF0dXMiQAoUVGFibGVTdGF0dXNCcm9hZGNhc3QS",
            "HwoEaW5mbxgBIAEoCzIMLlRhYmxlU3RhdHVzSACIAQFCBwoFX2luZm9CGloH",
            "L3BicHBnb6oCDlRleGFzLlByb3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.PreBaseReflection.Descriptor, global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.PineReflection.Descriptor, global::Texas.Protocol.CalltimeReflection.Descriptor, global::Texas.Protocol.PreBase1Reflection.Descriptor, global::Texas.Protocol.EvchopReflection.Descriptor, global::Texas.Protocol.LuckyDrawReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SeatStatus), global::Texas.Protocol.SeatStatus.Parser, new[]{ "Seatid", "ActionType", "Player", "HandChips", "DestopChips", "HasCard", "SeatReserve", "Country", "VipLevel", "WaitBlind", "RebuyLeftTime", "RebuyWaitAuth", "Clubid", "GpsLon", "GpsLat", "ClubName", "Status", "CalltimeInfo", "IsEmpty", "IsBooked", "BookConfirmRemainingSeconds", "HunterBonus", "Card1", "Card2", "Card3", "Card4", "Card5", "Level", "FrameId", "IsCompleteDiscard", "Card6", "TpActionType", "IsSeeCard" }, new[]{ "Seatid", "ActionType", "Player", "HandChips", "DestopChips", "HasCard", "SeatReserve", "Country", "VipLevel", "WaitBlind", "RebuyLeftTime", "RebuyWaitAuth", "Clubid", "GpsLon", "GpsLat", "ClubName", "Status", "CalltimeInfo", "IsEmpty", "IsBooked", "BookConfirmRemainingSeconds", "HunterBonus", "Card1", "Card2", "Card3", "Card4", "Card5", "Level", "FrameId", "IsCompleteDiscard", "Card6", "TpActionType", "IsSeeCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RiverSqueeze), global::Texas.Protocol.RiverSqueeze.Parser, new[]{ "IsRiverSqueeze", "SqueezeTime", "SqueezeSecond", "Uid", "Name" }, new[]{ "IsRiverSqueeze", "SqueezeTime", "SqueezeSecond", "Uid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MultiBoard), global::Texas.Protocol.MultiBoard.Parser, new[]{ "Boards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.InsurancePoolInfo), global::Texas.Protocol.InsurancePoolInfo.Parser, new[]{ "Poolid", "AlreadyBuyin" }, new[]{ "Poolid", "AlreadyBuyin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TableStatus), global::Texas.Protocol.TableStatus.Parser, new[]{ "IsPlaying", "ActionIdx", "DIdx", "SbIdx", "BbIdx", "Seat", "Pool", "Stage", "Board", "Tid", "IsFinalTable", "MultiBoards", "InsurancePools", "IsWaitSync", "ZoomFoldSeat", "Gameid", "IsShowCardEnable", "IsAllInRateEnable", "GameType", "CurBlind", "LeftDiscardTime", "IsCompleteDiscard", "RiverSqueeze", "IsDuringDiscard", "SecondBoard" }, new[]{ "IsPlaying", "ActionIdx", "DIdx", "SbIdx", "BbIdx", "Stage", "Tid", "IsFinalTable", "IsWaitSync", "Gameid", "IsShowCardEnable", "IsAllInRateEnable", "GameType", "CurBlind", "LeftDiscardTime", "IsCompleteDiscard", "RiverSqueeze", "IsDuringDiscard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ObserverBrief), global::Texas.Protocol.ObserverBrief.Parser, new[]{ "Brief", "VipLevel" }, new[]{ "Brief", "VipLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RoomStatus), global::Texas.Protocol.RoomStatus.Parser, new[]{ "TimeLeft", "Profit", "Observer", "AuthLimit", "IsStarted", "IsBlindRunning", "JackpotStatus", "AddRoomtimeQuota", "ObserverNum", "PasswdLimit", "Passwd", "LeaveTime", "UserLastChips", "JackpotFeeType" }, new[]{ "TimeLeft", "AuthLimit", "IsStarted", "IsBlindRunning", "JackpotStatus", "AddRoomtimeQuota", "ObserverNum", "PasswdLimit", "Passwd", "LeaveTime", "UserLastChips", "JackpotFeeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ProfitREQ), global::Texas.Protocol.ProfitREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.GroupStat), global::Texas.Protocol.GroupStat.Parser, new[]{ "Flag", "PromotionNum", "MatchNum", "TotalBuyinTimes" }, new[]{ "Flag", "PromotionNum", "MatchNum", "TotalBuyinTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ProfitSet), global::Texas.Protocol.ProfitSet.Parser, new[]{ "Roomid", "StartTime", "SmallBlind", "Info", "GameTime", "Feetype", "Feepoint", "Handsnum", "Ownericon", "RoomType", "UpblindTime", "Cost", "BeginChips", "RewardNum", "IsInsurance", "SeatNum", "HunterReward", "Charge", "GameMode", "Ante", "IsJackpotUsed", "TotalBuyin", "SuperLeagueid", "IsEvchop", "IsSnowballHunter", "Setid", "TotalReward", "SpinupRewardRatio", "GroupStage", "GroupStat", "SuperLeagueType", "TotalFee", "TotalProfit", "UpblindTimeAfterRebuyEnded", "UpblindTimeAfterFinalTable", "Ppstid", "RoomName", "Cap", "Ppsrid", "BombpotType", "RateSettingType", "TotalBetting", "MinBet", "MiddleBet", "HighBet", "AdditionalBoard", "BombpotAdditionalBoard", "HitpotRate", "BonusCard", "FightLimit" }, new[]{ "Roomid", "StartTime", "SmallBlind", "GameTime", "Feetype", "Feepoint", "Handsnum", "Ownericon", "RoomType", "UpblindTime", "Cost", "BeginChips", "RewardNum", "IsInsurance", "SeatNum", "HunterReward", "Charge", "GameMode", "Ante", "IsJackpotUsed", "TotalBuyin", "SuperLeagueid", "IsEvchop", "IsSnowballHunter", "Setid", "TotalReward", "SpinupRewardRatio", "GroupStage", "SuperLeagueType", "TotalFee", "TotalProfit", "UpblindTimeAfterRebuyEnded", "UpblindTimeAfterFinalTable", "Ppstid", "RoomName", "Cap", "Ppsrid", "BombpotType", "RateSettingType", "TotalBetting", "MinBet", "MiddleBet", "HighBet", "AdditionalBoard", "BombpotAdditionalBoard", "HitpotRate", "BonusCard", "FightLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ProfitRSP), global::Texas.Protocol.ProfitRSP.Parser, new[]{ "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.LuckyDrawSetDetail), global::Texas.Protocol.LuckyDrawSetDetail.Parser, new[]{ "UserId", "UserName", "IconUrl", "DrawNum", "Profit", "Certification" }, new[]{ "UserId", "UserName", "IconUrl", "DrawNum", "Profit", "Certification" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.LuckyDrawSet), global::Texas.Protocol.LuckyDrawSet.Parser, new[]{ "Date", "Ownericon", "Config", "TotalProfit" }, new[]{ "Date", "Ownericon", "Config", "TotalProfit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.GameDataREQ), global::Texas.Protocol.GameDataREQ.Parser, new[]{ "Clubid", "Btime", "Etime", "Leagueid", "AgentUid", "BeginDate", "EndDate", "SuperLeagueid" }, new[]{ "Clubid", "Btime", "Etime", "Leagueid", "AgentUid", "BeginDate", "EndDate", "SuperLeagueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.GameDataRSP), global::Texas.Protocol.GameDataRSP.Parser, new[]{ "Set", "TotalFee", "TotalHands", "TotalGames", "TotalProfit", "TotalSpinupBuyin", "TotalSpinupReward", "TotalSpinupProfit", "Code", "LuckyDrawSet" }, new[]{ "TotalFee", "TotalHands", "TotalGames", "TotalProfit", "TotalSpinupBuyin", "TotalSpinupReward", "TotalSpinupProfit", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.GameSetDetailREQ), global::Texas.Protocol.GameSetDetailREQ.Parser, new[]{ "Setid", "Clubid", "Leagueid", "AgentUid" }, new[]{ "Setid", "Clubid", "Leagueid", "AgentUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.GameSetDetailRSP), global::Texas.Protocol.GameSetDetailRSP.Parser, new[]{ "Code", "Info" }, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.LuckyDrawSetDetailREQ), global::Texas.Protocol.LuckyDrawSetDetailREQ.Parser, new[]{ "Setid", "Date", "Clubid", "Leagueid", "AgentUid" }, new[]{ "Setid", "Date", "Clubid", "Leagueid", "AgentUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.LuckyDrawSetDetailRSP), global::Texas.Protocol.LuckyDrawSetDetailRSP.Parser, new[]{ "Code", "Detail" }, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ProfitListREQ), global::Texas.Protocol.ProfitListREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ProfitListRSP), global::Texas.Protocol.ProfitListRSP.Parser, new[]{ "Profit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MultipleTableRoomInfo), global::Texas.Protocol.MultipleTableRoomInfo.Parser, new[]{ "Roomid", "Clubid", "Roomtype", "IsSatellite", "Official", "IsInsurance", "RoomMode", "GameMode", "SeatNum", "Blind", "RoomName", "DefaultBuyin", "Tid", "PasswdLimit", "Passwd", "Leagueid", "SuperLeagueid", "Ppstid", "Ppsrid", "MinBet", "MiddleBet", "HighBet" }, new[]{ "Roomid", "Clubid", "Roomtype", "IsSatellite", "Official", "IsInsurance", "RoomMode", "GameMode", "SeatNum", "Blind", "RoomName", "DefaultBuyin", "Tid", "PasswdLimit", "Passwd", "Leagueid", "SuperLeagueid", "Ppstid", "Ppsrid", "MinBet", "MiddleBet", "HighBet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.PlayingStatus), global::Texas.Protocol.PlayingStatus.Parser, new[]{ "Cards", "Card2", "ActionSeatid", "ActionData", "MinChipin", "MaxChipin", "ActionTime", "AddActionTimeCost", "Card3", "Card4", "ShowStraddle", "Role", "RoomAuthority", "PreActionType", "PreActionChips", "BannedTalk", "CroupierTipTimes", "Card5", "IsDelayTime", "IsUsingTimebank", "IsBookSeatConfirmed", "DealerChooseTime", "EvchopInfo", "DefaultCard", "UserDiscardCard", "IsAgreeDivide", "HadHandSqueeze", "FirstActionTimePass", "Card6", "CanViewHand" }, new[]{ "Card2", "ActionSeatid", "ActionData", "MinChipin", "MaxChipin", "ActionTime", "AddActionTimeCost", "Card3", "Card4", "ShowStraddle", "Role", "RoomAuthority", "PreActionType", "PreActionChips", "BannedTalk", "CroupierTipTimes", "Card5", "IsDelayTime", "IsUsingTimebank", "IsBookSeatConfirmed", "DealerChooseTime", "EvchopInfo", "DefaultCard", "UserDiscardCard", "IsAgreeDivide", "HadHandSqueeze", "FirstActionTimePass", "Card6", "CanViewHand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ChangeTableRSP), global::Texas.Protocol.ChangeTableRSP.Parser, new[]{ "Code", "TableStatus", "RoomStatus", "PlayingStatus" }, new[]{ "Code", "TableStatus", "RoomStatus", "PlayingStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TableStatusBroadcast), global::Texas.Protocol.TableStatusBroadcast.Parser, new[]{ "Info" }, new[]{ "Info" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SeatStatus : pb::IMessage<SeatStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SeatStatus> _parser = new pb::MessageParser<SeatStatus>(() => new SeatStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SeatStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SeatStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SeatStatus(SeatStatus other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      actionType_ = other.actionType_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      handChips_ = other.handChips_;
      destopChips_ = other.destopChips_;
      hasCard_ = other.hasCard_;
      seatReserve_ = other.seatReserve_;
      country_ = other.country_;
      vipLevel_ = other.vipLevel_;
      waitBlind_ = other.waitBlind_;
      rebuyLeftTime_ = other.rebuyLeftTime_;
      rebuyWaitAuth_ = other.rebuyWaitAuth_;
      clubid_ = other.clubid_;
      gpsLon_ = other.gpsLon_;
      gpsLat_ = other.gpsLat_;
      clubName_ = other.clubName_;
      status_ = other.status_;
      calltimeInfo_ = other.calltimeInfo_ != null ? other.calltimeInfo_.Clone() : null;
      isEmpty_ = other.isEmpty_;
      isBooked_ = other.isBooked_;
      bookConfirmRemainingSeconds_ = other.bookConfirmRemainingSeconds_;
      hunterBonus_ = other.hunterBonus_;
      card1_ = other.card1_;
      card2_ = other.card2_;
      card3_ = other.card3_;
      card4_ = other.card4_;
      card5_ = other.card5_;
      level_ = other.level_;
      frameId_ = other.frameId_;
      isCompleteDiscard_ = other.isCompleteDiscard_;
      card6_ = other.card6_;
      tpActionType_ = other.tpActionType_;
      isSeeCard_ = other.isSeeCard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SeatStatus Clone() {
      return new SeatStatus(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private readonly static global::Texas.Protocol.ActionType ActionTypeDefaultValue = global::Texas.Protocol.ActionType.ActionNone;

    private global::Texas.Protocol.ActionType actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ActionType ActionType {
      get { if ((_hasBits0 & 2) != 0) { return actionType_; } else { return ActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionType_ = value;
      }
    }
    /// <summary>Gets whether the "action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Texas.Protocol.UserBrief player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserBrief Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "hand_chips" field.</summary>
    public const int HandChipsFieldNumber = 4;
    private readonly static long HandChipsDefaultValue = 0L;

    private long handChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandChips {
      get { if ((_hasBits0 & 4) != 0) { return handChips_; } else { return HandChipsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        handChips_ = value;
      }
    }
    /// <summary>Gets whether the "hand_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandChips {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hand_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandChips() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "destop_chips" field.</summary>
    public const int DestopChipsFieldNumber = 5;
    private readonly static long DestopChipsDefaultValue = 0L;

    private long destopChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DestopChips {
      get { if ((_hasBits0 & 8) != 0) { return destopChips_; } else { return DestopChipsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        destopChips_ = value;
      }
    }
    /// <summary>Gets whether the "destop_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDestopChips {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "destop_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDestopChips() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "has_card" field.</summary>
    public const int HasCardFieldNumber = 6;
    private readonly static bool HasCardDefaultValue = false;

    private bool hasCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard {
      get { if ((_hasBits0 & 16) != 0) { return hasCard_; } else { return HasCardDefaultValue; } }
      set {
        _hasBits0 |= 16;
        hasCard_ = value;
      }
    }
    /// <summary>Gets whether the "has_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasCard {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "has_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasCard() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "seat_reserve" field.</summary>
    public const int SeatReserveFieldNumber = 7;
    private readonly static bool SeatReserveDefaultValue = false;

    private bool seatReserve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SeatReserve {
      get { if ((_hasBits0 & 32) != 0) { return seatReserve_; } else { return SeatReserveDefaultValue; } }
      set {
        _hasBits0 |= 32;
        seatReserve_ = value;
      }
    }
    /// <summary>Gets whether the "seat_reserve" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatReserve {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "seat_reserve" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatReserve() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 8;
    private readonly static string CountryDefaultValue = "";

    private string country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Country {
      get { return country_ ?? CountryDefaultValue; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCountry {
      get { return country_ != null; }
    }
    /// <summary>Clears the value of the "country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCountry() {
      country_ = null;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 9;
    private readonly static uint VipLevelDefaultValue = 0;

    private uint vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipLevel {
      get { if ((_hasBits0 & 64) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 64;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "wait_blind" field.</summary>
    public const int WaitBlindFieldNumber = 10;
    private readonly static bool WaitBlindDefaultValue = false;

    private bool waitBlind_;
    /// <summary>
    ///是否等待大盲状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WaitBlind {
      get { if ((_hasBits0 & 128) != 0) { return waitBlind_; } else { return WaitBlindDefaultValue; } }
      set {
        _hasBits0 |= 128;
        waitBlind_ = value;
      }
    }
    /// <summary>Gets whether the "wait_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWaitBlind {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "wait_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWaitBlind() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "rebuy_left_time" field.</summary>
    public const int RebuyLeftTimeFieldNumber = 11;
    private readonly static int RebuyLeftTimeDefaultValue = 0;

    private int rebuyLeftTime_;
    /// <summary>
    ///等待rebuy剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyLeftTime {
      get { if ((_hasBits0 & 256) != 0) { return rebuyLeftTime_; } else { return RebuyLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        rebuyLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyLeftTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyLeftTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "rebuy_wait_auth" field.</summary>
    public const int RebuyWaitAuthFieldNumber = 12;
    private readonly static bool RebuyWaitAuthDefaultValue = false;

    private bool rebuyWaitAuth_;
    /// <summary>
    ///是否rebuy等待授权
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RebuyWaitAuth {
      get { if ((_hasBits0 & 512) != 0) { return rebuyWaitAuth_; } else { return RebuyWaitAuthDefaultValue; } }
      set {
        _hasBits0 |= 512;
        rebuyWaitAuth_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_wait_auth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyWaitAuth {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_wait_auth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyWaitAuth() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 13;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///俱乐部id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "gps_lon" field.</summary>
    public const int GpsLonFieldNumber = 14;
    private readonly static int GpsLonDefaultValue = 0;

    private int gpsLon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsLon {
      get { if ((_hasBits0 & 1024) != 0) { return gpsLon_; } else { return GpsLonDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        gpsLon_ = value;
      }
    }
    /// <summary>Gets whether the "gps_lon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLon {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "gps_lon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLon() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "gps_lat" field.</summary>
    public const int GpsLatFieldNumber = 15;
    private readonly static int GpsLatDefaultValue = 0;

    private int gpsLat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsLat {
      get { if ((_hasBits0 & 2048) != 0) { return gpsLat_; } else { return GpsLatDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gpsLat_ = value;
      }
    }
    /// <summary>Gets whether the "gps_lat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLat {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "gps_lat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLat() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 16;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 17;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    ///0、正常    1、等待买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 4096) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "calltime_info" field.</summary>
    public const int CalltimeInfoFieldNumber = 18;
    private global::Texas.Protocol.CallTimeInfo calltimeInfo_;
    /// <summary>
    /// Calltime信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.CallTimeInfo CalltimeInfo {
      get { return calltimeInfo_; }
      set {
        calltimeInfo_ = value;
      }
    }

    /// <summary>Field number for the "is_empty" field.</summary>
    public const int IsEmptyFieldNumber = 19;
    private readonly static bool IsEmptyDefaultValue = false;

    private bool isEmpty_;
    /// <summary>
    /// 座位是否为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmpty {
      get { if ((_hasBits0 & 8192) != 0) { return isEmpty_; } else { return IsEmptyDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        isEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "is_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEmpty {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "is_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEmpty() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "is_booked" field.</summary>
    public const int IsBookedFieldNumber = 20;
    private readonly static bool IsBookedDefaultValue = false;

    private bool isBooked_;
    /// <summary>
    /// 是否被预订
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBooked {
      get { if ((_hasBits0 & 16384) != 0) { return isBooked_; } else { return IsBookedDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        isBooked_ = value;
      }
    }
    /// <summary>Gets whether the "is_booked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBooked {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_booked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBooked() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "book_confirm_remaining_seconds" field.</summary>
    public const int BookConfirmRemainingSecondsFieldNumber = 21;
    private readonly static int BookConfirmRemainingSecondsDefaultValue = 0;

    private int bookConfirmRemainingSeconds_;
    /// <summary>
    /// 订座确认剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BookConfirmRemainingSeconds {
      get { if ((_hasBits0 & 32768) != 0) { return bookConfirmRemainingSeconds_; } else { return BookConfirmRemainingSecondsDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        bookConfirmRemainingSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "book_confirm_remaining_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBookConfirmRemainingSeconds {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "book_confirm_remaining_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBookConfirmRemainingSeconds() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "hunter_bonus" field.</summary>
    public const int HunterBonusFieldNumber = 22;
    private readonly static long HunterBonusDefaultValue = 0L;

    private long hunterBonus_;
    /// <summary>
    /// 当前身价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HunterBonus {
      get { if ((_hasBits0 & 65536) != 0) { return hunterBonus_; } else { return HunterBonusDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        hunterBonus_ = value;
      }
    }
    /// <summary>Gets whether the "hunter_bonus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHunterBonus {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "hunter_bonus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHunterBonus() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "card1" field.</summary>
    public const int Card1FieldNumber = 23;
    private readonly static int Card1DefaultValue = 0;

    private int card1_;
    /// <summary>
    ///比牌时才填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card1 {
      get { if ((_hasBits0 & 131072) != 0) { return card1_; } else { return Card1DefaultValue; } }
      set {
        _hasBits0 |= 131072;
        card1_ = value;
      }
    }
    /// <summary>Gets whether the "card1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard1 {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "card1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard1() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "card2" field.</summary>
    public const int Card2FieldNumber = 24;
    private readonly static int Card2DefaultValue = 0;

    private int card2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card2 {
      get { if ((_hasBits0 & 262144) != 0) { return card2_; } else { return Card2DefaultValue; } }
      set {
        _hasBits0 |= 262144;
        card2_ = value;
      }
    }
    /// <summary>Gets whether the "card2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard2 {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "card2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard2() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "card3" field.</summary>
    public const int Card3FieldNumber = 25;
    private readonly static int Card3DefaultValue = 0;

    private int card3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card3 {
      get { if ((_hasBits0 & 524288) != 0) { return card3_; } else { return Card3DefaultValue; } }
      set {
        _hasBits0 |= 524288;
        card3_ = value;
      }
    }
    /// <summary>Gets whether the "card3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard3 {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "card3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard3() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "card4" field.</summary>
    public const int Card4FieldNumber = 26;
    private readonly static int Card4DefaultValue = 0;

    private int card4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card4 {
      get { if ((_hasBits0 & 1048576) != 0) { return card4_; } else { return Card4DefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        card4_ = value;
      }
    }
    /// <summary>Gets whether the "card4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard4 {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "card4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard4() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "card5" field.</summary>
    public const int Card5FieldNumber = 27;
    private readonly static int Card5DefaultValue = 0;

    private int card5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card5 {
      get { if ((_hasBits0 & 2097152) != 0) { return card5_; } else { return Card5DefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        card5_ = value;
      }
    }
    /// <summary>Gets whether the "card5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard5 {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "card5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard5() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 28;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    /// <summary>
    ///用户等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { if ((_hasBits0 & 4194304) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 29;
    private readonly static string FrameIdDefaultValue = "";

    private string frameId_;
    /// <summary>
    ///用户头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FrameId {
      get { return frameId_ ?? FrameIdDefaultValue; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameId {
      get { return frameId_ != null; }
    }
    /// <summary>Clears the value of the "frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameId() {
      frameId_ = null;
    }

    /// <summary>Field number for the "is_complete_discard" field.</summary>
    public const int IsCompleteDiscardFieldNumber = 30;
    private readonly static bool IsCompleteDiscardDefaultValue = false;

    private bool isCompleteDiscard_;
    /// <summary>
    ///是否完成弃牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCompleteDiscard {
      get { if ((_hasBits0 & 8388608) != 0) { return isCompleteDiscard_; } else { return IsCompleteDiscardDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        isCompleteDiscard_ = value;
      }
    }
    /// <summary>Gets whether the "is_complete_discard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCompleteDiscard {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "is_complete_discard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCompleteDiscard() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "card6" field.</summary>
    public const int Card6FieldNumber = 31;
    private readonly static int Card6DefaultValue = 0;

    private int card6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card6 {
      get { if ((_hasBits0 & 16777216) != 0) { return card6_; } else { return Card6DefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        card6_ = value;
      }
    }
    /// <summary>Gets whether the "card6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard6 {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "card6" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard6() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "tp_action_type" field.</summary>
    public const int TpActionTypeFieldNumber = 32;
    private readonly static global::Texas.Protocol.TpActionType TpActionTypeDefaultValue = global::Texas.Protocol.TpActionType.TpActionNone;

    private global::Texas.Protocol.TpActionType tpActionType_;
    /// <summary>
    /// teenpatti use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpActionType TpActionType {
      get { if ((_hasBits0 & 33554432) != 0) { return tpActionType_; } else { return TpActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        tpActionType_ = value;
      }
    }
    /// <summary>Gets whether the "tp_action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTpActionType {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "tp_action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTpActionType() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "is_see_card" field.</summary>
    public const int IsSeeCardFieldNumber = 33;
    private readonly static bool IsSeeCardDefaultValue = false;

    private bool isSeeCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSeeCard {
      get { if ((_hasBits0 & 67108864) != 0) { return isSeeCard_; } else { return IsSeeCardDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        isSeeCard_ = value;
      }
    }
    /// <summary>Gets whether the "is_see_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSeeCard {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "is_see_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSeeCard() {
      _hasBits0 &= ~67108864;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SeatStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SeatStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (ActionType != other.ActionType) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (HandChips != other.HandChips) return false;
      if (DestopChips != other.DestopChips) return false;
      if (HasCard != other.HasCard) return false;
      if (SeatReserve != other.SeatReserve) return false;
      if (Country != other.Country) return false;
      if (VipLevel != other.VipLevel) return false;
      if (WaitBlind != other.WaitBlind) return false;
      if (RebuyLeftTime != other.RebuyLeftTime) return false;
      if (RebuyWaitAuth != other.RebuyWaitAuth) return false;
      if (Clubid != other.Clubid) return false;
      if (GpsLon != other.GpsLon) return false;
      if (GpsLat != other.GpsLat) return false;
      if (ClubName != other.ClubName) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(CalltimeInfo, other.CalltimeInfo)) return false;
      if (IsEmpty != other.IsEmpty) return false;
      if (IsBooked != other.IsBooked) return false;
      if (BookConfirmRemainingSeconds != other.BookConfirmRemainingSeconds) return false;
      if (HunterBonus != other.HunterBonus) return false;
      if (Card1 != other.Card1) return false;
      if (Card2 != other.Card2) return false;
      if (Card3 != other.Card3) return false;
      if (Card4 != other.Card4) return false;
      if (Card5 != other.Card5) return false;
      if (Level != other.Level) return false;
      if (FrameId != other.FrameId) return false;
      if (IsCompleteDiscard != other.IsCompleteDiscard) return false;
      if (Card6 != other.Card6) return false;
      if (TpActionType != other.TpActionType) return false;
      if (IsSeeCard != other.IsSeeCard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasActionType) hash ^= ActionType.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (HasHandChips) hash ^= HandChips.GetHashCode();
      if (HasDestopChips) hash ^= DestopChips.GetHashCode();
      if (HasHasCard) hash ^= HasCard.GetHashCode();
      if (HasSeatReserve) hash ^= SeatReserve.GetHashCode();
      if (HasCountry) hash ^= Country.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasWaitBlind) hash ^= WaitBlind.GetHashCode();
      if (HasRebuyLeftTime) hash ^= RebuyLeftTime.GetHashCode();
      if (HasRebuyWaitAuth) hash ^= RebuyWaitAuth.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasGpsLon) hash ^= GpsLon.GetHashCode();
      if (HasGpsLat) hash ^= GpsLat.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (calltimeInfo_ != null) hash ^= CalltimeInfo.GetHashCode();
      if (HasIsEmpty) hash ^= IsEmpty.GetHashCode();
      if (HasIsBooked) hash ^= IsBooked.GetHashCode();
      if (HasBookConfirmRemainingSeconds) hash ^= BookConfirmRemainingSeconds.GetHashCode();
      if (HasHunterBonus) hash ^= HunterBonus.GetHashCode();
      if (HasCard1) hash ^= Card1.GetHashCode();
      if (HasCard2) hash ^= Card2.GetHashCode();
      if (HasCard3) hash ^= Card3.GetHashCode();
      if (HasCard4) hash ^= Card4.GetHashCode();
      if (HasCard5) hash ^= Card5.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasFrameId) hash ^= FrameId.GetHashCode();
      if (HasIsCompleteDiscard) hash ^= IsCompleteDiscard.GetHashCode();
      if (HasCard6) hash ^= Card6.GetHashCode();
      if (HasTpActionType) hash ^= TpActionType.GetHashCode();
      if (HasIsSeeCard) hash ^= IsSeeCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasActionType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (HasHandChips) {
        output.WriteRawTag(32);
        output.WriteInt64(HandChips);
      }
      if (HasDestopChips) {
        output.WriteRawTag(40);
        output.WriteInt64(DestopChips);
      }
      if (HasHasCard) {
        output.WriteRawTag(48);
        output.WriteBool(HasCard);
      }
      if (HasSeatReserve) {
        output.WriteRawTag(56);
        output.WriteBool(SeatReserve);
      }
      if (HasCountry) {
        output.WriteRawTag(66);
        output.WriteString(Country);
      }
      if (HasVipLevel) {
        output.WriteRawTag(72);
        output.WriteUInt32(VipLevel);
      }
      if (HasWaitBlind) {
        output.WriteRawTag(80);
        output.WriteBool(WaitBlind);
      }
      if (HasRebuyLeftTime) {
        output.WriteRawTag(88);
        output.WriteInt32(RebuyLeftTime);
      }
      if (HasRebuyWaitAuth) {
        output.WriteRawTag(96);
        output.WriteBool(RebuyWaitAuth);
      }
      if (HasClubid) {
        output.WriteRawTag(106);
        output.WriteString(Clubid);
      }
      if (HasGpsLon) {
        output.WriteRawTag(112);
        output.WriteInt32(GpsLon);
      }
      if (HasGpsLat) {
        output.WriteRawTag(120);
        output.WriteInt32(GpsLat);
      }
      if (HasClubName) {
        output.WriteRawTag(130, 1);
        output.WriteString(ClubName);
      }
      if (HasStatus) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Status);
      }
      if (calltimeInfo_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CalltimeInfo);
      }
      if (HasIsEmpty) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsEmpty);
      }
      if (HasIsBooked) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsBooked);
      }
      if (HasBookConfirmRemainingSeconds) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BookConfirmRemainingSeconds);
      }
      if (HasHunterBonus) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(HunterBonus);
      }
      if (HasCard1) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Card3);
      }
      if (HasCard4) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Card4);
      }
      if (HasCard5) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Card5);
      }
      if (HasLevel) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Level);
      }
      if (HasFrameId) {
        output.WriteRawTag(234, 1);
        output.WriteString(FrameId);
      }
      if (HasIsCompleteDiscard) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsCompleteDiscard);
      }
      if (HasCard6) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Card6);
      }
      if (HasTpActionType) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TpActionType);
      }
      if (HasIsSeeCard) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsSeeCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasActionType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (HasHandChips) {
        output.WriteRawTag(32);
        output.WriteInt64(HandChips);
      }
      if (HasDestopChips) {
        output.WriteRawTag(40);
        output.WriteInt64(DestopChips);
      }
      if (HasHasCard) {
        output.WriteRawTag(48);
        output.WriteBool(HasCard);
      }
      if (HasSeatReserve) {
        output.WriteRawTag(56);
        output.WriteBool(SeatReserve);
      }
      if (HasCountry) {
        output.WriteRawTag(66);
        output.WriteString(Country);
      }
      if (HasVipLevel) {
        output.WriteRawTag(72);
        output.WriteUInt32(VipLevel);
      }
      if (HasWaitBlind) {
        output.WriteRawTag(80);
        output.WriteBool(WaitBlind);
      }
      if (HasRebuyLeftTime) {
        output.WriteRawTag(88);
        output.WriteInt32(RebuyLeftTime);
      }
      if (HasRebuyWaitAuth) {
        output.WriteRawTag(96);
        output.WriteBool(RebuyWaitAuth);
      }
      if (HasClubid) {
        output.WriteRawTag(106);
        output.WriteString(Clubid);
      }
      if (HasGpsLon) {
        output.WriteRawTag(112);
        output.WriteInt32(GpsLon);
      }
      if (HasGpsLat) {
        output.WriteRawTag(120);
        output.WriteInt32(GpsLat);
      }
      if (HasClubName) {
        output.WriteRawTag(130, 1);
        output.WriteString(ClubName);
      }
      if (HasStatus) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Status);
      }
      if (calltimeInfo_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CalltimeInfo);
      }
      if (HasIsEmpty) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsEmpty);
      }
      if (HasIsBooked) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsBooked);
      }
      if (HasBookConfirmRemainingSeconds) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BookConfirmRemainingSeconds);
      }
      if (HasHunterBonus) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(HunterBonus);
      }
      if (HasCard1) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Card3);
      }
      if (HasCard4) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Card4);
      }
      if (HasCard5) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Card5);
      }
      if (HasLevel) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Level);
      }
      if (HasFrameId) {
        output.WriteRawTag(234, 1);
        output.WriteString(FrameId);
      }
      if (HasIsCompleteDiscard) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsCompleteDiscard);
      }
      if (HasCard6) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Card6);
      }
      if (HasTpActionType) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TpActionType);
      }
      if (HasIsSeeCard) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsSeeCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasActionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (HasHandChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandChips);
      }
      if (HasDestopChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DestopChips);
      }
      if (HasHasCard) {
        size += 1 + 1;
      }
      if (HasSeatReserve) {
        size += 1 + 1;
      }
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (HasWaitBlind) {
        size += 1 + 1;
      }
      if (HasRebuyLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebuyLeftTime);
      }
      if (HasRebuyWaitAuth) {
        size += 1 + 1;
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasGpsLon) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsLon);
      }
      if (HasGpsLat) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsLat);
      }
      if (HasClubName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasStatus) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (calltimeInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CalltimeInfo);
      }
      if (HasIsEmpty) {
        size += 2 + 1;
      }
      if (HasIsBooked) {
        size += 2 + 1;
      }
      if (HasBookConfirmRemainingSeconds) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BookConfirmRemainingSeconds);
      }
      if (HasHunterBonus) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HunterBonus);
      }
      if (HasCard1) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card1);
      }
      if (HasCard2) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card2);
      }
      if (HasCard3) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card3);
      }
      if (HasCard4) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card4);
      }
      if (HasCard5) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card5);
      }
      if (HasLevel) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HasFrameId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (HasIsCompleteDiscard) {
        size += 2 + 1;
      }
      if (HasCard6) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card6);
      }
      if (HasTpActionType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TpActionType);
      }
      if (HasIsSeeCard) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SeatStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasActionType) {
        ActionType = other.ActionType;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Texas.Protocol.UserBrief();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.HasHandChips) {
        HandChips = other.HandChips;
      }
      if (other.HasDestopChips) {
        DestopChips = other.DestopChips;
      }
      if (other.HasHasCard) {
        HasCard = other.HasCard;
      }
      if (other.HasSeatReserve) {
        SeatReserve = other.SeatReserve;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasWaitBlind) {
        WaitBlind = other.WaitBlind;
      }
      if (other.HasRebuyLeftTime) {
        RebuyLeftTime = other.RebuyLeftTime;
      }
      if (other.HasRebuyWaitAuth) {
        RebuyWaitAuth = other.RebuyWaitAuth;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasGpsLon) {
        GpsLon = other.GpsLon;
      }
      if (other.HasGpsLat) {
        GpsLat = other.GpsLat;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.calltimeInfo_ != null) {
        if (calltimeInfo_ == null) {
          CalltimeInfo = new global::Texas.Protocol.CallTimeInfo();
        }
        CalltimeInfo.MergeFrom(other.CalltimeInfo);
      }
      if (other.HasIsEmpty) {
        IsEmpty = other.IsEmpty;
      }
      if (other.HasIsBooked) {
        IsBooked = other.IsBooked;
      }
      if (other.HasBookConfirmRemainingSeconds) {
        BookConfirmRemainingSeconds = other.BookConfirmRemainingSeconds;
      }
      if (other.HasHunterBonus) {
        HunterBonus = other.HunterBonus;
      }
      if (other.HasCard1) {
        Card1 = other.Card1;
      }
      if (other.HasCard2) {
        Card2 = other.Card2;
      }
      if (other.HasCard3) {
        Card3 = other.Card3;
      }
      if (other.HasCard4) {
        Card4 = other.Card4;
      }
      if (other.HasCard5) {
        Card5 = other.Card5;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasFrameId) {
        FrameId = other.FrameId;
      }
      if (other.HasIsCompleteDiscard) {
        IsCompleteDiscard = other.IsCompleteDiscard;
      }
      if (other.HasCard6) {
        Card6 = other.Card6;
      }
      if (other.HasTpActionType) {
        TpActionType = other.TpActionType;
      }
      if (other.HasIsSeeCard) {
        IsSeeCard = other.IsSeeCard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Texas.Protocol.ActionType) input.ReadEnum();
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Player);
            break;
          }
          case 32: {
            HandChips = input.ReadInt64();
            break;
          }
          case 40: {
            DestopChips = input.ReadInt64();
            break;
          }
          case 48: {
            HasCard = input.ReadBool();
            break;
          }
          case 56: {
            SeatReserve = input.ReadBool();
            break;
          }
          case 66: {
            Country = input.ReadString();
            break;
          }
          case 72: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 80: {
            WaitBlind = input.ReadBool();
            break;
          }
          case 88: {
            RebuyLeftTime = input.ReadInt32();
            break;
          }
          case 96: {
            RebuyWaitAuth = input.ReadBool();
            break;
          }
          case 106: {
            Clubid = input.ReadString();
            break;
          }
          case 112: {
            GpsLon = input.ReadInt32();
            break;
          }
          case 120: {
            GpsLat = input.ReadInt32();
            break;
          }
          case 130: {
            ClubName = input.ReadString();
            break;
          }
          case 136: {
            Status = input.ReadInt32();
            break;
          }
          case 146: {
            if (calltimeInfo_ == null) {
              CalltimeInfo = new global::Texas.Protocol.CallTimeInfo();
            }
            input.ReadMessage(CalltimeInfo);
            break;
          }
          case 152: {
            IsEmpty = input.ReadBool();
            break;
          }
          case 160: {
            IsBooked = input.ReadBool();
            break;
          }
          case 168: {
            BookConfirmRemainingSeconds = input.ReadInt32();
            break;
          }
          case 176: {
            HunterBonus = input.ReadInt64();
            break;
          }
          case 184: {
            Card1 = input.ReadInt32();
            break;
          }
          case 192: {
            Card2 = input.ReadInt32();
            break;
          }
          case 200: {
            Card3 = input.ReadInt32();
            break;
          }
          case 208: {
            Card4 = input.ReadInt32();
            break;
          }
          case 216: {
            Card5 = input.ReadInt32();
            break;
          }
          case 224: {
            Level = input.ReadInt32();
            break;
          }
          case 234: {
            FrameId = input.ReadString();
            break;
          }
          case 240: {
            IsCompleteDiscard = input.ReadBool();
            break;
          }
          case 248: {
            Card6 = input.ReadInt32();
            break;
          }
          case 256: {
            TpActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 264: {
            IsSeeCard = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Texas.Protocol.ActionType) input.ReadEnum();
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Player);
            break;
          }
          case 32: {
            HandChips = input.ReadInt64();
            break;
          }
          case 40: {
            DestopChips = input.ReadInt64();
            break;
          }
          case 48: {
            HasCard = input.ReadBool();
            break;
          }
          case 56: {
            SeatReserve = input.ReadBool();
            break;
          }
          case 66: {
            Country = input.ReadString();
            break;
          }
          case 72: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 80: {
            WaitBlind = input.ReadBool();
            break;
          }
          case 88: {
            RebuyLeftTime = input.ReadInt32();
            break;
          }
          case 96: {
            RebuyWaitAuth = input.ReadBool();
            break;
          }
          case 106: {
            Clubid = input.ReadString();
            break;
          }
          case 112: {
            GpsLon = input.ReadInt32();
            break;
          }
          case 120: {
            GpsLat = input.ReadInt32();
            break;
          }
          case 130: {
            ClubName = input.ReadString();
            break;
          }
          case 136: {
            Status = input.ReadInt32();
            break;
          }
          case 146: {
            if (calltimeInfo_ == null) {
              CalltimeInfo = new global::Texas.Protocol.CallTimeInfo();
            }
            input.ReadMessage(CalltimeInfo);
            break;
          }
          case 152: {
            IsEmpty = input.ReadBool();
            break;
          }
          case 160: {
            IsBooked = input.ReadBool();
            break;
          }
          case 168: {
            BookConfirmRemainingSeconds = input.ReadInt32();
            break;
          }
          case 176: {
            HunterBonus = input.ReadInt64();
            break;
          }
          case 184: {
            Card1 = input.ReadInt32();
            break;
          }
          case 192: {
            Card2 = input.ReadInt32();
            break;
          }
          case 200: {
            Card3 = input.ReadInt32();
            break;
          }
          case 208: {
            Card4 = input.ReadInt32();
            break;
          }
          case 216: {
            Card5 = input.ReadInt32();
            break;
          }
          case 224: {
            Level = input.ReadInt32();
            break;
          }
          case 234: {
            FrameId = input.ReadString();
            break;
          }
          case 240: {
            IsCompleteDiscard = input.ReadBool();
            break;
          }
          case 248: {
            Card6 = input.ReadInt32();
            break;
          }
          case 256: {
            TpActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 264: {
            IsSeeCard = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RiverSqueeze : pb::IMessage<RiverSqueeze>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RiverSqueeze> _parser = new pb::MessageParser<RiverSqueeze>(() => new RiverSqueeze());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RiverSqueeze> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RiverSqueeze() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RiverSqueeze(RiverSqueeze other) : this() {
      _hasBits0 = other._hasBits0;
      isRiverSqueeze_ = other.isRiverSqueeze_;
      squeezeTime_ = other.squeezeTime_;
      squeezeSecond_ = other.squeezeSecond_;
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RiverSqueeze Clone() {
      return new RiverSqueeze(this);
    }

    /// <summary>Field number for the "is_river_squeeze" field.</summary>
    public const int IsRiverSqueezeFieldNumber = 1;
    private readonly static bool IsRiverSqueezeDefaultValue = false;

    private bool isRiverSqueeze_;
    /// <summary>
    /// 是否眯牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRiverSqueeze {
      get { if ((_hasBits0 & 1) != 0) { return isRiverSqueeze_; } else { return IsRiverSqueezeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isRiverSqueeze_ = value;
      }
    }
    /// <summary>Gets whether the "is_river_squeeze" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRiverSqueeze {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_river_squeeze" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRiverSqueeze() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "squeeze_time" field.</summary>
    public const int SqueezeTimeFieldNumber = 2;
    private readonly static long SqueezeTimeDefaultValue = 0L;

    private long squeezeTime_;
    /// <summary>
    /// 眯牌开始时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SqueezeTime {
      get { if ((_hasBits0 & 2) != 0) { return squeezeTime_; } else { return SqueezeTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        squeezeTime_ = value;
      }
    }
    /// <summary>Gets whether the "squeeze_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSqueezeTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "squeeze_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSqueezeTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "squeeze_second" field.</summary>
    public const int SqueezeSecondFieldNumber = 3;
    private readonly static int SqueezeSecondDefaultValue = 0;

    private int squeezeSecond_;
    /// <summary>
    /// 眯牌秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SqueezeSecond {
      get { if ((_hasBits0 & 4) != 0) { return squeezeSecond_; } else { return SqueezeSecondDefaultValue; } }
      set {
        _hasBits0 |= 4;
        squeezeSecond_ = value;
      }
    }
    /// <summary>Gets whether the "squeeze_second" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSqueezeSecond {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "squeeze_second" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSqueezeSecond() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RiverSqueeze);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RiverSqueeze other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsRiverSqueeze != other.IsRiverSqueeze) return false;
      if (SqueezeTime != other.SqueezeTime) return false;
      if (SqueezeSecond != other.SqueezeSecond) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsRiverSqueeze) hash ^= IsRiverSqueeze.GetHashCode();
      if (HasSqueezeTime) hash ^= SqueezeTime.GetHashCode();
      if (HasSqueezeSecond) hash ^= SqueezeSecond.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsRiverSqueeze) {
        output.WriteRawTag(8);
        output.WriteBool(IsRiverSqueeze);
      }
      if (HasSqueezeTime) {
        output.WriteRawTag(16);
        output.WriteInt64(SqueezeTime);
      }
      if (HasSqueezeSecond) {
        output.WriteRawTag(24);
        output.WriteInt32(SqueezeSecond);
      }
      if (HasUid) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsRiverSqueeze) {
        output.WriteRawTag(8);
        output.WriteBool(IsRiverSqueeze);
      }
      if (HasSqueezeTime) {
        output.WriteRawTag(16);
        output.WriteInt64(SqueezeTime);
      }
      if (HasSqueezeSecond) {
        output.WriteRawTag(24);
        output.WriteInt32(SqueezeSecond);
      }
      if (HasUid) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsRiverSqueeze) {
        size += 1 + 1;
      }
      if (HasSqueezeTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SqueezeTime);
      }
      if (HasSqueezeSecond) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SqueezeSecond);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RiverSqueeze other) {
      if (other == null) {
        return;
      }
      if (other.HasIsRiverSqueeze) {
        IsRiverSqueeze = other.IsRiverSqueeze;
      }
      if (other.HasSqueezeTime) {
        SqueezeTime = other.SqueezeTime;
      }
      if (other.HasSqueezeSecond) {
        SqueezeSecond = other.SqueezeSecond;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsRiverSqueeze = input.ReadBool();
            break;
          }
          case 16: {
            SqueezeTime = input.ReadInt64();
            break;
          }
          case 24: {
            SqueezeSecond = input.ReadInt32();
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsRiverSqueeze = input.ReadBool();
            break;
          }
          case 16: {
            SqueezeTime = input.ReadInt64();
            break;
          }
          case 24: {
            SqueezeSecond = input.ReadInt32();
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiBoard : pb::IMessage<MultiBoard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiBoard> _parser = new pb::MessageParser<MultiBoard>(() => new MultiBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MultiBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiBoard(MultiBoard other) : this() {
      boards_ = other.boards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiBoard Clone() {
      return new MultiBoard(this);
    }

    /// <summary>Field number for the "boards" field.</summary>
    public const int BoardsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_boards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> boards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Boards {
      get { return boards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MultiBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MultiBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boards_.Equals(other.boards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      boards_.WriteTo(output, _repeated_boards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      boards_.WriteTo(ref output, _repeated_boards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += boards_.CalculateSize(_repeated_boards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MultiBoard other) {
      if (other == null) {
        return;
      }
      boards_.Add(other.boards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            boards_.AddEntriesFrom(input, _repeated_boards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            boards_.AddEntriesFrom(ref input, _repeated_boards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InsurancePoolInfo : pb::IMessage<InsurancePoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InsurancePoolInfo> _parser = new pb::MessageParser<InsurancePoolInfo>(() => new InsurancePoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InsurancePoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InsurancePoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InsurancePoolInfo(InsurancePoolInfo other) : this() {
      _hasBits0 = other._hasBits0;
      poolid_ = other.poolid_;
      alreadyBuyin_ = other.alreadyBuyin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InsurancePoolInfo Clone() {
      return new InsurancePoolInfo(this);
    }

    /// <summary>Field number for the "poolid" field.</summary>
    public const int PoolidFieldNumber = 1;
    private readonly static int PoolidDefaultValue = 0;

    private int poolid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Poolid {
      get { if ((_hasBits0 & 1) != 0) { return poolid_; } else { return PoolidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        poolid_ = value;
      }
    }
    /// <summary>Gets whether the "poolid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPoolid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "poolid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPoolid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "already_buyin" field.</summary>
    public const int AlreadyBuyinFieldNumber = 2;
    private readonly static long AlreadyBuyinDefaultValue = 0L;

    private long alreadyBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AlreadyBuyin {
      get { if ((_hasBits0 & 2) != 0) { return alreadyBuyin_; } else { return AlreadyBuyinDefaultValue; } }
      set {
        _hasBits0 |= 2;
        alreadyBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "already_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlreadyBuyin {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "already_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlreadyBuyin() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InsurancePoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InsurancePoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Poolid != other.Poolid) return false;
      if (AlreadyBuyin != other.AlreadyBuyin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPoolid) hash ^= Poolid.GetHashCode();
      if (HasAlreadyBuyin) hash ^= AlreadyBuyin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPoolid) {
        output.WriteRawTag(8);
        output.WriteInt32(Poolid);
      }
      if (HasAlreadyBuyin) {
        output.WriteRawTag(16);
        output.WriteInt64(AlreadyBuyin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPoolid) {
        output.WriteRawTag(8);
        output.WriteInt32(Poolid);
      }
      if (HasAlreadyBuyin) {
        output.WriteRawTag(16);
        output.WriteInt64(AlreadyBuyin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPoolid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Poolid);
      }
      if (HasAlreadyBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AlreadyBuyin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InsurancePoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasPoolid) {
        Poolid = other.Poolid;
      }
      if (other.HasAlreadyBuyin) {
        AlreadyBuyin = other.AlreadyBuyin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Poolid = input.ReadInt32();
            break;
          }
          case 16: {
            AlreadyBuyin = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Poolid = input.ReadInt32();
            break;
          }
          case 16: {
            AlreadyBuyin = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableStatus : pb::IMessage<TableStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableStatus> _parser = new pb::MessageParser<TableStatus>(() => new TableStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TableStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableStatus(TableStatus other) : this() {
      _hasBits0 = other._hasBits0;
      isPlaying_ = other.isPlaying_;
      actionIdx_ = other.actionIdx_;
      dIdx_ = other.dIdx_;
      sbIdx_ = other.sbIdx_;
      bbIdx_ = other.bbIdx_;
      seat_ = other.seat_.Clone();
      pool_ = other.pool_.Clone();
      stage_ = other.stage_;
      board_ = other.board_.Clone();
      tid_ = other.tid_;
      isFinalTable_ = other.isFinalTable_;
      multiBoards_ = other.multiBoards_.Clone();
      insurancePools_ = other.insurancePools_.Clone();
      isWaitSync_ = other.isWaitSync_;
      zoomFoldSeat_ = other.zoomFoldSeat_.Clone();
      gameid_ = other.gameid_;
      isShowCardEnable_ = other.isShowCardEnable_;
      isAllInRateEnable_ = other.isAllInRateEnable_;
      gameType_ = other.gameType_;
      curBlind_ = other.curBlind_;
      leftDiscardTime_ = other.leftDiscardTime_;
      isCompleteDiscard_ = other.isCompleteDiscard_;
      riverSqueeze_ = other.riverSqueeze_ != null ? other.riverSqueeze_.Clone() : null;
      isDuringDiscard_ = other.isDuringDiscard_;
      secondBoard_ = other.secondBoard_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableStatus Clone() {
      return new TableStatus(this);
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 1;
    private readonly static bool IsPlayingDefaultValue = false;

    private bool isPlaying_;
    /// <summary>
    ///桌子是否在玩 //version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlaying {
      get { if ((_hasBits0 & 1) != 0) { return isPlaying_; } else { return IsPlayingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPlaying_ = value;
      }
    }
    /// <summary>Gets whether the "is_playing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPlaying {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_playing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPlaying() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_idx" field.</summary>
    public const int ActionIdxFieldNumber = 2;
    private readonly static int ActionIdxDefaultValue = 0;

    private int actionIdx_;
    /// <summary>
    ///version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionIdx {
      get { if ((_hasBits0 & 2) != 0) { return actionIdx_; } else { return ActionIdxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionIdx_ = value;
      }
    }
    /// <summary>Gets whether the "action_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionIdx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionIdx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "d_idx" field.</summary>
    public const int DIdxFieldNumber = 3;
    private readonly static int DIdxDefaultValue = 0;

    private int dIdx_;
    /// <summary>
    ///version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DIdx {
      get { if ((_hasBits0 & 4) != 0) { return dIdx_; } else { return DIdxDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dIdx_ = value;
      }
    }
    /// <summary>Gets whether the "d_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDIdx {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "d_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDIdx() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sb_idx" field.</summary>
    public const int SbIdxFieldNumber = 4;
    private readonly static int SbIdxDefaultValue = 0;

    private int sbIdx_;
    /// <summary>
    ///version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SbIdx {
      get { if ((_hasBits0 & 8) != 0) { return sbIdx_; } else { return SbIdxDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sbIdx_ = value;
      }
    }
    /// <summary>Gets whether the "sb_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSbIdx {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "sb_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSbIdx() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bb_idx" field.</summary>
    public const int BbIdxFieldNumber = 5;
    private readonly static int BbIdxDefaultValue = 0;

    private int bbIdx_;
    /// <summary>
    ///version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BbIdx {
      get { if ((_hasBits0 & 16) != 0) { return bbIdx_; } else { return BbIdxDefaultValue; } }
      set {
        _hasBits0 |= 16;
        bbIdx_ = value;
      }
    }
    /// <summary>Gets whether the "bb_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBbIdx {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bb_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBbIdx() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Texas.Protocol.SeatStatus> _repeated_seat_codec
        = pb::FieldCodec.ForMessage(50, global::Texas.Protocol.SeatStatus.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.SeatStatus> seat_ = new pbc::RepeatedField<global::Texas.Protocol.SeatStatus>();
    /// <summary>
    ///version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.SeatStatus> Seat {
      get { return seat_; }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_pool_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> pool_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///奖池	//version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> Pool {
      get { return pool_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 8;
    private readonly static global::Texas.Protocol.RoundStage StageDefaultValue = global::Texas.Protocol.RoundStage.RoundNone;

    private global::Texas.Protocol.RoundStage stage_;
    /// <summary>
    ///version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoundStage Stage {
      get { if ((_hasBits0 & 32) != 0) { return stage_; } else { return StageDefaultValue; } }
      set {
        _hasBits0 |= 32;
        stage_ = value;
      }
    }
    /// <summary>Gets whether the "stage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStage {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "stage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStage() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "board" field.</summary>
    public const int BoardFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_board_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> board_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///公共牌	//version 0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Board {
      get { return board_; }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 10;
    private readonly static int TidDefaultValue = 0;

    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tid {
      get { if ((_hasBits0 & 64) != 0) { return tid_; } else { return TidDefaultValue; } }
      set {
        _hasBits0 |= 64;
        tid_ = value;
      }
    }
    /// <summary>Gets whether the "tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTid {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTid() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_final_table" field.</summary>
    public const int IsFinalTableFieldNumber = 11;
    private readonly static bool IsFinalTableDefaultValue = false;

    private bool isFinalTable_;
    /// <summary>
    ///mtt生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFinalTable {
      get { if ((_hasBits0 & 128) != 0) { return isFinalTable_; } else { return IsFinalTableDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isFinalTable_ = value;
      }
    }
    /// <summary>Gets whether the "is_final_table" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFinalTable {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_final_table" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFinalTable() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "multi_boards" field.</summary>
    public const int MultiBoardsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Texas.Protocol.MultiBoard> _repeated_multiBoards_codec
        = pb::FieldCodec.ForMessage(98, global::Texas.Protocol.MultiBoard.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.MultiBoard> multiBoards_ = new pbc::RepeatedField<global::Texas.Protocol.MultiBoard>();
    /// <summary>
    ///发多次的公共牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.MultiBoard> MultiBoards {
      get { return multiBoards_; }
    }

    /// <summary>Field number for the "insurance_pools" field.</summary>
    public const int InsurancePoolsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Texas.Protocol.InsurancePoolInfo> _repeated_insurancePools_codec
        = pb::FieldCodec.ForMessage(106, global::Texas.Protocol.InsurancePoolInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.InsurancePoolInfo> insurancePools_ = new pbc::RepeatedField<global::Texas.Protocol.InsurancePoolInfo>();
    /// <summary>
    ///保险池信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.InsurancePoolInfo> InsurancePools {
      get { return insurancePools_; }
    }

    /// <summary>Field number for the "is_wait_sync" field.</summary>
    public const int IsWaitSyncFieldNumber = 14;
    private readonly static bool IsWaitSyncDefaultValue = false;

    private bool isWaitSync_;
    /// <summary>
    ///等待同步发牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWaitSync {
      get { if ((_hasBits0 & 256) != 0) { return isWaitSync_; } else { return IsWaitSyncDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isWaitSync_ = value;
      }
    }
    /// <summary>Gets whether the "is_wait_sync" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWaitSync {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_wait_sync" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWaitSync() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "zoom_fold_seat" field.</summary>
    public const int ZoomFoldSeatFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ZoomFoldSeatStatus> _repeated_zoomFoldSeat_codec
        = pb::FieldCodec.ForMessage(122, global::Texas.Protocol.ZoomFoldSeatStatus.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ZoomFoldSeatStatus> zoomFoldSeat_ = new pbc::RepeatedField<global::Texas.Protocol.ZoomFoldSeatStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ZoomFoldSeatStatus> ZoomFoldSeat {
      get { return zoomFoldSeat_; }
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 16;
    private readonly static string GameidDefaultValue = "";

    private string gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gameid {
      get { return gameid_ ?? GameidDefaultValue; }
      set {
        gameid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gameid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameid {
      get { return gameid_ != null; }
    }
    /// <summary>Clears the value of the "gameid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameid() {
      gameid_ = null;
    }

    /// <summary>Field number for the "is_show_card_enable" field.</summary>
    public const int IsShowCardEnableFieldNumber = 17;
    private readonly static bool IsShowCardEnableDefaultValue = false;

    private bool isShowCardEnable_;
    /// <summary>
    ///是否在比牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsShowCardEnable {
      get { if ((_hasBits0 & 512) != 0) { return isShowCardEnable_; } else { return IsShowCardEnableDefaultValue; } }
      set {
        _hasBits0 |= 512;
        isShowCardEnable_ = value;
      }
    }
    /// <summary>Gets whether the "is_show_card_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsShowCardEnable {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "is_show_card_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsShowCardEnable() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "is_all_in_rate_enable" field.</summary>
    public const int IsAllInRateEnableFieldNumber = 18;
    private readonly static bool IsAllInRateEnableDefaultValue = false;

    private bool isAllInRateEnable_;
    /// <summary>
    ///是否要计算胜率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAllInRateEnable {
      get { if ((_hasBits0 & 1024) != 0) { return isAllInRateEnable_; } else { return IsAllInRateEnableDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isAllInRateEnable_ = value;
      }
    }
    /// <summary>Gets whether the "is_all_in_rate_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAllInRateEnable {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_all_in_rate_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAllInRateEnable() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 19;
    private readonly static int GameTypeDefaultValue = 0;

    private int gameType_;
    /// <summary>
    ///混合游戏的游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { if ((_hasBits0 & 2048) != 0) { return gameType_; } else { return GameTypeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gameType_ = value;
      }
    }
    /// <summary>Gets whether the "game_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameType {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "game_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameType() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "cur_blind" field.</summary>
    public const int CurBlindFieldNumber = 20;
    private readonly static long CurBlindDefaultValue = 0L;

    private long curBlind_;
    /// <summary>
    /// 当前牌桌bb, or 6+ ante
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurBlind {
      get { if ((_hasBits0 & 4096) != 0) { return curBlind_; } else { return CurBlindDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        curBlind_ = value;
      }
    }
    /// <summary>Gets whether the "cur_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurBlind {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "cur_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurBlind() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "left_discard_time" field.</summary>
    public const int LeftDiscardTimeFieldNumber = 25;
    private readonly static int LeftDiscardTimeDefaultValue = 0;

    private int leftDiscardTime_;
    /// <summary>
    ///弃牌剩余时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeftDiscardTime {
      get { if ((_hasBits0 & 8192) != 0) { return leftDiscardTime_; } else { return LeftDiscardTimeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        leftDiscardTime_ = value;
      }
    }
    /// <summary>Gets whether the "left_discard_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftDiscardTime {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "left_discard_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftDiscardTime() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "is_complete_discard" field.</summary>
    public const int IsCompleteDiscardFieldNumber = 26;
    private readonly static bool IsCompleteDiscardDefaultValue = false;

    private bool isCompleteDiscard_;
    /// <summary>
    ///是否已經完成弃牌, nlh3-1使用, 影響Client端顯示卡牌張數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCompleteDiscard {
      get { if ((_hasBits0 & 16384) != 0) { return isCompleteDiscard_; } else { return IsCompleteDiscardDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        isCompleteDiscard_ = value;
      }
    }
    /// <summary>Gets whether the "is_complete_discard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCompleteDiscard {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_complete_discard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCompleteDiscard() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "river_squeeze" field.</summary>
    public const int RiverSqueezeFieldNumber = 27;
    private global::Texas.Protocol.RiverSqueeze riverSqueeze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RiverSqueeze RiverSqueeze {
      get { return riverSqueeze_; }
      set {
        riverSqueeze_ = value;
      }
    }

    /// <summary>Field number for the "is_during_discard" field.</summary>
    public const int IsDuringDiscardFieldNumber = 28;
    private readonly static bool IsDuringDiscardDefaultValue = false;

    private bool isDuringDiscard_;
    /// <summary>
    ///是否正在棄牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDuringDiscard {
      get { if ((_hasBits0 & 32768) != 0) { return isDuringDiscard_; } else { return IsDuringDiscardDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        isDuringDiscard_ = value;
      }
    }
    /// <summary>Gets whether the "is_during_discard" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsDuringDiscard {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "is_during_discard" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsDuringDiscard() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "second_board" field.</summary>
    public const int SecondBoardFieldNumber = 29;
    private static readonly pb::FieldCodec<int> _repeated_secondBoard_codec
        = pb::FieldCodec.ForInt32(234);
    private readonly pbc::RepeatedField<int> secondBoard_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///雙層公共牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SecondBoard {
      get { return secondBoard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TableStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TableStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPlaying != other.IsPlaying) return false;
      if (ActionIdx != other.ActionIdx) return false;
      if (DIdx != other.DIdx) return false;
      if (SbIdx != other.SbIdx) return false;
      if (BbIdx != other.BbIdx) return false;
      if(!seat_.Equals(other.seat_)) return false;
      if(!pool_.Equals(other.pool_)) return false;
      if (Stage != other.Stage) return false;
      if(!board_.Equals(other.board_)) return false;
      if (Tid != other.Tid) return false;
      if (IsFinalTable != other.IsFinalTable) return false;
      if(!multiBoards_.Equals(other.multiBoards_)) return false;
      if(!insurancePools_.Equals(other.insurancePools_)) return false;
      if (IsWaitSync != other.IsWaitSync) return false;
      if(!zoomFoldSeat_.Equals(other.zoomFoldSeat_)) return false;
      if (Gameid != other.Gameid) return false;
      if (IsShowCardEnable != other.IsShowCardEnable) return false;
      if (IsAllInRateEnable != other.IsAllInRateEnable) return false;
      if (GameType != other.GameType) return false;
      if (CurBlind != other.CurBlind) return false;
      if (LeftDiscardTime != other.LeftDiscardTime) return false;
      if (IsCompleteDiscard != other.IsCompleteDiscard) return false;
      if (!object.Equals(RiverSqueeze, other.RiverSqueeze)) return false;
      if (IsDuringDiscard != other.IsDuringDiscard) return false;
      if(!secondBoard_.Equals(other.secondBoard_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsPlaying) hash ^= IsPlaying.GetHashCode();
      if (HasActionIdx) hash ^= ActionIdx.GetHashCode();
      if (HasDIdx) hash ^= DIdx.GetHashCode();
      if (HasSbIdx) hash ^= SbIdx.GetHashCode();
      if (HasBbIdx) hash ^= BbIdx.GetHashCode();
      hash ^= seat_.GetHashCode();
      hash ^= pool_.GetHashCode();
      if (HasStage) hash ^= Stage.GetHashCode();
      hash ^= board_.GetHashCode();
      if (HasTid) hash ^= Tid.GetHashCode();
      if (HasIsFinalTable) hash ^= IsFinalTable.GetHashCode();
      hash ^= multiBoards_.GetHashCode();
      hash ^= insurancePools_.GetHashCode();
      if (HasIsWaitSync) hash ^= IsWaitSync.GetHashCode();
      hash ^= zoomFoldSeat_.GetHashCode();
      if (HasGameid) hash ^= Gameid.GetHashCode();
      if (HasIsShowCardEnable) hash ^= IsShowCardEnable.GetHashCode();
      if (HasIsAllInRateEnable) hash ^= IsAllInRateEnable.GetHashCode();
      if (HasGameType) hash ^= GameType.GetHashCode();
      if (HasCurBlind) hash ^= CurBlind.GetHashCode();
      if (HasLeftDiscardTime) hash ^= LeftDiscardTime.GetHashCode();
      if (HasIsCompleteDiscard) hash ^= IsCompleteDiscard.GetHashCode();
      if (riverSqueeze_ != null) hash ^= RiverSqueeze.GetHashCode();
      if (HasIsDuringDiscard) hash ^= IsDuringDiscard.GetHashCode();
      hash ^= secondBoard_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsPlaying) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlaying);
      }
      if (HasActionIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionIdx);
      }
      if (HasDIdx) {
        output.WriteRawTag(24);
        output.WriteInt32(DIdx);
      }
      if (HasSbIdx) {
        output.WriteRawTag(32);
        output.WriteInt32(SbIdx);
      }
      if (HasBbIdx) {
        output.WriteRawTag(40);
        output.WriteInt32(BbIdx);
      }
      seat_.WriteTo(output, _repeated_seat_codec);
      pool_.WriteTo(output, _repeated_pool_codec);
      if (HasStage) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Stage);
      }
      board_.WriteTo(output, _repeated_board_codec);
      if (HasTid) {
        output.WriteRawTag(80);
        output.WriteInt32(Tid);
      }
      if (HasIsFinalTable) {
        output.WriteRawTag(88);
        output.WriteBool(IsFinalTable);
      }
      multiBoards_.WriteTo(output, _repeated_multiBoards_codec);
      insurancePools_.WriteTo(output, _repeated_insurancePools_codec);
      if (HasIsWaitSync) {
        output.WriteRawTag(112);
        output.WriteBool(IsWaitSync);
      }
      zoomFoldSeat_.WriteTo(output, _repeated_zoomFoldSeat_codec);
      if (HasGameid) {
        output.WriteRawTag(130, 1);
        output.WriteString(Gameid);
      }
      if (HasIsShowCardEnable) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsShowCardEnable);
      }
      if (HasIsAllInRateEnable) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAllInRateEnable);
      }
      if (HasGameType) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GameType);
      }
      if (HasCurBlind) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(CurBlind);
      }
      if (HasLeftDiscardTime) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(LeftDiscardTime);
      }
      if (HasIsCompleteDiscard) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsCompleteDiscard);
      }
      if (riverSqueeze_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(RiverSqueeze);
      }
      if (HasIsDuringDiscard) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsDuringDiscard);
      }
      secondBoard_.WriteTo(output, _repeated_secondBoard_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsPlaying) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlaying);
      }
      if (HasActionIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionIdx);
      }
      if (HasDIdx) {
        output.WriteRawTag(24);
        output.WriteInt32(DIdx);
      }
      if (HasSbIdx) {
        output.WriteRawTag(32);
        output.WriteInt32(SbIdx);
      }
      if (HasBbIdx) {
        output.WriteRawTag(40);
        output.WriteInt32(BbIdx);
      }
      seat_.WriteTo(ref output, _repeated_seat_codec);
      pool_.WriteTo(ref output, _repeated_pool_codec);
      if (HasStage) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Stage);
      }
      board_.WriteTo(ref output, _repeated_board_codec);
      if (HasTid) {
        output.WriteRawTag(80);
        output.WriteInt32(Tid);
      }
      if (HasIsFinalTable) {
        output.WriteRawTag(88);
        output.WriteBool(IsFinalTable);
      }
      multiBoards_.WriteTo(ref output, _repeated_multiBoards_codec);
      insurancePools_.WriteTo(ref output, _repeated_insurancePools_codec);
      if (HasIsWaitSync) {
        output.WriteRawTag(112);
        output.WriteBool(IsWaitSync);
      }
      zoomFoldSeat_.WriteTo(ref output, _repeated_zoomFoldSeat_codec);
      if (HasGameid) {
        output.WriteRawTag(130, 1);
        output.WriteString(Gameid);
      }
      if (HasIsShowCardEnable) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsShowCardEnable);
      }
      if (HasIsAllInRateEnable) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAllInRateEnable);
      }
      if (HasGameType) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GameType);
      }
      if (HasCurBlind) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(CurBlind);
      }
      if (HasLeftDiscardTime) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(LeftDiscardTime);
      }
      if (HasIsCompleteDiscard) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsCompleteDiscard);
      }
      if (riverSqueeze_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(RiverSqueeze);
      }
      if (HasIsDuringDiscard) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsDuringDiscard);
      }
      secondBoard_.WriteTo(ref output, _repeated_secondBoard_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsPlaying) {
        size += 1 + 1;
      }
      if (HasActionIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionIdx);
      }
      if (HasDIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DIdx);
      }
      if (HasSbIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SbIdx);
      }
      if (HasBbIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BbIdx);
      }
      size += seat_.CalculateSize(_repeated_seat_codec);
      size += pool_.CalculateSize(_repeated_pool_codec);
      if (HasStage) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stage);
      }
      size += board_.CalculateSize(_repeated_board_codec);
      if (HasTid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (HasIsFinalTable) {
        size += 1 + 1;
      }
      size += multiBoards_.CalculateSize(_repeated_multiBoards_codec);
      size += insurancePools_.CalculateSize(_repeated_insurancePools_codec);
      if (HasIsWaitSync) {
        size += 1 + 1;
      }
      size += zoomFoldSeat_.CalculateSize(_repeated_zoomFoldSeat_codec);
      if (HasGameid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Gameid);
      }
      if (HasIsShowCardEnable) {
        size += 2 + 1;
      }
      if (HasIsAllInRateEnable) {
        size += 2 + 1;
      }
      if (HasGameType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (HasCurBlind) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurBlind);
      }
      if (HasLeftDiscardTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftDiscardTime);
      }
      if (HasIsCompleteDiscard) {
        size += 2 + 1;
      }
      if (riverSqueeze_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RiverSqueeze);
      }
      if (HasIsDuringDiscard) {
        size += 2 + 1;
      }
      size += secondBoard_.CalculateSize(_repeated_secondBoard_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TableStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasIsPlaying) {
        IsPlaying = other.IsPlaying;
      }
      if (other.HasActionIdx) {
        ActionIdx = other.ActionIdx;
      }
      if (other.HasDIdx) {
        DIdx = other.DIdx;
      }
      if (other.HasSbIdx) {
        SbIdx = other.SbIdx;
      }
      if (other.HasBbIdx) {
        BbIdx = other.BbIdx;
      }
      seat_.Add(other.seat_);
      pool_.Add(other.pool_);
      if (other.HasStage) {
        Stage = other.Stage;
      }
      board_.Add(other.board_);
      if (other.HasTid) {
        Tid = other.Tid;
      }
      if (other.HasIsFinalTable) {
        IsFinalTable = other.IsFinalTable;
      }
      multiBoards_.Add(other.multiBoards_);
      insurancePools_.Add(other.insurancePools_);
      if (other.HasIsWaitSync) {
        IsWaitSync = other.IsWaitSync;
      }
      zoomFoldSeat_.Add(other.zoomFoldSeat_);
      if (other.HasGameid) {
        Gameid = other.Gameid;
      }
      if (other.HasIsShowCardEnable) {
        IsShowCardEnable = other.IsShowCardEnable;
      }
      if (other.HasIsAllInRateEnable) {
        IsAllInRateEnable = other.IsAllInRateEnable;
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasCurBlind) {
        CurBlind = other.CurBlind;
      }
      if (other.HasLeftDiscardTime) {
        LeftDiscardTime = other.LeftDiscardTime;
      }
      if (other.HasIsCompleteDiscard) {
        IsCompleteDiscard = other.IsCompleteDiscard;
      }
      if (other.riverSqueeze_ != null) {
        if (riverSqueeze_ == null) {
          RiverSqueeze = new global::Texas.Protocol.RiverSqueeze();
        }
        RiverSqueeze.MergeFrom(other.RiverSqueeze);
      }
      if (other.HasIsDuringDiscard) {
        IsDuringDiscard = other.IsDuringDiscard;
      }
      secondBoard_.Add(other.secondBoard_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 16: {
            ActionIdx = input.ReadInt32();
            break;
          }
          case 24: {
            DIdx = input.ReadInt32();
            break;
          }
          case 32: {
            SbIdx = input.ReadInt32();
            break;
          }
          case 40: {
            BbIdx = input.ReadInt32();
            break;
          }
          case 50: {
            seat_.AddEntriesFrom(input, _repeated_seat_codec);
            break;
          }
          case 58:
          case 56: {
            pool_.AddEntriesFrom(input, _repeated_pool_codec);
            break;
          }
          case 64: {
            Stage = (global::Texas.Protocol.RoundStage) input.ReadEnum();
            break;
          }
          case 74:
          case 72: {
            board_.AddEntriesFrom(input, _repeated_board_codec);
            break;
          }
          case 80: {
            Tid = input.ReadInt32();
            break;
          }
          case 88: {
            IsFinalTable = input.ReadBool();
            break;
          }
          case 98: {
            multiBoards_.AddEntriesFrom(input, _repeated_multiBoards_codec);
            break;
          }
          case 106: {
            insurancePools_.AddEntriesFrom(input, _repeated_insurancePools_codec);
            break;
          }
          case 112: {
            IsWaitSync = input.ReadBool();
            break;
          }
          case 122: {
            zoomFoldSeat_.AddEntriesFrom(input, _repeated_zoomFoldSeat_codec);
            break;
          }
          case 130: {
            Gameid = input.ReadString();
            break;
          }
          case 136: {
            IsShowCardEnable = input.ReadBool();
            break;
          }
          case 144: {
            IsAllInRateEnable = input.ReadBool();
            break;
          }
          case 152: {
            GameType = input.ReadInt32();
            break;
          }
          case 160: {
            CurBlind = input.ReadInt64();
            break;
          }
          case 200: {
            LeftDiscardTime = input.ReadInt32();
            break;
          }
          case 208: {
            IsCompleteDiscard = input.ReadBool();
            break;
          }
          case 218: {
            if (riverSqueeze_ == null) {
              RiverSqueeze = new global::Texas.Protocol.RiverSqueeze();
            }
            input.ReadMessage(RiverSqueeze);
            break;
          }
          case 224: {
            IsDuringDiscard = input.ReadBool();
            break;
          }
          case 234:
          case 232: {
            secondBoard_.AddEntriesFrom(input, _repeated_secondBoard_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 16: {
            ActionIdx = input.ReadInt32();
            break;
          }
          case 24: {
            DIdx = input.ReadInt32();
            break;
          }
          case 32: {
            SbIdx = input.ReadInt32();
            break;
          }
          case 40: {
            BbIdx = input.ReadInt32();
            break;
          }
          case 50: {
            seat_.AddEntriesFrom(ref input, _repeated_seat_codec);
            break;
          }
          case 58:
          case 56: {
            pool_.AddEntriesFrom(ref input, _repeated_pool_codec);
            break;
          }
          case 64: {
            Stage = (global::Texas.Protocol.RoundStage) input.ReadEnum();
            break;
          }
          case 74:
          case 72: {
            board_.AddEntriesFrom(ref input, _repeated_board_codec);
            break;
          }
          case 80: {
            Tid = input.ReadInt32();
            break;
          }
          case 88: {
            IsFinalTable = input.ReadBool();
            break;
          }
          case 98: {
            multiBoards_.AddEntriesFrom(ref input, _repeated_multiBoards_codec);
            break;
          }
          case 106: {
            insurancePools_.AddEntriesFrom(ref input, _repeated_insurancePools_codec);
            break;
          }
          case 112: {
            IsWaitSync = input.ReadBool();
            break;
          }
          case 122: {
            zoomFoldSeat_.AddEntriesFrom(ref input, _repeated_zoomFoldSeat_codec);
            break;
          }
          case 130: {
            Gameid = input.ReadString();
            break;
          }
          case 136: {
            IsShowCardEnable = input.ReadBool();
            break;
          }
          case 144: {
            IsAllInRateEnable = input.ReadBool();
            break;
          }
          case 152: {
            GameType = input.ReadInt32();
            break;
          }
          case 160: {
            CurBlind = input.ReadInt64();
            break;
          }
          case 200: {
            LeftDiscardTime = input.ReadInt32();
            break;
          }
          case 208: {
            IsCompleteDiscard = input.ReadBool();
            break;
          }
          case 218: {
            if (riverSqueeze_ == null) {
              RiverSqueeze = new global::Texas.Protocol.RiverSqueeze();
            }
            input.ReadMessage(RiverSqueeze);
            break;
          }
          case 224: {
            IsDuringDiscard = input.ReadBool();
            break;
          }
          case 234:
          case 232: {
            secondBoard_.AddEntriesFrom(ref input, _repeated_secondBoard_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObserverBrief : pb::IMessage<ObserverBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObserverBrief> _parser = new pb::MessageParser<ObserverBrief>(() => new ObserverBrief());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ObserverBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ObserverBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ObserverBrief(ObserverBrief other) : this() {
      _hasBits0 = other._hasBits0;
      brief_ = other.brief_ != null ? other.brief_.Clone() : null;
      vipLevel_ = other.vipLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ObserverBrief Clone() {
      return new ObserverBrief(this);
    }

    /// <summary>Field number for the "brief" field.</summary>
    public const int BriefFieldNumber = 1;
    private global::Texas.Protocol.UserBrief brief_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserBrief Brief {
      get { return brief_; }
      set {
        brief_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 2;
    private readonly static uint VipLevelDefaultValue = 0;

    private uint vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipLevel {
      get { if ((_hasBits0 & 1) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ObserverBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ObserverBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Brief, other.Brief)) return false;
      if (VipLevel != other.VipLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (brief_ != null) hash ^= Brief.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (brief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Brief);
      }
      if (HasVipLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (brief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Brief);
      }
      if (HasVipLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (brief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brief);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ObserverBrief other) {
      if (other == null) {
        return;
      }
      if (other.brief_ != null) {
        if (brief_ == null) {
          Brief = new global::Texas.Protocol.UserBrief();
        }
        Brief.MergeFrom(other.Brief);
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (brief_ == null) {
              Brief = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Brief);
            break;
          }
          case 16: {
            VipLevel = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (brief_ == null) {
              Brief = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Brief);
            break;
          }
          case 16: {
            VipLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoomStatus : pb::IMessage<RoomStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomStatus> _parser = new pb::MessageParser<RoomStatus>(() => new RoomStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoomStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomStatus(RoomStatus other) : this() {
      _hasBits0 = other._hasBits0;
      timeLeft_ = other.timeLeft_;
      profit_ = other.profit_.Clone();
      observer_ = other.observer_.Clone();
      authLimit_ = other.authLimit_;
      isStarted_ = other.isStarted_;
      isBlindRunning_ = other.isBlindRunning_;
      jackpotStatus_ = other.jackpotStatus_;
      addRoomtimeQuota_ = other.addRoomtimeQuota_;
      observerNum_ = other.observerNum_;
      passwdLimit_ = other.passwdLimit_;
      passwd_ = other.passwd_;
      leaveTime_ = other.leaveTime_;
      userLastChips_ = other.userLastChips_;
      jackpotFeeType_ = other.jackpotFeeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomStatus Clone() {
      return new RoomStatus(this);
    }

    /// <summary>Field number for the "time_left" field.</summary>
    public const int TimeLeftFieldNumber = 1;
    private readonly static int TimeLeftDefaultValue = 0;

    private int timeLeft_;
    /// <summary>
    ///开房剩余时间，单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeLeft {
      get { if ((_hasBits0 & 1) != 0) { return timeLeft_; } else { return TimeLeftDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "time_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeLeft {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeLeft() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitInfo> _repeated_profit_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.ProfitInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> profit_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> Profit {
      get { return profit_; }
    }

    /// <summary>Field number for the "observer" field.</summary>
    public const int ObserverFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserBrief> _repeated_observer_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.UserBrief.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserBrief> observer_ = new pbc::RepeatedField<global::Texas.Protocol.UserBrief>();
    /// <summary>
    ///repeated ObserverBrief observer = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserBrief> Observer {
      get { return observer_; }
    }

    /// <summary>Field number for the "auth_limit" field.</summary>
    public const int AuthLimitFieldNumber = 4;
    private readonly static bool AuthLimitDefaultValue = false;

    private bool authLimit_;
    /// <summary>
    ///是否授权买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AuthLimit {
      get { if ((_hasBits0 & 2) != 0) { return authLimit_; } else { return AuthLimitDefaultValue; } }
      set {
        _hasBits0 |= 2;
        authLimit_ = value;
      }
    }
    /// <summary>Gets whether the "auth_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuthLimit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "auth_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuthLimit() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_started" field.</summary>
    public const int IsStartedFieldNumber = 5;
    private readonly static bool IsStartedDefaultValue = false;

    private bool isStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsStarted {
      get { if ((_hasBits0 & 4) != 0) { return isStarted_; } else { return IsStartedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isStarted_ = value;
      }
    }
    /// <summary>Gets whether the "is_started" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsStarted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_started" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsStarted() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_blind_running" field.</summary>
    public const int IsBlindRunningFieldNumber = 6;
    private readonly static bool IsBlindRunningDefaultValue = false;

    private bool isBlindRunning_;
    /// <summary>
    ///涨盲是否进行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBlindRunning {
      get { if ((_hasBits0 & 8) != 0) { return isBlindRunning_; } else { return IsBlindRunningDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isBlindRunning_ = value;
      }
    }
    /// <summary>Gets whether the "is_blind_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBlindRunning {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_blind_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBlindRunning() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "jackpot_status" field.</summary>
    public const int JackpotStatusFieldNumber = 7;
    private readonly static int JackpotStatusDefaultValue = 0;

    private int jackpotStatus_;
    /// <summary>
    /// 0:關閉, 1:Coller JP, 2:Coller JP Puls, 3:Mixed JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotStatus {
      get { if ((_hasBits0 & 16) != 0) { return jackpotStatus_; } else { return JackpotStatusDefaultValue; } }
      set {
        _hasBits0 |= 16;
        jackpotStatus_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotStatus {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotStatus() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "add_roomtime_quota" field.</summary>
    public const int AddRoomtimeQuotaFieldNumber = 8;
    private readonly static int AddRoomtimeQuotaDefaultValue = 0;

    private int addRoomtimeQuota_;
    /// <summary>
    ///房间可延时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddRoomtimeQuota {
      get { if ((_hasBits0 & 32) != 0) { return addRoomtimeQuota_; } else { return AddRoomtimeQuotaDefaultValue; } }
      set {
        _hasBits0 |= 32;
        addRoomtimeQuota_ = value;
      }
    }
    /// <summary>Gets whether the "add_roomtime_quota" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddRoomtimeQuota {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "add_roomtime_quota" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddRoomtimeQuota() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "observer_num" field.</summary>
    public const int ObserverNumFieldNumber = 9;
    private readonly static int ObserverNumDefaultValue = 0;

    private int observerNum_;
    /// <summary>
    ///旁观人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ObserverNum {
      get { if ((_hasBits0 & 64) != 0) { return observerNum_; } else { return ObserverNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        observerNum_ = value;
      }
    }
    /// <summary>Gets whether the "observer_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObserverNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "observer_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObserverNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 10;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    /// 是否是密码桌, 与授权买入互斥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits0 & 128) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits0 |= 128;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 11;
    private readonly static string PasswdDefaultValue = "";

    private string passwd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Passwd {
      get { return passwd_ ?? PasswdDefaultValue; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "passwd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswd {
      get { return passwd_ != null; }
    }
    /// <summary>Clears the value of the "passwd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswd() {
      passwd_ = null;
    }

    /// <summary>Field number for the "leave_time" field.</summary>
    public const int LeaveTimeFieldNumber = 12;
    private readonly static int LeaveTimeDefaultValue = 0;

    private int leaveTime_;
    /// <summary>
    ///玩家离开牌桌多少秒(针对有坐下过的玩家), -1 表示没有坐下过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeaveTime {
      get { if ((_hasBits0 & 256) != 0) { return leaveTime_; } else { return LeaveTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        leaveTime_ = value;
      }
    }
    /// <summary>Gets whether the "leave_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeaveTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "leave_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeaveTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "user_last_chips" field.</summary>
    public const int UserLastChipsFieldNumber = 13;
    private readonly static long UserLastChipsDefaultValue = 0L;

    private long userLastChips_;
    /// <summary>
    ///玩家上次离开牌桌时有多少筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UserLastChips {
      get { if ((_hasBits0 & 512) != 0) { return userLastChips_; } else { return UserLastChipsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        userLastChips_ = value;
      }
    }
    /// <summary>Gets whether the "user_last_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserLastChips {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "user_last_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserLastChips() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "jackpot_fee_type" field.</summary>
    public const int JackpotFeeTypeFieldNumber = 14;
    private readonly static int JackpotFeeTypeDefaultValue = 0;

    private int jackpotFeeType_;
    /// <summary>
    /// 0:hand, 1:pot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotFeeType {
      get { if ((_hasBits0 & 1024) != 0) { return jackpotFeeType_; } else { return JackpotFeeTypeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        jackpotFeeType_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_fee_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotFeeType {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_fee_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotFeeType() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoomStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoomStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeLeft != other.TimeLeft) return false;
      if(!profit_.Equals(other.profit_)) return false;
      if(!observer_.Equals(other.observer_)) return false;
      if (AuthLimit != other.AuthLimit) return false;
      if (IsStarted != other.IsStarted) return false;
      if (IsBlindRunning != other.IsBlindRunning) return false;
      if (JackpotStatus != other.JackpotStatus) return false;
      if (AddRoomtimeQuota != other.AddRoomtimeQuota) return false;
      if (ObserverNum != other.ObserverNum) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (Passwd != other.Passwd) return false;
      if (LeaveTime != other.LeaveTime) return false;
      if (UserLastChips != other.UserLastChips) return false;
      if (JackpotFeeType != other.JackpotFeeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimeLeft) hash ^= TimeLeft.GetHashCode();
      hash ^= profit_.GetHashCode();
      hash ^= observer_.GetHashCode();
      if (HasAuthLimit) hash ^= AuthLimit.GetHashCode();
      if (HasIsStarted) hash ^= IsStarted.GetHashCode();
      if (HasIsBlindRunning) hash ^= IsBlindRunning.GetHashCode();
      if (HasJackpotStatus) hash ^= JackpotStatus.GetHashCode();
      if (HasAddRoomtimeQuota) hash ^= AddRoomtimeQuota.GetHashCode();
      if (HasObserverNum) hash ^= ObserverNum.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasPasswd) hash ^= Passwd.GetHashCode();
      if (HasLeaveTime) hash ^= LeaveTime.GetHashCode();
      if (HasUserLastChips) hash ^= UserLastChips.GetHashCode();
      if (HasJackpotFeeType) hash ^= JackpotFeeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimeLeft) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeLeft);
      }
      profit_.WriteTo(output, _repeated_profit_codec);
      observer_.WriteTo(output, _repeated_observer_codec);
      if (HasAuthLimit) {
        output.WriteRawTag(32);
        output.WriteBool(AuthLimit);
      }
      if (HasIsStarted) {
        output.WriteRawTag(40);
        output.WriteBool(IsStarted);
      }
      if (HasIsBlindRunning) {
        output.WriteRawTag(48);
        output.WriteBool(IsBlindRunning);
      }
      if (HasJackpotStatus) {
        output.WriteRawTag(56);
        output.WriteInt32(JackpotStatus);
      }
      if (HasAddRoomtimeQuota) {
        output.WriteRawTag(64);
        output.WriteInt32(AddRoomtimeQuota);
      }
      if (HasObserverNum) {
        output.WriteRawTag(72);
        output.WriteInt32(ObserverNum);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(80);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(90);
        output.WriteString(Passwd);
      }
      if (HasLeaveTime) {
        output.WriteRawTag(96);
        output.WriteInt32(LeaveTime);
      }
      if (HasUserLastChips) {
        output.WriteRawTag(104);
        output.WriteInt64(UserLastChips);
      }
      if (HasJackpotFeeType) {
        output.WriteRawTag(112);
        output.WriteInt32(JackpotFeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimeLeft) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeLeft);
      }
      profit_.WriteTo(ref output, _repeated_profit_codec);
      observer_.WriteTo(ref output, _repeated_observer_codec);
      if (HasAuthLimit) {
        output.WriteRawTag(32);
        output.WriteBool(AuthLimit);
      }
      if (HasIsStarted) {
        output.WriteRawTag(40);
        output.WriteBool(IsStarted);
      }
      if (HasIsBlindRunning) {
        output.WriteRawTag(48);
        output.WriteBool(IsBlindRunning);
      }
      if (HasJackpotStatus) {
        output.WriteRawTag(56);
        output.WriteInt32(JackpotStatus);
      }
      if (HasAddRoomtimeQuota) {
        output.WriteRawTag(64);
        output.WriteInt32(AddRoomtimeQuota);
      }
      if (HasObserverNum) {
        output.WriteRawTag(72);
        output.WriteInt32(ObserverNum);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(80);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(90);
        output.WriteString(Passwd);
      }
      if (HasLeaveTime) {
        output.WriteRawTag(96);
        output.WriteInt32(LeaveTime);
      }
      if (HasUserLastChips) {
        output.WriteRawTag(104);
        output.WriteInt64(UserLastChips);
      }
      if (HasJackpotFeeType) {
        output.WriteRawTag(112);
        output.WriteInt32(JackpotFeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTimeLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLeft);
      }
      size += profit_.CalculateSize(_repeated_profit_codec);
      size += observer_.CalculateSize(_repeated_observer_codec);
      if (HasAuthLimit) {
        size += 1 + 1;
      }
      if (HasIsStarted) {
        size += 1 + 1;
      }
      if (HasIsBlindRunning) {
        size += 1 + 1;
      }
      if (HasJackpotStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotStatus);
      }
      if (HasAddRoomtimeQuota) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddRoomtimeQuota);
      }
      if (HasObserverNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObserverNum);
      }
      if (HasPasswdLimit) {
        size += 1 + 1;
      }
      if (HasPasswd) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (HasLeaveTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveTime);
      }
      if (HasUserLastChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserLastChips);
      }
      if (HasJackpotFeeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotFeeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoomStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasTimeLeft) {
        TimeLeft = other.TimeLeft;
      }
      profit_.Add(other.profit_);
      observer_.Add(other.observer_);
      if (other.HasAuthLimit) {
        AuthLimit = other.AuthLimit;
      }
      if (other.HasIsStarted) {
        IsStarted = other.IsStarted;
      }
      if (other.HasIsBlindRunning) {
        IsBlindRunning = other.IsBlindRunning;
      }
      if (other.HasJackpotStatus) {
        JackpotStatus = other.JackpotStatus;
      }
      if (other.HasAddRoomtimeQuota) {
        AddRoomtimeQuota = other.AddRoomtimeQuota;
      }
      if (other.HasObserverNum) {
        ObserverNum = other.ObserverNum;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasPasswd) {
        Passwd = other.Passwd;
      }
      if (other.HasLeaveTime) {
        LeaveTime = other.LeaveTime;
      }
      if (other.HasUserLastChips) {
        UserLastChips = other.UserLastChips;
      }
      if (other.HasJackpotFeeType) {
        JackpotFeeType = other.JackpotFeeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeLeft = input.ReadInt32();
            break;
          }
          case 18: {
            profit_.AddEntriesFrom(input, _repeated_profit_codec);
            break;
          }
          case 26: {
            observer_.AddEntriesFrom(input, _repeated_observer_codec);
            break;
          }
          case 32: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 40: {
            IsStarted = input.ReadBool();
            break;
          }
          case 48: {
            IsBlindRunning = input.ReadBool();
            break;
          }
          case 56: {
            JackpotStatus = input.ReadInt32();
            break;
          }
          case 64: {
            AddRoomtimeQuota = input.ReadInt32();
            break;
          }
          case 72: {
            ObserverNum = input.ReadInt32();
            break;
          }
          case 80: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 90: {
            Passwd = input.ReadString();
            break;
          }
          case 96: {
            LeaveTime = input.ReadInt32();
            break;
          }
          case 104: {
            UserLastChips = input.ReadInt64();
            break;
          }
          case 112: {
            JackpotFeeType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TimeLeft = input.ReadInt32();
            break;
          }
          case 18: {
            profit_.AddEntriesFrom(ref input, _repeated_profit_codec);
            break;
          }
          case 26: {
            observer_.AddEntriesFrom(ref input, _repeated_observer_codec);
            break;
          }
          case 32: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 40: {
            IsStarted = input.ReadBool();
            break;
          }
          case 48: {
            IsBlindRunning = input.ReadBool();
            break;
          }
          case 56: {
            JackpotStatus = input.ReadInt32();
            break;
          }
          case 64: {
            AddRoomtimeQuota = input.ReadInt32();
            break;
          }
          case 72: {
            ObserverNum = input.ReadInt32();
            break;
          }
          case 80: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 90: {
            Passwd = input.ReadString();
            break;
          }
          case 96: {
            LeaveTime = input.ReadInt32();
            break;
          }
          case 104: {
            UserLastChips = input.ReadInt64();
            break;
          }
          case 112: {
            JackpotFeeType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProfitREQ : pb::IMessage<ProfitREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfitREQ> _parser = new pb::MessageParser<ProfitREQ>(() => new ProfitREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProfitREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitREQ(ProfitREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitREQ Clone() {
      return new ProfitREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProfitREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProfitREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProfitREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GroupStat : pb::IMessage<GroupStat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroupStat> _parser = new pb::MessageParser<GroupStat>(() => new GroupStat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GroupStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GroupStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GroupStat(GroupStat other) : this() {
      _hasBits0 = other._hasBits0;
      flag_ = other.flag_;
      promotionNum_ = other.promotionNum_;
      matchNum_ = other.matchNum_;
      totalBuyinTimes_ = other.totalBuyinTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GroupStat Clone() {
      return new GroupStat(this);
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private readonly static string FlagDefaultValue = "";

    private string flag_;
    /// <summary>
    ///分组赛的标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Flag {
      get { return flag_ ?? FlagDefaultValue; }
      set {
        flag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlag {
      get { return flag_ != null; }
    }
    /// <summary>Clears the value of the "flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlag() {
      flag_ = null;
    }

    /// <summary>Field number for the "promotion_num" field.</summary>
    public const int PromotionNumFieldNumber = 2;
    private readonly static int PromotionNumDefaultValue = 0;

    private int promotionNum_;
    /// <summary>
    ///晋级人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PromotionNum {
      get { if ((_hasBits0 & 1) != 0) { return promotionNum_; } else { return PromotionNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        promotionNum_ = value;
      }
    }
    /// <summary>Gets whether the "promotion_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPromotionNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "promotion_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPromotionNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "match_num" field.</summary>
    public const int MatchNumFieldNumber = 3;
    private readonly static int MatchNumDefaultValue = 0;

    private int matchNum_;
    /// <summary>
    ///报名人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MatchNum {
      get { if ((_hasBits0 & 2) != 0) { return matchNum_; } else { return MatchNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchNum_ = value;
      }
    }
    /// <summary>Gets whether the "match_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMatchNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "match_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMatchNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_buyin_times" field.</summary>
    public const int TotalBuyinTimesFieldNumber = 4;
    private readonly static int TotalBuyinTimesDefaultValue = 0;

    private int totalBuyinTimes_;
    /// <summary>
    ///总买入次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalBuyinTimes {
      get { if ((_hasBits0 & 4) != 0) { return totalBuyinTimes_; } else { return TotalBuyinTimesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalBuyinTimes_ = value;
      }
    }
    /// <summary>Gets whether the "total_buyin_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBuyinTimes {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_buyin_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBuyinTimes() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GroupStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GroupStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flag != other.Flag) return false;
      if (PromotionNum != other.PromotionNum) return false;
      if (MatchNum != other.MatchNum) return false;
      if (TotalBuyinTimes != other.TotalBuyinTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFlag) hash ^= Flag.GetHashCode();
      if (HasPromotionNum) hash ^= PromotionNum.GetHashCode();
      if (HasMatchNum) hash ^= MatchNum.GetHashCode();
      if (HasTotalBuyinTimes) hash ^= TotalBuyinTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFlag) {
        output.WriteRawTag(10);
        output.WriteString(Flag);
      }
      if (HasPromotionNum) {
        output.WriteRawTag(16);
        output.WriteInt32(PromotionNum);
      }
      if (HasMatchNum) {
        output.WriteRawTag(24);
        output.WriteInt32(MatchNum);
      }
      if (HasTotalBuyinTimes) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalBuyinTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFlag) {
        output.WriteRawTag(10);
        output.WriteString(Flag);
      }
      if (HasPromotionNum) {
        output.WriteRawTag(16);
        output.WriteInt32(PromotionNum);
      }
      if (HasMatchNum) {
        output.WriteRawTag(24);
        output.WriteInt32(MatchNum);
      }
      if (HasTotalBuyinTimes) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalBuyinTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFlag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Flag);
      }
      if (HasPromotionNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PromotionNum);
      }
      if (HasMatchNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchNum);
      }
      if (HasTotalBuyinTimes) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBuyinTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GroupStat other) {
      if (other == null) {
        return;
      }
      if (other.HasFlag) {
        Flag = other.Flag;
      }
      if (other.HasPromotionNum) {
        PromotionNum = other.PromotionNum;
      }
      if (other.HasMatchNum) {
        MatchNum = other.MatchNum;
      }
      if (other.HasTotalBuyinTimes) {
        TotalBuyinTimes = other.TotalBuyinTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Flag = input.ReadString();
            break;
          }
          case 16: {
            PromotionNum = input.ReadInt32();
            break;
          }
          case 24: {
            MatchNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalBuyinTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Flag = input.ReadString();
            break;
          }
          case 16: {
            PromotionNum = input.ReadInt32();
            break;
          }
          case 24: {
            MatchNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalBuyinTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProfitSet : pb::IMessage<ProfitSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfitSet> _parser = new pb::MessageParser<ProfitSet>(() => new ProfitSet());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProfitSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitSet(ProfitSet other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      roomid_ = other.roomid_;
      startTime_ = other.startTime_;
      smallBlind_ = other.smallBlind_;
      info_ = other.info_.Clone();
      gameTime_ = other.gameTime_;
      feetype_ = other.feetype_;
      feepoint_ = other.feepoint_;
      handsnum_ = other.handsnum_;
      ownericon_ = other.ownericon_;
      roomType_ = other.roomType_;
      upblindTime_ = other.upblindTime_;
      cost_ = other.cost_;
      beginChips_ = other.beginChips_;
      rewardNum_ = other.rewardNum_;
      isInsurance_ = other.isInsurance_;
      seatNum_ = other.seatNum_;
      hunterReward_ = other.hunterReward_;
      charge_ = other.charge_;
      gameMode_ = other.gameMode_;
      ante_ = other.ante_;
      isJackpotUsed_ = other.isJackpotUsed_;
      totalBuyin_ = other.totalBuyin_;
      superLeagueid_ = other.superLeagueid_;
      isEvchop_ = other.isEvchop_;
      isSnowballHunter_ = other.isSnowballHunter_;
      setid_ = other.setid_;
      totalReward_ = other.totalReward_;
      spinupRewardRatio_ = other.spinupRewardRatio_;
      groupStage_ = other.groupStage_;
      groupStat_ = other.groupStat_.Clone();
      superLeagueType_ = other.superLeagueType_;
      totalFee_ = other.totalFee_;
      totalProfit_ = other.totalProfit_;
      upblindTimeAfterRebuyEnded_ = other.upblindTimeAfterRebuyEnded_;
      upblindTimeAfterFinalTable_ = other.upblindTimeAfterFinalTable_;
      ppstid_ = other.ppstid_;
      roomName_ = other.roomName_;
      cap_ = other.cap_;
      ppsrid_ = other.ppsrid_;
      bombpotType_ = other.bombpotType_;
      rateSettingType_ = other.rateSettingType_;
      totalBetting_ = other.totalBetting_;
      minBet_ = other.minBet_;
      middleBet_ = other.middleBet_;
      highBet_ = other.highBet_;
      additionalBoard_ = other.additionalBoard_;
      bombpotAdditionalBoard_ = other.bombpotAdditionalBoard_;
      hitpotRate_ = other.hitpotRate_;
      bonusCard_ = other.bonusCard_;
      fightLimit_ = other.fightLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitSet Clone() {
      return new ProfitSet(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private readonly static uint StartTimeDefaultValue = 0;

    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StartTime {
      get { if ((_hasBits0 & 1) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "small_blind" field.</summary>
    public const int SmallBlindFieldNumber = 3;
    private readonly static long SmallBlindDefaultValue = 0L;

    private long smallBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SmallBlind {
      get { if ((_hasBits0 & 2) != 0) { return smallBlind_; } else { return SmallBlindDefaultValue; } }
      set {
        _hasBits0 |= 2;
        smallBlind_ = value;
      }
    }
    /// <summary>Gets whether the "small_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSmallBlind {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "small_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSmallBlind() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.ProfitInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> info_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 5;
    private readonly static int GameTimeDefaultValue = 0;

    private int gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameTime {
      get { if ((_hasBits0 & 4) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "feetype" field.</summary>
    public const int FeetypeFieldNumber = 6;
    private readonly static int FeetypeDefaultValue = 0;

    private int feetype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feetype {
      get { if ((_hasBits0 & 8) != 0) { return feetype_; } else { return FeetypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        feetype_ = value;
      }
    }
    /// <summary>Gets whether the "feetype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeetype {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "feetype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeetype() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 7;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 16) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 16;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "handsnum" field.</summary>
    public const int HandsnumFieldNumber = 8;
    private readonly static int HandsnumDefaultValue = 0;

    private int handsnum_;
    /// <summary>
    ///本局手牌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Handsnum {
      get { if ((_hasBits0 & 32) != 0) { return handsnum_; } else { return HandsnumDefaultValue; } }
      set {
        _hasBits0 |= 32;
        handsnum_ = value;
      }
    }
    /// <summary>Gets whether the "handsnum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsnum {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "handsnum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsnum() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ownericon" field.</summary>
    public const int OwnericonFieldNumber = 9;
    private readonly static string OwnericonDefaultValue = "";

    private string ownericon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ownericon {
      get { return ownericon_ ?? OwnericonDefaultValue; }
      set {
        ownericon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ownericon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnericon {
      get { return ownericon_ != null; }
    }
    /// <summary>Clears the value of the "ownericon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnericon() {
      ownericon_ = null;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 10;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 64) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "upblind_time" field.</summary>
    public const int UpblindTimeFieldNumber = 11;
    private readonly static int UpblindTimeDefaultValue = 0;

    private int upblindTime_;
    /// <summary>
    ///涨盲间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpblindTime {
      get { if ((_hasBits0 & 128) != 0) { return upblindTime_; } else { return UpblindTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        upblindTime_ = value;
      }
    }
    /// <summary>Gets whether the "upblind_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpblindTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "upblind_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpblindTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 12;
    private readonly static long CostDefaultValue = 0L;

    private long cost_;
    /// <summary>
    ///买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Cost {
      get { if ((_hasBits0 & 256) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 256;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "begin_chips" field.</summary>
    public const int BeginChipsFieldNumber = 13;
    private readonly static long BeginChipsDefaultValue = 0L;

    private long beginChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BeginChips {
      get { if ((_hasBits0 & 512) != 0) { return beginChips_; } else { return BeginChipsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        beginChips_ = value;
      }
    }
    /// <summary>Gets whether the "begin_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBeginChips {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "begin_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBeginChips() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "reward_num" field.</summary>
    public const int RewardNumFieldNumber = 14;
    private readonly static int RewardNumDefaultValue = 0;

    private int rewardNum_;
    /// <summary>
    ///钱圈人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardNum {
      get { if ((_hasBits0 & 1024) != 0) { return rewardNum_; } else { return RewardNumDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        rewardNum_ = value;
      }
    }
    /// <summary>Gets whether the "reward_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardNum {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "reward_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardNum() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "is_insurance" field.</summary>
    public const int IsInsuranceFieldNumber = 15;
    private readonly static bool IsInsuranceDefaultValue = false;

    private bool isInsurance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInsurance {
      get { if ((_hasBits0 & 2048) != 0) { return isInsurance_; } else { return IsInsuranceDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isInsurance_ = value;
      }
    }
    /// <summary>Gets whether the "is_insurance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInsurance {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_insurance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInsurance() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 16;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 4096) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "hunter_reward" field.</summary>
    public const int HunterRewardFieldNumber = 17;
    private readonly static long HunterRewardDefaultValue = 0L;

    private long hunterReward_;
    /// <summary>
    ///一个人头多少钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HunterReward {
      get { if ((_hasBits0 & 8192) != 0) { return hunterReward_; } else { return HunterRewardDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        hunterReward_ = value;
      }
    }
    /// <summary>Gets whether the "hunter_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHunterReward {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "hunter_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHunterReward() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "charge" field.</summary>
    public const int ChargeFieldNumber = 18;
    private readonly static long ChargeDefaultValue = 0L;

    private long charge_;
    /// <summary>
    ///单次服务费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Charge {
      get { if ((_hasBits0 & 16384) != 0) { return charge_; } else { return ChargeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        charge_ = value;
      }
    }
    /// <summary>Gets whether the "charge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCharge {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "charge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCharge() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 19;
    private readonly static int GameModeDefaultValue = 0;

    private int gameMode_;
    /// <summary>
    ///大菠萝（0、 普通  1、血战  2、血进血出）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameMode {
      get { if ((_hasBits0 & 32768) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 20;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 65536) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "is_jackpot_used" field.</summary>
    public const int IsJackpotUsedFieldNumber = 21;
    private readonly static bool IsJackpotUsedDefaultValue = false;

    private bool isJackpotUsed_;
    /// <summary>
    ///是否开启过jackpot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsJackpotUsed {
      get { if ((_hasBits0 & 131072) != 0) { return isJackpotUsed_; } else { return IsJackpotUsedDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        isJackpotUsed_ = value;
      }
    }
    /// <summary>Gets whether the "is_jackpot_used" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsJackpotUsed {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "is_jackpot_used" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsJackpotUsed() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "total_buyin" field.</summary>
    public const int TotalBuyinFieldNumber = 22;
    private readonly static long TotalBuyinDefaultValue = 0L;

    private long totalBuyin_;
    /// <summary>
    /// 总买入,算入俱乐部门票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalBuyin {
      get { if ((_hasBits0 & 262144) != 0) { return totalBuyin_; } else { return TotalBuyinDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        totalBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "total_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBuyin {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "total_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBuyin() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 23;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    /// <summary>
    ///超级联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 524288) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "is_evchop" field.</summary>
    public const int IsEvchopFieldNumber = 24;
    private readonly static bool IsEvchopDefaultValue = false;

    private bool isEvchop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEvchop {
      get { if ((_hasBits0 & 1048576) != 0) { return isEvchop_; } else { return IsEvchopDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        isEvchop_ = value;
      }
    }
    /// <summary>Gets whether the "is_evchop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEvchop {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "is_evchop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEvchop() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "is_snowball_hunter" field.</summary>
    public const int IsSnowballHunterFieldNumber = 25;
    private readonly static bool IsSnowballHunterDefaultValue = false;

    private bool isSnowballHunter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSnowballHunter {
      get { if ((_hasBits0 & 2097152) != 0) { return isSnowballHunter_; } else { return IsSnowballHunterDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        isSnowballHunter_ = value;
      }
    }
    /// <summary>Gets whether the "is_snowball_hunter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSnowballHunter {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "is_snowball_hunter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSnowballHunter() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "setid" field.</summary>
    public const int SetidFieldNumber = 26;
    private readonly static string SetidDefaultValue = "";

    private string setid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Setid {
      get { return setid_ ?? SetidDefaultValue; }
      set {
        setid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "setid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetid {
      get { return setid_ != null; }
    }
    /// <summary>Clears the value of the "setid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetid() {
      setid_ = null;
    }

    /// <summary>Field number for the "total_reward" field.</summary>
    public const int TotalRewardFieldNumber = 27;
    private readonly static int TotalRewardDefaultValue = 0;

    private int totalReward_;
    /// <summary>
    ///总奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalReward {
      get { if ((_hasBits0 & 4194304) != 0) { return totalReward_; } else { return TotalRewardDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        totalReward_ = value;
      }
    }
    /// <summary>Gets whether the "total_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalReward {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "total_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalReward() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "spinup_reward_ratio" field.</summary>
    public const int SpinupRewardRatioFieldNumber = 28;
    private readonly static int SpinupRewardRatioDefaultValue = 0;

    private int spinupRewardRatio_;
    /// <summary>
    ///spinup奖励倍数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpinupRewardRatio {
      get { if ((_hasBits0 & 8388608) != 0) { return spinupRewardRatio_; } else { return SpinupRewardRatioDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        spinupRewardRatio_ = value;
      }
    }
    /// <summary>Gets whether the "spinup_reward_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpinupRewardRatio {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "spinup_reward_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpinupRewardRatio() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "group_stage" field.</summary>
    public const int GroupStageFieldNumber = 29;
    private readonly static int GroupStageDefaultValue = 0;

    private int groupStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupStage {
      get { if ((_hasBits0 & 16777216) != 0) { return groupStage_; } else { return GroupStageDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        groupStage_ = value;
      }
    }
    /// <summary>Gets whether the "group_stage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroupStage {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "group_stage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroupStage() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "group_stat" field.</summary>
    public const int GroupStatFieldNumber = 30;
    private static readonly pb::FieldCodec<global::Texas.Protocol.GroupStat> _repeated_groupStat_codec
        = pb::FieldCodec.ForMessage(242, global::Texas.Protocol.GroupStat.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.GroupStat> groupStat_ = new pbc::RepeatedField<global::Texas.Protocol.GroupStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.GroupStat> GroupStat {
      get { return groupStat_; }
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 31;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    ///1 noppst super league
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits0 & 33554432) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "total_fee" field.</summary>
    public const int TotalFeeFieldNumber = 32;
    private readonly static long TotalFeeDefaultValue = 0L;

    private long totalFee_;
    /// <summary>
    ///每一個set獨立的fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalFee {
      get { if ((_hasBits0 & 67108864) != 0) { return totalFee_; } else { return TotalFeeDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        totalFee_ = value;
      }
    }
    /// <summary>Gets whether the "total_fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalFee {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "total_fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalFee() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 33;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    /// <summary>
    ///每一局的玩家盈虧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 134217728) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "upblind_time_after_rebuy_ended" field.</summary>
    public const int UpblindTimeAfterRebuyEndedFieldNumber = 34;
    private readonly static int UpblindTimeAfterRebuyEndedDefaultValue = 0;

    private int upblindTimeAfterRebuyEnded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpblindTimeAfterRebuyEnded {
      get { if ((_hasBits0 & 268435456) != 0) { return upblindTimeAfterRebuyEnded_; } else { return UpblindTimeAfterRebuyEndedDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        upblindTimeAfterRebuyEnded_ = value;
      }
    }
    /// <summary>Gets whether the "upblind_time_after_rebuy_ended" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpblindTimeAfterRebuyEnded {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "upblind_time_after_rebuy_ended" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpblindTimeAfterRebuyEnded() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "upblind_time_after_final_table" field.</summary>
    public const int UpblindTimeAfterFinalTableFieldNumber = 35;
    private readonly static int UpblindTimeAfterFinalTableDefaultValue = 0;

    private int upblindTimeAfterFinalTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpblindTimeAfterFinalTable {
      get { if ((_hasBits0 & 536870912) != 0) { return upblindTimeAfterFinalTable_; } else { return UpblindTimeAfterFinalTableDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        upblindTimeAfterFinalTable_ = value;
      }
    }
    /// <summary>Gets whether the "upblind_time_after_final_table" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpblindTimeAfterFinalTable {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "upblind_time_after_final_table" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpblindTimeAfterFinalTable() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "ppstid" field.</summary>
    public const int PpstidFieldNumber = 36;
    private readonly static int PpstidDefaultValue = 0;

    private int ppstid_;
    /// <summary>
    ///新版ppstid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppstid {
      get { if ((_hasBits0 & 1073741824) != 0) { return ppstid_; } else { return PpstidDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        ppstid_ = value;
      }
    }
    /// <summary>Gets whether the "ppstid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpstid {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "ppstid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpstid() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 37;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 38;
    private readonly static int CapDefaultValue = 0;

    private int cap_;
    /// <summary>
    /// 封頂上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cap {
      get { if ((_hasBits0 & -2147483648) != 0) { return cap_; } else { return CapDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        cap_ = value;
      }
    }
    /// <summary>Gets whether the "cap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCap {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "cap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCap() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 39;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits1 & 1) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits1 |= 1;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "bombpot_type" field.</summary>
    public const int BombpotTypeFieldNumber = 40;
    private readonly static int BombpotTypeDefaultValue = 0;

    private int bombpotType_;
    /// <summary>
    ///0 no bombpot, 1 hands cycle bombpot, 2 minutes cycle bombpot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BombpotType {
      get { if ((_hasBits1 & 2) != 0) { return bombpotType_; } else { return BombpotTypeDefaultValue; } }
      set {
        _hasBits1 |= 2;
        bombpotType_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotType {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotType() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "rate_setting_type" field.</summary>
    public const int RateSettingTypeFieldNumber = 41;
    private readonly static int RateSettingTypeDefaultValue = 0;

    private int rateSettingType_;
    /// <summary>
    ///color game 獎勵type [1: 100 200 900]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RateSettingType {
      get { if ((_hasBits1 & 4) != 0) { return rateSettingType_; } else { return RateSettingTypeDefaultValue; } }
      set {
        _hasBits1 |= 4;
        rateSettingType_ = value;
      }
    }
    /// <summary>Gets whether the "rate_setting_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRateSettingType {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rate_setting_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRateSettingType() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "total_betting" field.</summary>
    public const int TotalBettingFieldNumber = 42;
    private readonly static long TotalBettingDefaultValue = 0L;

    private long totalBetting_;
    /// <summary>
    ///color game 總下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalBetting {
      get { if ((_hasBits1 & 8) != 0) { return totalBetting_; } else { return TotalBettingDefaultValue; } }
      set {
        _hasBits1 |= 8;
        totalBetting_ = value;
      }
    }
    /// <summary>Gets whether the "total_betting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBetting {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "total_betting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBetting() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "min_bet" field.</summary>
    public const int MinBetFieldNumber = 43;
    private readonly static int MinBetDefaultValue = 0;

    private int minBet_;
    /// <summary>
    ///color game 下注設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBet {
      get { if ((_hasBits1 & 16) != 0) { return minBet_; } else { return MinBetDefaultValue; } }
      set {
        _hasBits1 |= 16;
        minBet_ = value;
      }
    }
    /// <summary>Gets whether the "min_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBet {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "min_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBet() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "middle_bet" field.</summary>
    public const int MiddleBetFieldNumber = 44;
    private readonly static int MiddleBetDefaultValue = 0;

    private int middleBet_;
    /// <summary>
    ///color game 下注設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MiddleBet {
      get { if ((_hasBits1 & 32) != 0) { return middleBet_; } else { return MiddleBetDefaultValue; } }
      set {
        _hasBits1 |= 32;
        middleBet_ = value;
      }
    }
    /// <summary>Gets whether the "middle_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMiddleBet {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "middle_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMiddleBet() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "high_bet" field.</summary>
    public const int HighBetFieldNumber = 45;
    private readonly static int HighBetDefaultValue = 0;

    private int highBet_;
    /// <summary>
    ///color game 下注設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HighBet {
      get { if ((_hasBits1 & 64) != 0) { return highBet_; } else { return HighBetDefaultValue; } }
      set {
        _hasBits1 |= 64;
        highBet_ = value;
      }
    }
    /// <summary>Gets whether the "high_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighBet {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "high_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighBet() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "additional_board" field.</summary>
    public const int AdditionalBoardFieldNumber = 46;
    private readonly static int AdditionalBoardDefaultValue = 0;

    private int additionalBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdditionalBoard {
      get { if ((_hasBits1 & 128) != 0) { return additionalBoard_; } else { return AdditionalBoardDefaultValue; } }
      set {
        _hasBits1 |= 128;
        additionalBoard_ = value;
      }
    }
    /// <summary>Gets whether the "additional_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdditionalBoard {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "additional_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdditionalBoard() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "bombpot_additional_board" field.</summary>
    public const int BombpotAdditionalBoardFieldNumber = 47;
    private readonly static int BombpotAdditionalBoardDefaultValue = 0;

    private int bombpotAdditionalBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BombpotAdditionalBoard {
      get { if ((_hasBits1 & 256) != 0) { return bombpotAdditionalBoard_; } else { return BombpotAdditionalBoardDefaultValue; } }
      set {
        _hasBits1 |= 256;
        bombpotAdditionalBoard_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_additional_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotAdditionalBoard {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_additional_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotAdditionalBoard() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "hitpot_rate" field.</summary>
    public const int HitpotRateFieldNumber = 48;
    private readonly static int HitpotRateDefaultValue = 0;

    private int hitpotRate_;
    /// <summary>
    /// Tongits 玩法相關設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitpotRate {
      get { if ((_hasBits1 & 512) != 0) { return hitpotRate_; } else { return HitpotRateDefaultValue; } }
      set {
        _hasBits1 |= 512;
        hitpotRate_ = value;
      }
    }
    /// <summary>Gets whether the "hitpot_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHitpotRate {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "hitpot_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHitpotRate() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "bonus_card" field.</summary>
    public const int BonusCardFieldNumber = 49;
    private readonly static int BonusCardDefaultValue = 0;

    private int bonusCard_;
    /// <summary>
    /// none:0b00, A:0b01, K:0b10, AK:0b11
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusCard {
      get { if ((_hasBits1 & 1024) != 0) { return bonusCard_; } else { return BonusCardDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        bonusCard_ = value;
      }
    }
    /// <summary>Gets whether the "bonus_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBonusCard {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "bonus_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBonusCard() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "fight_limit" field.</summary>
    public const int FightLimitFieldNumber = 50;
    private readonly static int FightLimitDefaultValue = 0;

    private int fightLimit_;
    /// <summary>
    /// 需要幾個已出示牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FightLimit {
      get { if ((_hasBits1 & 2048) != 0) { return fightLimit_; } else { return FightLimitDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        fightLimit_ = value;
      }
    }
    /// <summary>Gets whether the "fight_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFightLimit {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "fight_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFightLimit() {
      _hasBits1 &= ~2048;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProfitSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProfitSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (StartTime != other.StartTime) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if(!info_.Equals(other.info_)) return false;
      if (GameTime != other.GameTime) return false;
      if (Feetype != other.Feetype) return false;
      if (Feepoint != other.Feepoint) return false;
      if (Handsnum != other.Handsnum) return false;
      if (Ownericon != other.Ownericon) return false;
      if (RoomType != other.RoomType) return false;
      if (UpblindTime != other.UpblindTime) return false;
      if (Cost != other.Cost) return false;
      if (BeginChips != other.BeginChips) return false;
      if (RewardNum != other.RewardNum) return false;
      if (IsInsurance != other.IsInsurance) return false;
      if (SeatNum != other.SeatNum) return false;
      if (HunterReward != other.HunterReward) return false;
      if (Charge != other.Charge) return false;
      if (GameMode != other.GameMode) return false;
      if (Ante != other.Ante) return false;
      if (IsJackpotUsed != other.IsJackpotUsed) return false;
      if (TotalBuyin != other.TotalBuyin) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (IsEvchop != other.IsEvchop) return false;
      if (IsSnowballHunter != other.IsSnowballHunter) return false;
      if (Setid != other.Setid) return false;
      if (TotalReward != other.TotalReward) return false;
      if (SpinupRewardRatio != other.SpinupRewardRatio) return false;
      if (GroupStage != other.GroupStage) return false;
      if(!groupStat_.Equals(other.groupStat_)) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (TotalFee != other.TotalFee) return false;
      if (TotalProfit != other.TotalProfit) return false;
      if (UpblindTimeAfterRebuyEnded != other.UpblindTimeAfterRebuyEnded) return false;
      if (UpblindTimeAfterFinalTable != other.UpblindTimeAfterFinalTable) return false;
      if (Ppstid != other.Ppstid) return false;
      if (RoomName != other.RoomName) return false;
      if (Cap != other.Cap) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (BombpotType != other.BombpotType) return false;
      if (RateSettingType != other.RateSettingType) return false;
      if (TotalBetting != other.TotalBetting) return false;
      if (MinBet != other.MinBet) return false;
      if (MiddleBet != other.MiddleBet) return false;
      if (HighBet != other.HighBet) return false;
      if (AdditionalBoard != other.AdditionalBoard) return false;
      if (BombpotAdditionalBoard != other.BombpotAdditionalBoard) return false;
      if (HitpotRate != other.HitpotRate) return false;
      if (BonusCard != other.BonusCard) return false;
      if (FightLimit != other.FightLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasStartTime) hash ^= StartTime.GetHashCode();
      if (HasSmallBlind) hash ^= SmallBlind.GetHashCode();
      hash ^= info_.GetHashCode();
      if (HasGameTime) hash ^= GameTime.GetHashCode();
      if (HasFeetype) hash ^= Feetype.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasHandsnum) hash ^= Handsnum.GetHashCode();
      if (HasOwnericon) hash ^= Ownericon.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasUpblindTime) hash ^= UpblindTime.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasBeginChips) hash ^= BeginChips.GetHashCode();
      if (HasRewardNum) hash ^= RewardNum.GetHashCode();
      if (HasIsInsurance) hash ^= IsInsurance.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasHunterReward) hash ^= HunterReward.GetHashCode();
      if (HasCharge) hash ^= Charge.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasIsJackpotUsed) hash ^= IsJackpotUsed.GetHashCode();
      if (HasTotalBuyin) hash ^= TotalBuyin.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasIsEvchop) hash ^= IsEvchop.GetHashCode();
      if (HasIsSnowballHunter) hash ^= IsSnowballHunter.GetHashCode();
      if (HasSetid) hash ^= Setid.GetHashCode();
      if (HasTotalReward) hash ^= TotalReward.GetHashCode();
      if (HasSpinupRewardRatio) hash ^= SpinupRewardRatio.GetHashCode();
      if (HasGroupStage) hash ^= GroupStage.GetHashCode();
      hash ^= groupStat_.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasTotalFee) hash ^= TotalFee.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (HasUpblindTimeAfterRebuyEnded) hash ^= UpblindTimeAfterRebuyEnded.GetHashCode();
      if (HasUpblindTimeAfterFinalTable) hash ^= UpblindTimeAfterFinalTable.GetHashCode();
      if (HasPpstid) hash ^= Ppstid.GetHashCode();
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasCap) hash ^= Cap.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasBombpotType) hash ^= BombpotType.GetHashCode();
      if (HasRateSettingType) hash ^= RateSettingType.GetHashCode();
      if (HasTotalBetting) hash ^= TotalBetting.GetHashCode();
      if (HasMinBet) hash ^= MinBet.GetHashCode();
      if (HasMiddleBet) hash ^= MiddleBet.GetHashCode();
      if (HasHighBet) hash ^= HighBet.GetHashCode();
      if (HasAdditionalBoard) hash ^= AdditionalBoard.GetHashCode();
      if (HasBombpotAdditionalBoard) hash ^= BombpotAdditionalBoard.GetHashCode();
      if (HasHitpotRate) hash ^= HitpotRate.GetHashCode();
      if (HasBonusCard) hash ^= BonusCard.GetHashCode();
      if (HasFightLimit) hash ^= FightLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasStartTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (HasSmallBlind) {
        output.WriteRawTag(24);
        output.WriteInt64(SmallBlind);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (HasGameTime) {
        output.WriteRawTag(40);
        output.WriteInt32(GameTime);
      }
      if (HasFeetype) {
        output.WriteRawTag(48);
        output.WriteInt32(Feetype);
      }
      if (HasFeepoint) {
        output.WriteRawTag(56);
        output.WriteInt32(Feepoint);
      }
      if (HasHandsnum) {
        output.WriteRawTag(64);
        output.WriteInt32(Handsnum);
      }
      if (HasOwnericon) {
        output.WriteRawTag(74);
        output.WriteString(Ownericon);
      }
      if (HasRoomType) {
        output.WriteRawTag(80);
        output.WriteEnum((int) RoomType);
      }
      if (HasUpblindTime) {
        output.WriteRawTag(88);
        output.WriteInt32(UpblindTime);
      }
      if (HasCost) {
        output.WriteRawTag(96);
        output.WriteInt64(Cost);
      }
      if (HasBeginChips) {
        output.WriteRawTag(104);
        output.WriteInt64(BeginChips);
      }
      if (HasRewardNum) {
        output.WriteRawTag(112);
        output.WriteInt32(RewardNum);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(120);
        output.WriteBool(IsInsurance);
      }
      if (HasSeatNum) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SeatNum);
      }
      if (HasHunterReward) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(HunterReward);
      }
      if (HasCharge) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(Charge);
      }
      if (HasGameMode) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GameMode);
      }
      if (HasAnte) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Ante);
      }
      if (HasIsJackpotUsed) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsJackpotUsed);
      }
      if (HasTotalBuyin) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(TotalBuyin);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasIsEvchop) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsEvchop);
      }
      if (HasIsSnowballHunter) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsSnowballHunter);
      }
      if (HasSetid) {
        output.WriteRawTag(210, 1);
        output.WriteString(Setid);
      }
      if (HasTotalReward) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(TotalReward);
      }
      if (HasSpinupRewardRatio) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(SpinupRewardRatio);
      }
      if (HasGroupStage) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroupStage);
      }
      groupStat_.WriteTo(output, _repeated_groupStat_codec);
      if (HasSuperLeagueType) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasTotalFee) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(TotalFee);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(TotalProfit);
      }
      if (HasUpblindTimeAfterRebuyEnded) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(UpblindTimeAfterRebuyEnded);
      }
      if (HasUpblindTimeAfterFinalTable) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(UpblindTimeAfterFinalTable);
      }
      if (HasPpstid) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Ppstid);
      }
      if (HasRoomName) {
        output.WriteRawTag(170, 2);
        output.WriteString(RoomName);
      }
      if (HasCap) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Cap);
      }
      if (HasPpsrid) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(Ppsrid);
      }
      if (HasBombpotType) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(BombpotType);
      }
      if (HasRateSettingType) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(RateSettingType);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(TotalBetting);
      }
      if (HasMinBet) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MinBet);
      }
      if (HasMiddleBet) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MiddleBet);
      }
      if (HasHighBet) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(HighBet);
      }
      if (HasAdditionalBoard) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(AdditionalBoard);
      }
      if (HasBombpotAdditionalBoard) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BombpotAdditionalBoard);
      }
      if (HasHitpotRate) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(HitpotRate);
      }
      if (HasBonusCard) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(BonusCard);
      }
      if (HasFightLimit) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(FightLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasStartTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (HasSmallBlind) {
        output.WriteRawTag(24);
        output.WriteInt64(SmallBlind);
      }
      info_.WriteTo(ref output, _repeated_info_codec);
      if (HasGameTime) {
        output.WriteRawTag(40);
        output.WriteInt32(GameTime);
      }
      if (HasFeetype) {
        output.WriteRawTag(48);
        output.WriteInt32(Feetype);
      }
      if (HasFeepoint) {
        output.WriteRawTag(56);
        output.WriteInt32(Feepoint);
      }
      if (HasHandsnum) {
        output.WriteRawTag(64);
        output.WriteInt32(Handsnum);
      }
      if (HasOwnericon) {
        output.WriteRawTag(74);
        output.WriteString(Ownericon);
      }
      if (HasRoomType) {
        output.WriteRawTag(80);
        output.WriteEnum((int) RoomType);
      }
      if (HasUpblindTime) {
        output.WriteRawTag(88);
        output.WriteInt32(UpblindTime);
      }
      if (HasCost) {
        output.WriteRawTag(96);
        output.WriteInt64(Cost);
      }
      if (HasBeginChips) {
        output.WriteRawTag(104);
        output.WriteInt64(BeginChips);
      }
      if (HasRewardNum) {
        output.WriteRawTag(112);
        output.WriteInt32(RewardNum);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(120);
        output.WriteBool(IsInsurance);
      }
      if (HasSeatNum) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SeatNum);
      }
      if (HasHunterReward) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(HunterReward);
      }
      if (HasCharge) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(Charge);
      }
      if (HasGameMode) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GameMode);
      }
      if (HasAnte) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Ante);
      }
      if (HasIsJackpotUsed) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsJackpotUsed);
      }
      if (HasTotalBuyin) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(TotalBuyin);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasIsEvchop) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsEvchop);
      }
      if (HasIsSnowballHunter) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsSnowballHunter);
      }
      if (HasSetid) {
        output.WriteRawTag(210, 1);
        output.WriteString(Setid);
      }
      if (HasTotalReward) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(TotalReward);
      }
      if (HasSpinupRewardRatio) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(SpinupRewardRatio);
      }
      if (HasGroupStage) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GroupStage);
      }
      groupStat_.WriteTo(ref output, _repeated_groupStat_codec);
      if (HasSuperLeagueType) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasTotalFee) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(TotalFee);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(TotalProfit);
      }
      if (HasUpblindTimeAfterRebuyEnded) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(UpblindTimeAfterRebuyEnded);
      }
      if (HasUpblindTimeAfterFinalTable) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(UpblindTimeAfterFinalTable);
      }
      if (HasPpstid) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Ppstid);
      }
      if (HasRoomName) {
        output.WriteRawTag(170, 2);
        output.WriteString(RoomName);
      }
      if (HasCap) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Cap);
      }
      if (HasPpsrid) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(Ppsrid);
      }
      if (HasBombpotType) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(BombpotType);
      }
      if (HasRateSettingType) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(RateSettingType);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(TotalBetting);
      }
      if (HasMinBet) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MinBet);
      }
      if (HasMiddleBet) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MiddleBet);
      }
      if (HasHighBet) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(HighBet);
      }
      if (HasAdditionalBoard) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(AdditionalBoard);
      }
      if (HasBombpotAdditionalBoard) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BombpotAdditionalBoard);
      }
      if (HasHitpotRate) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(HitpotRate);
      }
      if (HasBonusCard) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(BonusCard);
      }
      if (HasFightLimit) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(FightLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (HasSmallBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SmallBlind);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (HasGameTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (HasFeetype) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feetype);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasHandsnum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handsnum);
      }
      if (HasOwnericon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ownericon);
      }
      if (HasRoomType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasUpblindTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpblindTime);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (HasBeginChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginChips);
      }
      if (HasRewardNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardNum);
      }
      if (HasIsInsurance) {
        size += 1 + 1;
      }
      if (HasSeatNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasHunterReward) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HunterReward);
      }
      if (HasCharge) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Charge);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
      }
      if (HasAnte) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasIsJackpotUsed) {
        size += 2 + 1;
      }
      if (HasTotalBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalBuyin);
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasIsEvchop) {
        size += 2 + 1;
      }
      if (HasIsSnowballHunter) {
        size += 2 + 1;
      }
      if (HasSetid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Setid);
      }
      if (HasTotalReward) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalReward);
      }
      if (HasSpinupRewardRatio) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpinupRewardRatio);
      }
      if (HasGroupStage) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroupStage);
      }
      size += groupStat_.CalculateSize(_repeated_groupStat_codec);
      if (HasSuperLeagueType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasTotalFee) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalFee);
      }
      if (HasTotalProfit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (HasUpblindTimeAfterRebuyEnded) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpblindTimeAfterRebuyEnded);
      }
      if (HasUpblindTimeAfterFinalTable) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpblindTimeAfterFinalTable);
      }
      if (HasPpstid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppstid);
      }
      if (HasRoomName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasCap) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cap);
      }
      if (HasPpsrid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasBombpotType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombpotType);
      }
      if (HasRateSettingType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateSettingType);
      }
      if (HasTotalBetting) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalBetting);
      }
      if (HasMinBet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinBet);
      }
      if (HasMiddleBet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MiddleBet);
      }
      if (HasHighBet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HighBet);
      }
      if (HasAdditionalBoard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdditionalBoard);
      }
      if (HasBombpotAdditionalBoard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombpotAdditionalBoard);
      }
      if (HasHitpotRate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitpotRate);
      }
      if (HasBonusCard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BonusCard);
      }
      if (HasFightLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FightLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProfitSet other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasSmallBlind) {
        SmallBlind = other.SmallBlind;
      }
      info_.Add(other.info_);
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.HasFeetype) {
        Feetype = other.Feetype;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasHandsnum) {
        Handsnum = other.Handsnum;
      }
      if (other.HasOwnericon) {
        Ownericon = other.Ownericon;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasUpblindTime) {
        UpblindTime = other.UpblindTime;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasBeginChips) {
        BeginChips = other.BeginChips;
      }
      if (other.HasRewardNum) {
        RewardNum = other.RewardNum;
      }
      if (other.HasIsInsurance) {
        IsInsurance = other.IsInsurance;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasHunterReward) {
        HunterReward = other.HunterReward;
      }
      if (other.HasCharge) {
        Charge = other.Charge;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasIsJackpotUsed) {
        IsJackpotUsed = other.IsJackpotUsed;
      }
      if (other.HasTotalBuyin) {
        TotalBuyin = other.TotalBuyin;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasIsEvchop) {
        IsEvchop = other.IsEvchop;
      }
      if (other.HasIsSnowballHunter) {
        IsSnowballHunter = other.IsSnowballHunter;
      }
      if (other.HasSetid) {
        Setid = other.Setid;
      }
      if (other.HasTotalReward) {
        TotalReward = other.TotalReward;
      }
      if (other.HasSpinupRewardRatio) {
        SpinupRewardRatio = other.SpinupRewardRatio;
      }
      if (other.HasGroupStage) {
        GroupStage = other.GroupStage;
      }
      groupStat_.Add(other.groupStat_);
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasTotalFee) {
        TotalFee = other.TotalFee;
      }
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      if (other.HasUpblindTimeAfterRebuyEnded) {
        UpblindTimeAfterRebuyEnded = other.UpblindTimeAfterRebuyEnded;
      }
      if (other.HasUpblindTimeAfterFinalTable) {
        UpblindTimeAfterFinalTable = other.UpblindTimeAfterFinalTable;
      }
      if (other.HasPpstid) {
        Ppstid = other.Ppstid;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasCap) {
        Cap = other.Cap;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasBombpotType) {
        BombpotType = other.BombpotType;
      }
      if (other.HasRateSettingType) {
        RateSettingType = other.RateSettingType;
      }
      if (other.HasTotalBetting) {
        TotalBetting = other.TotalBetting;
      }
      if (other.HasMinBet) {
        MinBet = other.MinBet;
      }
      if (other.HasMiddleBet) {
        MiddleBet = other.MiddleBet;
      }
      if (other.HasHighBet) {
        HighBet = other.HighBet;
      }
      if (other.HasAdditionalBoard) {
        AdditionalBoard = other.AdditionalBoard;
      }
      if (other.HasBombpotAdditionalBoard) {
        BombpotAdditionalBoard = other.BombpotAdditionalBoard;
      }
      if (other.HasHitpotRate) {
        HitpotRate = other.HitpotRate;
      }
      if (other.HasBonusCard) {
        BonusCard = other.BonusCard;
      }
      if (other.HasFightLimit) {
        FightLimit = other.FightLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            SmallBlind = input.ReadInt64();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 40: {
            GameTime = input.ReadInt32();
            break;
          }
          case 48: {
            Feetype = input.ReadInt32();
            break;
          }
          case 56: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 64: {
            Handsnum = input.ReadInt32();
            break;
          }
          case 74: {
            Ownericon = input.ReadString();
            break;
          }
          case 80: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 88: {
            UpblindTime = input.ReadInt32();
            break;
          }
          case 96: {
            Cost = input.ReadInt64();
            break;
          }
          case 104: {
            BeginChips = input.ReadInt64();
            break;
          }
          case 112: {
            RewardNum = input.ReadInt32();
            break;
          }
          case 120: {
            IsInsurance = input.ReadBool();
            break;
          }
          case 128: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 136: {
            HunterReward = input.ReadInt64();
            break;
          }
          case 144: {
            Charge = input.ReadInt64();
            break;
          }
          case 152: {
            GameMode = input.ReadInt32();
            break;
          }
          case 160: {
            Ante = input.ReadInt64();
            break;
          }
          case 168: {
            IsJackpotUsed = input.ReadBool();
            break;
          }
          case 176: {
            TotalBuyin = input.ReadInt64();
            break;
          }
          case 184: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 192: {
            IsEvchop = input.ReadBool();
            break;
          }
          case 200: {
            IsSnowballHunter = input.ReadBool();
            break;
          }
          case 210: {
            Setid = input.ReadString();
            break;
          }
          case 216: {
            TotalReward = input.ReadInt32();
            break;
          }
          case 224: {
            SpinupRewardRatio = input.ReadInt32();
            break;
          }
          case 232: {
            GroupStage = input.ReadInt32();
            break;
          }
          case 242: {
            groupStat_.AddEntriesFrom(input, _repeated_groupStat_codec);
            break;
          }
          case 248: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 256: {
            TotalFee = input.ReadInt64();
            break;
          }
          case 264: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 272: {
            UpblindTimeAfterRebuyEnded = input.ReadInt32();
            break;
          }
          case 280: {
            UpblindTimeAfterFinalTable = input.ReadInt32();
            break;
          }
          case 288: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 298: {
            RoomName = input.ReadString();
            break;
          }
          case 304: {
            Cap = input.ReadInt32();
            break;
          }
          case 312: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 320: {
            BombpotType = input.ReadInt32();
            break;
          }
          case 328: {
            RateSettingType = input.ReadInt32();
            break;
          }
          case 336: {
            TotalBetting = input.ReadInt64();
            break;
          }
          case 344: {
            MinBet = input.ReadInt32();
            break;
          }
          case 352: {
            MiddleBet = input.ReadInt32();
            break;
          }
          case 360: {
            HighBet = input.ReadInt32();
            break;
          }
          case 368: {
            AdditionalBoard = input.ReadInt32();
            break;
          }
          case 376: {
            BombpotAdditionalBoard = input.ReadInt32();
            break;
          }
          case 384: {
            HitpotRate = input.ReadInt32();
            break;
          }
          case 392: {
            BonusCard = input.ReadInt32();
            break;
          }
          case 400: {
            FightLimit = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            SmallBlind = input.ReadInt64();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
          case 40: {
            GameTime = input.ReadInt32();
            break;
          }
          case 48: {
            Feetype = input.ReadInt32();
            break;
          }
          case 56: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 64: {
            Handsnum = input.ReadInt32();
            break;
          }
          case 74: {
            Ownericon = input.ReadString();
            break;
          }
          case 80: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 88: {
            UpblindTime = input.ReadInt32();
            break;
          }
          case 96: {
            Cost = input.ReadInt64();
            break;
          }
          case 104: {
            BeginChips = input.ReadInt64();
            break;
          }
          case 112: {
            RewardNum = input.ReadInt32();
            break;
          }
          case 120: {
            IsInsurance = input.ReadBool();
            break;
          }
          case 128: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 136: {
            HunterReward = input.ReadInt64();
            break;
          }
          case 144: {
            Charge = input.ReadInt64();
            break;
          }
          case 152: {
            GameMode = input.ReadInt32();
            break;
          }
          case 160: {
            Ante = input.ReadInt64();
            break;
          }
          case 168: {
            IsJackpotUsed = input.ReadBool();
            break;
          }
          case 176: {
            TotalBuyin = input.ReadInt64();
            break;
          }
          case 184: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 192: {
            IsEvchop = input.ReadBool();
            break;
          }
          case 200: {
            IsSnowballHunter = input.ReadBool();
            break;
          }
          case 210: {
            Setid = input.ReadString();
            break;
          }
          case 216: {
            TotalReward = input.ReadInt32();
            break;
          }
          case 224: {
            SpinupRewardRatio = input.ReadInt32();
            break;
          }
          case 232: {
            GroupStage = input.ReadInt32();
            break;
          }
          case 242: {
            groupStat_.AddEntriesFrom(ref input, _repeated_groupStat_codec);
            break;
          }
          case 248: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 256: {
            TotalFee = input.ReadInt64();
            break;
          }
          case 264: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 272: {
            UpblindTimeAfterRebuyEnded = input.ReadInt32();
            break;
          }
          case 280: {
            UpblindTimeAfterFinalTable = input.ReadInt32();
            break;
          }
          case 288: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 298: {
            RoomName = input.ReadString();
            break;
          }
          case 304: {
            Cap = input.ReadInt32();
            break;
          }
          case 312: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 320: {
            BombpotType = input.ReadInt32();
            break;
          }
          case 328: {
            RateSettingType = input.ReadInt32();
            break;
          }
          case 336: {
            TotalBetting = input.ReadInt64();
            break;
          }
          case 344: {
            MinBet = input.ReadInt32();
            break;
          }
          case 352: {
            MiddleBet = input.ReadInt32();
            break;
          }
          case 360: {
            HighBet = input.ReadInt32();
            break;
          }
          case 368: {
            AdditionalBoard = input.ReadInt32();
            break;
          }
          case 376: {
            BombpotAdditionalBoard = input.ReadInt32();
            break;
          }
          case 384: {
            HitpotRate = input.ReadInt32();
            break;
          }
          case 392: {
            BonusCard = input.ReadInt32();
            break;
          }
          case 400: {
            FightLimit = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProfitRSP : pb::IMessage<ProfitRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfitRSP> _parser = new pb::MessageParser<ProfitRSP>(() => new ProfitRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProfitRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitRSP(ProfitRSP other) : this() {
      set_ = other.set_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitRSP Clone() {
      return new ProfitRSP(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitSet> _repeated_set_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.ProfitSet.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitSet> set_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitSet> Set {
      get { return set_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProfitRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProfitRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProfitRSP other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyDrawSetDetail : pb::IMessage<LuckyDrawSetDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyDrawSetDetail> _parser = new pb::MessageParser<LuckyDrawSetDetail>(() => new LuckyDrawSetDetail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LuckyDrawSetDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetail(LuckyDrawSetDetail other) : this() {
      _hasBits0 = other._hasBits0;
      userId_ = other.userId_;
      userName_ = other.userName_;
      iconUrl_ = other.iconUrl_;
      drawNum_ = other.drawNum_;
      profit_ = other.profit_;
      certification_ = other.certification_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetail Clone() {
      return new LuckyDrawSetDetail(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private readonly static long UserIdDefaultValue = 0L;

    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UserId {
      get { if ((_hasBits0 & 1) != 0) { return userId_; } else { return UserIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        userId_ = value;
      }
    }
    /// <summary>Gets whether the "user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 2;
    private readonly static string UserNameDefaultValue = "";

    private string userName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_ ?? UserNameDefaultValue; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserName {
      get { return userName_ != null; }
    }
    /// <summary>Clears the value of the "user_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserName() {
      userName_ = null;
    }

    /// <summary>Field number for the "icon_url" field.</summary>
    public const int IconUrlFieldNumber = 3;
    private readonly static string IconUrlDefaultValue = "";

    private string iconUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconUrl {
      get { return iconUrl_ ?? IconUrlDefaultValue; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconUrl {
      get { return iconUrl_ != null; }
    }
    /// <summary>Clears the value of the "icon_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconUrl() {
      iconUrl_ = null;
    }

    /// <summary>Field number for the "draw_num" field.</summary>
    public const int DrawNumFieldNumber = 4;
    private readonly static int DrawNumDefaultValue = 0;

    private int drawNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DrawNum {
      get { if ((_hasBits0 & 2) != 0) { return drawNum_; } else { return DrawNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        drawNum_ = value;
      }
    }
    /// <summary>Gets whether the "draw_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "draw_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 5;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 4) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "certification" field.</summary>
    public const int CertificationFieldNumber = 6;
    private readonly static int CertificationDefaultValue = 0;

    private int certification_;
    /// <summary>
    ///俱樂部會員認證
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Certification {
      get { if ((_hasBits0 & 8) != 0) { return certification_; } else { return CertificationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        certification_ = value;
      }
    }
    /// <summary>Gets whether the "certification" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCertification {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "certification" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCertification() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LuckyDrawSetDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LuckyDrawSetDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (IconUrl != other.IconUrl) return false;
      if (DrawNum != other.DrawNum) return false;
      if (Profit != other.Profit) return false;
      if (Certification != other.Certification) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (HasUserName) hash ^= UserName.GetHashCode();
      if (HasIconUrl) hash ^= IconUrl.GetHashCode();
      if (HasDrawNum) hash ^= DrawNum.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (HasCertification) hash ^= Certification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUserId) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (HasUserName) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (HasIconUrl) {
        output.WriteRawTag(26);
        output.WriteString(IconUrl);
      }
      if (HasDrawNum) {
        output.WriteRawTag(32);
        output.WriteInt32(DrawNum);
      }
      if (HasProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(Profit);
      }
      if (HasCertification) {
        output.WriteRawTag(48);
        output.WriteInt32(Certification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUserId) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (HasUserName) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (HasIconUrl) {
        output.WriteRawTag(26);
        output.WriteString(IconUrl);
      }
      if (HasDrawNum) {
        output.WriteRawTag(32);
        output.WriteInt32(DrawNum);
      }
      if (HasProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(Profit);
      }
      if (HasCertification) {
        output.WriteRawTag(48);
        output.WriteInt32(Certification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUserId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (HasUserName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HasIconUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      if (HasDrawNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawNum);
      }
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (HasCertification) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Certification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LuckyDrawSetDetail other) {
      if (other == null) {
        return;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasIconUrl) {
        IconUrl = other.IconUrl;
      }
      if (other.HasDrawNum) {
        DrawNum = other.DrawNum;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      if (other.HasCertification) {
        Certification = other.Certification;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            IconUrl = input.ReadString();
            break;
          }
          case 32: {
            DrawNum = input.ReadInt32();
            break;
          }
          case 40: {
            Profit = input.ReadInt64();
            break;
          }
          case 48: {
            Certification = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            IconUrl = input.ReadString();
            break;
          }
          case 32: {
            DrawNum = input.ReadInt32();
            break;
          }
          case 40: {
            Profit = input.ReadInt64();
            break;
          }
          case 48: {
            Certification = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyDrawSet : pb::IMessage<LuckyDrawSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyDrawSet> _parser = new pb::MessageParser<LuckyDrawSet>(() => new LuckyDrawSet());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LuckyDrawSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSet(LuckyDrawSet other) : this() {
      _hasBits0 = other._hasBits0;
      date_ = other.date_;
      ownericon_ = other.ownericon_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      totalProfit_ = other.totalProfit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSet Clone() {
      return new LuckyDrawSet(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private readonly static uint DateDefaultValue = 0;

    private uint date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Date {
      get { if ((_hasBits0 & 1) != 0) { return date_; } else { return DateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        date_ = value;
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ownericon" field.</summary>
    public const int OwnericonFieldNumber = 2;
    private readonly static string OwnericonDefaultValue = "";

    private string ownericon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ownericon {
      get { return ownericon_ ?? OwnericonDefaultValue; }
      set {
        ownericon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ownericon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnericon {
      get { return ownericon_ != null; }
    }
    /// <summary>Clears the value of the "ownericon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnericon() {
      ownericon_ = null;
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Texas.Protocol.LuckyDrawConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.LuckyDrawConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 4;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 2) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 2;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LuckyDrawSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LuckyDrawSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      if (Ownericon != other.Ownericon) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (TotalProfit != other.TotalProfit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDate) hash ^= Date.GetHashCode();
      if (HasOwnericon) hash ^= Ownericon.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDate) {
        output.WriteRawTag(8);
        output.WriteUInt32(Date);
      }
      if (HasOwnericon) {
        output.WriteRawTag(18);
        output.WriteString(Ownericon);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDate) {
        output.WriteRawTag(8);
        output.WriteUInt32(Date);
      }
      if (HasOwnericon) {
        output.WriteRawTag(18);
        output.WriteString(Ownericon);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Date);
      }
      if (HasOwnericon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ownericon);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LuckyDrawSet other) {
      if (other == null) {
        return;
      }
      if (other.HasDate) {
        Date = other.Date;
      }
      if (other.HasOwnericon) {
        Ownericon = other.Ownericon;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Texas.Protocol.LuckyDrawConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Date = input.ReadUInt32();
            break;
          }
          case 18: {
            Ownericon = input.ReadString();
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.LuckyDrawConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 32: {
            TotalProfit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Date = input.ReadUInt32();
            break;
          }
          case 18: {
            Ownericon = input.ReadString();
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.LuckyDrawConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 32: {
            TotalProfit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameDataREQ : pb::IMessage<GameDataREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameDataREQ> _parser = new pb::MessageParser<GameDataREQ>(() => new GameDataREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameDataREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameDataREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameDataREQ(GameDataREQ other) : this() {
      _hasBits0 = other._hasBits0;
      clubid_ = other.clubid_;
      btime_ = other.btime_;
      etime_ = other.etime_;
      leagueid_ = other.leagueid_;
      agentUid_ = other.agentUid_;
      beginDate_ = other.beginDate_;
      endDate_ = other.endDate_;
      superLeagueid_ = other.superLeagueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameDataREQ Clone() {
      return new GameDataREQ(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "btime" field.</summary>
    public const int BtimeFieldNumber = 2;
    private readonly static uint BtimeDefaultValue = 0;

    private uint btime_;
    /// <summary>
    /// 已废弃 begin time   开始时间与结束时间间隔不超过3天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Btime {
      get { if ((_hasBits0 & 1) != 0) { return btime_; } else { return BtimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        btime_ = value;
      }
    }
    /// <summary>Gets whether the "btime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBtime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "btime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBtime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "etime" field.</summary>
    public const int EtimeFieldNumber = 3;
    private readonly static uint EtimeDefaultValue = 0;

    private uint etime_;
    /// <summary>
    /// 已废弃 end time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Etime {
      get { if ((_hasBits0 & 2) != 0) { return etime_; } else { return EtimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        etime_ = value;
      }
    }
    /// <summary>Gets whether the "etime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEtime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "etime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEtime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 4;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "agent_uid" field.</summary>
    public const int AgentUidFieldNumber = 5;
    private readonly static long AgentUidDefaultValue = 0L;

    private long agentUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AgentUid {
      get { if ((_hasBits0 & 8) != 0) { return agentUid_; } else { return AgentUidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        agentUid_ = value;
      }
    }
    /// <summary>Gets whether the "agent_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAgentUid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "agent_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAgentUid() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "begin_date" field.</summary>
    public const int BeginDateFieldNumber = 6;
    private readonly static uint BeginDateDefaultValue = 0;

    private uint beginDate_;
    /// <summary>
    ///开始日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BeginDate {
      get { if ((_hasBits0 & 16) != 0) { return beginDate_; } else { return BeginDateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        beginDate_ = value;
      }
    }
    /// <summary>Gets whether the "begin_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBeginDate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "begin_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBeginDate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 7;
    private readonly static uint EndDateDefaultValue = 0;

    private uint endDate_;
    /// <summary>
    ///结束日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EndDate {
      get { if ((_hasBits0 & 32) != 0) { return endDate_; } else { return EndDateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        endDate_ = value;
      }
    }
    /// <summary>Gets whether the "end_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndDate {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "end_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndDate() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 8;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    /// <summary>
    ///超级联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 64) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 64;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameDataREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameDataREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      if (Btime != other.Btime) return false;
      if (Etime != other.Etime) return false;
      if (Leagueid != other.Leagueid) return false;
      if (AgentUid != other.AgentUid) return false;
      if (BeginDate != other.BeginDate) return false;
      if (EndDate != other.EndDate) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasBtime) hash ^= Btime.GetHashCode();
      if (HasEtime) hash ^= Etime.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasAgentUid) hash ^= AgentUid.GetHashCode();
      if (HasBeginDate) hash ^= BeginDate.GetHashCode();
      if (HasEndDate) hash ^= EndDate.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(10);
        output.WriteString(Clubid);
      }
      if (HasBtime) {
        output.WriteRawTag(16);
        output.WriteUInt32(Btime);
      }
      if (HasEtime) {
        output.WriteRawTag(24);
        output.WriteUInt32(Etime);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasAgentUid) {
        output.WriteRawTag(40);
        output.WriteInt64(AgentUid);
      }
      if (HasBeginDate) {
        output.WriteRawTag(48);
        output.WriteUInt32(BeginDate);
      }
      if (HasEndDate) {
        output.WriteRawTag(56);
        output.WriteUInt32(EndDate);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(64);
        output.WriteInt32(SuperLeagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(10);
        output.WriteString(Clubid);
      }
      if (HasBtime) {
        output.WriteRawTag(16);
        output.WriteUInt32(Btime);
      }
      if (HasEtime) {
        output.WriteRawTag(24);
        output.WriteUInt32(Etime);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasAgentUid) {
        output.WriteRawTag(40);
        output.WriteInt64(AgentUid);
      }
      if (HasBeginDate) {
        output.WriteRawTag(48);
        output.WriteUInt32(BeginDate);
      }
      if (HasEndDate) {
        output.WriteRawTag(56);
        output.WriteUInt32(EndDate);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(64);
        output.WriteInt32(SuperLeagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasBtime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Btime);
      }
      if (HasEtime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Etime);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasAgentUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgentUid);
      }
      if (HasBeginDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginDate);
      }
      if (HasEndDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndDate);
      }
      if (HasSuperLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameDataREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasBtime) {
        Btime = other.Btime;
      }
      if (other.HasEtime) {
        Etime = other.Etime;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasAgentUid) {
        AgentUid = other.AgentUid;
      }
      if (other.HasBeginDate) {
        BeginDate = other.BeginDate;
      }
      if (other.HasEndDate) {
        EndDate = other.EndDate;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Clubid = input.ReadString();
            break;
          }
          case 16: {
            Btime = input.ReadUInt32();
            break;
          }
          case 24: {
            Etime = input.ReadUInt32();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            AgentUid = input.ReadInt64();
            break;
          }
          case 48: {
            BeginDate = input.ReadUInt32();
            break;
          }
          case 56: {
            EndDate = input.ReadUInt32();
            break;
          }
          case 64: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Clubid = input.ReadString();
            break;
          }
          case 16: {
            Btime = input.ReadUInt32();
            break;
          }
          case 24: {
            Etime = input.ReadUInt32();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            AgentUid = input.ReadInt64();
            break;
          }
          case 48: {
            BeginDate = input.ReadUInt32();
            break;
          }
          case 56: {
            EndDate = input.ReadUInt32();
            break;
          }
          case 64: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameDataRSP : pb::IMessage<GameDataRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameDataRSP> _parser = new pb::MessageParser<GameDataRSP>(() => new GameDataRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameDataRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameDataRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameDataRSP(GameDataRSP other) : this() {
      _hasBits0 = other._hasBits0;
      set_ = other.set_.Clone();
      totalFee_ = other.totalFee_;
      totalHands_ = other.totalHands_;
      totalGames_ = other.totalGames_;
      totalProfit_ = other.totalProfit_;
      totalSpinupBuyin_ = other.totalSpinupBuyin_;
      totalSpinupReward_ = other.totalSpinupReward_;
      totalSpinupProfit_ = other.totalSpinupProfit_;
      code_ = other.code_;
      luckyDrawSet_ = other.luckyDrawSet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameDataRSP Clone() {
      return new GameDataRSP(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitSet> _repeated_set_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.ProfitSet.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitSet> set_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitSet> Set {
      get { return set_; }
    }

    /// <summary>Field number for the "total_fee" field.</summary>
    public const int TotalFeeFieldNumber = 2;
    private readonly static long TotalFeeDefaultValue = 0L;

    private long totalFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalFee {
      get { if ((_hasBits0 & 1) != 0) { return totalFee_; } else { return TotalFeeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        totalFee_ = value;
      }
    }
    /// <summary>Gets whether the "total_fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalFee {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total_fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalFee() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_hands" field.</summary>
    public const int TotalHandsFieldNumber = 3;
    private readonly static int TotalHandsDefaultValue = 0;

    private int totalHands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalHands {
      get { if ((_hasBits0 & 2) != 0) { return totalHands_; } else { return TotalHandsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        totalHands_ = value;
      }
    }
    /// <summary>Gets whether the "total_hands" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalHands {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "total_hands" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalHands() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_games" field.</summary>
    public const int TotalGamesFieldNumber = 4;
    private readonly static int TotalGamesDefaultValue = 0;

    private int totalGames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalGames {
      get { if ((_hasBits0 & 4) != 0) { return totalGames_; } else { return TotalGamesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalGames_ = value;
      }
    }
    /// <summary>Gets whether the "total_games" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalGames {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_games" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalGames() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 5;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 8) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 8;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "total_spinup_buyin" field.</summary>
    public const int TotalSpinupBuyinFieldNumber = 6;
    private readonly static long TotalSpinupBuyinDefaultValue = 0L;

    private long totalSpinupBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalSpinupBuyin {
      get { if ((_hasBits0 & 16) != 0) { return totalSpinupBuyin_; } else { return TotalSpinupBuyinDefaultValue; } }
      set {
        _hasBits0 |= 16;
        totalSpinupBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "total_spinup_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalSpinupBuyin {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "total_spinup_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalSpinupBuyin() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "total_spinup_reward" field.</summary>
    public const int TotalSpinupRewardFieldNumber = 7;
    private readonly static long TotalSpinupRewardDefaultValue = 0L;

    private long totalSpinupReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalSpinupReward {
      get { if ((_hasBits0 & 32) != 0) { return totalSpinupReward_; } else { return TotalSpinupRewardDefaultValue; } }
      set {
        _hasBits0 |= 32;
        totalSpinupReward_ = value;
      }
    }
    /// <summary>Gets whether the "total_spinup_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalSpinupReward {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "total_spinup_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalSpinupReward() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "total_spinup_profit" field.</summary>
    public const int TotalSpinupProfitFieldNumber = 8;
    private readonly static long TotalSpinupProfitDefaultValue = 0L;

    private long totalSpinupProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalSpinupProfit {
      get { if ((_hasBits0 & 64) != 0) { return totalSpinupProfit_; } else { return TotalSpinupProfitDefaultValue; } }
      set {
        _hasBits0 |= 64;
        totalSpinupProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_spinup_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalSpinupProfit {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "total_spinup_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalSpinupProfit() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 9;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0: success, -1: no authority
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 128) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "lucky_draw_set" field.</summary>
    public const int LuckyDrawSetFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Texas.Protocol.LuckyDrawSet> _repeated_luckyDrawSet_codec
        = pb::FieldCodec.ForMessage(82, global::Texas.Protocol.LuckyDrawSet.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.LuckyDrawSet> luckyDrawSet_ = new pbc::RepeatedField<global::Texas.Protocol.LuckyDrawSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.LuckyDrawSet> LuckyDrawSet {
      get { return luckyDrawSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameDataRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameDataRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!set_.Equals(other.set_)) return false;
      if (TotalFee != other.TotalFee) return false;
      if (TotalHands != other.TotalHands) return false;
      if (TotalGames != other.TotalGames) return false;
      if (TotalProfit != other.TotalProfit) return false;
      if (TotalSpinupBuyin != other.TotalSpinupBuyin) return false;
      if (TotalSpinupReward != other.TotalSpinupReward) return false;
      if (TotalSpinupProfit != other.TotalSpinupProfit) return false;
      if (Code != other.Code) return false;
      if(!luckyDrawSet_.Equals(other.luckyDrawSet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= set_.GetHashCode();
      if (HasTotalFee) hash ^= TotalFee.GetHashCode();
      if (HasTotalHands) hash ^= TotalHands.GetHashCode();
      if (HasTotalGames) hash ^= TotalGames.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (HasTotalSpinupBuyin) hash ^= TotalSpinupBuyin.GetHashCode();
      if (HasTotalSpinupReward) hash ^= TotalSpinupReward.GetHashCode();
      if (HasTotalSpinupProfit) hash ^= TotalSpinupProfit.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      hash ^= luckyDrawSet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      set_.WriteTo(output, _repeated_set_codec);
      if (HasTotalFee) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalFee);
      }
      if (HasTotalHands) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalHands);
      }
      if (HasTotalGames) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalGames);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProfit);
      }
      if (HasTotalSpinupBuyin) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalSpinupBuyin);
      }
      if (HasTotalSpinupReward) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalSpinupReward);
      }
      if (HasTotalSpinupProfit) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalSpinupProfit);
      }
      if (HasCode) {
        output.WriteRawTag(72);
        output.WriteInt32(Code);
      }
      luckyDrawSet_.WriteTo(output, _repeated_luckyDrawSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      set_.WriteTo(ref output, _repeated_set_codec);
      if (HasTotalFee) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalFee);
      }
      if (HasTotalHands) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalHands);
      }
      if (HasTotalGames) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalGames);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProfit);
      }
      if (HasTotalSpinupBuyin) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalSpinupBuyin);
      }
      if (HasTotalSpinupReward) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalSpinupReward);
      }
      if (HasTotalSpinupProfit) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalSpinupProfit);
      }
      if (HasCode) {
        output.WriteRawTag(72);
        output.WriteInt32(Code);
      }
      luckyDrawSet_.WriteTo(ref output, _repeated_luckyDrawSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += set_.CalculateSize(_repeated_set_codec);
      if (HasTotalFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFee);
      }
      if (HasTotalHands) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalHands);
      }
      if (HasTotalGames) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalGames);
      }
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (HasTotalSpinupBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSpinupBuyin);
      }
      if (HasTotalSpinupReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSpinupReward);
      }
      if (HasTotalSpinupProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSpinupProfit);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += luckyDrawSet_.CalculateSize(_repeated_luckyDrawSet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameDataRSP other) {
      if (other == null) {
        return;
      }
      set_.Add(other.set_);
      if (other.HasTotalFee) {
        TotalFee = other.TotalFee;
      }
      if (other.HasTotalHands) {
        TotalHands = other.TotalHands;
      }
      if (other.HasTotalGames) {
        TotalGames = other.TotalGames;
      }
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      if (other.HasTotalSpinupBuyin) {
        TotalSpinupBuyin = other.TotalSpinupBuyin;
      }
      if (other.HasTotalSpinupReward) {
        TotalSpinupReward = other.TotalSpinupReward;
      }
      if (other.HasTotalSpinupProfit) {
        TotalSpinupProfit = other.TotalSpinupProfit;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      luckyDrawSet_.Add(other.luckyDrawSet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
          case 16: {
            TotalFee = input.ReadInt64();
            break;
          }
          case 24: {
            TotalHands = input.ReadInt32();
            break;
          }
          case 32: {
            TotalGames = input.ReadInt32();
            break;
          }
          case 40: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 48: {
            TotalSpinupBuyin = input.ReadInt64();
            break;
          }
          case 56: {
            TotalSpinupReward = input.ReadInt64();
            break;
          }
          case 64: {
            TotalSpinupProfit = input.ReadInt64();
            break;
          }
          case 72: {
            Code = input.ReadInt32();
            break;
          }
          case 82: {
            luckyDrawSet_.AddEntriesFrom(input, _repeated_luckyDrawSet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            set_.AddEntriesFrom(ref input, _repeated_set_codec);
            break;
          }
          case 16: {
            TotalFee = input.ReadInt64();
            break;
          }
          case 24: {
            TotalHands = input.ReadInt32();
            break;
          }
          case 32: {
            TotalGames = input.ReadInt32();
            break;
          }
          case 40: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 48: {
            TotalSpinupBuyin = input.ReadInt64();
            break;
          }
          case 56: {
            TotalSpinupReward = input.ReadInt64();
            break;
          }
          case 64: {
            TotalSpinupProfit = input.ReadInt64();
            break;
          }
          case 72: {
            Code = input.ReadInt32();
            break;
          }
          case 82: {
            luckyDrawSet_.AddEntriesFrom(ref input, _repeated_luckyDrawSet_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameSetDetailREQ : pb::IMessage<GameSetDetailREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameSetDetailREQ> _parser = new pb::MessageParser<GameSetDetailREQ>(() => new GameSetDetailREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameSetDetailREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameSetDetailREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameSetDetailREQ(GameSetDetailREQ other) : this() {
      _hasBits0 = other._hasBits0;
      setid_ = other.setid_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      agentUid_ = other.agentUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameSetDetailREQ Clone() {
      return new GameSetDetailREQ(this);
    }

    /// <summary>Field number for the "setid" field.</summary>
    public const int SetidFieldNumber = 1;
    private readonly static string SetidDefaultValue = "";

    private string setid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Setid {
      get { return setid_ ?? SetidDefaultValue; }
      set {
        setid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "setid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetid {
      get { return setid_ != null; }
    }
    /// <summary>Clears the value of the "setid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetid() {
      setid_ = null;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 3;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "agent_uid" field.</summary>
    public const int AgentUidFieldNumber = 4;
    private readonly static long AgentUidDefaultValue = 0L;

    private long agentUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AgentUid {
      get { if ((_hasBits0 & 2) != 0) { return agentUid_; } else { return AgentUidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        agentUid_ = value;
      }
    }
    /// <summary>Gets whether the "agent_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAgentUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "agent_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAgentUid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameSetDetailREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameSetDetailREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Setid != other.Setid) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (AgentUid != other.AgentUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSetid) hash ^= Setid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasAgentUid) hash ^= AgentUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSetid) {
        output.WriteRawTag(10);
        output.WriteString(Setid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(24);
        output.WriteInt32(Leagueid);
      }
      if (HasAgentUid) {
        output.WriteRawTag(32);
        output.WriteInt64(AgentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSetid) {
        output.WriteRawTag(10);
        output.WriteString(Setid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(24);
        output.WriteInt32(Leagueid);
      }
      if (HasAgentUid) {
        output.WriteRawTag(32);
        output.WriteInt64(AgentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSetid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Setid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasAgentUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgentUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameSetDetailREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasSetid) {
        Setid = other.Setid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasAgentUid) {
        AgentUid = other.AgentUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Setid = input.ReadString();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 32: {
            AgentUid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Setid = input.ReadString();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 32: {
            AgentUid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameSetDetailRSP : pb::IMessage<GameSetDetailRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameSetDetailRSP> _parser = new pb::MessageParser<GameSetDetailRSP>(() => new GameSetDetailRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameSetDetailRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameSetDetailRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameSetDetailRSP(GameSetDetailRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameSetDetailRSP Clone() {
      return new GameSetDetailRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.ProfitInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> info_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameSetDetailRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameSetDetailRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      info_.WriteTo(ref output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameSetDetailRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyDrawSetDetailREQ : pb::IMessage<LuckyDrawSetDetailREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyDrawSetDetailREQ> _parser = new pb::MessageParser<LuckyDrawSetDetailREQ>(() => new LuckyDrawSetDetailREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LuckyDrawSetDetailREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetailREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetailREQ(LuckyDrawSetDetailREQ other) : this() {
      _hasBits0 = other._hasBits0;
      setid_ = other.setid_;
      date_ = other.date_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      agentUid_ = other.agentUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetailREQ Clone() {
      return new LuckyDrawSetDetailREQ(this);
    }

    /// <summary>Field number for the "setid" field.</summary>
    public const int SetidFieldNumber = 1;
    private readonly static string SetidDefaultValue = "";

    private string setid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Setid {
      get { return setid_ ?? SetidDefaultValue; }
      set {
        setid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "setid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetid {
      get { return setid_ != null; }
    }
    /// <summary>Clears the value of the "setid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetid() {
      setid_ = null;
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private readonly static uint DateDefaultValue = 0;

    private uint date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Date {
      get { if ((_hasBits0 & 1) != 0) { return date_; } else { return DateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        date_ = value;
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 4;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "agent_uid" field.</summary>
    public const int AgentUidFieldNumber = 5;
    private readonly static long AgentUidDefaultValue = 0L;

    private long agentUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AgentUid {
      get { if ((_hasBits0 & 4) != 0) { return agentUid_; } else { return AgentUidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        agentUid_ = value;
      }
    }
    /// <summary>Gets whether the "agent_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAgentUid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "agent_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAgentUid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LuckyDrawSetDetailREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LuckyDrawSetDetailREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Setid != other.Setid) return false;
      if (Date != other.Date) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (AgentUid != other.AgentUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSetid) hash ^= Setid.GetHashCode();
      if (HasDate) hash ^= Date.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasAgentUid) hash ^= AgentUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSetid) {
        output.WriteRawTag(10);
        output.WriteString(Setid);
      }
      if (HasDate) {
        output.WriteRawTag(16);
        output.WriteUInt32(Date);
      }
      if (HasClubid) {
        output.WriteRawTag(26);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasAgentUid) {
        output.WriteRawTag(40);
        output.WriteInt64(AgentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSetid) {
        output.WriteRawTag(10);
        output.WriteString(Setid);
      }
      if (HasDate) {
        output.WriteRawTag(16);
        output.WriteUInt32(Date);
      }
      if (HasClubid) {
        output.WriteRawTag(26);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasAgentUid) {
        output.WriteRawTag(40);
        output.WriteInt64(AgentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSetid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Setid);
      }
      if (HasDate) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Date);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasAgentUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgentUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LuckyDrawSetDetailREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasSetid) {
        Setid = other.Setid;
      }
      if (other.HasDate) {
        Date = other.Date;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasAgentUid) {
        AgentUid = other.AgentUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Setid = input.ReadString();
            break;
          }
          case 16: {
            Date = input.ReadUInt32();
            break;
          }
          case 26: {
            Clubid = input.ReadString();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            AgentUid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Setid = input.ReadString();
            break;
          }
          case 16: {
            Date = input.ReadUInt32();
            break;
          }
          case 26: {
            Clubid = input.ReadString();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            AgentUid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyDrawSetDetailRSP : pb::IMessage<LuckyDrawSetDetailRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyDrawSetDetailRSP> _parser = new pb::MessageParser<LuckyDrawSetDetailRSP>(() => new LuckyDrawSetDetailRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LuckyDrawSetDetailRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetailRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetailRSP(LuckyDrawSetDetailRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      detail_ = other.detail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LuckyDrawSetDetailRSP Clone() {
      return new LuckyDrawSetDetailRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.LuckyDrawSetDetail> _repeated_detail_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.LuckyDrawSetDetail.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.LuckyDrawSetDetail> detail_ = new pbc::RepeatedField<global::Texas.Protocol.LuckyDrawSetDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.LuckyDrawSetDetail> Detail {
      get { return detail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LuckyDrawSetDetailRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LuckyDrawSetDetailRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!detail_.Equals(other.detail_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      hash ^= detail_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      detail_.WriteTo(output, _repeated_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      detail_.WriteTo(ref output, _repeated_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += detail_.CalculateSize(_repeated_detail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LuckyDrawSetDetailRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      detail_.Add(other.detail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            detail_.AddEntriesFrom(input, _repeated_detail_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            detail_.AddEntriesFrom(ref input, _repeated_detail_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProfitListREQ : pb::IMessage<ProfitListREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfitListREQ> _parser = new pb::MessageParser<ProfitListREQ>(() => new ProfitListREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProfitListREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitListREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitListREQ(ProfitListREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitListREQ Clone() {
      return new ProfitListREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProfitListREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProfitListREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProfitListREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ProfitListRSP : pb::IMessage<ProfitListRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfitListRSP> _parser = new pb::MessageParser<ProfitListRSP>(() => new ProfitListRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProfitListRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitListRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitListRSP(ProfitListRSP other) : this() {
      profit_ = other.profit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitListRSP Clone() {
      return new ProfitListRSP(this);
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitInfo> _repeated_profit_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.ProfitInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> profit_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> Profit {
      get { return profit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProfitListRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProfitListRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!profit_.Equals(other.profit_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= profit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      profit_.WriteTo(output, _repeated_profit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      profit_.WriteTo(ref output, _repeated_profit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += profit_.CalculateSize(_repeated_profit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProfitListRSP other) {
      if (other == null) {
        return;
      }
      profit_.Add(other.profit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            profit_.AddEntriesFrom(input, _repeated_profit_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            profit_.AddEntriesFrom(ref input, _repeated_profit_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultipleTableRoomInfo : pb::IMessage<MultipleTableRoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultipleTableRoomInfo> _parser = new pb::MessageParser<MultipleTableRoomInfo>(() => new MultipleTableRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MultipleTableRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultipleTableRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultipleTableRoomInfo(MultipleTableRoomInfo other) : this() {
      _hasBits0 = other._hasBits0;
      roomid_ = other.roomid_;
      clubid_ = other.clubid_;
      roomtype_ = other.roomtype_;
      isSatellite_ = other.isSatellite_;
      official_ = other.official_;
      isInsurance_ = other.isInsurance_;
      roomMode_ = other.roomMode_;
      gameMode_ = other.gameMode_;
      seatNum_ = other.seatNum_;
      blind_ = other.blind_;
      roomName_ = other.roomName_;
      defaultBuyin_ = other.defaultBuyin_;
      tid_ = other.tid_;
      passwdLimit_ = other.passwdLimit_;
      passwd_ = other.passwd_;
      leagueid_ = other.leagueid_;
      superLeagueid_ = other.superLeagueid_;
      ppstid_ = other.ppstid_;
      ppsrid_ = other.ppsrid_;
      minBet_ = other.minBet_;
      middleBet_ = other.middleBet_;
      highBet_ = other.highBet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultipleTableRoomInfo Clone() {
      return new MultipleTableRoomInfo(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "roomtype" field.</summary>
    public const int RoomtypeFieldNumber = 3;
    private readonly static int RoomtypeDefaultValue = 0;

    private int roomtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Roomtype {
      get { if ((_hasBits0 & 1) != 0) { return roomtype_; } else { return RoomtypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roomtype_ = value;
      }
    }
    /// <summary>Gets whether the "roomtype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomtype {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "roomtype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomtype() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_satellite" field.</summary>
    public const int IsSatelliteFieldNumber = 4;
    private readonly static int IsSatelliteDefaultValue = 0;

    private int isSatellite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsSatellite {
      get { if ((_hasBits0 & 2) != 0) { return isSatellite_; } else { return IsSatelliteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isSatellite_ = value;
      }
    }
    /// <summary>Gets whether the "is_satellite" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSatellite {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_satellite" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSatellite() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "official" field.</summary>
    public const int OfficialFieldNumber = 5;
    private readonly static int OfficialDefaultValue = 0;

    private int official_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Official {
      get { if ((_hasBits0 & 4) != 0) { return official_; } else { return OfficialDefaultValue; } }
      set {
        _hasBits0 |= 4;
        official_ = value;
      }
    }
    /// <summary>Gets whether the "official" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficial {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "official" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficial() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_insurance" field.</summary>
    public const int IsInsuranceFieldNumber = 6;
    private readonly static int IsInsuranceDefaultValue = 0;

    private int isInsurance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsInsurance {
      get { if ((_hasBits0 & 8) != 0) { return isInsurance_; } else { return IsInsuranceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isInsurance_ = value;
      }
    }
    /// <summary>Gets whether the "is_insurance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInsurance {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_insurance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInsurance() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "room_mode" field.</summary>
    public const int RoomModeFieldNumber = 7;
    private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

    private global::Texas.Protocol.RoomMode roomMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomMode RoomMode {
      get { if ((_hasBits0 & 16) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        roomMode_ = value;
      }
    }
    /// <summary>Gets whether the "room_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "room_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomMode() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 8;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 32) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 9;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 64) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 10;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 128) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 128;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 11;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "default_buyin" field.</summary>
    public const int DefaultBuyinFieldNumber = 12;
    private readonly static long DefaultBuyinDefaultValue = 0L;

    private long defaultBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DefaultBuyin {
      get { if ((_hasBits0 & 256) != 0) { return defaultBuyin_; } else { return DefaultBuyinDefaultValue; } }
      set {
        _hasBits0 |= 256;
        defaultBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "default_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefaultBuyin {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "default_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefaultBuyin() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 13;
    private readonly static int TidDefaultValue = 0;

    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tid {
      get { if ((_hasBits0 & 512) != 0) { return tid_; } else { return TidDefaultValue; } }
      set {
        _hasBits0 |= 512;
        tid_ = value;
      }
    }
    /// <summary>Gets whether the "tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTid {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTid() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 14;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits0 & 1024) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 15;
    private readonly static string PasswdDefaultValue = "";

    private string passwd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Passwd {
      get { return passwd_ ?? PasswdDefaultValue; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "passwd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswd {
      get { return passwd_ != null; }
    }
    /// <summary>Clears the value of the "passwd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswd() {
      passwd_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 16;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 2048) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 17;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 4096) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ppstid" field.</summary>
    public const int PpstidFieldNumber = 18;
    private readonly static int PpstidDefaultValue = 0;

    private int ppstid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppstid {
      get { if ((_hasBits0 & 8192) != 0) { return ppstid_; } else { return PpstidDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        ppstid_ = value;
      }
    }
    /// <summary>Gets whether the "ppstid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpstid {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "ppstid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpstid() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 19;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 16384) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "min_bet" field.</summary>
    public const int MinBetFieldNumber = 20;
    private readonly static int MinBetDefaultValue = 0;

    private int minBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBet {
      get { if ((_hasBits0 & 32768) != 0) { return minBet_; } else { return MinBetDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        minBet_ = value;
      }
    }
    /// <summary>Gets whether the "min_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBet {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "min_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBet() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "middle_bet" field.</summary>
    public const int MiddleBetFieldNumber = 21;
    private readonly static int MiddleBetDefaultValue = 0;

    private int middleBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MiddleBet {
      get { if ((_hasBits0 & 65536) != 0) { return middleBet_; } else { return MiddleBetDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        middleBet_ = value;
      }
    }
    /// <summary>Gets whether the "middle_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMiddleBet {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "middle_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMiddleBet() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "high_bet" field.</summary>
    public const int HighBetFieldNumber = 22;
    private readonly static int HighBetDefaultValue = 0;

    private int highBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HighBet {
      get { if ((_hasBits0 & 131072) != 0) { return highBet_; } else { return HighBetDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        highBet_ = value;
      }
    }
    /// <summary>Gets whether the "high_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighBet {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "high_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighBet() {
      _hasBits0 &= ~131072;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MultipleTableRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MultipleTableRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (Clubid != other.Clubid) return false;
      if (Roomtype != other.Roomtype) return false;
      if (IsSatellite != other.IsSatellite) return false;
      if (Official != other.Official) return false;
      if (IsInsurance != other.IsInsurance) return false;
      if (RoomMode != other.RoomMode) return false;
      if (GameMode != other.GameMode) return false;
      if (SeatNum != other.SeatNum) return false;
      if (Blind != other.Blind) return false;
      if (RoomName != other.RoomName) return false;
      if (DefaultBuyin != other.DefaultBuyin) return false;
      if (Tid != other.Tid) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (Passwd != other.Passwd) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (Ppstid != other.Ppstid) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (MinBet != other.MinBet) return false;
      if (MiddleBet != other.MiddleBet) return false;
      if (HighBet != other.HighBet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasRoomtype) hash ^= Roomtype.GetHashCode();
      if (HasIsSatellite) hash ^= IsSatellite.GetHashCode();
      if (HasOfficial) hash ^= Official.GetHashCode();
      if (HasIsInsurance) hash ^= IsInsurance.GetHashCode();
      if (HasRoomMode) hash ^= RoomMode.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasDefaultBuyin) hash ^= DefaultBuyin.GetHashCode();
      if (HasTid) hash ^= Tid.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasPasswd) hash ^= Passwd.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasPpstid) hash ^= Ppstid.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasMinBet) hash ^= MinBet.GetHashCode();
      if (HasMiddleBet) hash ^= MiddleBet.GetHashCode();
      if (HasHighBet) hash ^= HighBet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasRoomtype) {
        output.WriteRawTag(24);
        output.WriteInt32(Roomtype);
      }
      if (HasIsSatellite) {
        output.WriteRawTag(32);
        output.WriteInt32(IsSatellite);
      }
      if (HasOfficial) {
        output.WriteRawTag(40);
        output.WriteInt32(Official);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(48);
        output.WriteInt32(IsInsurance);
      }
      if (HasRoomMode) {
        output.WriteRawTag(56);
        output.WriteEnum((int) RoomMode);
      }
      if (HasGameMode) {
        output.WriteRawTag(64);
        output.WriteEnum((int) GameMode);
      }
      if (HasSeatNum) {
        output.WriteRawTag(72);
        output.WriteInt32(SeatNum);
      }
      if (HasBlind) {
        output.WriteRawTag(80);
        output.WriteInt64(Blind);
      }
      if (HasRoomName) {
        output.WriteRawTag(90);
        output.WriteString(RoomName);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(96);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasTid) {
        output.WriteRawTag(104);
        output.WriteInt32(Tid);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(112);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(122);
        output.WriteString(Passwd);
      }
      if (HasLeagueid) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasPpstid) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Ppstid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Ppsrid);
      }
      if (HasMinBet) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MinBet);
      }
      if (HasMiddleBet) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MiddleBet);
      }
      if (HasHighBet) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(HighBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasRoomtype) {
        output.WriteRawTag(24);
        output.WriteInt32(Roomtype);
      }
      if (HasIsSatellite) {
        output.WriteRawTag(32);
        output.WriteInt32(IsSatellite);
      }
      if (HasOfficial) {
        output.WriteRawTag(40);
        output.WriteInt32(Official);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(48);
        output.WriteInt32(IsInsurance);
      }
      if (HasRoomMode) {
        output.WriteRawTag(56);
        output.WriteEnum((int) RoomMode);
      }
      if (HasGameMode) {
        output.WriteRawTag(64);
        output.WriteEnum((int) GameMode);
      }
      if (HasSeatNum) {
        output.WriteRawTag(72);
        output.WriteInt32(SeatNum);
      }
      if (HasBlind) {
        output.WriteRawTag(80);
        output.WriteInt64(Blind);
      }
      if (HasRoomName) {
        output.WriteRawTag(90);
        output.WriteString(RoomName);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(96);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasTid) {
        output.WriteRawTag(104);
        output.WriteInt32(Tid);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(112);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(122);
        output.WriteString(Passwd);
      }
      if (HasLeagueid) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasPpstid) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Ppstid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Ppsrid);
      }
      if (HasMinBet) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MinBet);
      }
      if (HasMiddleBet) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MiddleBet);
      }
      if (HasHighBet) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(HighBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasRoomtype) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomtype);
      }
      if (HasIsSatellite) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSatellite);
      }
      if (HasOfficial) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Official);
      }
      if (HasIsInsurance) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsInsurance);
      }
      if (HasRoomMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
      }
      if (HasGameMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasDefaultBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefaultBuyin);
      }
      if (HasTid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (HasPasswdLimit) {
        size += 1 + 1;
      }
      if (HasPasswd) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasPpstid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppstid);
      }
      if (HasPpsrid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasMinBet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinBet);
      }
      if (HasMiddleBet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MiddleBet);
      }
      if (HasHighBet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HighBet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MultipleTableRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasRoomtype) {
        Roomtype = other.Roomtype;
      }
      if (other.HasIsSatellite) {
        IsSatellite = other.IsSatellite;
      }
      if (other.HasOfficial) {
        Official = other.Official;
      }
      if (other.HasIsInsurance) {
        IsInsurance = other.IsInsurance;
      }
      if (other.HasRoomMode) {
        RoomMode = other.RoomMode;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasDefaultBuyin) {
        DefaultBuyin = other.DefaultBuyin;
      }
      if (other.HasTid) {
        Tid = other.Tid;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasPasswd) {
        Passwd = other.Passwd;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasPpstid) {
        Ppstid = other.Ppstid;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasMinBet) {
        MinBet = other.MinBet;
      }
      if (other.HasMiddleBet) {
        MiddleBet = other.MiddleBet;
      }
      if (other.HasHighBet) {
        HighBet = other.HighBet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Roomtype = input.ReadInt32();
            break;
          }
          case 32: {
            IsSatellite = input.ReadInt32();
            break;
          }
          case 40: {
            Official = input.ReadInt32();
            break;
          }
          case 48: {
            IsInsurance = input.ReadInt32();
            break;
          }
          case 56: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 64: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 72: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 80: {
            Blind = input.ReadInt64();
            break;
          }
          case 90: {
            RoomName = input.ReadString();
            break;
          }
          case 96: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 104: {
            Tid = input.ReadInt32();
            break;
          }
          case 112: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 122: {
            Passwd = input.ReadString();
            break;
          }
          case 128: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 136: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 144: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 152: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 160: {
            MinBet = input.ReadInt32();
            break;
          }
          case 168: {
            MiddleBet = input.ReadInt32();
            break;
          }
          case 176: {
            HighBet = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Roomtype = input.ReadInt32();
            break;
          }
          case 32: {
            IsSatellite = input.ReadInt32();
            break;
          }
          case 40: {
            Official = input.ReadInt32();
            break;
          }
          case 48: {
            IsInsurance = input.ReadInt32();
            break;
          }
          case 56: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 64: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 72: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 80: {
            Blind = input.ReadInt64();
            break;
          }
          case 90: {
            RoomName = input.ReadString();
            break;
          }
          case 96: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 104: {
            Tid = input.ReadInt32();
            break;
          }
          case 112: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 122: {
            Passwd = input.ReadString();
            break;
          }
          case 128: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 136: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 144: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 152: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 160: {
            MinBet = input.ReadInt32();
            break;
          }
          case 168: {
            MiddleBet = input.ReadInt32();
            break;
          }
          case 176: {
            HighBet = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayingStatus : pb::IMessage<PlayingStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayingStatus> _parser = new pb::MessageParser<PlayingStatus>(() => new PlayingStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayingStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayingStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayingStatus(PlayingStatus other) : this() {
      _hasBits0 = other._hasBits0;
      cards_ = other.cards_.Clone();
      card2_ = other.card2_;
      actionSeatid_ = other.actionSeatid_;
      actionData_ = other.actionData_ != null ? other.actionData_.Clone() : null;
      minChipin_ = other.minChipin_;
      maxChipin_ = other.maxChipin_;
      actionTime_ = other.actionTime_;
      addActionTimeCost_ = other.addActionTimeCost_;
      card3_ = other.card3_;
      card4_ = other.card4_;
      showStraddle_ = other.showStraddle_;
      role_ = other.role_;
      roomAuthority_ = other.roomAuthority_;
      preActionType_ = other.preActionType_;
      preActionChips_ = other.preActionChips_;
      bannedTalk_ = other.bannedTalk_;
      croupierTipTimes_ = other.croupierTipTimes_;
      card5_ = other.card5_;
      isDelayTime_ = other.isDelayTime_;
      isUsingTimebank_ = other.isUsingTimebank_;
      isBookSeatConfirmed_ = other.isBookSeatConfirmed_;
      dealerChooseTime_ = other.dealerChooseTime_;
      evchopInfo_ = other.evchopInfo_ != null ? other.evchopInfo_.Clone() : null;
      defaultCard_ = other.defaultCard_;
      userDiscardCard_ = other.userDiscardCard_;
      isAgreeDivide_ = other.isAgreeDivide_;
      hadHandSqueeze_ = other.hadHandSqueeze_;
      firstActionTimePass_ = other.firstActionTimePass_;
      card6_ = other.card6_;
      canViewHand_ = other.canViewHand_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayingStatus Clone() {
      return new PlayingStatus(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cards_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "card2" field.</summary>
    public const int Card2FieldNumber = 2;
    private readonly static int Card2DefaultValue = 0;

    private int card2_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card2 {
      get { if ((_hasBits0 & 1) != 0) { return card2_; } else { return Card2DefaultValue; } }
      set {
        _hasBits0 |= 1;
        card2_ = value;
      }
    }
    /// <summary>Gets whether the "card2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard2 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "card2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard2() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_seatid" field.</summary>
    public const int ActionSeatidFieldNumber = 3;
    private readonly static int ActionSeatidDefaultValue = 0;

    private int actionSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionSeatid {
      get { if ((_hasBits0 & 2) != 0) { return actionSeatid_; } else { return ActionSeatidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "action_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionSeatid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionSeatid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "action_data" field.</summary>
    public const int ActionDataFieldNumber = 4;
    private global::Texas.Protocol.ActionData actionData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ActionData ActionData {
      get { return actionData_; }
      set {
        actionData_ = value;
      }
    }

    /// <summary>Field number for the "min_chipin" field.</summary>
    public const int MinChipinFieldNumber = 5;
    private readonly static long MinChipinDefaultValue = 0L;

    private long minChipin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinChipin {
      get { if ((_hasBits0 & 4) != 0) { return minChipin_; } else { return MinChipinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minChipin_ = value;
      }
    }
    /// <summary>Gets whether the "min_chipin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinChipin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_chipin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinChipin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_chipin" field.</summary>
    public const int MaxChipinFieldNumber = 6;
    private readonly static long MaxChipinDefaultValue = 0L;

    private long maxChipin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxChipin {
      get { if ((_hasBits0 & 8) != 0) { return maxChipin_; } else { return MaxChipinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxChipin_ = value;
      }
    }
    /// <summary>Gets whether the "max_chipin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxChipin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_chipin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxChipin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 7;
    private readonly static int ActionTimeDefaultValue = 0;

    private int actionTime_;
    /// <summary>
    ///还剩下的行动时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionTime {
      get { if ((_hasBits0 & 16) != 0) { return actionTime_; } else { return ActionTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        actionTime_ = value;
      }
    }
    /// <summary>Gets whether the "action_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "action_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "add_action_time_cost" field.</summary>
    public const int AddActionTimeCostFieldNumber = 8;
    private readonly static int AddActionTimeCostDefaultValue = 0;

    private int addActionTimeCost_;
    /// <summary>
    ///延时花费， -1表示延时不可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddActionTimeCost {
      get { if ((_hasBits0 & 32) != 0) { return addActionTimeCost_; } else { return AddActionTimeCostDefaultValue; } }
      set {
        _hasBits0 |= 32;
        addActionTimeCost_ = value;
      }
    }
    /// <summary>Gets whether the "add_action_time_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddActionTimeCost {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "add_action_time_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddActionTimeCost() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "card3" field.</summary>
    public const int Card3FieldNumber = 9;
    private readonly static int Card3DefaultValue = 0;

    private int card3_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card3 {
      get { if ((_hasBits0 & 64) != 0) { return card3_; } else { return Card3DefaultValue; } }
      set {
        _hasBits0 |= 64;
        card3_ = value;
      }
    }
    /// <summary>Gets whether the "card3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard3 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "card3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard3() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "card4" field.</summary>
    public const int Card4FieldNumber = 10;
    private readonly static int Card4DefaultValue = 0;

    private int card4_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card4 {
      get { if ((_hasBits0 & 128) != 0) { return card4_; } else { return Card4DefaultValue; } }
      set {
        _hasBits0 |= 128;
        card4_ = value;
      }
    }
    /// <summary>Gets whether the "card4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard4 {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "card4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard4() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "show_straddle" field.</summary>
    public const int ShowStraddleFieldNumber = 11;
    private readonly static bool ShowStraddleDefaultValue = false;

    private bool showStraddle_;
    /// <summary>
    ///显示straddle按钮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShowStraddle {
      get { if ((_hasBits0 & 256) != 0) { return showStraddle_; } else { return ShowStraddleDefaultValue; } }
      set {
        _hasBits0 |= 256;
        showStraddle_ = value;
      }
    }
    /// <summary>Gets whether the "show_straddle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShowStraddle {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "show_straddle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShowStraddle() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 12;
    private readonly static int RoleDefaultValue = 0;

    private int role_;
    /// <summary>
    ///在俱乐部中的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Role {
      get { if ((_hasBits0 & 512) != 0) { return role_; } else { return RoleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        role_ = value;
      }
    }
    /// <summary>Gets whether the "role" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRole {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "role" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRole() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "room_authority" field.</summary>
    public const int RoomAuthorityFieldNumber = 13;
    private readonly static bool RoomAuthorityDefaultValue = false;

    private bool roomAuthority_;
    /// <summary>
    ///对房间操作的权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RoomAuthority {
      get { if ((_hasBits0 & 1024) != 0) { return roomAuthority_; } else { return RoomAuthorityDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        roomAuthority_ = value;
      }
    }
    /// <summary>Gets whether the "room_authority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomAuthority {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "room_authority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomAuthority() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "pre_action_type" field.</summary>
    public const int PreActionTypeFieldNumber = 14;
    private readonly static int PreActionTypeDefaultValue = 0;

    private int preActionType_;
    /// <summary>
    ///预操作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreActionType {
      get { if ((_hasBits0 & 2048) != 0) { return preActionType_; } else { return PreActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        preActionType_ = value;
      }
    }
    /// <summary>Gets whether the "pre_action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreActionType {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "pre_action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreActionType() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "pre_action_chips" field.</summary>
    public const int PreActionChipsFieldNumber = 15;
    private readonly static long PreActionChipsDefaultValue = 0L;

    private long preActionChips_;
    /// <summary>
    ///预 call chips
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PreActionChips {
      get { if ((_hasBits0 & 4096) != 0) { return preActionChips_; } else { return PreActionChipsDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        preActionChips_ = value;
      }
    }
    /// <summary>Gets whether the "pre_action_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreActionChips {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "pre_action_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreActionChips() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "banned_talk" field.</summary>
    public const int BannedTalkFieldNumber = 16;
    private readonly static bool BannedTalkDefaultValue = false;

    private bool bannedTalk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BannedTalk {
      get { if ((_hasBits0 & 8192) != 0) { return bannedTalk_; } else { return BannedTalkDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        bannedTalk_ = value;
      }
    }
    /// <summary>Gets whether the "banned_talk" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBannedTalk {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "banned_talk" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBannedTalk() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "croupier_tip_times" field.</summary>
    public const int CroupierTipTimesFieldNumber = 17;
    private readonly static int CroupierTipTimesDefaultValue = 0;

    private int croupierTipTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CroupierTipTimes {
      get { if ((_hasBits0 & 16384) != 0) { return croupierTipTimes_; } else { return CroupierTipTimesDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        croupierTipTimes_ = value;
      }
    }
    /// <summary>Gets whether the "croupier_tip_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCroupierTipTimes {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "croupier_tip_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCroupierTipTimes() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "card5" field.</summary>
    public const int Card5FieldNumber = 18;
    private readonly static int Card5DefaultValue = 0;

    private int card5_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card5 {
      get { if ((_hasBits0 & 32768) != 0) { return card5_; } else { return Card5DefaultValue; } }
      set {
        _hasBits0 |= 32768;
        card5_ = value;
      }
    }
    /// <summary>Gets whether the "card5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard5 {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "card5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard5() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "is_delay_time" field.</summary>
    public const int IsDelayTimeFieldNumber = 19;
    private readonly static bool IsDelayTimeDefaultValue = false;

    private bool isDelayTime_;
    /// <summary>
    ///是否正在延时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDelayTime {
      get { if ((_hasBits0 & 65536) != 0) { return isDelayTime_; } else { return IsDelayTimeDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        isDelayTime_ = value;
      }
    }
    /// <summary>Gets whether the "is_delay_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsDelayTime {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "is_delay_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsDelayTime() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "is_using_timebank" field.</summary>
    public const int IsUsingTimebankFieldNumber = 20;
    private readonly static bool IsUsingTimebankDefaultValue = false;

    private bool isUsingTimebank_;
    /// <summary>
    ///是否正在使用时间银行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsingTimebank {
      get { if ((_hasBits0 & 131072) != 0) { return isUsingTimebank_; } else { return IsUsingTimebankDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        isUsingTimebank_ = value;
      }
    }
    /// <summary>Gets whether the "is_using_timebank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsingTimebank {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "is_using_timebank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsingTimebank() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "is_book_seat_confirmed" field.</summary>
    public const int IsBookSeatConfirmedFieldNumber = 21;
    private readonly static bool IsBookSeatConfirmedDefaultValue = false;

    private bool isBookSeatConfirmed_;
    /// <summary>
    ///预定座位是否已确认
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBookSeatConfirmed {
      get { if ((_hasBits0 & 262144) != 0) { return isBookSeatConfirmed_; } else { return IsBookSeatConfirmedDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        isBookSeatConfirmed_ = value;
      }
    }
    /// <summary>Gets whether the "is_book_seat_confirmed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBookSeatConfirmed {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_book_seat_confirmed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBookSeatConfirmed() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "dealer_choose_time" field.</summary>
    public const int DealerChooseTimeFieldNumber = 22;
    private readonly static int DealerChooseTimeDefaultValue = 0;

    private int dealerChooseTime_;
    /// <summary>
    ///还剩下的选择时间(混合游戏)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DealerChooseTime {
      get { if ((_hasBits0 & 524288) != 0) { return dealerChooseTime_; } else { return DealerChooseTimeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        dealerChooseTime_ = value;
      }
    }
    /// <summary>Gets whether the "dealer_choose_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDealerChooseTime {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "dealer_choose_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDealerChooseTime() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "evchop_info" field.</summary>
    public const int EvchopInfoFieldNumber = 23;
    private global::Texas.Protocol.EvChopInfoBRC evchopInfo_;
    /// <summary>
    ///提前兑换信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.EvChopInfoBRC EvchopInfo {
      get { return evchopInfo_; }
      set {
        evchopInfo_ = value;
      }
    }

    /// <summary>Field number for the "default_card" field.</summary>
    public const int DefaultCardFieldNumber = 24;
    private readonly static int DefaultCardDefaultValue = 0;

    private int defaultCard_;
    /// <summary>
    ///德州默认弃牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefaultCard {
      get { if ((_hasBits0 & 1048576) != 0) { return defaultCard_; } else { return DefaultCardDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        defaultCard_ = value;
      }
    }
    /// <summary>Gets whether the "default_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefaultCard {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "default_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefaultCard() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "user_discard_card" field.</summary>
    public const int UserDiscardCardFieldNumber = 25;
    private readonly static int UserDiscardCardDefaultValue = 0;

    private int userDiscardCard_;
    /// <summary>
    ///玩家弃牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UserDiscardCard {
      get { if ((_hasBits0 & 2097152) != 0) { return userDiscardCard_; } else { return UserDiscardCardDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        userDiscardCard_ = value;
      }
    }
    /// <summary>Gets whether the "user_discard_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserDiscardCard {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "user_discard_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserDiscardCard() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "is_agree_divide" field.</summary>
    public const int IsAgreeDivideFieldNumber = 26;
    private readonly static bool IsAgreeDivideDefaultValue = false;

    private bool isAgreeDivide_;
    /// <summary>
    ///玩家是否操作同意协商分池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAgreeDivide {
      get { if ((_hasBits0 & 4194304) != 0) { return isAgreeDivide_; } else { return IsAgreeDivideDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        isAgreeDivide_ = value;
      }
    }
    /// <summary>Gets whether the "is_agree_divide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAgreeDivide {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "is_agree_divide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAgreeDivide() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "had_hand_squeeze" field.</summary>
    public const int HadHandSqueezeFieldNumber = 27;
    private readonly static bool HadHandSqueezeDefaultValue = false;

    private bool hadHandSqueeze_;
    /// <summary>
    ///记录是否眯手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HadHandSqueeze {
      get { if ((_hasBits0 & 8388608) != 0) { return hadHandSqueeze_; } else { return HadHandSqueezeDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        hadHandSqueeze_ = value;
      }
    }
    /// <summary>Gets whether the "had_hand_squeeze" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHadHandSqueeze {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "had_hand_squeeze" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHadHandSqueeze() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "first_action_time_pass" field.</summary>
    public const int FirstActionTimePassFieldNumber = 28;
    private readonly static long FirstActionTimePassDefaultValue = 0L;

    private long firstActionTimePass_;
    /// <summary>
    /// 距离首次轮到开始行动的流逝时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FirstActionTimePass {
      get { if ((_hasBits0 & 16777216) != 0) { return firstActionTimePass_; } else { return FirstActionTimePassDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        firstActionTimePass_ = value;
      }
    }
    /// <summary>Gets whether the "first_action_time_pass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstActionTimePass {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "first_action_time_pass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstActionTimePass() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "card6" field.</summary>
    public const int Card6FieldNumber = 29;
    private readonly static int Card6DefaultValue = 0;

    private int card6_;
    /// <summary>
    /// plo6 //废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card6 {
      get { if ((_hasBits0 & 33554432) != 0) { return card6_; } else { return Card6DefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        card6_ = value;
      }
    }
    /// <summary>Gets whether the "card6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard6 {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "card6" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard6() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "can_view_hand" field.</summary>
    public const int CanViewHandFieldNumber = 30;
    private readonly static bool CanViewHandDefaultValue = false;

    private bool canViewHand_;
    /// <summary>
    /// 現階段是否能看到自己的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanViewHand {
      get { if ((_hasBits0 & 67108864) != 0) { return canViewHand_; } else { return CanViewHandDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        canViewHand_ = value;
      }
    }
    /// <summary>Gets whether the "can_view_hand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanViewHand {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "can_view_hand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanViewHand() {
      _hasBits0 &= ~67108864;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayingStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayingStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      if (Card2 != other.Card2) return false;
      if (ActionSeatid != other.ActionSeatid) return false;
      if (!object.Equals(ActionData, other.ActionData)) return false;
      if (MinChipin != other.MinChipin) return false;
      if (MaxChipin != other.MaxChipin) return false;
      if (ActionTime != other.ActionTime) return false;
      if (AddActionTimeCost != other.AddActionTimeCost) return false;
      if (Card3 != other.Card3) return false;
      if (Card4 != other.Card4) return false;
      if (ShowStraddle != other.ShowStraddle) return false;
      if (Role != other.Role) return false;
      if (RoomAuthority != other.RoomAuthority) return false;
      if (PreActionType != other.PreActionType) return false;
      if (PreActionChips != other.PreActionChips) return false;
      if (BannedTalk != other.BannedTalk) return false;
      if (CroupierTipTimes != other.CroupierTipTimes) return false;
      if (Card5 != other.Card5) return false;
      if (IsDelayTime != other.IsDelayTime) return false;
      if (IsUsingTimebank != other.IsUsingTimebank) return false;
      if (IsBookSeatConfirmed != other.IsBookSeatConfirmed) return false;
      if (DealerChooseTime != other.DealerChooseTime) return false;
      if (!object.Equals(EvchopInfo, other.EvchopInfo)) return false;
      if (DefaultCard != other.DefaultCard) return false;
      if (UserDiscardCard != other.UserDiscardCard) return false;
      if (IsAgreeDivide != other.IsAgreeDivide) return false;
      if (HadHandSqueeze != other.HadHandSqueeze) return false;
      if (FirstActionTimePass != other.FirstActionTimePass) return false;
      if (Card6 != other.Card6) return false;
      if (CanViewHand != other.CanViewHand) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (HasCard2) hash ^= Card2.GetHashCode();
      if (HasActionSeatid) hash ^= ActionSeatid.GetHashCode();
      if (actionData_ != null) hash ^= ActionData.GetHashCode();
      if (HasMinChipin) hash ^= MinChipin.GetHashCode();
      if (HasMaxChipin) hash ^= MaxChipin.GetHashCode();
      if (HasActionTime) hash ^= ActionTime.GetHashCode();
      if (HasAddActionTimeCost) hash ^= AddActionTimeCost.GetHashCode();
      if (HasCard3) hash ^= Card3.GetHashCode();
      if (HasCard4) hash ^= Card4.GetHashCode();
      if (HasShowStraddle) hash ^= ShowStraddle.GetHashCode();
      if (HasRole) hash ^= Role.GetHashCode();
      if (HasRoomAuthority) hash ^= RoomAuthority.GetHashCode();
      if (HasPreActionType) hash ^= PreActionType.GetHashCode();
      if (HasPreActionChips) hash ^= PreActionChips.GetHashCode();
      if (HasBannedTalk) hash ^= BannedTalk.GetHashCode();
      if (HasCroupierTipTimes) hash ^= CroupierTipTimes.GetHashCode();
      if (HasCard5) hash ^= Card5.GetHashCode();
      if (HasIsDelayTime) hash ^= IsDelayTime.GetHashCode();
      if (HasIsUsingTimebank) hash ^= IsUsingTimebank.GetHashCode();
      if (HasIsBookSeatConfirmed) hash ^= IsBookSeatConfirmed.GetHashCode();
      if (HasDealerChooseTime) hash ^= DealerChooseTime.GetHashCode();
      if (evchopInfo_ != null) hash ^= EvchopInfo.GetHashCode();
      if (HasDefaultCard) hash ^= DefaultCard.GetHashCode();
      if (HasUserDiscardCard) hash ^= UserDiscardCard.GetHashCode();
      if (HasIsAgreeDivide) hash ^= IsAgreeDivide.GetHashCode();
      if (HasHadHandSqueeze) hash ^= HadHandSqueeze.GetHashCode();
      if (HasFirstActionTimePass) hash ^= FirstActionTimePass.GetHashCode();
      if (HasCard6) hash ^= Card6.GetHashCode();
      if (HasCanViewHand) hash ^= CanViewHand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (HasCard2) {
        output.WriteRawTag(16);
        output.WriteInt32(Card2);
      }
      if (HasActionSeatid) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionSeatid);
      }
      if (actionData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionData);
      }
      if (HasMinChipin) {
        output.WriteRawTag(40);
        output.WriteInt64(MinChipin);
      }
      if (HasMaxChipin) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxChipin);
      }
      if (HasActionTime) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionTime);
      }
      if (HasAddActionTimeCost) {
        output.WriteRawTag(64);
        output.WriteInt32(AddActionTimeCost);
      }
      if (HasCard3) {
        output.WriteRawTag(72);
        output.WriteInt32(Card3);
      }
      if (HasCard4) {
        output.WriteRawTag(80);
        output.WriteInt32(Card4);
      }
      if (HasShowStraddle) {
        output.WriteRawTag(88);
        output.WriteBool(ShowStraddle);
      }
      if (HasRole) {
        output.WriteRawTag(96);
        output.WriteInt32(Role);
      }
      if (HasRoomAuthority) {
        output.WriteRawTag(104);
        output.WriteBool(RoomAuthority);
      }
      if (HasPreActionType) {
        output.WriteRawTag(112);
        output.WriteInt32(PreActionType);
      }
      if (HasPreActionChips) {
        output.WriteRawTag(120);
        output.WriteInt64(PreActionChips);
      }
      if (HasBannedTalk) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BannedTalk);
      }
      if (HasCroupierTipTimes) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CroupierTipTimes);
      }
      if (HasCard5) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Card5);
      }
      if (HasIsDelayTime) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsDelayTime);
      }
      if (HasIsUsingTimebank) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsUsingTimebank);
      }
      if (HasIsBookSeatConfirmed) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsBookSeatConfirmed);
      }
      if (HasDealerChooseTime) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(DealerChooseTime);
      }
      if (evchopInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EvchopInfo);
      }
      if (HasDefaultCard) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DefaultCard);
      }
      if (HasUserDiscardCard) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(UserDiscardCard);
      }
      if (HasIsAgreeDivide) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsAgreeDivide);
      }
      if (HasHadHandSqueeze) {
        output.WriteRawTag(216, 1);
        output.WriteBool(HadHandSqueeze);
      }
      if (HasFirstActionTimePass) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(FirstActionTimePass);
      }
      if (HasCard6) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Card6);
      }
      if (HasCanViewHand) {
        output.WriteRawTag(240, 1);
        output.WriteBool(CanViewHand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (HasCard2) {
        output.WriteRawTag(16);
        output.WriteInt32(Card2);
      }
      if (HasActionSeatid) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionSeatid);
      }
      if (actionData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionData);
      }
      if (HasMinChipin) {
        output.WriteRawTag(40);
        output.WriteInt64(MinChipin);
      }
      if (HasMaxChipin) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxChipin);
      }
      if (HasActionTime) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionTime);
      }
      if (HasAddActionTimeCost) {
        output.WriteRawTag(64);
        output.WriteInt32(AddActionTimeCost);
      }
      if (HasCard3) {
        output.WriteRawTag(72);
        output.WriteInt32(Card3);
      }
      if (HasCard4) {
        output.WriteRawTag(80);
        output.WriteInt32(Card4);
      }
      if (HasShowStraddle) {
        output.WriteRawTag(88);
        output.WriteBool(ShowStraddle);
      }
      if (HasRole) {
        output.WriteRawTag(96);
        output.WriteInt32(Role);
      }
      if (HasRoomAuthority) {
        output.WriteRawTag(104);
        output.WriteBool(RoomAuthority);
      }
      if (HasPreActionType) {
        output.WriteRawTag(112);
        output.WriteInt32(PreActionType);
      }
      if (HasPreActionChips) {
        output.WriteRawTag(120);
        output.WriteInt64(PreActionChips);
      }
      if (HasBannedTalk) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BannedTalk);
      }
      if (HasCroupierTipTimes) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CroupierTipTimes);
      }
      if (HasCard5) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Card5);
      }
      if (HasIsDelayTime) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsDelayTime);
      }
      if (HasIsUsingTimebank) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsUsingTimebank);
      }
      if (HasIsBookSeatConfirmed) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsBookSeatConfirmed);
      }
      if (HasDealerChooseTime) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(DealerChooseTime);
      }
      if (evchopInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EvchopInfo);
      }
      if (HasDefaultCard) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DefaultCard);
      }
      if (HasUserDiscardCard) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(UserDiscardCard);
      }
      if (HasIsAgreeDivide) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsAgreeDivide);
      }
      if (HasHadHandSqueeze) {
        output.WriteRawTag(216, 1);
        output.WriteBool(HadHandSqueeze);
      }
      if (HasFirstActionTimePass) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(FirstActionTimePass);
      }
      if (HasCard6) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Card6);
      }
      if (HasCanViewHand) {
        output.WriteRawTag(240, 1);
        output.WriteBool(CanViewHand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (HasCard2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card2);
      }
      if (HasActionSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionSeatid);
      }
      if (actionData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionData);
      }
      if (HasMinChipin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinChipin);
      }
      if (HasMaxChipin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxChipin);
      }
      if (HasActionTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTime);
      }
      if (HasAddActionTimeCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddActionTimeCost);
      }
      if (HasCard3) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card3);
      }
      if (HasCard4) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card4);
      }
      if (HasShowStraddle) {
        size += 1 + 1;
      }
      if (HasRole) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      if (HasRoomAuthority) {
        size += 1 + 1;
      }
      if (HasPreActionType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreActionType);
      }
      if (HasPreActionChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreActionChips);
      }
      if (HasBannedTalk) {
        size += 2 + 1;
      }
      if (HasCroupierTipTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CroupierTipTimes);
      }
      if (HasCard5) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card5);
      }
      if (HasIsDelayTime) {
        size += 2 + 1;
      }
      if (HasIsUsingTimebank) {
        size += 2 + 1;
      }
      if (HasIsBookSeatConfirmed) {
        size += 2 + 1;
      }
      if (HasDealerChooseTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DealerChooseTime);
      }
      if (evchopInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EvchopInfo);
      }
      if (HasDefaultCard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultCard);
      }
      if (HasUserDiscardCard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserDiscardCard);
      }
      if (HasIsAgreeDivide) {
        size += 2 + 1;
      }
      if (HasHadHandSqueeze) {
        size += 2 + 1;
      }
      if (HasFirstActionTimePass) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FirstActionTimePass);
      }
      if (HasCard6) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card6);
      }
      if (HasCanViewHand) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayingStatus other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      if (other.HasCard2) {
        Card2 = other.Card2;
      }
      if (other.HasActionSeatid) {
        ActionSeatid = other.ActionSeatid;
      }
      if (other.actionData_ != null) {
        if (actionData_ == null) {
          ActionData = new global::Texas.Protocol.ActionData();
        }
        ActionData.MergeFrom(other.ActionData);
      }
      if (other.HasMinChipin) {
        MinChipin = other.MinChipin;
      }
      if (other.HasMaxChipin) {
        MaxChipin = other.MaxChipin;
      }
      if (other.HasActionTime) {
        ActionTime = other.ActionTime;
      }
      if (other.HasAddActionTimeCost) {
        AddActionTimeCost = other.AddActionTimeCost;
      }
      if (other.HasCard3) {
        Card3 = other.Card3;
      }
      if (other.HasCard4) {
        Card4 = other.Card4;
      }
      if (other.HasShowStraddle) {
        ShowStraddle = other.ShowStraddle;
      }
      if (other.HasRole) {
        Role = other.Role;
      }
      if (other.HasRoomAuthority) {
        RoomAuthority = other.RoomAuthority;
      }
      if (other.HasPreActionType) {
        PreActionType = other.PreActionType;
      }
      if (other.HasPreActionChips) {
        PreActionChips = other.PreActionChips;
      }
      if (other.HasBannedTalk) {
        BannedTalk = other.BannedTalk;
      }
      if (other.HasCroupierTipTimes) {
        CroupierTipTimes = other.CroupierTipTimes;
      }
      if (other.HasCard5) {
        Card5 = other.Card5;
      }
      if (other.HasIsDelayTime) {
        IsDelayTime = other.IsDelayTime;
      }
      if (other.HasIsUsingTimebank) {
        IsUsingTimebank = other.IsUsingTimebank;
      }
      if (other.HasIsBookSeatConfirmed) {
        IsBookSeatConfirmed = other.IsBookSeatConfirmed;
      }
      if (other.HasDealerChooseTime) {
        DealerChooseTime = other.DealerChooseTime;
      }
      if (other.evchopInfo_ != null) {
        if (evchopInfo_ == null) {
          EvchopInfo = new global::Texas.Protocol.EvChopInfoBRC();
        }
        EvchopInfo.MergeFrom(other.EvchopInfo);
      }
      if (other.HasDefaultCard) {
        DefaultCard = other.DefaultCard;
      }
      if (other.HasUserDiscardCard) {
        UserDiscardCard = other.UserDiscardCard;
      }
      if (other.HasIsAgreeDivide) {
        IsAgreeDivide = other.IsAgreeDivide;
      }
      if (other.HasHadHandSqueeze) {
        HadHandSqueeze = other.HadHandSqueeze;
      }
      if (other.HasFirstActionTimePass) {
        FirstActionTimePass = other.FirstActionTimePass;
      }
      if (other.HasCard6) {
        Card6 = other.Card6;
      }
      if (other.HasCanViewHand) {
        CanViewHand = other.CanViewHand;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 16: {
            Card2 = input.ReadInt32();
            break;
          }
          case 24: {
            ActionSeatid = input.ReadInt32();
            break;
          }
          case 34: {
            if (actionData_ == null) {
              ActionData = new global::Texas.Protocol.ActionData();
            }
            input.ReadMessage(ActionData);
            break;
          }
          case 40: {
            MinChipin = input.ReadInt64();
            break;
          }
          case 48: {
            MaxChipin = input.ReadInt64();
            break;
          }
          case 56: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 64: {
            AddActionTimeCost = input.ReadInt32();
            break;
          }
          case 72: {
            Card3 = input.ReadInt32();
            break;
          }
          case 80: {
            Card4 = input.ReadInt32();
            break;
          }
          case 88: {
            ShowStraddle = input.ReadBool();
            break;
          }
          case 96: {
            Role = input.ReadInt32();
            break;
          }
          case 104: {
            RoomAuthority = input.ReadBool();
            break;
          }
          case 112: {
            PreActionType = input.ReadInt32();
            break;
          }
          case 120: {
            PreActionChips = input.ReadInt64();
            break;
          }
          case 128: {
            BannedTalk = input.ReadBool();
            break;
          }
          case 136: {
            CroupierTipTimes = input.ReadInt32();
            break;
          }
          case 144: {
            Card5 = input.ReadInt32();
            break;
          }
          case 152: {
            IsDelayTime = input.ReadBool();
            break;
          }
          case 160: {
            IsUsingTimebank = input.ReadBool();
            break;
          }
          case 168: {
            IsBookSeatConfirmed = input.ReadBool();
            break;
          }
          case 176: {
            DealerChooseTime = input.ReadInt32();
            break;
          }
          case 186: {
            if (evchopInfo_ == null) {
              EvchopInfo = new global::Texas.Protocol.EvChopInfoBRC();
            }
            input.ReadMessage(EvchopInfo);
            break;
          }
          case 192: {
            DefaultCard = input.ReadInt32();
            break;
          }
          case 200: {
            UserDiscardCard = input.ReadInt32();
            break;
          }
          case 208: {
            IsAgreeDivide = input.ReadBool();
            break;
          }
          case 216: {
            HadHandSqueeze = input.ReadBool();
            break;
          }
          case 224: {
            FirstActionTimePass = input.ReadInt64();
            break;
          }
          case 232: {
            Card6 = input.ReadInt32();
            break;
          }
          case 240: {
            CanViewHand = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
          case 16: {
            Card2 = input.ReadInt32();
            break;
          }
          case 24: {
            ActionSeatid = input.ReadInt32();
            break;
          }
          case 34: {
            if (actionData_ == null) {
              ActionData = new global::Texas.Protocol.ActionData();
            }
            input.ReadMessage(ActionData);
            break;
          }
          case 40: {
            MinChipin = input.ReadInt64();
            break;
          }
          case 48: {
            MaxChipin = input.ReadInt64();
            break;
          }
          case 56: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 64: {
            AddActionTimeCost = input.ReadInt32();
            break;
          }
          case 72: {
            Card3 = input.ReadInt32();
            break;
          }
          case 80: {
            Card4 = input.ReadInt32();
            break;
          }
          case 88: {
            ShowStraddle = input.ReadBool();
            break;
          }
          case 96: {
            Role = input.ReadInt32();
            break;
          }
          case 104: {
            RoomAuthority = input.ReadBool();
            break;
          }
          case 112: {
            PreActionType = input.ReadInt32();
            break;
          }
          case 120: {
            PreActionChips = input.ReadInt64();
            break;
          }
          case 128: {
            BannedTalk = input.ReadBool();
            break;
          }
          case 136: {
            CroupierTipTimes = input.ReadInt32();
            break;
          }
          case 144: {
            Card5 = input.ReadInt32();
            break;
          }
          case 152: {
            IsDelayTime = input.ReadBool();
            break;
          }
          case 160: {
            IsUsingTimebank = input.ReadBool();
            break;
          }
          case 168: {
            IsBookSeatConfirmed = input.ReadBool();
            break;
          }
          case 176: {
            DealerChooseTime = input.ReadInt32();
            break;
          }
          case 186: {
            if (evchopInfo_ == null) {
              EvchopInfo = new global::Texas.Protocol.EvChopInfoBRC();
            }
            input.ReadMessage(EvchopInfo);
            break;
          }
          case 192: {
            DefaultCard = input.ReadInt32();
            break;
          }
          case 200: {
            UserDiscardCard = input.ReadInt32();
            break;
          }
          case 208: {
            IsAgreeDivide = input.ReadBool();
            break;
          }
          case 216: {
            HadHandSqueeze = input.ReadBool();
            break;
          }
          case 224: {
            FirstActionTimePass = input.ReadInt64();
            break;
          }
          case 232: {
            Card6 = input.ReadInt32();
            break;
          }
          case 240: {
            CanViewHand = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///换桌
  /// </summary>
  public sealed partial class ChangeTableRSP : pb::IMessage<ChangeTableRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeTableRSP> _parser = new pb::MessageParser<ChangeTableRSP>(() => new ChangeTableRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChangeTableRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChangeTableRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChangeTableRSP(ChangeTableRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      tableStatus_ = other.tableStatus_ != null ? other.tableStatus_.Clone() : null;
      roomStatus_ = other.roomStatus_ != null ? other.roomStatus_.Clone() : null;
      playingStatus_ = other.playingStatus_ != null ? other.playingStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChangeTableRSP Clone() {
      return new ChangeTableRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "table_status" field.</summary>
    public const int TableStatusFieldNumber = 2;
    private global::Texas.Protocol.TableStatus tableStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TableStatus TableStatus {
      get { return tableStatus_; }
      set {
        tableStatus_ = value;
      }
    }

    /// <summary>Field number for the "room_status" field.</summary>
    public const int RoomStatusFieldNumber = 3;
    private global::Texas.Protocol.RoomStatus roomStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomStatus RoomStatus {
      get { return roomStatus_; }
      set {
        roomStatus_ = value;
      }
    }

    /// <summary>Field number for the "playing_status" field.</summary>
    public const int PlayingStatusFieldNumber = 4;
    private global::Texas.Protocol.PlayingStatus playingStatus_;
    /// <summary>
    ///玩家在坐会发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.PlayingStatus PlayingStatus {
      get { return playingStatus_; }
      set {
        playingStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChangeTableRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChangeTableRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(TableStatus, other.TableStatus)) return false;
      if (!object.Equals(RoomStatus, other.RoomStatus)) return false;
      if (!object.Equals(PlayingStatus, other.PlayingStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (tableStatus_ != null) hash ^= TableStatus.GetHashCode();
      if (roomStatus_ != null) hash ^= RoomStatus.GetHashCode();
      if (playingStatus_ != null) hash ^= PlayingStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (tableStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TableStatus);
      }
      if (roomStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomStatus);
      }
      if (playingStatus_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayingStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (tableStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TableStatus);
      }
      if (roomStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomStatus);
      }
      if (playingStatus_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayingStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (tableStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableStatus);
      }
      if (roomStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomStatus);
      }
      if (playingStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayingStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChangeTableRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.tableStatus_ != null) {
        if (tableStatus_ == null) {
          TableStatus = new global::Texas.Protocol.TableStatus();
        }
        TableStatus.MergeFrom(other.TableStatus);
      }
      if (other.roomStatus_ != null) {
        if (roomStatus_ == null) {
          RoomStatus = new global::Texas.Protocol.RoomStatus();
        }
        RoomStatus.MergeFrom(other.RoomStatus);
      }
      if (other.playingStatus_ != null) {
        if (playingStatus_ == null) {
          PlayingStatus = new global::Texas.Protocol.PlayingStatus();
        }
        PlayingStatus.MergeFrom(other.PlayingStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (tableStatus_ == null) {
              TableStatus = new global::Texas.Protocol.TableStatus();
            }
            input.ReadMessage(TableStatus);
            break;
          }
          case 26: {
            if (roomStatus_ == null) {
              RoomStatus = new global::Texas.Protocol.RoomStatus();
            }
            input.ReadMessage(RoomStatus);
            break;
          }
          case 34: {
            if (playingStatus_ == null) {
              PlayingStatus = new global::Texas.Protocol.PlayingStatus();
            }
            input.ReadMessage(PlayingStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (tableStatus_ == null) {
              TableStatus = new global::Texas.Protocol.TableStatus();
            }
            input.ReadMessage(TableStatus);
            break;
          }
          case 26: {
            if (roomStatus_ == null) {
              RoomStatus = new global::Texas.Protocol.RoomStatus();
            }
            input.ReadMessage(RoomStatus);
            break;
          }
          case 34: {
            if (playingStatus_ == null) {
              PlayingStatus = new global::Texas.Protocol.PlayingStatus();
            }
            input.ReadMessage(PlayingStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableStatusBroadcast : pb::IMessage<TableStatusBroadcast>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableStatusBroadcast> _parser = new pb::MessageParser<TableStatusBroadcast>(() => new TableStatusBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TableStatusBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.Pb1Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableStatusBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableStatusBroadcast(TableStatusBroadcast other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableStatusBroadcast Clone() {
      return new TableStatusBroadcast(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Texas.Protocol.TableStatus info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TableStatus Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TableStatusBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TableStatusBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TableStatusBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Texas.Protocol.TableStatus();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Texas.Protocol.TableStatus();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Texas.Protocol.TableStatus();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
