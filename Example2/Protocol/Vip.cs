// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vip.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from vip.proto</summary>
  public static partial class VipReflection {

    #region Descriptor
    /// <summary>File descriptor for vip.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VipReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl2aXAucHJvdG8iLQoRU2VsVXNlclZpcEluZm9SRVESEAoDdWlkGAEgASgD",
            "SACIAQFCBgoEX3VpZCLWAgoLVXNlclZpcEluZm8SHQoFbGV2ZWwYASABKA4y",
            "CS5WSVBMZXZlbEgAiAEBEiMKCGR1cmF0aW9uGAIgASgOMgwuVklQRHVyYXRp",
            "b25IAYgBARIXCgpiZWdpbl90aW1lGAMgASgNSAKIAQESFQoIZW5kX3RpbWUY",
            "BCABKA1IA4gBARIXCgpmcmVlX2Vtb2ppGAUgASgNSASIAQESFgoJcGVybV90",
            "eXBlGAYgASgNSAWIAQESFgoJbGVmdF90aW1lGAcgASgNSAaIAQESGgoNZnJl",
            "ZV9jYWxsdGltZRgIIAEoDUgHiAEBQggKBl9sZXZlbEILCglfZHVyYXRpb25C",
            "DQoLX2JlZ2luX3RpbWVCCwoJX2VuZF90aW1lQg0KC19mcmVlX2Vtb2ppQgwK",
            "Cl9wZXJtX3R5cGVCDAoKX2xlZnRfdGltZUIQCg5fZnJlZV9jYWxsdGltZSJV",
            "ChFTZWxVc2VyVmlwSW5mb1JTUBIQCgN1aWQYASABKANIAIgBARIeCgN2aXAY",
            "AiABKAsyDC5Vc2VyVmlwSW5mb0gBiAEBQgYKBF91aWRCBgoEX3ZpcCKUAQoN",
            "QnV5VmlwQ2FyZFJFURIQCgN1aWQYASABKANIAIgBARIhCgl2aXBfbGV2ZWwY",
            "AiABKA4yCS5WSVBMZXZlbEgBiAEBEicKDHZpcF9kdXJhdGlvbhgDIAEoDjIM",
            "LlZJUER1cmF0aW9uSAKIAQFCBgoEX3VpZEIMCgpfdmlwX2xldmVsQg8KDV92",
            "aXBfZHVyYXRpb24ihwEKDUJ1eVZpcENhcmRSU1ASEQoEY29kZRgBIAEoBUgA",
            "iAEBEhAKA21zZxgCIAEoCUgBiAEBEhAKA3VpZBgDIAEoA0gCiAEBEh4KA3Zp",
            "cBgEIAEoCzIMLlVzZXJWaXBJbmZvSAOIAQFCBwoFX2NvZGVCBgoEX21zZ0IG",
            "CgRfdWlkQgYKBF92aXAipQEKFlF1ZXJ5VklQVXBncmFkZUluZm9SRVESIQoJ",
            "dmlwX2xldmVsGAEgASgOMgkuVklQTGV2ZWxIAIgBARInCgx2aXBfZHVyYXRp",
            "b24YAiABKA4yDC5WSVBEdXJhdGlvbkgBiAEBEhQKB2l0ZW1faWQYAyABKAVI",
            "AogBAUIMCgpfdmlwX2xldmVsQg8KDV92aXBfZHVyYXRpb25CCgoIX2l0ZW1f",
            "aWQi5gIKFlF1ZXJ5VklQVXBncmFkZUluZm9SU1ASEQoEY29kZRgBIAEoBUgA",
            "iAEBEhAKA3VpZBgCIAEoA0gBiAEBEiEKCWN1cl9sZXZlbBgDIAEoDjIJLlZJ",
            "UExldmVsSAKIAQESJwoMY3VyX2R1cmF0aW9uGAQgASgOMgwuVklQRHVyYXRp",
            "b25IA4gBARIjCgt2YWxpZF9sZXZlbBgFIAEoDjIJLlZJUExldmVsSASIAQES",
            "FwoKdmFsaWRfZGF5cxgGIAEoBUgFiAEBEhoKDWV4Y2hhbmdlX2RheXMYByAB",
            "KAVIBogBARIUCgdpdGVtX2lkGAggASgFSAeIAQFCBwoFX2NvZGVCBgoEX3Vp",
            "ZEIMCgpfY3VyX2xldmVsQg8KDV9jdXJfZHVyYXRpb25CDgoMX3ZhbGlkX2xl",
            "dmVsQg0KC192YWxpZF9kYXlzQhAKDl9leGNoYW5nZV9kYXlzQgoKCF9pdGVt",
            "X2lkIpABCgxGcmVlRW1vamlSU1ASEAoDdWlkGAEgASgDSACIAQESGwoOdmlw",
            "X2ZyZWVfZW1vamkYAiABKA1IAYgBARIfChJnaWZ0YmFnX2ZyZWVfZW1vamkY",
            "AyABKA1IAogBAUIGCgRfdWlkQhEKD192aXBfZnJlZV9lbW9qaUIVChNfZ2lm",
            "dGJhZ19mcmVlX2Vtb2ppIp8BCg9GcmVlQ2FsbHRpbWVSU1ASEAoDdWlkGAEg",
            "ASgDSACIAQESHgoRdmlwX2ZyZWVfY2FsbHRpbWUYAiABKA1IAYgBARIiChVn",
            "aWZ0YmFnX2ZyZWVfY2FsbHRpbWUYAyABKA1IAogBAUIGCgRfdWlkQhQKEl92",
            "aXBfZnJlZV9jYWxsdGltZUIYChZfZ2lmdGJhZ19mcmVlX2NhbGx0aW1lIqkC",
            "Cg5TZW5kVmlwQ2FyZFJFURIVCghmcm9tX3VpZBgBIAEoA0gAiAEBEhMKBnRv",
            "X3VpZBgCIAEoA0gBiAEBEhMKBmNsdWJpZBgDIAEoBUgCiAEBEiEKCXZpcF9s",
            "ZXZlbBgEIAEoDjIJLlZJUExldmVsSAOIAQESJwoMdmlwX2R1cmF0aW9uGAUg",
            "ASgOMgwuVklQRHVyYXRpb25IBIgBARIWCgljbHViX25hbWUYBiABKAlIBYgB",
            "ARIVCghsZWFndWVpZBgHIAEoBUgGiAEBQgsKCV9mcm9tX3VpZEIJCgdfdG9f",
            "dWlkQgkKB19jbHViaWRCDAoKX3ZpcF9sZXZlbEIPCg1fdmlwX2R1cmF0aW9u",
            "QgwKCl9jbHViX25hbWVCCwoJX2xlYWd1ZWlkIu0BCg5TZW5kVmlwQ2FyZFJT",
            "UBIRCgRjb2RlGAEgASgFSACIAQESEAoDbXNnGAIgASgJSAGIAQESEwoGdG9f",
            "dWlkGAMgASgDSAKIAQESIQoJdmlwX2xldmVsGAQgASgOMgkuVklQTGV2ZWxI",
            "A4gBARInCgx2aXBfZHVyYXRpb24YBSABKA4yDC5WSVBEdXJhdGlvbkgEiAEB",
            "EhEKBG5hbWUYBiABKAlIBYgBAUIHCgVfY29kZUIGCgRfbXNnQgkKB190b191",
            "aWRCDAoKX3ZpcF9sZXZlbEIPCg1fdmlwX2R1cmF0aW9uQgcKBV9uYW1lIqsC",
            "Cg5TZW5kVmlwQ2FyZEJSQxIVCghmcm9tX3VpZBgBIAEoA0gAiAEBEhYKCWZy",
            "b21fbmFtZRgCIAEoCUgBiAEBEhMKBmNsdWJpZBgDIAEoBUgCiAEBEiEKCXZp",
            "cF9sZXZlbBgEIAEoDjIJLlZJUExldmVsSAOIAQESJwoMdmlwX2R1cmF0aW9u",
            "GAUgASgOMgwuVklQRHVyYXRpb25IBIgBARIWCgljbHViX25hbWUYBiABKAlI",
            "BYgBARITCgZ0b191aWQYByABKANIBogBAUILCglfZnJvbV91aWRCDAoKX2Zy",
            "b21fbmFtZUIJCgdfY2x1YmlkQgwKCl92aXBfbGV2ZWxCDwoNX3ZpcF9kdXJh",
            "dGlvbkIMCgpfY2x1Yl9uYW1lQgkKB190b191aWQiUAoUVGltZWJhbmtMZWZ0",
            "VGltZXNSRVESEAoDdWlkGAEgASgDSACIAQESEwoGcm9vbWlkGAIgASgFSAGI",
            "AQFCBgoEX3VpZEIJCgdfcm9vbWlkIpwCChRUaW1lYmFua0xlZnRUaW1lc1JT",
            "UBIQCgN1aWQYASABKANIAIgBARITCgZyb29taWQYAiABKAVIAYgBARIkChd2",
            "aXBfdGltZWJhbmtfbGVmdF90aW1lcxgDIAEoDUgCiAEBEiwKH2hhbmRzX2Nu",
            "dF90b19hZGRfdGltZWJhbmtfdGltZXMYBCABKA1IA4gBARIfChJpc19lbmFi",
            "bGVfdGltZWJhbmsYBSABKAhIBIgBAUIGCgRfdWlkQgkKB19yb29taWRCGgoY",
            "X3ZpcF90aW1lYmFua19sZWZ0X3RpbWVzQiIKIF9oYW5kc19jbnRfdG9fYWRk",
            "X3RpbWViYW5rX3RpbWVzQhUKE19pc19lbmFibGVfdGltZWJhbmsiVgoPVHJp",
            "YWxWaXBDYXJkUkVREhAKA3VpZBgBIAEoA0gAiAEBEh8KBXRyaWFsGAIgASgO",
            "MgsuVHJpYWxWaXBOb0gBiAEBQgYKBF91aWRCCAoGX3RyaWFsIokBCg9Ucmlh",
            "bFZpcENhcmRSU1ASEQoEY29kZRgBIAEoBUgAiAEBEhAKA21zZxgCIAEoCUgB",
            "iAEBEhAKA3VpZBgDIAEoA0gCiAEBEh4KA3ZpcBgEIAEoCzIMLlVzZXJWaXBJ",
            "bmZvSAOIAQFCBwoFX2NvZGVCBgoEX21zZ0IGCgRfdWlkQgYKBF92aXAqiwEK",
            "CFZJUExldmVsEhIKDlZJUF9MRVZFTF9OT05FEAASGQoVVklQX0xFVkVMX1NM",
            "SVZFUl9DQVJEEAESGQoVVklQX0xFVkVMX0dPTERFTl9DQVJEEAISGAoUVklQ",
            "X0xFVkVMX0JMQUNLX0NBUkQQAxIbChdWSVBfTEVWRUxfUExBVElOVU1fQ0FS",
            "RBAEKpoBCgtWSVBEdXJhdGlvbhIVChFWSVBfRFVSQVRJT05fTk9ORRAAEhYK",
            "ElZJUF9EVVJBVElPTl9NT05USBABEhcKE1ZJUF9EVVJBVElPTl9TRUFTT04Q",
            "AhIVChFWSVBfRFVSQVRJT05fWUVBUhADEhUKEVZJUF9EVVJBVElPTl9XRUVL",
            "EAQSFQoRVklQX0RVUkFUSU9OX0RBWVMQBSq/AgoLVklQUGVybVR5cGUSEQoN",
            "VklQX1BFUk1fTk9ORRAAEhIKDlZJUF9QRVJNX0ZSQU1FEAESGAoUVklQX1BF",
            "Uk1fUkFCQklUX0NBUkQQAhIYChRWSVBfUEVSTV9NQUdJQ19FTU9KSRAEEhcK",
            "E1ZJUF9QRVJNX0ZSRUVfRU1PSkkQCBIaChZWSVBfUEVSTV9DQVJFRVJfREVU",
            "QUlMEBASFwoTVklQX1BFUk1fTU9SRV9DTFVCUxAgEh4KGlZJUF9QRVJNX09U",
            "SEVSX1VTRVJfREVUQUlMEEASGwoWVklQX1BFUk1fRlJFRV9DQUxMVElNRRCA",
            "ARIXChJWSVBfUEVSTV9USU1FX0JBTksQgAISFwoSVklQX1BFUk1fQ0xVQl9E",
            "QVRBEIAEEhgKE1ZJUF9QRVJNX1RBQkxFX0RBVEEQgAgqQwoKVHJpYWxWaXBO",
            "bxIVChFUUklBTF9WSVBfTk9fTk9ORRAAEh4KGlRSSUFMX1ZJUF9OT19QTEFU",
            "SU5VTV9DQVJEEAEqQAoLVmlwQ2FyZFR5cGUSGAoUVklQX0NBUkRfVFlQRV9O",
            "T1JNQUwQABIXChNWSVBfQ0FSRF9UWVBFX1RSSUFMEAEqwgEKClZJUFJldENv",
            "ZGUSFQoRVklQX1JFVF9DT0RFX1NVQ0MQABIsCh9WSVBfUkVUX0NPREVfRElB",
            "TU9ORF9OT1RfRU5PVUdIEP///////////wESJwoaVklQX1JFVF9DT0RFX1BB",
            "UkFNX0lOVkFMSUQQ/v//////////ARIgChNWSVBfUkVUX0NPREVfRkFJTEVE",
            "EP3//////////wESJAoXVklQX1JFVF9DT0RFX0FSRUFEWV9HRVQQ/P//////",
            "////AUIaWgcvcGJwcGdvqgIOVGV4YXMuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Texas.Protocol.VIPLevel), typeof(global::Texas.Protocol.VIPDuration), typeof(global::Texas.Protocol.VIPPermType), typeof(global::Texas.Protocol.TrialVipNo), typeof(global::Texas.Protocol.VipCardType), typeof(global::Texas.Protocol.VIPRetCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SelUserVipInfoREQ), global::Texas.Protocol.SelUserVipInfoREQ.Parser, new[]{ "Uid" }, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserVipInfo), global::Texas.Protocol.UserVipInfo.Parser, new[]{ "Level", "Duration", "BeginTime", "EndTime", "FreeEmoji", "PermType", "LeftTime", "FreeCalltime" }, new[]{ "Level", "Duration", "BeginTime", "EndTime", "FreeEmoji", "PermType", "LeftTime", "FreeCalltime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SelUserVipInfoRSP), global::Texas.Protocol.SelUserVipInfoRSP.Parser, new[]{ "Uid", "Vip" }, new[]{ "Uid", "Vip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.BuyVipCardREQ), global::Texas.Protocol.BuyVipCardREQ.Parser, new[]{ "Uid", "VipLevel", "VipDuration" }, new[]{ "Uid", "VipLevel", "VipDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.BuyVipCardRSP), global::Texas.Protocol.BuyVipCardRSP.Parser, new[]{ "Code", "Msg", "Uid", "Vip" }, new[]{ "Code", "Msg", "Uid", "Vip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.QueryVIPUpgradeInfoREQ), global::Texas.Protocol.QueryVIPUpgradeInfoREQ.Parser, new[]{ "VipLevel", "VipDuration", "ItemId" }, new[]{ "VipLevel", "VipDuration", "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.QueryVIPUpgradeInfoRSP), global::Texas.Protocol.QueryVIPUpgradeInfoRSP.Parser, new[]{ "Code", "Uid", "CurLevel", "CurDuration", "ValidLevel", "ValidDays", "ExchangeDays", "ItemId" }, new[]{ "Code", "Uid", "CurLevel", "CurDuration", "ValidLevel", "ValidDays", "ExchangeDays", "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.FreeEmojiRSP), global::Texas.Protocol.FreeEmojiRSP.Parser, new[]{ "Uid", "VipFreeEmoji", "GiftbagFreeEmoji" }, new[]{ "Uid", "VipFreeEmoji", "GiftbagFreeEmoji" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.FreeCalltimeRSP), global::Texas.Protocol.FreeCalltimeRSP.Parser, new[]{ "Uid", "VipFreeCalltime", "GiftbagFreeCalltime" }, new[]{ "Uid", "VipFreeCalltime", "GiftbagFreeCalltime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SendVipCardREQ), global::Texas.Protocol.SendVipCardREQ.Parser, new[]{ "FromUid", "ToUid", "Clubid", "VipLevel", "VipDuration", "ClubName", "Leagueid" }, new[]{ "FromUid", "ToUid", "Clubid", "VipLevel", "VipDuration", "ClubName", "Leagueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SendVipCardRSP), global::Texas.Protocol.SendVipCardRSP.Parser, new[]{ "Code", "Msg", "ToUid", "VipLevel", "VipDuration", "Name" }, new[]{ "Code", "Msg", "ToUid", "VipLevel", "VipDuration", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SendVipCardBRC), global::Texas.Protocol.SendVipCardBRC.Parser, new[]{ "FromUid", "FromName", "Clubid", "VipLevel", "VipDuration", "ClubName", "ToUid" }, new[]{ "FromUid", "FromName", "Clubid", "VipLevel", "VipDuration", "ClubName", "ToUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TimebankLeftTimesREQ), global::Texas.Protocol.TimebankLeftTimesREQ.Parser, new[]{ "Uid", "Roomid" }, new[]{ "Uid", "Roomid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TimebankLeftTimesRSP), global::Texas.Protocol.TimebankLeftTimesRSP.Parser, new[]{ "Uid", "Roomid", "VipTimebankLeftTimes", "HandsCntToAddTimebankTimes", "IsEnableTimebank" }, new[]{ "Uid", "Roomid", "VipTimebankLeftTimes", "HandsCntToAddTimebankTimes", "IsEnableTimebank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TrialVipCardREQ), global::Texas.Protocol.TrialVipCardREQ.Parser, new[]{ "Uid", "Trial" }, new[]{ "Uid", "Trial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TrialVipCardRSP), global::Texas.Protocol.TrialVipCardRSP.Parser, new[]{ "Code", "Msg", "Uid", "Vip" }, new[]{ "Code", "Msg", "Uid", "Vip" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum VIPLevel {
    /// <summary>
    ///没有卡
    /// </summary>
    [pbr::OriginalName("VIP_LEVEL_NONE")] None = 0,
    /// <summary>
    ///银卡
    /// </summary>
    [pbr::OriginalName("VIP_LEVEL_SLIVER_CARD")] SliverCard = 1,
    /// <summary>
    ///金卡
    /// </summary>
    [pbr::OriginalName("VIP_LEVEL_GOLDEN_CARD")] GoldenCard = 2,
    /// <summary>
    ///黑卡
    /// </summary>
    [pbr::OriginalName("VIP_LEVEL_BLACK_CARD")] BlackCard = 3,
    /// <summary>
    ///铂金卡
    /// </summary>
    [pbr::OriginalName("VIP_LEVEL_PLATINUM_CARD")] PlatinumCard = 4,
  }

  public enum VIPDuration {
    [pbr::OriginalName("VIP_DURATION_NONE")] None = 0,
    /// <summary>
    ///月卡
    /// </summary>
    [pbr::OriginalName("VIP_DURATION_MONTH")] Month = 1,
    /// <summary>
    ///季卡
    /// </summary>
    [pbr::OriginalName("VIP_DURATION_SEASON")] Season = 2,
    /// <summary>
    ///年卡
    /// </summary>
    [pbr::OriginalName("VIP_DURATION_YEAR")] Year = 3,
    /// <summary>
    ///周卡
    /// </summary>
    [pbr::OriginalName("VIP_DURATION_WEEK")] Week = 4,
    /// <summary>
    ///天卡
    /// </summary>
    [pbr::OriginalName("VIP_DURATION_DAYS")] Days = 5,
  }

  public enum VIPPermType {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("VIP_PERM_NONE")] VipPermNone = 0,
    /// <summary>
    ///专属边框
    /// </summary>
    [pbr::OriginalName("VIP_PERM_FRAME")] VipPermFrame = 1,
    /// <summary>
    ///免费看公共牌
    /// </summary>
    [pbr::OriginalName("VIP_PERM_RABBIT_CARD")] VipPermRabbitCard = 2,
    /// <summary>
    ///魔法表情
    /// </summary>
    [pbr::OriginalName("VIP_PERM_MAGIC_EMOJI")] VipPermMagicEmoji = 4,
    /// <summary>
    ///免费表情
    /// </summary>
    [pbr::OriginalName("VIP_PERM_FREE_EMOJI")] VipPermFreeEmoji = 8,
    /// <summary>
    ///查看生涯牌局明细
    /// </summary>
    [pbr::OriginalName("VIP_PERM_CAREER_DETAIL")] VipPermCareerDetail = 16,
    /// <summary>
    ///创建更多club
    /// </summary>
    [pbr::OriginalName("VIP_PERM_MORE_CLUBS")] VipPermMoreClubs = 32,
    /// <summary>
    ///查看其他玩家数据
    /// </summary>
    [pbr::OriginalName("VIP_PERM_OTHER_USER_DETAIL")] VipPermOtherUserDetail = 64,
    /// <summary>
    ///免费延时
    /// </summary>
    [pbr::OriginalName("VIP_PERM_FREE_CALLTIME")] VipPermFreeCalltime = 128,
    /// <summary>
    ///时间银行
    /// </summary>
    [pbr::OriginalName("VIP_PERM_TIME_BANK")] VipPermTimeBank = 256,
    /// <summary>
    ///俱乐部数据
    /// </summary>
    [pbr::OriginalName("VIP_PERM_CLUB_DATA")] VipPermClubData = 512,
    /// <summary>
    ///牌桌显示数据
    /// </summary>
    [pbr::OriginalName("VIP_PERM_TABLE_DATA")] VipPermTableData = 1024,
  }

  /// <summary>
  ///体验卡活动
  /// </summary>
  public enum TrialVipNo {
    [pbr::OriginalName("TRIAL_VIP_NO_NONE")] None = 0,
    /// <summary>
    ///铂金体验卡
    /// </summary>
    [pbr::OriginalName("TRIAL_VIP_NO_PLATINUM_CARD")] PlatinumCard = 1,
  }

  public enum VipCardType {
    [pbr::OriginalName("VIP_CARD_TYPE_NORMAL")] Normal = 0,
    /// <summary>
    ///体验卡
    /// </summary>
    [pbr::OriginalName("VIP_CARD_TYPE_TRIAL")] Trial = 1,
  }

  public enum VIPRetCode {
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("VIP_RET_CODE_SUCC")] Succ = 0,
    /// <summary>
    ///钻石不够
    /// </summary>
    [pbr::OriginalName("VIP_RET_CODE_DIAMOND_NOT_ENOUGH")] DiamondNotEnough = -1,
    /// <summary>
    ///输入有误
    /// </summary>
    [pbr::OriginalName("VIP_RET_CODE_PARAM_INVALID")] ParamInvalid = -2,
    /// <summary>
    ///不成功
    /// </summary>
    [pbr::OriginalName("VIP_RET_CODE_FAILED")] Failed = -3,
    /// <summary>
    ///体验卡已经领过
    /// </summary>
    [pbr::OriginalName("VIP_RET_CODE_AREADY_GET")] AreadyGet = -4,
  }

  #endregion

  #region Messages
  public sealed partial class SelUserVipInfoREQ : pb::IMessage<SelUserVipInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SelUserVipInfoREQ> _parser = new pb::MessageParser<SelUserVipInfoREQ>(() => new SelUserVipInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SelUserVipInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SelUserVipInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SelUserVipInfoREQ(SelUserVipInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SelUserVipInfoREQ Clone() {
      return new SelUserVipInfoREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SelUserVipInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SelUserVipInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SelUserVipInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserVipInfo : pb::IMessage<UserVipInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserVipInfo> _parser = new pb::MessageParser<UserVipInfo>(() => new UserVipInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserVipInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserVipInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserVipInfo(UserVipInfo other) : this() {
      _hasBits0 = other._hasBits0;
      level_ = other.level_;
      duration_ = other.duration_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      freeEmoji_ = other.freeEmoji_;
      permType_ = other.permType_;
      leftTime_ = other.leftTime_;
      freeCalltime_ = other.freeCalltime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserVipInfo Clone() {
      return new UserVipInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private readonly static global::Texas.Protocol.VIPLevel LevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel Level {
      get { if ((_hasBits0 & 1) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private readonly static global::Texas.Protocol.VIPDuration DurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration Duration {
      get { if ((_hasBits0 & 2) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDuration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 3;
    private readonly static uint BeginTimeDefaultValue = 0;

    private uint beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BeginTime {
      get { if ((_hasBits0 & 4) != 0) { return beginTime_; } else { return BeginTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        beginTime_ = value;
      }
    }
    /// <summary>Gets whether the "begin_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBeginTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "begin_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBeginTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private readonly static uint EndTimeDefaultValue = 0;

    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint EndTime {
      get { if ((_hasBits0 & 8) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "free_emoji" field.</summary>
    public const int FreeEmojiFieldNumber = 5;
    private readonly static uint FreeEmojiDefaultValue = 0;

    private uint freeEmoji_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FreeEmoji {
      get { if ((_hasBits0 & 16) != 0) { return freeEmoji_; } else { return FreeEmojiDefaultValue; } }
      set {
        _hasBits0 |= 16;
        freeEmoji_ = value;
      }
    }
    /// <summary>Gets whether the "free_emoji" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFreeEmoji {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "free_emoji" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFreeEmoji() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "perm_type" field.</summary>
    public const int PermTypeFieldNumber = 6;
    private readonly static uint PermTypeDefaultValue = 0;

    private uint permType_;
    /// <summary>
    /// use bitmask to combine vip perm info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PermType {
      get { if ((_hasBits0 & 32) != 0) { return permType_; } else { return PermTypeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        permType_ = value;
      }
    }
    /// <summary>Gets whether the "perm_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPermType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "perm_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPermType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "left_time" field.</summary>
    public const int LeftTimeFieldNumber = 7;
    private readonly static uint LeftTimeDefaultValue = 0;

    private uint leftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LeftTime {
      get { if ((_hasBits0 & 64) != 0) { return leftTime_; } else { return LeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        leftTime_ = value;
      }
    }
    /// <summary>Gets whether the "left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "free_calltime" field.</summary>
    public const int FreeCalltimeFieldNumber = 8;
    private readonly static uint FreeCalltimeDefaultValue = 0;

    private uint freeCalltime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FreeCalltime {
      get { if ((_hasBits0 & 128) != 0) { return freeCalltime_; } else { return FreeCalltimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        freeCalltime_ = value;
      }
    }
    /// <summary>Gets whether the "free_calltime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFreeCalltime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "free_calltime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFreeCalltime() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserVipInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserVipInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Duration != other.Duration) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (FreeEmoji != other.FreeEmoji) return false;
      if (PermType != other.PermType) return false;
      if (LeftTime != other.LeftTime) return false;
      if (FreeCalltime != other.FreeCalltime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasDuration) hash ^= Duration.GetHashCode();
      if (HasBeginTime) hash ^= BeginTime.GetHashCode();
      if (HasEndTime) hash ^= EndTime.GetHashCode();
      if (HasFreeEmoji) hash ^= FreeEmoji.GetHashCode();
      if (HasPermType) hash ^= PermType.GetHashCode();
      if (HasLeftTime) hash ^= LeftTime.GetHashCode();
      if (HasFreeCalltime) hash ^= FreeCalltime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLevel) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (HasDuration) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Duration);
      }
      if (HasBeginTime) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeginTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(32);
        output.WriteUInt32(EndTime);
      }
      if (HasFreeEmoji) {
        output.WriteRawTag(40);
        output.WriteUInt32(FreeEmoji);
      }
      if (HasPermType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PermType);
      }
      if (HasLeftTime) {
        output.WriteRawTag(56);
        output.WriteUInt32(LeftTime);
      }
      if (HasFreeCalltime) {
        output.WriteRawTag(64);
        output.WriteUInt32(FreeCalltime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLevel) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (HasDuration) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Duration);
      }
      if (HasBeginTime) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeginTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(32);
        output.WriteUInt32(EndTime);
      }
      if (HasFreeEmoji) {
        output.WriteRawTag(40);
        output.WriteUInt32(FreeEmoji);
      }
      if (HasPermType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PermType);
      }
      if (HasLeftTime) {
        output.WriteRawTag(56);
        output.WriteUInt32(LeftTime);
      }
      if (HasFreeCalltime) {
        output.WriteRawTag(64);
        output.WriteUInt32(FreeCalltime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (HasDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
      }
      if (HasBeginTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginTime);
      }
      if (HasEndTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (HasFreeEmoji) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeEmoji);
      }
      if (HasPermType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PermType);
      }
      if (HasLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftTime);
      }
      if (HasFreeCalltime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeCalltime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserVipInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasBeginTime) {
        BeginTime = other.BeginTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasFreeEmoji) {
        FreeEmoji = other.FreeEmoji;
      }
      if (other.HasPermType) {
        PermType = other.PermType;
      }
      if (other.HasLeftTime) {
        LeftTime = other.LeftTime;
      }
      if (other.HasFreeCalltime) {
        FreeCalltime = other.FreeCalltime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 16: {
            Duration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 24: {
            BeginTime = input.ReadUInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 40: {
            FreeEmoji = input.ReadUInt32();
            break;
          }
          case 48: {
            PermType = input.ReadUInt32();
            break;
          }
          case 56: {
            LeftTime = input.ReadUInt32();
            break;
          }
          case 64: {
            FreeCalltime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 16: {
            Duration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 24: {
            BeginTime = input.ReadUInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 40: {
            FreeEmoji = input.ReadUInt32();
            break;
          }
          case 48: {
            PermType = input.ReadUInt32();
            break;
          }
          case 56: {
            LeftTime = input.ReadUInt32();
            break;
          }
          case 64: {
            FreeCalltime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SelUserVipInfoRSP : pb::IMessage<SelUserVipInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SelUserVipInfoRSP> _parser = new pb::MessageParser<SelUserVipInfoRSP>(() => new SelUserVipInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SelUserVipInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SelUserVipInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SelUserVipInfoRSP(SelUserVipInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      vip_ = other.vip_ != null ? other.vip_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SelUserVipInfoRSP Clone() {
      return new SelUserVipInfoRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 2;
    private global::Texas.Protocol.UserVipInfo vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserVipInfo Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SelUserVipInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SelUserVipInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (!object.Equals(Vip, other.Vip)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (vip_ != null) hash ^= Vip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (vip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (vip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (vip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SelUserVipInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.vip_ != null) {
        if (vip_ == null) {
          Vip = new global::Texas.Protocol.UserVipInfo();
        }
        Vip.MergeFrom(other.Vip);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            if (vip_ == null) {
              Vip = new global::Texas.Protocol.UserVipInfo();
            }
            input.ReadMessage(Vip);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            if (vip_ == null) {
              Vip = new global::Texas.Protocol.UserVipInfo();
            }
            input.ReadMessage(Vip);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuyVipCardREQ : pb::IMessage<BuyVipCardREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuyVipCardREQ> _parser = new pb::MessageParser<BuyVipCardREQ>(() => new BuyVipCardREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BuyVipCardREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuyVipCardREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuyVipCardREQ(BuyVipCardREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      vipLevel_ = other.vipLevel_;
      vipDuration_ = other.vipDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuyVipCardREQ Clone() {
      return new BuyVipCardREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 2;
    private readonly static global::Texas.Protocol.VIPLevel VipLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel VipLevel {
      get { if ((_hasBits0 & 2) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vip_duration" field.</summary>
    public const int VipDurationFieldNumber = 3;
    private readonly static global::Texas.Protocol.VIPDuration VipDurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration vipDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration VipDuration {
      get { if ((_hasBits0 & 4) != 0) { return vipDuration_; } else { return VipDurationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vipDuration_ = value;
      }
    }
    /// <summary>Gets whether the "vip_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipDuration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vip_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipDuration() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BuyVipCardREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BuyVipCardREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipDuration != other.VipDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasVipDuration) hash ^= VipDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VipDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VipDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipLevel);
      }
      if (HasVipDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BuyVipCardREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasVipDuration) {
        VipDuration = other.VipDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 24: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 24: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuyVipCardRSP : pb::IMessage<BuyVipCardRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuyVipCardRSP> _parser = new pb::MessageParser<BuyVipCardRSP>(() => new BuyVipCardRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BuyVipCardRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuyVipCardRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuyVipCardRSP(BuyVipCardRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      msg_ = other.msg_;
      uid_ = other.uid_;
      vip_ = other.vip_ != null ? other.vip_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuyVipCardRSP Clone() {
      return new BuyVipCardRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMsg() {
      msg_ = null;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 2) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 4;
    private global::Texas.Protocol.UserVipInfo vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserVipInfo Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BuyVipCardRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BuyVipCardRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      if (Uid != other.Uid) return false;
      if (!object.Equals(Vip, other.Vip)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (vip_ != null) hash ^= Vip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasUid) {
        output.WriteRawTag(24);
        output.WriteInt64(Uid);
      }
      if (vip_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasUid) {
        output.WriteRawTag(24);
        output.WriteInt64(Uid);
      }
      if (vip_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (vip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BuyVipCardRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.vip_ != null) {
        if (vip_ == null) {
          Vip = new global::Texas.Protocol.UserVipInfo();
        }
        Vip.MergeFrom(other.Vip);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadInt64();
            break;
          }
          case 34: {
            if (vip_ == null) {
              Vip = new global::Texas.Protocol.UserVipInfo();
            }
            input.ReadMessage(Vip);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadInt64();
            break;
          }
          case 34: {
            if (vip_ == null) {
              Vip = new global::Texas.Protocol.UserVipInfo();
            }
            input.ReadMessage(Vip);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryVIPUpgradeInfoREQ : pb::IMessage<QueryVIPUpgradeInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryVIPUpgradeInfoREQ> _parser = new pb::MessageParser<QueryVIPUpgradeInfoREQ>(() => new QueryVIPUpgradeInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QueryVIPUpgradeInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueryVIPUpgradeInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueryVIPUpgradeInfoREQ(QueryVIPUpgradeInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      vipLevel_ = other.vipLevel_;
      vipDuration_ = other.vipDuration_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueryVIPUpgradeInfoREQ Clone() {
      return new QueryVIPUpgradeInfoREQ(this);
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 1;
    private readonly static global::Texas.Protocol.VIPLevel VipLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel VipLevel {
      get { if ((_hasBits0 & 1) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vip_duration" field.</summary>
    public const int VipDurationFieldNumber = 2;
    private readonly static global::Texas.Protocol.VIPDuration VipDurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration vipDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration VipDuration {
      get { if ((_hasBits0 & 2) != 0) { return vipDuration_; } else { return VipDurationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vipDuration_ = value;
      }
    }
    /// <summary>Gets whether the "vip_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipDuration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vip_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipDuration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private readonly static int ItemIdDefaultValue = 0;

    private int itemId_;
    /// <summary>
    ///背包物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemId {
      get { if ((_hasBits0 & 4) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QueryVIPUpgradeInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QueryVIPUpgradeInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VipLevel != other.VipLevel) return false;
      if (VipDuration != other.VipDuration) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasVipDuration) hash ^= VipDuration.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVipLevel) {
        output.WriteRawTag(8);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VipDuration);
      }
      if (HasItemId) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVipLevel) {
        output.WriteRawTag(8);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VipDuration);
      }
      if (HasItemId) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipLevel);
      }
      if (HasVipDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipDuration);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QueryVIPUpgradeInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasVipDuration) {
        VipDuration = other.VipDuration;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 16: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 16: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryVIPUpgradeInfoRSP : pb::IMessage<QueryVIPUpgradeInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryVIPUpgradeInfoRSP> _parser = new pb::MessageParser<QueryVIPUpgradeInfoRSP>(() => new QueryVIPUpgradeInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QueryVIPUpgradeInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueryVIPUpgradeInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueryVIPUpgradeInfoRSP(QueryVIPUpgradeInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      uid_ = other.uid_;
      curLevel_ = other.curLevel_;
      curDuration_ = other.curDuration_;
      validLevel_ = other.validLevel_;
      validDays_ = other.validDays_;
      exchangeDays_ = other.exchangeDays_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QueryVIPUpgradeInfoRSP Clone() {
      return new QueryVIPUpgradeInfoRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0：成功， -2:itemid不存在， -1：参数错误，vip级别填错或item_id填错, -3:级别比当前还低, -4:同级别，不需要提示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 2) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cur_level" field.</summary>
    public const int CurLevelFieldNumber = 3;
    private readonly static global::Texas.Protocol.VIPLevel CurLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel curLevel_;
    /// <summary>
    ///当前用户的vip级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel CurLevel {
      get { if ((_hasBits0 & 4) != 0) { return curLevel_; } else { return CurLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        curLevel_ = value;
      }
    }
    /// <summary>Gets whether the "cur_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cur_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cur_duration" field.</summary>
    public const int CurDurationFieldNumber = 4;
    private readonly static global::Texas.Protocol.VIPDuration CurDurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration curDuration_;
    /// <summary>
    ///当前用户的vip时段类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration CurDuration {
      get { if ((_hasBits0 & 8) != 0) { return curDuration_; } else { return CurDurationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        curDuration_ = value;
      }
    }
    /// <summary>Gets whether the "cur_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurDuration {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cur_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurDuration() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "valid_level" field.</summary>
    public const int ValidLevelFieldNumber = 5;
    private readonly static global::Texas.Protocol.VIPLevel ValidLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel validLevel_;
    /// <summary>
    ///要升级的VIP级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel ValidLevel {
      get { if ((_hasBits0 & 16) != 0) { return validLevel_; } else { return ValidLevelDefaultValue; } }
      set {
        _hasBits0 |= 16;
        validLevel_ = value;
      }
    }
    /// <summary>Gets whether the "valid_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValidLevel {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "valid_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValidLevel() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "valid_days" field.</summary>
    public const int ValidDaysFieldNumber = 6;
    private readonly static int ValidDaysDefaultValue = 0;

    private int validDays_;
    /// <summary>
    ///要升级卡的有效天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ValidDays {
      get { if ((_hasBits0 & 32) != 0) { return validDays_; } else { return ValidDaysDefaultValue; } }
      set {
        _hasBits0 |= 32;
        validDays_ = value;
      }
    }
    /// <summary>Gets whether the "valid_days" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValidDays {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "valid_days" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValidDays() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "exchange_days" field.</summary>
    public const int ExchangeDaysFieldNumber = 7;
    private readonly static int ExchangeDaysDefaultValue = 0;

    private int exchangeDays_;
    /// <summary>
    ///原旧卡折算后的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchangeDays {
      get { if ((_hasBits0 & 64) != 0) { return exchangeDays_; } else { return ExchangeDaysDefaultValue; } }
      set {
        _hasBits0 |= 64;
        exchangeDays_ = value;
      }
    }
    /// <summary>Gets whether the "exchange_days" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExchangeDays {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "exchange_days" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExchangeDays() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 8;
    private readonly static int ItemIdDefaultValue = 0;

    private int itemId_;
    /// <summary>
    ///背包物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemId {
      get { if ((_hasBits0 & 128) != 0) { return itemId_; } else { return ItemIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        itemId_ = value;
      }
    }
    /// <summary>Gets whether the "item_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "item_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemId() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QueryVIPUpgradeInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QueryVIPUpgradeInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Uid != other.Uid) return false;
      if (CurLevel != other.CurLevel) return false;
      if (CurDuration != other.CurDuration) return false;
      if (ValidLevel != other.ValidLevel) return false;
      if (ValidDays != other.ValidDays) return false;
      if (ExchangeDays != other.ExchangeDays) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasCurLevel) hash ^= CurLevel.GetHashCode();
      if (HasCurDuration) hash ^= CurDuration.GetHashCode();
      if (HasValidLevel) hash ^= ValidLevel.GetHashCode();
      if (HasValidDays) hash ^= ValidDays.GetHashCode();
      if (HasExchangeDays) hash ^= ExchangeDays.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (HasCurLevel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CurLevel);
      }
      if (HasCurDuration) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CurDuration);
      }
      if (HasValidLevel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ValidLevel);
      }
      if (HasValidDays) {
        output.WriteRawTag(48);
        output.WriteInt32(ValidDays);
      }
      if (HasExchangeDays) {
        output.WriteRawTag(56);
        output.WriteInt32(ExchangeDays);
      }
      if (HasItemId) {
        output.WriteRawTag(64);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (HasCurLevel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CurLevel);
      }
      if (HasCurDuration) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CurDuration);
      }
      if (HasValidLevel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ValidLevel);
      }
      if (HasValidDays) {
        output.WriteRawTag(48);
        output.WriteInt32(ValidDays);
      }
      if (HasExchangeDays) {
        output.WriteRawTag(56);
        output.WriteInt32(ExchangeDays);
      }
      if (HasItemId) {
        output.WriteRawTag(64);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasCurLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurLevel);
      }
      if (HasCurDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurDuration);
      }
      if (HasValidLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValidLevel);
      }
      if (HasValidDays) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValidDays);
      }
      if (HasExchangeDays) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExchangeDays);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QueryVIPUpgradeInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasCurLevel) {
        CurLevel = other.CurLevel;
      }
      if (other.HasCurDuration) {
        CurDuration = other.CurDuration;
      }
      if (other.HasValidLevel) {
        ValidLevel = other.ValidLevel;
      }
      if (other.HasValidDays) {
        ValidDays = other.ValidDays;
      }
      if (other.HasExchangeDays) {
        ExchangeDays = other.ExchangeDays;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            CurLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 32: {
            CurDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 40: {
            ValidLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 48: {
            ValidDays = input.ReadInt32();
            break;
          }
          case 56: {
            ExchangeDays = input.ReadInt32();
            break;
          }
          case 64: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            CurLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 32: {
            CurDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 40: {
            ValidLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 48: {
            ValidDays = input.ReadInt32();
            break;
          }
          case 56: {
            ExchangeDays = input.ReadInt32();
            break;
          }
          case 64: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FreeEmojiRSP : pb::IMessage<FreeEmojiRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeEmojiRSP> _parser = new pb::MessageParser<FreeEmojiRSP>(() => new FreeEmojiRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeEmojiRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeEmojiRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeEmojiRSP(FreeEmojiRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      vipFreeEmoji_ = other.vipFreeEmoji_;
      giftbagFreeEmoji_ = other.giftbagFreeEmoji_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeEmojiRSP Clone() {
      return new FreeEmojiRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vip_free_emoji" field.</summary>
    public const int VipFreeEmojiFieldNumber = 2;
    private readonly static uint VipFreeEmojiDefaultValue = 0;

    private uint vipFreeEmoji_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipFreeEmoji {
      get { if ((_hasBits0 & 2) != 0) { return vipFreeEmoji_; } else { return VipFreeEmojiDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vipFreeEmoji_ = value;
      }
    }
    /// <summary>Gets whether the "vip_free_emoji" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipFreeEmoji {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vip_free_emoji" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipFreeEmoji() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "giftbag_free_emoji" field.</summary>
    public const int GiftbagFreeEmojiFieldNumber = 3;
    private readonly static uint GiftbagFreeEmojiDefaultValue = 0;

    private uint giftbagFreeEmoji_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GiftbagFreeEmoji {
      get { if ((_hasBits0 & 4) != 0) { return giftbagFreeEmoji_; } else { return GiftbagFreeEmojiDefaultValue; } }
      set {
        _hasBits0 |= 4;
        giftbagFreeEmoji_ = value;
      }
    }
    /// <summary>Gets whether the "giftbag_free_emoji" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGiftbagFreeEmoji {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "giftbag_free_emoji" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGiftbagFreeEmoji() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeEmojiRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeEmojiRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (VipFreeEmoji != other.VipFreeEmoji) return false;
      if (GiftbagFreeEmoji != other.GiftbagFreeEmoji) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasVipFreeEmoji) hash ^= VipFreeEmoji.GetHashCode();
      if (HasGiftbagFreeEmoji) hash ^= GiftbagFreeEmoji.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasVipFreeEmoji) {
        output.WriteRawTag(16);
        output.WriteUInt32(VipFreeEmoji);
      }
      if (HasGiftbagFreeEmoji) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftbagFreeEmoji);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasVipFreeEmoji) {
        output.WriteRawTag(16);
        output.WriteUInt32(VipFreeEmoji);
      }
      if (HasGiftbagFreeEmoji) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftbagFreeEmoji);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasVipFreeEmoji) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipFreeEmoji);
      }
      if (HasGiftbagFreeEmoji) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftbagFreeEmoji);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeEmojiRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasVipFreeEmoji) {
        VipFreeEmoji = other.VipFreeEmoji;
      }
      if (other.HasGiftbagFreeEmoji) {
        GiftbagFreeEmoji = other.GiftbagFreeEmoji;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            VipFreeEmoji = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftbagFreeEmoji = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            VipFreeEmoji = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftbagFreeEmoji = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FreeCalltimeRSP : pb::IMessage<FreeCalltimeRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeCalltimeRSP> _parser = new pb::MessageParser<FreeCalltimeRSP>(() => new FreeCalltimeRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeCalltimeRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeCalltimeRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeCalltimeRSP(FreeCalltimeRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      vipFreeCalltime_ = other.vipFreeCalltime_;
      giftbagFreeCalltime_ = other.giftbagFreeCalltime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeCalltimeRSP Clone() {
      return new FreeCalltimeRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vip_free_calltime" field.</summary>
    public const int VipFreeCalltimeFieldNumber = 2;
    private readonly static uint VipFreeCalltimeDefaultValue = 0;

    private uint vipFreeCalltime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipFreeCalltime {
      get { if ((_hasBits0 & 2) != 0) { return vipFreeCalltime_; } else { return VipFreeCalltimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vipFreeCalltime_ = value;
      }
    }
    /// <summary>Gets whether the "vip_free_calltime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipFreeCalltime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vip_free_calltime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipFreeCalltime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "giftbag_free_calltime" field.</summary>
    public const int GiftbagFreeCalltimeFieldNumber = 3;
    private readonly static uint GiftbagFreeCalltimeDefaultValue = 0;

    private uint giftbagFreeCalltime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GiftbagFreeCalltime {
      get { if ((_hasBits0 & 4) != 0) { return giftbagFreeCalltime_; } else { return GiftbagFreeCalltimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        giftbagFreeCalltime_ = value;
      }
    }
    /// <summary>Gets whether the "giftbag_free_calltime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGiftbagFreeCalltime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "giftbag_free_calltime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGiftbagFreeCalltime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeCalltimeRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeCalltimeRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (VipFreeCalltime != other.VipFreeCalltime) return false;
      if (GiftbagFreeCalltime != other.GiftbagFreeCalltime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasVipFreeCalltime) hash ^= VipFreeCalltime.GetHashCode();
      if (HasGiftbagFreeCalltime) hash ^= GiftbagFreeCalltime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasVipFreeCalltime) {
        output.WriteRawTag(16);
        output.WriteUInt32(VipFreeCalltime);
      }
      if (HasGiftbagFreeCalltime) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftbagFreeCalltime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasVipFreeCalltime) {
        output.WriteRawTag(16);
        output.WriteUInt32(VipFreeCalltime);
      }
      if (HasGiftbagFreeCalltime) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftbagFreeCalltime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasVipFreeCalltime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipFreeCalltime);
      }
      if (HasGiftbagFreeCalltime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftbagFreeCalltime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeCalltimeRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasVipFreeCalltime) {
        VipFreeCalltime = other.VipFreeCalltime;
      }
      if (other.HasGiftbagFreeCalltime) {
        GiftbagFreeCalltime = other.GiftbagFreeCalltime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            VipFreeCalltime = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftbagFreeCalltime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            VipFreeCalltime = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftbagFreeCalltime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendVipCardREQ : pb::IMessage<SendVipCardREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendVipCardREQ> _parser = new pb::MessageParser<SendVipCardREQ>(() => new SendVipCardREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SendVipCardREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardREQ(SendVipCardREQ other) : this() {
      _hasBits0 = other._hasBits0;
      fromUid_ = other.fromUid_;
      toUid_ = other.toUid_;
      clubid_ = other.clubid_;
      vipLevel_ = other.vipLevel_;
      vipDuration_ = other.vipDuration_;
      clubName_ = other.clubName_;
      leagueid_ = other.leagueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardREQ Clone() {
      return new SendVipCardREQ(this);
    }

    /// <summary>Field number for the "from_uid" field.</summary>
    public const int FromUidFieldNumber = 1;
    private readonly static long FromUidDefaultValue = 0L;

    private long fromUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FromUid {
      get { if ((_hasBits0 & 1) != 0) { return fromUid_; } else { return FromUidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fromUid_ = value;
      }
    }
    /// <summary>Gets whether the "from_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "from_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "to_uid" field.</summary>
    public const int ToUidFieldNumber = 2;
    private readonly static long ToUidDefaultValue = 0L;

    private long toUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUid {
      get { if ((_hasBits0 & 2) != 0) { return toUid_; } else { return ToUidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        toUid_ = value;
      }
    }
    /// <summary>Gets whether the "to_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "to_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 4) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private readonly static global::Texas.Protocol.VIPLevel VipLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel VipLevel {
      get { if ((_hasBits0 & 8) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "vip_duration" field.</summary>
    public const int VipDurationFieldNumber = 5;
    private readonly static global::Texas.Protocol.VIPDuration VipDurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration vipDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration VipDuration {
      get { if ((_hasBits0 & 16) != 0) { return vipDuration_; } else { return VipDurationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        vipDuration_ = value;
      }
    }
    /// <summary>Gets whether the "vip_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipDuration {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "vip_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipDuration() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 6;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 7;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 32) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 32;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SendVipCardREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SendVipCardREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUid != other.FromUid) return false;
      if (ToUid != other.ToUid) return false;
      if (Clubid != other.Clubid) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipDuration != other.VipDuration) return false;
      if (ClubName != other.ClubName) return false;
      if (Leagueid != other.Leagueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFromUid) hash ^= FromUid.GetHashCode();
      if (HasToUid) hash ^= ToUid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasVipDuration) hash ^= VipDuration.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFromUid) {
        output.WriteRawTag(8);
        output.WriteInt64(FromUid);
      }
      if (HasToUid) {
        output.WriteRawTag(16);
        output.WriteInt64(ToUid);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VipDuration);
      }
      if (HasClubName) {
        output.WriteRawTag(50);
        output.WriteString(ClubName);
      }
      if (HasLeagueid) {
        output.WriteRawTag(56);
        output.WriteInt32(Leagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFromUid) {
        output.WriteRawTag(8);
        output.WriteInt64(FromUid);
      }
      if (HasToUid) {
        output.WriteRawTag(16);
        output.WriteInt64(ToUid);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VipDuration);
      }
      if (HasClubName) {
        output.WriteRawTag(50);
        output.WriteString(ClubName);
      }
      if (HasLeagueid) {
        output.WriteRawTag(56);
        output.WriteInt32(Leagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFromUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromUid);
      }
      if (HasToUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToUid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipLevel);
      }
      if (HasVipDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipDuration);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SendVipCardREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasFromUid) {
        FromUid = other.FromUid;
      }
      if (other.HasToUid) {
        ToUid = other.ToUid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasVipDuration) {
        VipDuration = other.VipDuration;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromUid = input.ReadInt64();
            break;
          }
          case 16: {
            ToUid = input.ReadInt64();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 40: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 50: {
            ClubName = input.ReadString();
            break;
          }
          case 56: {
            Leagueid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FromUid = input.ReadInt64();
            break;
          }
          case 16: {
            ToUid = input.ReadInt64();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 40: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 50: {
            ClubName = input.ReadString();
            break;
          }
          case 56: {
            Leagueid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendVipCardRSP : pb::IMessage<SendVipCardRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendVipCardRSP> _parser = new pb::MessageParser<SendVipCardRSP>(() => new SendVipCardRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SendVipCardRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardRSP(SendVipCardRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      msg_ = other.msg_;
      toUid_ = other.toUid_;
      vipLevel_ = other.vipLevel_;
      vipDuration_ = other.vipDuration_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardRSP Clone() {
      return new SendVipCardRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///-1 not enough diamond  -2 param error -4 can't send to h5 user -5 no authority -10 包含被ban的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMsg() {
      msg_ = null;
    }

    /// <summary>Field number for the "to_uid" field.</summary>
    public const int ToUidFieldNumber = 3;
    private readonly static long ToUidDefaultValue = 0L;

    private long toUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUid {
      get { if ((_hasBits0 & 2) != 0) { return toUid_; } else { return ToUidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        toUid_ = value;
      }
    }
    /// <summary>Gets whether the "to_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "to_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private readonly static global::Texas.Protocol.VIPLevel VipLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel VipLevel {
      get { if ((_hasBits0 & 4) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "vip_duration" field.</summary>
    public const int VipDurationFieldNumber = 5;
    private readonly static global::Texas.Protocol.VIPDuration VipDurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration vipDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration VipDuration {
      get { if ((_hasBits0 & 8) != 0) { return vipDuration_; } else { return VipDurationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vipDuration_ = value;
      }
    }
    /// <summary>Gets whether the "vip_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipDuration {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "vip_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipDuration() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// to_uid 的 nickname
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SendVipCardRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SendVipCardRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      if (ToUid != other.ToUid) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipDuration != other.VipDuration) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (HasToUid) hash ^= ToUid.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasVipDuration) hash ^= VipDuration.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasToUid) {
        output.WriteRawTag(24);
        output.WriteInt64(ToUid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VipDuration);
      }
      if (HasName) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasToUid) {
        output.WriteRawTag(24);
        output.WriteInt64(ToUid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VipDuration);
      }
      if (HasName) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (HasToUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToUid);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipLevel);
      }
      if (HasVipDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipDuration);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SendVipCardRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      if (other.HasToUid) {
        ToUid = other.ToUid;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasVipDuration) {
        VipDuration = other.VipDuration;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            ToUid = input.ReadInt64();
            break;
          }
          case 32: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 40: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            ToUid = input.ReadInt64();
            break;
          }
          case 32: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 40: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendVipCardBRC : pb::IMessage<SendVipCardBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendVipCardBRC> _parser = new pb::MessageParser<SendVipCardBRC>(() => new SendVipCardBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SendVipCardBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardBRC(SendVipCardBRC other) : this() {
      _hasBits0 = other._hasBits0;
      fromUid_ = other.fromUid_;
      fromName_ = other.fromName_;
      clubid_ = other.clubid_;
      vipLevel_ = other.vipLevel_;
      vipDuration_ = other.vipDuration_;
      clubName_ = other.clubName_;
      toUid_ = other.toUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SendVipCardBRC Clone() {
      return new SendVipCardBRC(this);
    }

    /// <summary>Field number for the "from_uid" field.</summary>
    public const int FromUidFieldNumber = 1;
    private readonly static long FromUidDefaultValue = 0L;

    private long fromUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FromUid {
      get { if ((_hasBits0 & 1) != 0) { return fromUid_; } else { return FromUidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fromUid_ = value;
      }
    }
    /// <summary>Gets whether the "from_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "from_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "from_name" field.</summary>
    public const int FromNameFieldNumber = 2;
    private readonly static string FromNameDefaultValue = "";

    private string fromName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FromName {
      get { return fromName_ ?? FromNameDefaultValue; }
      set {
        fromName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "from_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFromName {
      get { return fromName_ != null; }
    }
    /// <summary>Clears the value of the "from_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFromName() {
      fromName_ = null;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 2) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private readonly static global::Texas.Protocol.VIPLevel VipLevelDefaultValue = global::Texas.Protocol.VIPLevel.None;

    private global::Texas.Protocol.VIPLevel vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPLevel VipLevel {
      get { if ((_hasBits0 & 4) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "vip_duration" field.</summary>
    public const int VipDurationFieldNumber = 5;
    private readonly static global::Texas.Protocol.VIPDuration VipDurationDefaultValue = global::Texas.Protocol.VIPDuration.None;

    private global::Texas.Protocol.VIPDuration vipDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.VIPDuration VipDuration {
      get { if ((_hasBits0 & 8) != 0) { return vipDuration_; } else { return VipDurationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vipDuration_ = value;
      }
    }
    /// <summary>Gets whether the "vip_duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipDuration {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "vip_duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipDuration() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 6;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "to_uid" field.</summary>
    public const int ToUidFieldNumber = 7;
    private readonly static long ToUidDefaultValue = 0L;

    private long toUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ToUid {
      get { if ((_hasBits0 & 16) != 0) { return toUid_; } else { return ToUidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        toUid_ = value;
      }
    }
    /// <summary>Gets whether the "to_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasToUid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "to_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToUid() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SendVipCardBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SendVipCardBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUid != other.FromUid) return false;
      if (FromName != other.FromName) return false;
      if (Clubid != other.Clubid) return false;
      if (VipLevel != other.VipLevel) return false;
      if (VipDuration != other.VipDuration) return false;
      if (ClubName != other.ClubName) return false;
      if (ToUid != other.ToUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFromUid) hash ^= FromUid.GetHashCode();
      if (HasFromName) hash ^= FromName.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasVipDuration) hash ^= VipDuration.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasToUid) hash ^= ToUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFromUid) {
        output.WriteRawTag(8);
        output.WriteInt64(FromUid);
      }
      if (HasFromName) {
        output.WriteRawTag(18);
        output.WriteString(FromName);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VipDuration);
      }
      if (HasClubName) {
        output.WriteRawTag(50);
        output.WriteString(ClubName);
      }
      if (HasToUid) {
        output.WriteRawTag(56);
        output.WriteInt64(ToUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFromUid) {
        output.WriteRawTag(8);
        output.WriteInt64(FromUid);
      }
      if (HasFromName) {
        output.WriteRawTag(18);
        output.WriteString(FromName);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasVipLevel) {
        output.WriteRawTag(32);
        output.WriteEnum((int) VipLevel);
      }
      if (HasVipDuration) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VipDuration);
      }
      if (HasClubName) {
        output.WriteRawTag(50);
        output.WriteString(ClubName);
      }
      if (HasToUid) {
        output.WriteRawTag(56);
        output.WriteInt64(ToUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFromUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromUid);
      }
      if (HasFromName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromName);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipLevel);
      }
      if (HasVipDuration) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VipDuration);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasToUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SendVipCardBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasFromUid) {
        FromUid = other.FromUid;
      }
      if (other.HasFromName) {
        FromName = other.FromName;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasVipDuration) {
        VipDuration = other.VipDuration;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasToUid) {
        ToUid = other.ToUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromUid = input.ReadInt64();
            break;
          }
          case 18: {
            FromName = input.ReadString();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 40: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 50: {
            ClubName = input.ReadString();
            break;
          }
          case 56: {
            ToUid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FromUid = input.ReadInt64();
            break;
          }
          case 18: {
            FromName = input.ReadString();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = (global::Texas.Protocol.VIPLevel) input.ReadEnum();
            break;
          }
          case 40: {
            VipDuration = (global::Texas.Protocol.VIPDuration) input.ReadEnum();
            break;
          }
          case 50: {
            ClubName = input.ReadString();
            break;
          }
          case 56: {
            ToUid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimebankLeftTimesREQ : pb::IMessage<TimebankLeftTimesREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimebankLeftTimesREQ> _parser = new pb::MessageParser<TimebankLeftTimesREQ>(() => new TimebankLeftTimesREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimebankLeftTimesREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimebankLeftTimesREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimebankLeftTimesREQ(TimebankLeftTimesREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      roomid_ = other.roomid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimebankLeftTimesREQ Clone() {
      return new TimebankLeftTimesREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 2;
    private readonly static int RoomidDefaultValue = 0;

    private int roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Roomid {
      get { if ((_hasBits0 & 2) != 0) { return roomid_; } else { return RoomidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        roomid_ = value;
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimebankLeftTimesREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimebankLeftTimesREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Roomid != other.Roomid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasRoomid) {
        output.WriteRawTag(16);
        output.WriteInt32(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasRoomid) {
        output.WriteRawTag(16);
        output.WriteInt32(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimebankLeftTimesREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Roomid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Roomid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimebankLeftTimesRSP : pb::IMessage<TimebankLeftTimesRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimebankLeftTimesRSP> _parser = new pb::MessageParser<TimebankLeftTimesRSP>(() => new TimebankLeftTimesRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimebankLeftTimesRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimebankLeftTimesRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimebankLeftTimesRSP(TimebankLeftTimesRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      roomid_ = other.roomid_;
      vipTimebankLeftTimes_ = other.vipTimebankLeftTimes_;
      handsCntToAddTimebankTimes_ = other.handsCntToAddTimebankTimes_;
      isEnableTimebank_ = other.isEnableTimebank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimebankLeftTimesRSP Clone() {
      return new TimebankLeftTimesRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 2;
    private readonly static int RoomidDefaultValue = 0;

    private int roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Roomid {
      get { if ((_hasBits0 & 2) != 0) { return roomid_; } else { return RoomidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        roomid_ = value;
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vip_timebank_left_times" field.</summary>
    public const int VipTimebankLeftTimesFieldNumber = 3;
    private readonly static uint VipTimebankLeftTimesDefaultValue = 0;

    private uint vipTimebankLeftTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipTimebankLeftTimes {
      get { if ((_hasBits0 & 4) != 0) { return vipTimebankLeftTimes_; } else { return VipTimebankLeftTimesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vipTimebankLeftTimes_ = value;
      }
    }
    /// <summary>Gets whether the "vip_timebank_left_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipTimebankLeftTimes {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vip_timebank_left_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipTimebankLeftTimes() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hands_cnt_to_add_timebank_times" field.</summary>
    public const int HandsCntToAddTimebankTimesFieldNumber = 4;
    private readonly static uint HandsCntToAddTimebankTimesDefaultValue = 0;

    private uint handsCntToAddTimebankTimes_;
    /// <summary>
    /// 多少手牌后增加使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HandsCntToAddTimebankTimes {
      get { if ((_hasBits0 & 8) != 0) { return handsCntToAddTimebankTimes_; } else { return HandsCntToAddTimebankTimesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        handsCntToAddTimebankTimes_ = value;
      }
    }
    /// <summary>Gets whether the "hands_cnt_to_add_timebank_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsCntToAddTimebankTimes {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hands_cnt_to_add_timebank_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsCntToAddTimebankTimes() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_enable_timebank" field.</summary>
    public const int IsEnableTimebankFieldNumber = 5;
    private readonly static bool IsEnableTimebankDefaultValue = false;

    private bool isEnableTimebank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEnableTimebank {
      get { if ((_hasBits0 & 16) != 0) { return isEnableTimebank_; } else { return IsEnableTimebankDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isEnableTimebank_ = value;
      }
    }
    /// <summary>Gets whether the "is_enable_timebank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEnableTimebank {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_enable_timebank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEnableTimebank() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimebankLeftTimesRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimebankLeftTimesRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Roomid != other.Roomid) return false;
      if (VipTimebankLeftTimes != other.VipTimebankLeftTimes) return false;
      if (HandsCntToAddTimebankTimes != other.HandsCntToAddTimebankTimes) return false;
      if (IsEnableTimebank != other.IsEnableTimebank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasVipTimebankLeftTimes) hash ^= VipTimebankLeftTimes.GetHashCode();
      if (HasHandsCntToAddTimebankTimes) hash ^= HandsCntToAddTimebankTimes.GetHashCode();
      if (HasIsEnableTimebank) hash ^= IsEnableTimebank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasRoomid) {
        output.WriteRawTag(16);
        output.WriteInt32(Roomid);
      }
      if (HasVipTimebankLeftTimes) {
        output.WriteRawTag(24);
        output.WriteUInt32(VipTimebankLeftTimes);
      }
      if (HasHandsCntToAddTimebankTimes) {
        output.WriteRawTag(32);
        output.WriteUInt32(HandsCntToAddTimebankTimes);
      }
      if (HasIsEnableTimebank) {
        output.WriteRawTag(40);
        output.WriteBool(IsEnableTimebank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasRoomid) {
        output.WriteRawTag(16);
        output.WriteInt32(Roomid);
      }
      if (HasVipTimebankLeftTimes) {
        output.WriteRawTag(24);
        output.WriteUInt32(VipTimebankLeftTimes);
      }
      if (HasHandsCntToAddTimebankTimes) {
        output.WriteRawTag(32);
        output.WriteUInt32(HandsCntToAddTimebankTimes);
      }
      if (HasIsEnableTimebank) {
        output.WriteRawTag(40);
        output.WriteBool(IsEnableTimebank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
      }
      if (HasVipTimebankLeftTimes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipTimebankLeftTimes);
      }
      if (HasHandsCntToAddTimebankTimes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HandsCntToAddTimebankTimes);
      }
      if (HasIsEnableTimebank) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimebankLeftTimesRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasVipTimebankLeftTimes) {
        VipTimebankLeftTimes = other.VipTimebankLeftTimes;
      }
      if (other.HasHandsCntToAddTimebankTimes) {
        HandsCntToAddTimebankTimes = other.HandsCntToAddTimebankTimes;
      }
      if (other.HasIsEnableTimebank) {
        IsEnableTimebank = other.IsEnableTimebank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Roomid = input.ReadInt32();
            break;
          }
          case 24: {
            VipTimebankLeftTimes = input.ReadUInt32();
            break;
          }
          case 32: {
            HandsCntToAddTimebankTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            IsEnableTimebank = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Roomid = input.ReadInt32();
            break;
          }
          case 24: {
            VipTimebankLeftTimes = input.ReadUInt32();
            break;
          }
          case 32: {
            HandsCntToAddTimebankTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            IsEnableTimebank = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///体验卡
  /// </summary>
  public sealed partial class TrialVipCardREQ : pb::IMessage<TrialVipCardREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrialVipCardREQ> _parser = new pb::MessageParser<TrialVipCardREQ>(() => new TrialVipCardREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrialVipCardREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialVipCardREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialVipCardREQ(TrialVipCardREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      trial_ = other.trial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialVipCardREQ Clone() {
      return new TrialVipCardREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "trial" field.</summary>
    public const int TrialFieldNumber = 2;
    private readonly static global::Texas.Protocol.TrialVipNo TrialDefaultValue = global::Texas.Protocol.TrialVipNo.None;

    private global::Texas.Protocol.TrialVipNo trial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TrialVipNo Trial {
      get { if ((_hasBits0 & 2) != 0) { return trial_; } else { return TrialDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trial_ = value;
      }
    }
    /// <summary>Gets whether the "trial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrial {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrial() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrialVipCardREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrialVipCardREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Trial != other.Trial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasTrial) hash ^= Trial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasTrial) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Trial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasTrial) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Trial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasTrial) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrialVipCardREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasTrial) {
        Trial = other.Trial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Trial = (global::Texas.Protocol.TrialVipNo) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Trial = (global::Texas.Protocol.TrialVipNo) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrialVipCardRSP : pb::IMessage<TrialVipCardRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrialVipCardRSP> _parser = new pb::MessageParser<TrialVipCardRSP>(() => new TrialVipCardRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrialVipCardRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.VipReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialVipCardRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialVipCardRSP(TrialVipCardRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      msg_ = other.msg_;
      uid_ = other.uid_;
      vip_ = other.vip_ != null ? other.vip_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialVipCardRSP Clone() {
      return new TrialVipCardRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0.成功 -4.已经领过 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMsg() {
      msg_ = null;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 2) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 4;
    private global::Texas.Protocol.UserVipInfo vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserVipInfo Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrialVipCardRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrialVipCardRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      if (Uid != other.Uid) return false;
      if (!object.Equals(Vip, other.Vip)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (vip_ != null) hash ^= Vip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasUid) {
        output.WriteRawTag(24);
        output.WriteInt64(Uid);
      }
      if (vip_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasUid) {
        output.WriteRawTag(24);
        output.WriteInt64(Uid);
      }
      if (vip_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (vip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrialVipCardRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.vip_ != null) {
        if (vip_ == null) {
          Vip = new global::Texas.Protocol.UserVipInfo();
        }
        Vip.MergeFrom(other.Vip);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadInt64();
            break;
          }
          case 34: {
            if (vip_ == null) {
              Vip = new global::Texas.Protocol.UserVipInfo();
            }
            input.ReadMessage(Vip);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadInt64();
            break;
          }
          case 34: {
            if (vip_ == null) {
              Vip = new global::Texas.Protocol.UserVipInfo();
            }
            input.ReadMessage(Vip);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
