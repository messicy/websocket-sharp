// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hand_mission.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from hand_mission.proto</summary>
  public static partial class HandMissionReflection {

    #region Descriptor
    /// <summary>File descriptor for hand_mission.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HandMissionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJoYW5kX21pc3Npb24ucHJvdG8aCXBiMi5wcm90byLSCQoUSGFuZE1pc3Np",
            "b25HYW1lTW9kZXMSHgoRR0FNRV9NT0RFX05MSF9OTEgYASABKAhIAIgBARIe",
            "ChFHQU1FX01PREVfTkxIX0FPRhgCIAEoCEgBiAEBEiMKFkdBTUVfTU9ERV9O",
            "TEhfU0lYX1BMVVMYAyABKAhIAogBARIhChRHQU1FX01PREVfTkxIX05MSF8z",
            "MRgEIAEoCEgDiAEBEiIKFUdBTUVfTU9ERV9OTEhfTkxIXzMxRhgFIAEoCEgE",
            "iAEBEh8KEkdBTUVfTU9ERV9QTE9fUExPNBgGIAEoCEgFiAEBEh8KEkdBTUVf",
            "TU9ERV9QTE9fUExPNRgHIAEoCEgGiAEBEh8KEkdBTUVfTU9ERV9QTE9fUExP",
            "NhgIIAEoCEgHiAEBEiEKFEdBTUVfTU9ERV9QTE9fUExPNEhMGAkgASgISAiI",
            "AQESIQoUR0FNRV9NT0RFX1BMT19QTE81SEwYCiABKAhICYgBARIhChRHQU1F",
            "X01PREVfUExPX1BMTzZITBgLIAEoCEgKiAEBEiAKE0dBTUVfTU9ERV9GTEFT",
            "SF9OTEgYDCABKAhIC4gBARIhChRHQU1FX01PREVfRkxBU0hfUExPNBgNIAEo",
            "CEgMiAEBEiEKFEdBTUVfTU9ERV9GTEFTSF9QTE81GA4gASgISA2IAQESJQoY",
            "R0FNRV9NT0RFX01JWEVEX05MSF9QTE80GA8gASgISA6IAQESJQoYR0FNRV9N",
            "T0RFX01JWEVEX05MSF9QTE81GBAgASgISA+IAQESIgoVR0FNRV9NT0RFX09U",
            "SEVSX1BVU09ZGBEgASgISBCIAQESIAoTR0FNRV9NT0RFX09USEVSX09GQxgS",
            "IAEoCEgRiAEBEiYKGUdBTUVfTU9ERV9PVEhFUl9URUVOUEFUVEkYEyABKAhI",
            "EogBARIkChdHQU1FX01PREVfT1RIRVJfVE9OR0lUUxgUIAEoCEgTiAEBQhQK",
            "El9HQU1FX01PREVfTkxIX05MSEIUChJfR0FNRV9NT0RFX05MSF9BT0ZCGQoX",
            "X0dBTUVfTU9ERV9OTEhfU0lYX1BMVVNCFwoVX0dBTUVfTU9ERV9OTEhfTkxI",
            "XzMxQhgKFl9HQU1FX01PREVfTkxIX05MSF8zMUZCFQoTX0dBTUVfTU9ERV9Q",
            "TE9fUExPNEIVChNfR0FNRV9NT0RFX1BMT19QTE81QhUKE19HQU1FX01PREVf",
            "UExPX1BMTzZCFwoVX0dBTUVfTU9ERV9QTE9fUExPNEhMQhcKFV9HQU1FX01P",
            "REVfUExPX1BMTzVITEIXChVfR0FNRV9NT0RFX1BMT19QTE82SExCFgoUX0dB",
            "TUVfTU9ERV9GTEFTSF9OTEhCFwoVX0dBTUVfTU9ERV9GTEFTSF9QTE80QhcK",
            "FV9HQU1FX01PREVfRkxBU0hfUExPNUIbChlfR0FNRV9NT0RFX01JWEVEX05M",
            "SF9QTE80QhsKGV9HQU1FX01PREVfTUlYRURfTkxIX1BMTzVCGAoWX0dBTUVf",
            "TU9ERV9PVEhFUl9QVVNPWUIWChRfR0FNRV9NT0RFX09USEVSX09GQ0IcChpf",
            "R0FNRV9NT0RFX09USEVSX1RFRU5QQVRUSUIaChhfR0FNRV9NT0RFX09USEVS",
            "X1RPTkdJVFMi0AoKEUhhbmRNaXNzaW9uQ29uZmlnEhwKD2hhbmRfbWlzc2lv",
            "bl9pZBgBIAEoA0gAiAEBEhUKCG1vZHVsZWlkGAIgASgDSAGIAQESEwoGY2x1",
            "YmlkGAMgASgFSAKIAQESFQoIbGVhZ3VlaWQYBCABKAVIA4gBARIbCg5zdXBl",
            "cl9sZWFndWVpZBgFIAEoBUgEiAEBEhgKC2NyZWF0b3JfdWlkGAYgASgDSAWI",
            "AQESGAoLaXNfcmVwZWF0ZWQYByABKAVIBogBARIXCgpzdGFydF90aW1lGAgg",
            "ASgDSAeIAQESFQoIZW5kX3RpbWUYCSABKANICIgBARIbCg50ZXJtaW5hdGVf",
            "dGltZRgKIAEoA0gJiAEBEh0KEGlzX2hhbmRfd2l0aF9mZWUYCyABKAVICogB",
            "ARIWCgltaW5fYmxpbmQYDCABKAVIC4gBARIWCgltYXhfYmxpbmQYDSABKAVI",
            "DIgBARIeChFoYW5kX21pc3Npb25fdHlwZRgOIAEoBUgNiAEBEi4KCmdhbWVf",
            "bW9kZXMYDyABKAsyFS5IYW5kTWlzc2lvbkdhbWVNb2Rlc0gOiAEBEiEKCWhh",
            "bmRfdHlwZRgQIAEoDjIJLkhhbmRUeXBlSA+IAQESIAoTdGFyZ2V0X251bV9v",
            "Zl9oYW5kcxgRIAEoBUgQiAEBEh4KEWlzX3Jld2FyZF9saW1pdGVkGBIgASgF",
            "SBGIAQESGwoObnVtX29mX3Jld2FyZHMYEyABKAVIEogBARIxCgtyZXdhcmRf",
            "dHlwZRgUIAEoDjIXLkhhbmRNaXNzaW9uUmV3YXJkVHlwZXNIE4gBARIaCg1y",
            "ZXdhcmRfYW1vdW50GBUgASgDSBSIAQESKAobcmV3YXJkX2x1Y2t5ZHJhd19i",
            "YXNlX3ByaWNlGBYgASgFSBWIAQESKAobcmV3YXJkX2x1Y2t5ZHJhd19tdWx0",
            "aXBsaWVyGBcgASgFSBaIAQESHwoScmV3YXJkX2Rlc2NyaXB0aW9uGBggASgJ",
            "SBeIAQESEwoGc3RhdHVzGBkgASgFSBiIAQESGgoNY2FuY2VsZWRfdGltZRga",
            "IAEoA0gZiAEBEhkKDGFib3J0ZWRfdGltZRgbIAEoA0gaiAEBEhYKCXN0b3Bf",
            "dGltZRgcIAEoA0gbiAEBQhIKEF9oYW5kX21pc3Npb25faWRCCwoJX21vZHVs",
            "ZWlkQgkKB19jbHViaWRCCwoJX2xlYWd1ZWlkQhEKD19zdXBlcl9sZWFndWVp",
            "ZEIOCgxfY3JlYXRvcl91aWRCDgoMX2lzX3JlcGVhdGVkQg0KC19zdGFydF90",
            "aW1lQgsKCV9lbmRfdGltZUIRCg9fdGVybWluYXRlX3RpbWVCEwoRX2lzX2hh",
            "bmRfd2l0aF9mZWVCDAoKX21pbl9ibGluZEIMCgpfbWF4X2JsaW5kQhQKEl9o",
            "YW5kX21pc3Npb25fdHlwZUINCgtfZ2FtZV9tb2Rlc0IMCgpfaGFuZF90eXBl",
            "QhYKFF90YXJnZXRfbnVtX29mX2hhbmRzQhQKEl9pc19yZXdhcmRfbGltaXRl",
            "ZEIRCg9fbnVtX29mX3Jld2FyZHNCDgoMX3Jld2FyZF90eXBlQhAKDl9yZXdh",
            "cmRfYW1vdW50Qh4KHF9yZXdhcmRfbHVja3lkcmF3X2Jhc2VfcHJpY2VCHgoc",
            "X3Jld2FyZF9sdWNreWRyYXdfbXVsdGlwbGllckIVChNfcmV3YXJkX2Rlc2Ny",
            "aXB0aW9uQgkKB19zdGF0dXNCEAoOX2NhbmNlbGVkX3RpbWVCDwoNX2Fib3J0",
            "ZWRfdGltZUIMCgpfc3RvcF90aW1lIroCCg9IYW5kTWlzc2lvbkluZm8SJwoG",
            "Y29uZmlnGAEgASgLMhIuSGFuZE1pc3Npb25Db25maWdIAIgBARIZCgxudW1f",
            "b2ZfaGFuZHMYAiABKAVIAYgBARIdChBudW1fb2ZfY29tcGxldGVkGAMgASgF",
            "SAKIAQESKAoGc3RhdHVzGAQgASgOMhMuSGFuZE1pc3Npb25zU3RhdHVzSAOI",
            "AQESHgoRbWlzc2lvbl90aW1lX2xlZnQYBSABKANIBIgBARIYCgtyZXdhcmRf",
            "bGVmdBgGIAEoBUgFiAEBQgkKB19jb25maWdCDwoNX251bV9vZl9oYW5kc0IT",
            "ChFfbnVtX29mX2NvbXBsZXRlZEIJCgdfc3RhdHVzQhQKEl9taXNzaW9uX3Rp",
            "bWVfbGVmdEIOCgxfcmV3YXJkX2xlZnQi+wEKEUhhbmRNaXNzaW9uUmVjb3Jk",
            "EhYKCXVzZXJfbmFtZRgBIAEoCUgAiAEBEhAKA3VpZBgCIAEoA0gBiAEBEh4K",
            "EXJld2FyZF9jbGFpbV90aW1lGAMgASgDSAKIAQESHQoQcHBfY2hpcHNfY2xh",
            "aW1lZBgEIAEoA0gDiAEBEiIKFXJld2FyZF9hbW91bnRfY2xhaW1lZBgFIAEo",
            "A0gEiAEBQgwKCl91c2VyX25hbWVCBgoEX3VpZEIUChJfcmV3YXJkX2NsYWlt",
            "X3RpbWVCEwoRX3BwX2NoaXBzX2NsYWltZWRCGAoWX3Jld2FyZF9hbW91bnRf",
            "Y2xhaW1lZCJmChBIYW5kTWlzc2lvbk9wUkVREhMKBmFjdGlvbhgBIAEoBUgA",
            "iAEBEicKBmNvbmZpZxgCIAEoCzISLkhhbmRNaXNzaW9uQ29uZmlnSAGIAQFC",
            "CQoHX2FjdGlvbkIJCgdfY29uZmlnIrABChBIYW5kTWlzc2lvbk9wUlNQEhEK",
            "BGNvZGUYASABKAVIAIgBARITCgZhY3Rpb24YAiABKAVIAYgBARInCgZjb25m",
            "aWcYAyABKAsyEi5IYW5kTWlzc2lvbkNvbmZpZ0gCiAEBEhoKDXdhcm5pbmdf",
            "bGltaXQYBCABKANIA4gBAUIHCgVfY29kZUIJCgdfYWN0aW9uQgkKB19jb25m",
            "aWdCEAoOX3dhcm5pbmdfbGltaXQizQEKFUhhbmRNaXNzaW9uU2ltcGxlSW5m",
            "bxIeChFzaG93X2hhbmRfbWlzc2lvbhgBIAEoBUgAiAEBEiEKFGlzX2hhbmRf",
            "bWlzc2lvbl9zdG9wGAIgASgFSAGIAQESJQoYbnVtX29mX2NvbXBsZXRlX21p",
            "c3Npb25zGAMgASgFSAKIAQFCFAoSX3Nob3dfaGFuZF9taXNzaW9uQhcKFV9p",
            "c19oYW5kX21pc3Npb25fc3RvcEIbChlfbnVtX29mX2NvbXBsZXRlX21pc3Np",
            "b25zIjQKEkhhbmRNaXNzaW9uSW5mb1JFURITCgZjbHViaWQYASABKAVIAIgB",
            "AUIJCgdfY2x1YmlkIrwBChJIYW5kTWlzc2lvbkluZm9SU1ASEQoEY29kZRgB",
            "IAEoBUgAiAEBEiEKFGlzX2hhbmRfbWlzc2lvbl9zdG9wGAIgASgFSAGIAQES",
            "GwoOc3RvcF90aW1lX2xlZnQYAyABKAVIAogBARIeCgRpbmZvGAQgAygLMhAu",
            "SGFuZE1pc3Npb25JbmZvQgcKBV9jb2RlQhcKFV9pc19oYW5kX21pc3Npb25f",
            "c3RvcEIRCg9fc3RvcF90aW1lX2xlZnQiaAoUSGFuZE1pc3Npb25SZWNvcmRS",
            "RVESHAoPaGFuZF9taXNzaW9uX2lkGAEgASgDSACIAQESEwoGY2x1YmlkGAIg",
            "ASgFSAGIAQFCEgoQX2hhbmRfbWlzc2lvbl9pZEIJCgdfY2x1YmlkIsIBChRI",
            "YW5kTWlzc2lvblJlY29yZFJTUBIRCgRjb2RlGAEgASgFSACIAQESJwoGY29u",
            "ZmlnGAIgASgLMhIuSGFuZE1pc3Npb25Db25maWdIAYgBARIiCgZyZWNvcmQY",
            "AyADKAsyEi5IYW5kTWlzc2lvblJlY29yZBIfChJyZXdhcmRfYW1vdW50X3Nl",
            "bnQYBCABKANIAogBAUIHCgVfY29kZUIJCgdfY29uZmlnQhUKE19yZXdhcmRf",
            "YW1vdW50X3NlbnQibQoZSGFuZE1pc3Npb25DbGFpbVJld2FyZFJFURIcCg9o",
            "YW5kX21pc3Npb25faWQYASABKANIAIgBARITCgZjbHViaWQYAiABKANIAYgB",
            "AUISChBfaGFuZF9taXNzaW9uX2lkQgkKB19jbHViaWQivAIKGUhhbmRNaXNz",
            "aW9uQ2xhaW1SZXdhcmRSU1ASEQoEY29kZRgBIAEoBUgAiAEBEjEKC3Jld2Fy",
            "ZF90eXBlGAIgASgOMhcuSGFuZE1pc3Npb25SZXdhcmRUeXBlc0gBiAEBEhUK",
            "CHBwX2NoaXBzGAMgASgDSAKIAQESHAoPbHVja3lkcmF3X2luZGV4GAQgASgF",
            "SAOIAQESGAoLcmV3YXJkX2xlZnQYBSABKAVIBIgBARIwCgtzaW1wbGVfaW5m",
            "bxgGIAEoCzIWLkhhbmRNaXNzaW9uU2ltcGxlSW5mb0gFiAEBQgcKBV9jb2Rl",
            "Qg4KDF9yZXdhcmRfdHlwZUILCglfcHBfY2hpcHNCEgoQX2x1Y2t5ZHJhd19p",
            "bmRleEIOCgxfcmV3YXJkX2xlZnRCDgoMX3NpbXBsZV9pbmZvIjoKGEhhbmRN",
            "aXNzaW9uU3RvcFN0YXR1c1JFURITCgZjbHViaWQYASABKAVIAIgBAUIJCgdf",
            "Y2x1YmlkIuYBChhIYW5kTWlzc2lvblN0b3BTdGF0dXNSU1ASIQoUaXNfaGFu",
            "ZF9taXNzaW9uX3N0b3AYASABKAVIAIgBARIRCgRuYW1lGAIgASgJSAGIAQES",
            "EwoGY2x1YmlkGAMgASgFSAKIAQESFQoIbGVhZ3VlaWQYBCABKAVIA4gBARIb",
            "Cg5zdXBlcl9sZWFndWVpZBgFIAEoBUgEiAEBQhcKFV9pc19oYW5kX21pc3Np",
            "b25fc3RvcEIHCgVfbmFtZUIJCgdfY2x1YmlkQgsKCV9sZWFndWVpZEIRCg9f",
            "c3VwZXJfbGVhZ3VlaWQiYgoaSGFuZE1pc3Npb25TdG9wU3RhdHVzT3BSRVES",
            "EwoGY2x1YmlkGAEgASgFSACIAQESFgoJb3BlcmF0aW9uGAIgASgFSAGIAQFC",
            "CQoHX2NsdWJpZEIMCgpfb3BlcmF0aW9uIs4BChpIYW5kTWlzc2lvblN0b3BT",
            "dGF0dXNPcFJTUBIRCgRjb2RlGAEgASgFSACIAQESFgoJb3BlcmF0aW9uGAIg",
            "ASgFSAGIAQESGgoNd2FybmluZ19saW1pdBgDIAEoBUgCiAEBEjAKC3NpbXBs",
            "ZV9pbmZvGAQgASgLMhYuSGFuZE1pc3Npb25TaW1wbGVJbmZvSAOIAQFCBwoF",
            "X2NvZGVCDAoKX29wZXJhdGlvbkIQCg5fd2FybmluZ19saW1pdEIOCgxfc2lt",
            "cGxlX2luZm8qVwoSSGFuZE1pc3Npb25zU3RhdHVzEgwKCE9OX0dPSU5HEAAS",
            "CQoFQ0xBSU0QARIMCghDQU5DRUxFRBACEg0KCUNPTVBMRVRFRBADEgsKB1NU",
            "T1BQRUQQBCpBChZIYW5kTWlzc2lvblJld2FyZFR5cGVzEgwKCFBQX0NISVBT",
            "EAASDQoJTFVDS1lEUkFXEAESCgoGT1RIRVJTEAJCGloHL3BicHBnb6oCDlRl",
            "eGFzLlByb3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.Pb2Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Texas.Protocol.HandMissionsStatus), typeof(global::Texas.Protocol.HandMissionRewardTypes), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionGameModes), global::Texas.Protocol.HandMissionGameModes.Parser, new[]{ "GAMEMODENLHNLH", "GAMEMODENLHAOF", "GAMEMODENLHSIXPLUS", "GAMEMODENLHNLH31", "GAMEMODENLHNLH31F", "GAMEMODEPLOPLO4", "GAMEMODEPLOPLO5", "GAMEMODEPLOPLO6", "GAMEMODEPLOPLO4HL", "GAMEMODEPLOPLO5HL", "GAMEMODEPLOPLO6HL", "GAMEMODEFLASHNLH", "GAMEMODEFLASHPLO4", "GAMEMODEFLASHPLO5", "GAMEMODEMIXEDNLHPLO4", "GAMEMODEMIXEDNLHPLO5", "GAMEMODEOTHERPUSOY", "GAMEMODEOTHEROFC", "GAMEMODEOTHERTEENPATTI", "GAMEMODEOTHERTONGITS" }, new[]{ "GAMEMODENLHNLH", "GAMEMODENLHAOF", "GAMEMODENLHSIXPLUS", "GAMEMODENLHNLH31", "GAMEMODENLHNLH31F", "GAMEMODEPLOPLO4", "GAMEMODEPLOPLO5", "GAMEMODEPLOPLO6", "GAMEMODEPLOPLO4HL", "GAMEMODEPLOPLO5HL", "GAMEMODEPLOPLO6HL", "GAMEMODEFLASHNLH", "GAMEMODEFLASHPLO4", "GAMEMODEFLASHPLO5", "GAMEMODEMIXEDNLHPLO4", "GAMEMODEMIXEDNLHPLO5", "GAMEMODEOTHERPUSOY", "GAMEMODEOTHEROFC", "GAMEMODEOTHERTEENPATTI", "GAMEMODEOTHERTONGITS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionConfig), global::Texas.Protocol.HandMissionConfig.Parser, new[]{ "HandMissionId", "Moduleid", "Clubid", "Leagueid", "SuperLeagueid", "CreatorUid", "IsRepeated", "StartTime", "EndTime", "TerminateTime", "IsHandWithFee", "MinBlind", "MaxBlind", "HandMissionType", "GameModes", "HandType", "TargetNumOfHands", "IsRewardLimited", "NumOfRewards", "RewardType", "RewardAmount", "RewardLuckydrawBasePrice", "RewardLuckydrawMultiplier", "RewardDescription", "Status", "CanceledTime", "AbortedTime", "StopTime" }, new[]{ "HandMissionId", "Moduleid", "Clubid", "Leagueid", "SuperLeagueid", "CreatorUid", "IsRepeated", "StartTime", "EndTime", "TerminateTime", "IsHandWithFee", "MinBlind", "MaxBlind", "HandMissionType", "GameModes", "HandType", "TargetNumOfHands", "IsRewardLimited", "NumOfRewards", "RewardType", "RewardAmount", "RewardLuckydrawBasePrice", "RewardLuckydrawMultiplier", "RewardDescription", "Status", "CanceledTime", "AbortedTime", "StopTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionInfo), global::Texas.Protocol.HandMissionInfo.Parser, new[]{ "Config", "NumOfHands", "NumOfCompleted", "Status", "MissionTimeLeft", "RewardLeft" }, new[]{ "Config", "NumOfHands", "NumOfCompleted", "Status", "MissionTimeLeft", "RewardLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionRecord), global::Texas.Protocol.HandMissionRecord.Parser, new[]{ "UserName", "Uid", "RewardClaimTime", "PpChipsClaimed", "RewardAmountClaimed" }, new[]{ "UserName", "Uid", "RewardClaimTime", "PpChipsClaimed", "RewardAmountClaimed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionOpREQ), global::Texas.Protocol.HandMissionOpREQ.Parser, new[]{ "Action", "Config" }, new[]{ "Action", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionOpRSP), global::Texas.Protocol.HandMissionOpRSP.Parser, new[]{ "Code", "Action", "Config", "WarningLimit" }, new[]{ "Code", "Action", "Config", "WarningLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionSimpleInfo), global::Texas.Protocol.HandMissionSimpleInfo.Parser, new[]{ "ShowHandMission", "IsHandMissionStop", "NumOfCompleteMissions" }, new[]{ "ShowHandMission", "IsHandMissionStop", "NumOfCompleteMissions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionInfoREQ), global::Texas.Protocol.HandMissionInfoREQ.Parser, new[]{ "Clubid" }, new[]{ "Clubid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionInfoRSP), global::Texas.Protocol.HandMissionInfoRSP.Parser, new[]{ "Code", "IsHandMissionStop", "StopTimeLeft", "Info" }, new[]{ "Code", "IsHandMissionStop", "StopTimeLeft" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionRecordREQ), global::Texas.Protocol.HandMissionRecordREQ.Parser, new[]{ "HandMissionId", "Clubid" }, new[]{ "HandMissionId", "Clubid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionRecordRSP), global::Texas.Protocol.HandMissionRecordRSP.Parser, new[]{ "Code", "Config", "Record", "RewardAmountSent" }, new[]{ "Code", "Config", "RewardAmountSent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionClaimRewardREQ), global::Texas.Protocol.HandMissionClaimRewardREQ.Parser, new[]{ "HandMissionId", "Clubid" }, new[]{ "HandMissionId", "Clubid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionClaimRewardRSP), global::Texas.Protocol.HandMissionClaimRewardRSP.Parser, new[]{ "Code", "RewardType", "PpChips", "LuckydrawIndex", "RewardLeft", "SimpleInfo" }, new[]{ "Code", "RewardType", "PpChips", "LuckydrawIndex", "RewardLeft", "SimpleInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionStopStatusREQ), global::Texas.Protocol.HandMissionStopStatusREQ.Parser, new[]{ "Clubid" }, new[]{ "Clubid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionStopStatusRSP), global::Texas.Protocol.HandMissionStopStatusRSP.Parser, new[]{ "IsHandMissionStop", "Name", "Clubid", "Leagueid", "SuperLeagueid" }, new[]{ "IsHandMissionStop", "Name", "Clubid", "Leagueid", "SuperLeagueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionStopStatusOpREQ), global::Texas.Protocol.HandMissionStopStatusOpREQ.Parser, new[]{ "Clubid", "Operation" }, new[]{ "Clubid", "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HandMissionStopStatusOpRSP), global::Texas.Protocol.HandMissionStopStatusOpRSP.Parser, new[]{ "Code", "Operation", "WarningLimit", "SimpleInfo" }, new[]{ "Code", "Operation", "WarningLimit", "SimpleInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 前端顯示的手牌任務狀態:  進行中 (顯示目前進度)、可領取、已取消、已結束、暫停中
  /// </summary>
  public enum HandMissionsStatus {
    [pbr::OriginalName("ON_GOING")] OnGoing = 0,
    [pbr::OriginalName("CLAIM")] Claim = 1,
    [pbr::OriginalName("CANCELED")] Canceled = 2,
    [pbr::OriginalName("COMPLETED")] Completed = 3,
    [pbr::OriginalName("STOPPED")] Stopped = 4,
  }

  public enum HandMissionRewardTypes {
    [pbr::OriginalName("PP_CHIPS")] PpChips = 0,
    [pbr::OriginalName("LUCKYDRAW")] Luckydraw = 1,
    [pbr::OriginalName("OTHERS")] Others = 2,
  }

  #endregion

  #region Messages
  public sealed partial class HandMissionGameModes : pb::IMessage<HandMissionGameModes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionGameModes> _parser = new pb::MessageParser<HandMissionGameModes>(() => new HandMissionGameModes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionGameModes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionGameModes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionGameModes(HandMissionGameModes other) : this() {
      _hasBits0 = other._hasBits0;
      gAMEMODENLHNLH_ = other.gAMEMODENLHNLH_;
      gAMEMODENLHAOF_ = other.gAMEMODENLHAOF_;
      gAMEMODENLHSIXPLUS_ = other.gAMEMODENLHSIXPLUS_;
      gAMEMODENLHNLH31_ = other.gAMEMODENLHNLH31_;
      gAMEMODENLHNLH31F_ = other.gAMEMODENLHNLH31F_;
      gAMEMODEPLOPLO4_ = other.gAMEMODEPLOPLO4_;
      gAMEMODEPLOPLO5_ = other.gAMEMODEPLOPLO5_;
      gAMEMODEPLOPLO6_ = other.gAMEMODEPLOPLO6_;
      gAMEMODEPLOPLO4HL_ = other.gAMEMODEPLOPLO4HL_;
      gAMEMODEPLOPLO5HL_ = other.gAMEMODEPLOPLO5HL_;
      gAMEMODEPLOPLO6HL_ = other.gAMEMODEPLOPLO6HL_;
      gAMEMODEFLASHNLH_ = other.gAMEMODEFLASHNLH_;
      gAMEMODEFLASHPLO4_ = other.gAMEMODEFLASHPLO4_;
      gAMEMODEFLASHPLO5_ = other.gAMEMODEFLASHPLO5_;
      gAMEMODEMIXEDNLHPLO4_ = other.gAMEMODEMIXEDNLHPLO4_;
      gAMEMODEMIXEDNLHPLO5_ = other.gAMEMODEMIXEDNLHPLO5_;
      gAMEMODEOTHERPUSOY_ = other.gAMEMODEOTHERPUSOY_;
      gAMEMODEOTHEROFC_ = other.gAMEMODEOTHEROFC_;
      gAMEMODEOTHERTEENPATTI_ = other.gAMEMODEOTHERTEENPATTI_;
      gAMEMODEOTHERTONGITS_ = other.gAMEMODEOTHERTONGITS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionGameModes Clone() {
      return new HandMissionGameModes(this);
    }

    /// <summary>Field number for the "GAME_MODE_NLH_NLH" field.</summary>
    public const int GAMEMODENLHNLHFieldNumber = 1;
    private readonly static bool GAMEMODENLHNLHDefaultValue = false;

    private bool gAMEMODENLHNLH_;
    /// <summary>
    /// NLH
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODENLHNLH {
      get { if ((_hasBits0 & 1) != 0) { return gAMEMODENLHNLH_; } else { return GAMEMODENLHNLHDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gAMEMODENLHNLH_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_NLH_NLH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODENLHNLH {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_NLH_NLH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODENLHNLH() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "GAME_MODE_NLH_AOF" field.</summary>
    public const int GAMEMODENLHAOFFieldNumber = 2;
    private readonly static bool GAMEMODENLHAOFDefaultValue = false;

    private bool gAMEMODENLHAOF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODENLHAOF {
      get { if ((_hasBits0 & 2) != 0) { return gAMEMODENLHAOF_; } else { return GAMEMODENLHAOFDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gAMEMODENLHAOF_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_NLH_AOF" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODENLHAOF {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_NLH_AOF" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODENLHAOF() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GAME_MODE_NLH_SIX_PLUS" field.</summary>
    public const int GAMEMODENLHSIXPLUSFieldNumber = 3;
    private readonly static bool GAMEMODENLHSIXPLUSDefaultValue = false;

    private bool gAMEMODENLHSIXPLUS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODENLHSIXPLUS {
      get { if ((_hasBits0 & 4) != 0) { return gAMEMODENLHSIXPLUS_; } else { return GAMEMODENLHSIXPLUSDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gAMEMODENLHSIXPLUS_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_NLH_SIX_PLUS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODENLHSIXPLUS {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_NLH_SIX_PLUS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODENLHSIXPLUS() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "GAME_MODE_NLH_NLH_31" field.</summary>
    public const int GAMEMODENLHNLH31FieldNumber = 4;
    private readonly static bool GAMEMODENLHNLH31DefaultValue = false;

    private bool gAMEMODENLHNLH31_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODENLHNLH31 {
      get { if ((_hasBits0 & 8) != 0) { return gAMEMODENLHNLH31_; } else { return GAMEMODENLHNLH31DefaultValue; } }
      set {
        _hasBits0 |= 8;
        gAMEMODENLHNLH31_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_NLH_NLH_31" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODENLHNLH31 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_NLH_NLH_31" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODENLHNLH31() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "GAME_MODE_NLH_NLH_31F" field.</summary>
    public const int GAMEMODENLHNLH31FFieldNumber = 5;
    private readonly static bool GAMEMODENLHNLH31FDefaultValue = false;

    private bool gAMEMODENLHNLH31F_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODENLHNLH31F {
      get { if ((_hasBits0 & 16) != 0) { return gAMEMODENLHNLH31F_; } else { return GAMEMODENLHNLH31FDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gAMEMODENLHNLH31F_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_NLH_NLH_31F" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODENLHNLH31F {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_NLH_NLH_31F" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODENLHNLH31F() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "GAME_MODE_PLO_PLO4" field.</summary>
    public const int GAMEMODEPLOPLO4FieldNumber = 6;
    private readonly static bool GAMEMODEPLOPLO4DefaultValue = false;

    private bool gAMEMODEPLOPLO4_;
    /// <summary>
    /// PLO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEPLOPLO4 {
      get { if ((_hasBits0 & 32) != 0) { return gAMEMODEPLOPLO4_; } else { return GAMEMODEPLOPLO4DefaultValue; } }
      set {
        _hasBits0 |= 32;
        gAMEMODEPLOPLO4_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_PLO_PLO4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEPLOPLO4 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_PLO_PLO4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEPLOPLO4() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "GAME_MODE_PLO_PLO5" field.</summary>
    public const int GAMEMODEPLOPLO5FieldNumber = 7;
    private readonly static bool GAMEMODEPLOPLO5DefaultValue = false;

    private bool gAMEMODEPLOPLO5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEPLOPLO5 {
      get { if ((_hasBits0 & 64) != 0) { return gAMEMODEPLOPLO5_; } else { return GAMEMODEPLOPLO5DefaultValue; } }
      set {
        _hasBits0 |= 64;
        gAMEMODEPLOPLO5_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_PLO_PLO5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEPLOPLO5 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_PLO_PLO5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEPLOPLO5() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "GAME_MODE_PLO_PLO6" field.</summary>
    public const int GAMEMODEPLOPLO6FieldNumber = 8;
    private readonly static bool GAMEMODEPLOPLO6DefaultValue = false;

    private bool gAMEMODEPLOPLO6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEPLOPLO6 {
      get { if ((_hasBits0 & 128) != 0) { return gAMEMODEPLOPLO6_; } else { return GAMEMODEPLOPLO6DefaultValue; } }
      set {
        _hasBits0 |= 128;
        gAMEMODEPLOPLO6_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_PLO_PLO6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEPLOPLO6 {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_PLO_PLO6" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEPLOPLO6() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "GAME_MODE_PLO_PLO4HL" field.</summary>
    public const int GAMEMODEPLOPLO4HLFieldNumber = 9;
    private readonly static bool GAMEMODEPLOPLO4HLDefaultValue = false;

    private bool gAMEMODEPLOPLO4HL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEPLOPLO4HL {
      get { if ((_hasBits0 & 256) != 0) { return gAMEMODEPLOPLO4HL_; } else { return GAMEMODEPLOPLO4HLDefaultValue; } }
      set {
        _hasBits0 |= 256;
        gAMEMODEPLOPLO4HL_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_PLO_PLO4HL" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEPLOPLO4HL {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_PLO_PLO4HL" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEPLOPLO4HL() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "GAME_MODE_PLO_PLO5HL" field.</summary>
    public const int GAMEMODEPLOPLO5HLFieldNumber = 10;
    private readonly static bool GAMEMODEPLOPLO5HLDefaultValue = false;

    private bool gAMEMODEPLOPLO5HL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEPLOPLO5HL {
      get { if ((_hasBits0 & 512) != 0) { return gAMEMODEPLOPLO5HL_; } else { return GAMEMODEPLOPLO5HLDefaultValue; } }
      set {
        _hasBits0 |= 512;
        gAMEMODEPLOPLO5HL_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_PLO_PLO5HL" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEPLOPLO5HL {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_PLO_PLO5HL" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEPLOPLO5HL() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "GAME_MODE_PLO_PLO6HL" field.</summary>
    public const int GAMEMODEPLOPLO6HLFieldNumber = 11;
    private readonly static bool GAMEMODEPLOPLO6HLDefaultValue = false;

    private bool gAMEMODEPLOPLO6HL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEPLOPLO6HL {
      get { if ((_hasBits0 & 1024) != 0) { return gAMEMODEPLOPLO6HL_; } else { return GAMEMODEPLOPLO6HLDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        gAMEMODEPLOPLO6HL_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_PLO_PLO6HL" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEPLOPLO6HL {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_PLO_PLO6HL" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEPLOPLO6HL() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "GAME_MODE_FLASH_NLH" field.</summary>
    public const int GAMEMODEFLASHNLHFieldNumber = 12;
    private readonly static bool GAMEMODEFLASHNLHDefaultValue = false;

    private bool gAMEMODEFLASHNLH_;
    /// <summary>
    /// FLASH
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEFLASHNLH {
      get { if ((_hasBits0 & 2048) != 0) { return gAMEMODEFLASHNLH_; } else { return GAMEMODEFLASHNLHDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        gAMEMODEFLASHNLH_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_FLASH_NLH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEFLASHNLH {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_FLASH_NLH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEFLASHNLH() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "GAME_MODE_FLASH_PLO4" field.</summary>
    public const int GAMEMODEFLASHPLO4FieldNumber = 13;
    private readonly static bool GAMEMODEFLASHPLO4DefaultValue = false;

    private bool gAMEMODEFLASHPLO4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEFLASHPLO4 {
      get { if ((_hasBits0 & 4096) != 0) { return gAMEMODEFLASHPLO4_; } else { return GAMEMODEFLASHPLO4DefaultValue; } }
      set {
        _hasBits0 |= 4096;
        gAMEMODEFLASHPLO4_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_FLASH_PLO4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEFLASHPLO4 {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_FLASH_PLO4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEFLASHPLO4() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "GAME_MODE_FLASH_PLO5" field.</summary>
    public const int GAMEMODEFLASHPLO5FieldNumber = 14;
    private readonly static bool GAMEMODEFLASHPLO5DefaultValue = false;

    private bool gAMEMODEFLASHPLO5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEFLASHPLO5 {
      get { if ((_hasBits0 & 8192) != 0) { return gAMEMODEFLASHPLO5_; } else { return GAMEMODEFLASHPLO5DefaultValue; } }
      set {
        _hasBits0 |= 8192;
        gAMEMODEFLASHPLO5_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_FLASH_PLO5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEFLASHPLO5 {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_FLASH_PLO5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEFLASHPLO5() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "GAME_MODE_MIXED_NLH_PLO4" field.</summary>
    public const int GAMEMODEMIXEDNLHPLO4FieldNumber = 15;
    private readonly static bool GAMEMODEMIXEDNLHPLO4DefaultValue = false;

    private bool gAMEMODEMIXEDNLHPLO4_;
    /// <summary>
    /// MIXED GAME
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEMIXEDNLHPLO4 {
      get { if ((_hasBits0 & 16384) != 0) { return gAMEMODEMIXEDNLHPLO4_; } else { return GAMEMODEMIXEDNLHPLO4DefaultValue; } }
      set {
        _hasBits0 |= 16384;
        gAMEMODEMIXEDNLHPLO4_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_MIXED_NLH_PLO4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEMIXEDNLHPLO4 {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_MIXED_NLH_PLO4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEMIXEDNLHPLO4() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "GAME_MODE_MIXED_NLH_PLO5" field.</summary>
    public const int GAMEMODEMIXEDNLHPLO5FieldNumber = 16;
    private readonly static bool GAMEMODEMIXEDNLHPLO5DefaultValue = false;

    private bool gAMEMODEMIXEDNLHPLO5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEMIXEDNLHPLO5 {
      get { if ((_hasBits0 & 32768) != 0) { return gAMEMODEMIXEDNLHPLO5_; } else { return GAMEMODEMIXEDNLHPLO5DefaultValue; } }
      set {
        _hasBits0 |= 32768;
        gAMEMODEMIXEDNLHPLO5_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_MIXED_NLH_PLO5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEMIXEDNLHPLO5 {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_MIXED_NLH_PLO5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEMIXEDNLHPLO5() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "GAME_MODE_OTHER_PUSOY" field.</summary>
    public const int GAMEMODEOTHERPUSOYFieldNumber = 17;
    private readonly static bool GAMEMODEOTHERPUSOYDefaultValue = false;

    private bool gAMEMODEOTHERPUSOY_;
    /// <summary>
    /// OTHERS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEOTHERPUSOY {
      get { if ((_hasBits0 & 65536) != 0) { return gAMEMODEOTHERPUSOY_; } else { return GAMEMODEOTHERPUSOYDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        gAMEMODEOTHERPUSOY_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_OTHER_PUSOY" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEOTHERPUSOY {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_OTHER_PUSOY" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEOTHERPUSOY() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "GAME_MODE_OTHER_OFC" field.</summary>
    public const int GAMEMODEOTHEROFCFieldNumber = 18;
    private readonly static bool GAMEMODEOTHEROFCDefaultValue = false;

    private bool gAMEMODEOTHEROFC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEOTHEROFC {
      get { if ((_hasBits0 & 131072) != 0) { return gAMEMODEOTHEROFC_; } else { return GAMEMODEOTHEROFCDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        gAMEMODEOTHEROFC_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_OTHER_OFC" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEOTHEROFC {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_OTHER_OFC" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEOTHEROFC() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "GAME_MODE_OTHER_TEENPATTI" field.</summary>
    public const int GAMEMODEOTHERTEENPATTIFieldNumber = 19;
    private readonly static bool GAMEMODEOTHERTEENPATTIDefaultValue = false;

    private bool gAMEMODEOTHERTEENPATTI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEOTHERTEENPATTI {
      get { if ((_hasBits0 & 262144) != 0) { return gAMEMODEOTHERTEENPATTI_; } else { return GAMEMODEOTHERTEENPATTIDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        gAMEMODEOTHERTEENPATTI_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_OTHER_TEENPATTI" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEOTHERTEENPATTI {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_OTHER_TEENPATTI" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEOTHERTEENPATTI() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "GAME_MODE_OTHER_TONGITS" field.</summary>
    public const int GAMEMODEOTHERTONGITSFieldNumber = 20;
    private readonly static bool GAMEMODEOTHERTONGITSDefaultValue = false;

    private bool gAMEMODEOTHERTONGITS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GAMEMODEOTHERTONGITS {
      get { if ((_hasBits0 & 524288) != 0) { return gAMEMODEOTHERTONGITS_; } else { return GAMEMODEOTHERTONGITSDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        gAMEMODEOTHERTONGITS_ = value;
      }
    }
    /// <summary>Gets whether the "GAME_MODE_OTHER_TONGITS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGAMEMODEOTHERTONGITS {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "GAME_MODE_OTHER_TONGITS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGAMEMODEOTHERTONGITS() {
      _hasBits0 &= ~524288;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionGameModes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionGameModes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GAMEMODENLHNLH != other.GAMEMODENLHNLH) return false;
      if (GAMEMODENLHAOF != other.GAMEMODENLHAOF) return false;
      if (GAMEMODENLHSIXPLUS != other.GAMEMODENLHSIXPLUS) return false;
      if (GAMEMODENLHNLH31 != other.GAMEMODENLHNLH31) return false;
      if (GAMEMODENLHNLH31F != other.GAMEMODENLHNLH31F) return false;
      if (GAMEMODEPLOPLO4 != other.GAMEMODEPLOPLO4) return false;
      if (GAMEMODEPLOPLO5 != other.GAMEMODEPLOPLO5) return false;
      if (GAMEMODEPLOPLO6 != other.GAMEMODEPLOPLO6) return false;
      if (GAMEMODEPLOPLO4HL != other.GAMEMODEPLOPLO4HL) return false;
      if (GAMEMODEPLOPLO5HL != other.GAMEMODEPLOPLO5HL) return false;
      if (GAMEMODEPLOPLO6HL != other.GAMEMODEPLOPLO6HL) return false;
      if (GAMEMODEFLASHNLH != other.GAMEMODEFLASHNLH) return false;
      if (GAMEMODEFLASHPLO4 != other.GAMEMODEFLASHPLO4) return false;
      if (GAMEMODEFLASHPLO5 != other.GAMEMODEFLASHPLO5) return false;
      if (GAMEMODEMIXEDNLHPLO4 != other.GAMEMODEMIXEDNLHPLO4) return false;
      if (GAMEMODEMIXEDNLHPLO5 != other.GAMEMODEMIXEDNLHPLO5) return false;
      if (GAMEMODEOTHERPUSOY != other.GAMEMODEOTHERPUSOY) return false;
      if (GAMEMODEOTHEROFC != other.GAMEMODEOTHEROFC) return false;
      if (GAMEMODEOTHERTEENPATTI != other.GAMEMODEOTHERTEENPATTI) return false;
      if (GAMEMODEOTHERTONGITS != other.GAMEMODEOTHERTONGITS) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGAMEMODENLHNLH) hash ^= GAMEMODENLHNLH.GetHashCode();
      if (HasGAMEMODENLHAOF) hash ^= GAMEMODENLHAOF.GetHashCode();
      if (HasGAMEMODENLHSIXPLUS) hash ^= GAMEMODENLHSIXPLUS.GetHashCode();
      if (HasGAMEMODENLHNLH31) hash ^= GAMEMODENLHNLH31.GetHashCode();
      if (HasGAMEMODENLHNLH31F) hash ^= GAMEMODENLHNLH31F.GetHashCode();
      if (HasGAMEMODEPLOPLO4) hash ^= GAMEMODEPLOPLO4.GetHashCode();
      if (HasGAMEMODEPLOPLO5) hash ^= GAMEMODEPLOPLO5.GetHashCode();
      if (HasGAMEMODEPLOPLO6) hash ^= GAMEMODEPLOPLO6.GetHashCode();
      if (HasGAMEMODEPLOPLO4HL) hash ^= GAMEMODEPLOPLO4HL.GetHashCode();
      if (HasGAMEMODEPLOPLO5HL) hash ^= GAMEMODEPLOPLO5HL.GetHashCode();
      if (HasGAMEMODEPLOPLO6HL) hash ^= GAMEMODEPLOPLO6HL.GetHashCode();
      if (HasGAMEMODEFLASHNLH) hash ^= GAMEMODEFLASHNLH.GetHashCode();
      if (HasGAMEMODEFLASHPLO4) hash ^= GAMEMODEFLASHPLO4.GetHashCode();
      if (HasGAMEMODEFLASHPLO5) hash ^= GAMEMODEFLASHPLO5.GetHashCode();
      if (HasGAMEMODEMIXEDNLHPLO4) hash ^= GAMEMODEMIXEDNLHPLO4.GetHashCode();
      if (HasGAMEMODEMIXEDNLHPLO5) hash ^= GAMEMODEMIXEDNLHPLO5.GetHashCode();
      if (HasGAMEMODEOTHERPUSOY) hash ^= GAMEMODEOTHERPUSOY.GetHashCode();
      if (HasGAMEMODEOTHEROFC) hash ^= GAMEMODEOTHEROFC.GetHashCode();
      if (HasGAMEMODEOTHERTEENPATTI) hash ^= GAMEMODEOTHERTEENPATTI.GetHashCode();
      if (HasGAMEMODEOTHERTONGITS) hash ^= GAMEMODEOTHERTONGITS.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGAMEMODENLHNLH) {
        output.WriteRawTag(8);
        output.WriteBool(GAMEMODENLHNLH);
      }
      if (HasGAMEMODENLHAOF) {
        output.WriteRawTag(16);
        output.WriteBool(GAMEMODENLHAOF);
      }
      if (HasGAMEMODENLHSIXPLUS) {
        output.WriteRawTag(24);
        output.WriteBool(GAMEMODENLHSIXPLUS);
      }
      if (HasGAMEMODENLHNLH31) {
        output.WriteRawTag(32);
        output.WriteBool(GAMEMODENLHNLH31);
      }
      if (HasGAMEMODENLHNLH31F) {
        output.WriteRawTag(40);
        output.WriteBool(GAMEMODENLHNLH31F);
      }
      if (HasGAMEMODEPLOPLO4) {
        output.WriteRawTag(48);
        output.WriteBool(GAMEMODEPLOPLO4);
      }
      if (HasGAMEMODEPLOPLO5) {
        output.WriteRawTag(56);
        output.WriteBool(GAMEMODEPLOPLO5);
      }
      if (HasGAMEMODEPLOPLO6) {
        output.WriteRawTag(64);
        output.WriteBool(GAMEMODEPLOPLO6);
      }
      if (HasGAMEMODEPLOPLO4HL) {
        output.WriteRawTag(72);
        output.WriteBool(GAMEMODEPLOPLO4HL);
      }
      if (HasGAMEMODEPLOPLO5HL) {
        output.WriteRawTag(80);
        output.WriteBool(GAMEMODEPLOPLO5HL);
      }
      if (HasGAMEMODEPLOPLO6HL) {
        output.WriteRawTag(88);
        output.WriteBool(GAMEMODEPLOPLO6HL);
      }
      if (HasGAMEMODEFLASHNLH) {
        output.WriteRawTag(96);
        output.WriteBool(GAMEMODEFLASHNLH);
      }
      if (HasGAMEMODEFLASHPLO4) {
        output.WriteRawTag(104);
        output.WriteBool(GAMEMODEFLASHPLO4);
      }
      if (HasGAMEMODEFLASHPLO5) {
        output.WriteRawTag(112);
        output.WriteBool(GAMEMODEFLASHPLO5);
      }
      if (HasGAMEMODEMIXEDNLHPLO4) {
        output.WriteRawTag(120);
        output.WriteBool(GAMEMODEMIXEDNLHPLO4);
      }
      if (HasGAMEMODEMIXEDNLHPLO5) {
        output.WriteRawTag(128, 1);
        output.WriteBool(GAMEMODEMIXEDNLHPLO5);
      }
      if (HasGAMEMODEOTHERPUSOY) {
        output.WriteRawTag(136, 1);
        output.WriteBool(GAMEMODEOTHERPUSOY);
      }
      if (HasGAMEMODEOTHEROFC) {
        output.WriteRawTag(144, 1);
        output.WriteBool(GAMEMODEOTHEROFC);
      }
      if (HasGAMEMODEOTHERTEENPATTI) {
        output.WriteRawTag(152, 1);
        output.WriteBool(GAMEMODEOTHERTEENPATTI);
      }
      if (HasGAMEMODEOTHERTONGITS) {
        output.WriteRawTag(160, 1);
        output.WriteBool(GAMEMODEOTHERTONGITS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGAMEMODENLHNLH) {
        output.WriteRawTag(8);
        output.WriteBool(GAMEMODENLHNLH);
      }
      if (HasGAMEMODENLHAOF) {
        output.WriteRawTag(16);
        output.WriteBool(GAMEMODENLHAOF);
      }
      if (HasGAMEMODENLHSIXPLUS) {
        output.WriteRawTag(24);
        output.WriteBool(GAMEMODENLHSIXPLUS);
      }
      if (HasGAMEMODENLHNLH31) {
        output.WriteRawTag(32);
        output.WriteBool(GAMEMODENLHNLH31);
      }
      if (HasGAMEMODENLHNLH31F) {
        output.WriteRawTag(40);
        output.WriteBool(GAMEMODENLHNLH31F);
      }
      if (HasGAMEMODEPLOPLO4) {
        output.WriteRawTag(48);
        output.WriteBool(GAMEMODEPLOPLO4);
      }
      if (HasGAMEMODEPLOPLO5) {
        output.WriteRawTag(56);
        output.WriteBool(GAMEMODEPLOPLO5);
      }
      if (HasGAMEMODEPLOPLO6) {
        output.WriteRawTag(64);
        output.WriteBool(GAMEMODEPLOPLO6);
      }
      if (HasGAMEMODEPLOPLO4HL) {
        output.WriteRawTag(72);
        output.WriteBool(GAMEMODEPLOPLO4HL);
      }
      if (HasGAMEMODEPLOPLO5HL) {
        output.WriteRawTag(80);
        output.WriteBool(GAMEMODEPLOPLO5HL);
      }
      if (HasGAMEMODEPLOPLO6HL) {
        output.WriteRawTag(88);
        output.WriteBool(GAMEMODEPLOPLO6HL);
      }
      if (HasGAMEMODEFLASHNLH) {
        output.WriteRawTag(96);
        output.WriteBool(GAMEMODEFLASHNLH);
      }
      if (HasGAMEMODEFLASHPLO4) {
        output.WriteRawTag(104);
        output.WriteBool(GAMEMODEFLASHPLO4);
      }
      if (HasGAMEMODEFLASHPLO5) {
        output.WriteRawTag(112);
        output.WriteBool(GAMEMODEFLASHPLO5);
      }
      if (HasGAMEMODEMIXEDNLHPLO4) {
        output.WriteRawTag(120);
        output.WriteBool(GAMEMODEMIXEDNLHPLO4);
      }
      if (HasGAMEMODEMIXEDNLHPLO5) {
        output.WriteRawTag(128, 1);
        output.WriteBool(GAMEMODEMIXEDNLHPLO5);
      }
      if (HasGAMEMODEOTHERPUSOY) {
        output.WriteRawTag(136, 1);
        output.WriteBool(GAMEMODEOTHERPUSOY);
      }
      if (HasGAMEMODEOTHEROFC) {
        output.WriteRawTag(144, 1);
        output.WriteBool(GAMEMODEOTHEROFC);
      }
      if (HasGAMEMODEOTHERTEENPATTI) {
        output.WriteRawTag(152, 1);
        output.WriteBool(GAMEMODEOTHERTEENPATTI);
      }
      if (HasGAMEMODEOTHERTONGITS) {
        output.WriteRawTag(160, 1);
        output.WriteBool(GAMEMODEOTHERTONGITS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGAMEMODENLHNLH) {
        size += 1 + 1;
      }
      if (HasGAMEMODENLHAOF) {
        size += 1 + 1;
      }
      if (HasGAMEMODENLHSIXPLUS) {
        size += 1 + 1;
      }
      if (HasGAMEMODENLHNLH31) {
        size += 1 + 1;
      }
      if (HasGAMEMODENLHNLH31F) {
        size += 1 + 1;
      }
      if (HasGAMEMODEPLOPLO4) {
        size += 1 + 1;
      }
      if (HasGAMEMODEPLOPLO5) {
        size += 1 + 1;
      }
      if (HasGAMEMODEPLOPLO6) {
        size += 1 + 1;
      }
      if (HasGAMEMODEPLOPLO4HL) {
        size += 1 + 1;
      }
      if (HasGAMEMODEPLOPLO5HL) {
        size += 1 + 1;
      }
      if (HasGAMEMODEPLOPLO6HL) {
        size += 1 + 1;
      }
      if (HasGAMEMODEFLASHNLH) {
        size += 1 + 1;
      }
      if (HasGAMEMODEFLASHPLO4) {
        size += 1 + 1;
      }
      if (HasGAMEMODEFLASHPLO5) {
        size += 1 + 1;
      }
      if (HasGAMEMODEMIXEDNLHPLO4) {
        size += 1 + 1;
      }
      if (HasGAMEMODEMIXEDNLHPLO5) {
        size += 2 + 1;
      }
      if (HasGAMEMODEOTHERPUSOY) {
        size += 2 + 1;
      }
      if (HasGAMEMODEOTHEROFC) {
        size += 2 + 1;
      }
      if (HasGAMEMODEOTHERTEENPATTI) {
        size += 2 + 1;
      }
      if (HasGAMEMODEOTHERTONGITS) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionGameModes other) {
      if (other == null) {
        return;
      }
      if (other.HasGAMEMODENLHNLH) {
        GAMEMODENLHNLH = other.GAMEMODENLHNLH;
      }
      if (other.HasGAMEMODENLHAOF) {
        GAMEMODENLHAOF = other.GAMEMODENLHAOF;
      }
      if (other.HasGAMEMODENLHSIXPLUS) {
        GAMEMODENLHSIXPLUS = other.GAMEMODENLHSIXPLUS;
      }
      if (other.HasGAMEMODENLHNLH31) {
        GAMEMODENLHNLH31 = other.GAMEMODENLHNLH31;
      }
      if (other.HasGAMEMODENLHNLH31F) {
        GAMEMODENLHNLH31F = other.GAMEMODENLHNLH31F;
      }
      if (other.HasGAMEMODEPLOPLO4) {
        GAMEMODEPLOPLO4 = other.GAMEMODEPLOPLO4;
      }
      if (other.HasGAMEMODEPLOPLO5) {
        GAMEMODEPLOPLO5 = other.GAMEMODEPLOPLO5;
      }
      if (other.HasGAMEMODEPLOPLO6) {
        GAMEMODEPLOPLO6 = other.GAMEMODEPLOPLO6;
      }
      if (other.HasGAMEMODEPLOPLO4HL) {
        GAMEMODEPLOPLO4HL = other.GAMEMODEPLOPLO4HL;
      }
      if (other.HasGAMEMODEPLOPLO5HL) {
        GAMEMODEPLOPLO5HL = other.GAMEMODEPLOPLO5HL;
      }
      if (other.HasGAMEMODEPLOPLO6HL) {
        GAMEMODEPLOPLO6HL = other.GAMEMODEPLOPLO6HL;
      }
      if (other.HasGAMEMODEFLASHNLH) {
        GAMEMODEFLASHNLH = other.GAMEMODEFLASHNLH;
      }
      if (other.HasGAMEMODEFLASHPLO4) {
        GAMEMODEFLASHPLO4 = other.GAMEMODEFLASHPLO4;
      }
      if (other.HasGAMEMODEFLASHPLO5) {
        GAMEMODEFLASHPLO5 = other.GAMEMODEFLASHPLO5;
      }
      if (other.HasGAMEMODEMIXEDNLHPLO4) {
        GAMEMODEMIXEDNLHPLO4 = other.GAMEMODEMIXEDNLHPLO4;
      }
      if (other.HasGAMEMODEMIXEDNLHPLO5) {
        GAMEMODEMIXEDNLHPLO5 = other.GAMEMODEMIXEDNLHPLO5;
      }
      if (other.HasGAMEMODEOTHERPUSOY) {
        GAMEMODEOTHERPUSOY = other.GAMEMODEOTHERPUSOY;
      }
      if (other.HasGAMEMODEOTHEROFC) {
        GAMEMODEOTHEROFC = other.GAMEMODEOTHEROFC;
      }
      if (other.HasGAMEMODEOTHERTEENPATTI) {
        GAMEMODEOTHERTEENPATTI = other.GAMEMODEOTHERTEENPATTI;
      }
      if (other.HasGAMEMODEOTHERTONGITS) {
        GAMEMODEOTHERTONGITS = other.GAMEMODEOTHERTONGITS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GAMEMODENLHNLH = input.ReadBool();
            break;
          }
          case 16: {
            GAMEMODENLHAOF = input.ReadBool();
            break;
          }
          case 24: {
            GAMEMODENLHSIXPLUS = input.ReadBool();
            break;
          }
          case 32: {
            GAMEMODENLHNLH31 = input.ReadBool();
            break;
          }
          case 40: {
            GAMEMODENLHNLH31F = input.ReadBool();
            break;
          }
          case 48: {
            GAMEMODEPLOPLO4 = input.ReadBool();
            break;
          }
          case 56: {
            GAMEMODEPLOPLO5 = input.ReadBool();
            break;
          }
          case 64: {
            GAMEMODEPLOPLO6 = input.ReadBool();
            break;
          }
          case 72: {
            GAMEMODEPLOPLO4HL = input.ReadBool();
            break;
          }
          case 80: {
            GAMEMODEPLOPLO5HL = input.ReadBool();
            break;
          }
          case 88: {
            GAMEMODEPLOPLO6HL = input.ReadBool();
            break;
          }
          case 96: {
            GAMEMODEFLASHNLH = input.ReadBool();
            break;
          }
          case 104: {
            GAMEMODEFLASHPLO4 = input.ReadBool();
            break;
          }
          case 112: {
            GAMEMODEFLASHPLO5 = input.ReadBool();
            break;
          }
          case 120: {
            GAMEMODEMIXEDNLHPLO4 = input.ReadBool();
            break;
          }
          case 128: {
            GAMEMODEMIXEDNLHPLO5 = input.ReadBool();
            break;
          }
          case 136: {
            GAMEMODEOTHERPUSOY = input.ReadBool();
            break;
          }
          case 144: {
            GAMEMODEOTHEROFC = input.ReadBool();
            break;
          }
          case 152: {
            GAMEMODEOTHERTEENPATTI = input.ReadBool();
            break;
          }
          case 160: {
            GAMEMODEOTHERTONGITS = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GAMEMODENLHNLH = input.ReadBool();
            break;
          }
          case 16: {
            GAMEMODENLHAOF = input.ReadBool();
            break;
          }
          case 24: {
            GAMEMODENLHSIXPLUS = input.ReadBool();
            break;
          }
          case 32: {
            GAMEMODENLHNLH31 = input.ReadBool();
            break;
          }
          case 40: {
            GAMEMODENLHNLH31F = input.ReadBool();
            break;
          }
          case 48: {
            GAMEMODEPLOPLO4 = input.ReadBool();
            break;
          }
          case 56: {
            GAMEMODEPLOPLO5 = input.ReadBool();
            break;
          }
          case 64: {
            GAMEMODEPLOPLO6 = input.ReadBool();
            break;
          }
          case 72: {
            GAMEMODEPLOPLO4HL = input.ReadBool();
            break;
          }
          case 80: {
            GAMEMODEPLOPLO5HL = input.ReadBool();
            break;
          }
          case 88: {
            GAMEMODEPLOPLO6HL = input.ReadBool();
            break;
          }
          case 96: {
            GAMEMODEFLASHNLH = input.ReadBool();
            break;
          }
          case 104: {
            GAMEMODEFLASHPLO4 = input.ReadBool();
            break;
          }
          case 112: {
            GAMEMODEFLASHPLO5 = input.ReadBool();
            break;
          }
          case 120: {
            GAMEMODEMIXEDNLHPLO4 = input.ReadBool();
            break;
          }
          case 128: {
            GAMEMODEMIXEDNLHPLO5 = input.ReadBool();
            break;
          }
          case 136: {
            GAMEMODEOTHERPUSOY = input.ReadBool();
            break;
          }
          case 144: {
            GAMEMODEOTHEROFC = input.ReadBool();
            break;
          }
          case 152: {
            GAMEMODEOTHERTEENPATTI = input.ReadBool();
            break;
          }
          case 160: {
            GAMEMODEOTHERTONGITS = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionConfig : pb::IMessage<HandMissionConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionConfig> _parser = new pb::MessageParser<HandMissionConfig>(() => new HandMissionConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionConfig(HandMissionConfig other) : this() {
      _hasBits0 = other._hasBits0;
      handMissionId_ = other.handMissionId_;
      moduleid_ = other.moduleid_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      superLeagueid_ = other.superLeagueid_;
      creatorUid_ = other.creatorUid_;
      isRepeated_ = other.isRepeated_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      terminateTime_ = other.terminateTime_;
      isHandWithFee_ = other.isHandWithFee_;
      minBlind_ = other.minBlind_;
      maxBlind_ = other.maxBlind_;
      handMissionType_ = other.handMissionType_;
      gameModes_ = other.gameModes_ != null ? other.gameModes_.Clone() : null;
      handType_ = other.handType_;
      targetNumOfHands_ = other.targetNumOfHands_;
      isRewardLimited_ = other.isRewardLimited_;
      numOfRewards_ = other.numOfRewards_;
      rewardType_ = other.rewardType_;
      rewardAmount_ = other.rewardAmount_;
      rewardLuckydrawBasePrice_ = other.rewardLuckydrawBasePrice_;
      rewardLuckydrawMultiplier_ = other.rewardLuckydrawMultiplier_;
      rewardDescription_ = other.rewardDescription_;
      status_ = other.status_;
      canceledTime_ = other.canceledTime_;
      abortedTime_ = other.abortedTime_;
      stopTime_ = other.stopTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionConfig Clone() {
      return new HandMissionConfig(this);
    }

    /// <summary>Field number for the "hand_mission_id" field.</summary>
    public const int HandMissionIdFieldNumber = 1;
    private readonly static long HandMissionIdDefaultValue = 0L;

    private long handMissionId_;
    /// <summary>
    /// 創建時無須提供，編輯、取消時前端需提供
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandMissionId {
      get { if ((_hasBits0 & 1) != 0) { return handMissionId_; } else { return HandMissionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handMissionId_ = value;
      }
    }
    /// <summary>Gets whether the "hand_mission_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandMissionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hand_mission_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandMissionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 2;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    /// 創建時無須提供，編輯、取消時前端需提供
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits0 & 2) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 4) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 4;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 8) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 5;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 16) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "creator_uid" field.</summary>
    public const int CreatorUidFieldNumber = 6;
    private readonly static long CreatorUidDefaultValue = 0L;

    private long creatorUid_;
    /// <summary>
    /// (前端無需提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CreatorUid {
      get { if ((_hasBits0 & 32) != 0) { return creatorUid_; } else { return CreatorUidDefaultValue; } }
      set {
        _hasBits0 |= 32;
        creatorUid_ = value;
      }
    }
    /// <summary>Gets whether the "creator_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreatorUid {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "creator_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreatorUid() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_repeated" field.</summary>
    public const int IsRepeatedFieldNumber = 7;
    private readonly static int IsRepeatedDefaultValue = 0;

    private int isRepeated_;
    /// <summary>
    /// 是否為重複任務
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsRepeated {
      get { if ((_hasBits0 & 64) != 0) { return isRepeated_; } else { return IsRepeatedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isRepeated_ = value;
      }
    }
    /// <summary>Gets whether the "is_repeated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRepeated {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_repeated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRepeated() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private readonly static long StartTimeDefaultValue = 0L;

    private long startTime_;
    /// <summary>
    /// 預計開始時間 (非重複任務時提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartTime {
      get { if ((_hasBits0 & 128) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        startTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private readonly static long EndTimeDefaultValue = 0L;

    private long endTime_;
    /// <summary>
    /// 預計結束時間 (非重複任務時提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndTime {
      get { if ((_hasBits0 & 256) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "terminate_time" field.</summary>
    public const int TerminateTimeFieldNumber = 10;
    private readonly static long TerminateTimeDefaultValue = 0L;

    private long terminateTime_;
    /// <summary>
    /// (前端無需提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TerminateTime {
      get { if ((_hasBits0 & 512) != 0) { return terminateTime_; } else { return TerminateTimeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        terminateTime_ = value;
      }
    }
    /// <summary>Gets whether the "terminate_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTerminateTime {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "terminate_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTerminateTime() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "is_hand_with_fee" field.</summary>
    public const int IsHandWithFeeFieldNumber = 11;
    private readonly static int IsHandWithFeeDefaultValue = 0;

    private int isHandWithFee_;
    /// <summary>
    /// 是否僅計算產生 fee 之手數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsHandWithFee {
      get { if ((_hasBits0 & 1024) != 0) { return isHandWithFee_; } else { return IsHandWithFeeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isHandWithFee_ = value;
      }
    }
    /// <summary>Gets whether the "is_hand_with_fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHandWithFee {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_hand_with_fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHandWithFee() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "min_blind" field.</summary>
    public const int MinBlindFieldNumber = 12;
    private readonly static int MinBlindDefaultValue = 0;

    private int minBlind_;
    /// <summary>
    /// 盲注下限（小盲）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBlind {
      get { if ((_hasBits0 & 2048) != 0) { return minBlind_; } else { return MinBlindDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        minBlind_ = value;
      }
    }
    /// <summary>Gets whether the "min_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBlind {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "min_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBlind() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "max_blind" field.</summary>
    public const int MaxBlindFieldNumber = 13;
    private readonly static int MaxBlindDefaultValue = 0;

    private int maxBlind_;
    /// <summary>
    /// 盲注上限（小盲）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxBlind {
      get { if ((_hasBits0 & 4096) != 0) { return maxBlind_; } else { return MaxBlindDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        maxBlind_ = value;
      }
    }
    /// <summary>Gets whether the "max_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBlind {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "max_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBlind() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "hand_mission_type" field.</summary>
    public const int HandMissionTypeFieldNumber = 14;
    private readonly static int HandMissionTypeDefaultValue = 0;

    private int handMissionType_;
    /// <summary>
    /// 玩法目標 (0), 牌型目標 (1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HandMissionType {
      get { if ((_hasBits0 & 8192) != 0) { return handMissionType_; } else { return HandMissionTypeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        handMissionType_ = value;
      }
    }
    /// <summary>Gets whether the "hand_mission_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandMissionType {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "hand_mission_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandMissionType() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "game_modes" field.</summary>
    public const int GameModesFieldNumber = 15;
    private global::Texas.Protocol.HandMissionGameModes gameModes_;
    /// <summary>
    /// 多選，列入計算的玩法類型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionGameModes GameModes {
      get { return gameModes_; }
      set {
        gameModes_ = value;
      }
    }

    /// <summary>Field number for the "hand_type" field.</summary>
    public const int HandTypeFieldNumber = 16;
    private readonly static global::Texas.Protocol.HandType HandTypeDefaultValue = global::Texas.Protocol.HandType.TypeNone;

    private global::Texas.Protocol.HandType handType_;
    /// <summary>
    /// 單選，目標牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandType HandType {
      get { if ((_hasBits0 & 16384) != 0) { return handType_; } else { return HandTypeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        handType_ = value;
      }
    }
    /// <summary>Gets whether the "hand_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandType {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "hand_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandType() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "target_num_of_hands" field.</summary>
    public const int TargetNumOfHandsFieldNumber = 17;
    private readonly static int TargetNumOfHandsDefaultValue = 0;

    private int targetNumOfHands_;
    /// <summary>
    /// 目標手數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TargetNumOfHands {
      get { if ((_hasBits0 & 32768) != 0) { return targetNumOfHands_; } else { return TargetNumOfHandsDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        targetNumOfHands_ = value;
      }
    }
    /// <summary>Gets whether the "target_num_of_hands" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetNumOfHands {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "target_num_of_hands" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetNumOfHands() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "is_reward_limited" field.</summary>
    public const int IsRewardLimitedFieldNumber = 18;
    private readonly static int IsRewardLimitedDefaultValue = 0;

    private int isRewardLimited_;
    /// <summary>
    /// 是否限制獎勵人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsRewardLimited {
      get { if ((_hasBits0 & 65536) != 0) { return isRewardLimited_; } else { return IsRewardLimitedDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        isRewardLimited_ = value;
      }
    }
    /// <summary>Gets whether the "is_reward_limited" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRewardLimited {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "is_reward_limited" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRewardLimited() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "num_of_rewards" field.</summary>
    public const int NumOfRewardsFieldNumber = 19;
    private readonly static int NumOfRewardsDefaultValue = 0;

    private int numOfRewards_;
    /// <summary>
    /// 獎勵人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOfRewards {
      get { if ((_hasBits0 & 131072) != 0) { return numOfRewards_; } else { return NumOfRewardsDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        numOfRewards_ = value;
      }
    }
    /// <summary>Gets whether the "num_of_rewards" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumOfRewards {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "num_of_rewards" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumOfRewards() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "reward_type" field.</summary>
    public const int RewardTypeFieldNumber = 20;
    private readonly static global::Texas.Protocol.HandMissionRewardTypes RewardTypeDefaultValue = global::Texas.Protocol.HandMissionRewardTypes.PpChips;

    private global::Texas.Protocol.HandMissionRewardTypes rewardType_;
    /// <summary>
    /// 獎勵類型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionRewardTypes RewardType {
      get { if ((_hasBits0 & 262144) != 0) { return rewardType_; } else { return RewardTypeDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        rewardType_ = value;
      }
    }
    /// <summary>Gets whether the "reward_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardType {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "reward_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardType() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "reward_amount" field.</summary>
    public const int RewardAmountFieldNumber = 21;
    private readonly static long RewardAmountDefaultValue = 0L;

    private long rewardAmount_;
    /// <summary>
    /// 獎勵數量 (pp 幣百倍化數量，luckydraw 抽數)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RewardAmount {
      get { if ((_hasBits0 & 524288) != 0) { return rewardAmount_; } else { return RewardAmountDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        rewardAmount_ = value;
      }
    }
    /// <summary>Gets whether the "reward_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardAmount {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "reward_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardAmount() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "reward_luckydraw_base_price" field.</summary>
    public const int RewardLuckydrawBasePriceFieldNumber = 22;
    private readonly static int RewardLuckydrawBasePriceDefaultValue = 0;

    private int rewardLuckydrawBasePrice_;
    /// <summary>
    /// luckydraw 單倍獎勵 (有小數情況，需百倍化)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardLuckydrawBasePrice {
      get { if ((_hasBits0 & 1048576) != 0) { return rewardLuckydrawBasePrice_; } else { return RewardLuckydrawBasePriceDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        rewardLuckydrawBasePrice_ = value;
      }
    }
    /// <summary>Gets whether the "reward_luckydraw_base_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardLuckydrawBasePrice {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "reward_luckydraw_base_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardLuckydrawBasePrice() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "reward_luckydraw_multiplier" field.</summary>
    public const int RewardLuckydrawMultiplierFieldNumber = 23;
    private readonly static int RewardLuckydrawMultiplierDefaultValue = 0;

    private int rewardLuckydrawMultiplier_;
    /// <summary>
    /// luckydraw 獎勵的最高倍數（填入 100/ 1000）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardLuckydrawMultiplier {
      get { if ((_hasBits0 & 2097152) != 0) { return rewardLuckydrawMultiplier_; } else { return RewardLuckydrawMultiplierDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        rewardLuckydrawMultiplier_ = value;
      }
    }
    /// <summary>Gets whether the "reward_luckydraw_multiplier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardLuckydrawMultiplier {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "reward_luckydraw_multiplier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardLuckydrawMultiplier() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "reward_description" field.</summary>
    public const int RewardDescriptionFieldNumber = 24;
    private readonly static string RewardDescriptionDefaultValue = "";

    private string rewardDescription_;
    /// <summary>
    /// 獎勵描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RewardDescription {
      get { return rewardDescription_ ?? RewardDescriptionDefaultValue; }
      set {
        rewardDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reward_description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardDescription {
      get { return rewardDescription_ != null; }
    }
    /// <summary>Clears the value of the "reward_description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardDescription() {
      rewardDescription_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 25;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    /// (前端無需提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 4194304) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "canceled_time" field.</summary>
    public const int CanceledTimeFieldNumber = 26;
    private readonly static long CanceledTimeDefaultValue = 0L;

    private long canceledTime_;
    /// <summary>
    /// (前端無需提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CanceledTime {
      get { if ((_hasBits0 & 8388608) != 0) { return canceledTime_; } else { return CanceledTimeDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        canceledTime_ = value;
      }
    }
    /// <summary>Gets whether the "canceled_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanceledTime {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "canceled_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanceledTime() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "aborted_time" field.</summary>
    public const int AbortedTimeFieldNumber = 27;
    private readonly static long AbortedTimeDefaultValue = 0L;

    private long abortedTime_;
    /// <summary>
    /// (前端無需提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AbortedTime {
      get { if ((_hasBits0 & 16777216) != 0) { return abortedTime_; } else { return AbortedTimeDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        abortedTime_ = value;
      }
    }
    /// <summary>Gets whether the "aborted_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAbortedTime {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "aborted_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAbortedTime() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "stop_time" field.</summary>
    public const int StopTimeFieldNumber = 28;
    private readonly static long StopTimeDefaultValue = 0L;

    private long stopTime_;
    /// <summary>
    /// (前端無需提供)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StopTime {
      get { if ((_hasBits0 & 33554432) != 0) { return stopTime_; } else { return StopTimeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        stopTime_ = value;
      }
    }
    /// <summary>Gets whether the "stop_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStopTime {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "stop_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStopTime() {
      _hasBits0 &= ~33554432;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandMissionId != other.HandMissionId) return false;
      if (Moduleid != other.Moduleid) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (CreatorUid != other.CreatorUid) return false;
      if (IsRepeated != other.IsRepeated) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (TerminateTime != other.TerminateTime) return false;
      if (IsHandWithFee != other.IsHandWithFee) return false;
      if (MinBlind != other.MinBlind) return false;
      if (MaxBlind != other.MaxBlind) return false;
      if (HandMissionType != other.HandMissionType) return false;
      if (!object.Equals(GameModes, other.GameModes)) return false;
      if (HandType != other.HandType) return false;
      if (TargetNumOfHands != other.TargetNumOfHands) return false;
      if (IsRewardLimited != other.IsRewardLimited) return false;
      if (NumOfRewards != other.NumOfRewards) return false;
      if (RewardType != other.RewardType) return false;
      if (RewardAmount != other.RewardAmount) return false;
      if (RewardLuckydrawBasePrice != other.RewardLuckydrawBasePrice) return false;
      if (RewardLuckydrawMultiplier != other.RewardLuckydrawMultiplier) return false;
      if (RewardDescription != other.RewardDescription) return false;
      if (Status != other.Status) return false;
      if (CanceledTime != other.CanceledTime) return false;
      if (AbortedTime != other.AbortedTime) return false;
      if (StopTime != other.StopTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandMissionId) hash ^= HandMissionId.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasCreatorUid) hash ^= CreatorUid.GetHashCode();
      if (HasIsRepeated) hash ^= IsRepeated.GetHashCode();
      if (HasStartTime) hash ^= StartTime.GetHashCode();
      if (HasEndTime) hash ^= EndTime.GetHashCode();
      if (HasTerminateTime) hash ^= TerminateTime.GetHashCode();
      if (HasIsHandWithFee) hash ^= IsHandWithFee.GetHashCode();
      if (HasMinBlind) hash ^= MinBlind.GetHashCode();
      if (HasMaxBlind) hash ^= MaxBlind.GetHashCode();
      if (HasHandMissionType) hash ^= HandMissionType.GetHashCode();
      if (gameModes_ != null) hash ^= GameModes.GetHashCode();
      if (HasHandType) hash ^= HandType.GetHashCode();
      if (HasTargetNumOfHands) hash ^= TargetNumOfHands.GetHashCode();
      if (HasIsRewardLimited) hash ^= IsRewardLimited.GetHashCode();
      if (HasNumOfRewards) hash ^= NumOfRewards.GetHashCode();
      if (HasRewardType) hash ^= RewardType.GetHashCode();
      if (HasRewardAmount) hash ^= RewardAmount.GetHashCode();
      if (HasRewardLuckydrawBasePrice) hash ^= RewardLuckydrawBasePrice.GetHashCode();
      if (HasRewardLuckydrawMultiplier) hash ^= RewardLuckydrawMultiplier.GetHashCode();
      if (HasRewardDescription) hash ^= RewardDescription.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasCanceledTime) hash ^= CanceledTime.GetHashCode();
      if (HasAbortedTime) hash ^= AbortedTime.GetHashCode();
      if (HasStopTime) hash ^= StopTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandMissionId) {
        output.WriteRawTag(8);
        output.WriteInt64(HandMissionId);
      }
      if (HasModuleid) {
        output.WriteRawTag(16);
        output.WriteInt64(Moduleid);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(40);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasCreatorUid) {
        output.WriteRawTag(48);
        output.WriteInt64(CreatorUid);
      }
      if (HasIsRepeated) {
        output.WriteRawTag(56);
        output.WriteInt32(IsRepeated);
      }
      if (HasStartTime) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(72);
        output.WriteInt64(EndTime);
      }
      if (HasTerminateTime) {
        output.WriteRawTag(80);
        output.WriteInt64(TerminateTime);
      }
      if (HasIsHandWithFee) {
        output.WriteRawTag(88);
        output.WriteInt32(IsHandWithFee);
      }
      if (HasMinBlind) {
        output.WriteRawTag(96);
        output.WriteInt32(MinBlind);
      }
      if (HasMaxBlind) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxBlind);
      }
      if (HasHandMissionType) {
        output.WriteRawTag(112);
        output.WriteInt32(HandMissionType);
      }
      if (gameModes_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(GameModes);
      }
      if (HasHandType) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) HandType);
      }
      if (HasTargetNumOfHands) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TargetNumOfHands);
      }
      if (HasIsRewardLimited) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(IsRewardLimited);
      }
      if (HasNumOfRewards) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NumOfRewards);
      }
      if (HasRewardType) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) RewardType);
      }
      if (HasRewardAmount) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RewardAmount);
      }
      if (HasRewardLuckydrawBasePrice) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RewardLuckydrawBasePrice);
      }
      if (HasRewardLuckydrawMultiplier) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RewardLuckydrawMultiplier);
      }
      if (HasRewardDescription) {
        output.WriteRawTag(194, 1);
        output.WriteString(RewardDescription);
      }
      if (HasStatus) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Status);
      }
      if (HasCanceledTime) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(CanceledTime);
      }
      if (HasAbortedTime) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(AbortedTime);
      }
      if (HasStopTime) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(StopTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandMissionId) {
        output.WriteRawTag(8);
        output.WriteInt64(HandMissionId);
      }
      if (HasModuleid) {
        output.WriteRawTag(16);
        output.WriteInt64(Moduleid);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(40);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasCreatorUid) {
        output.WriteRawTag(48);
        output.WriteInt64(CreatorUid);
      }
      if (HasIsRepeated) {
        output.WriteRawTag(56);
        output.WriteInt32(IsRepeated);
      }
      if (HasStartTime) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(72);
        output.WriteInt64(EndTime);
      }
      if (HasTerminateTime) {
        output.WriteRawTag(80);
        output.WriteInt64(TerminateTime);
      }
      if (HasIsHandWithFee) {
        output.WriteRawTag(88);
        output.WriteInt32(IsHandWithFee);
      }
      if (HasMinBlind) {
        output.WriteRawTag(96);
        output.WriteInt32(MinBlind);
      }
      if (HasMaxBlind) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxBlind);
      }
      if (HasHandMissionType) {
        output.WriteRawTag(112);
        output.WriteInt32(HandMissionType);
      }
      if (gameModes_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(GameModes);
      }
      if (HasHandType) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) HandType);
      }
      if (HasTargetNumOfHands) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TargetNumOfHands);
      }
      if (HasIsRewardLimited) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(IsRewardLimited);
      }
      if (HasNumOfRewards) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NumOfRewards);
      }
      if (HasRewardType) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) RewardType);
      }
      if (HasRewardAmount) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RewardAmount);
      }
      if (HasRewardLuckydrawBasePrice) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RewardLuckydrawBasePrice);
      }
      if (HasRewardLuckydrawMultiplier) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RewardLuckydrawMultiplier);
      }
      if (HasRewardDescription) {
        output.WriteRawTag(194, 1);
        output.WriteString(RewardDescription);
      }
      if (HasStatus) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Status);
      }
      if (HasCanceledTime) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(CanceledTime);
      }
      if (HasAbortedTime) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(AbortedTime);
      }
      if (HasStopTime) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(StopTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHandMissionId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandMissionId);
      }
      if (HasModuleid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSuperLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasCreatorUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatorUid);
      }
      if (HasIsRepeated) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRepeated);
      }
      if (HasStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (HasEndTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (HasTerminateTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TerminateTime);
      }
      if (HasIsHandWithFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHandWithFee);
      }
      if (HasMinBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinBlind);
      }
      if (HasMaxBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBlind);
      }
      if (HasHandMissionType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandMissionType);
      }
      if (gameModes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameModes);
      }
      if (HasHandType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HandType);
      }
      if (HasTargetNumOfHands) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetNumOfHands);
      }
      if (HasIsRewardLimited) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsRewardLimited);
      }
      if (HasNumOfRewards) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumOfRewards);
      }
      if (HasRewardType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RewardType);
      }
      if (HasRewardAmount) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RewardAmount);
      }
      if (HasRewardLuckydrawBasePrice) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardLuckydrawBasePrice);
      }
      if (HasRewardLuckydrawMultiplier) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardLuckydrawMultiplier);
      }
      if (HasRewardDescription) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RewardDescription);
      }
      if (HasStatus) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (HasCanceledTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CanceledTime);
      }
      if (HasAbortedTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AbortedTime);
      }
      if (HasStopTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StopTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasHandMissionId) {
        HandMissionId = other.HandMissionId;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasCreatorUid) {
        CreatorUid = other.CreatorUid;
      }
      if (other.HasIsRepeated) {
        IsRepeated = other.IsRepeated;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasTerminateTime) {
        TerminateTime = other.TerminateTime;
      }
      if (other.HasIsHandWithFee) {
        IsHandWithFee = other.IsHandWithFee;
      }
      if (other.HasMinBlind) {
        MinBlind = other.MinBlind;
      }
      if (other.HasMaxBlind) {
        MaxBlind = other.MaxBlind;
      }
      if (other.HasHandMissionType) {
        HandMissionType = other.HandMissionType;
      }
      if (other.gameModes_ != null) {
        if (gameModes_ == null) {
          GameModes = new global::Texas.Protocol.HandMissionGameModes();
        }
        GameModes.MergeFrom(other.GameModes);
      }
      if (other.HasHandType) {
        HandType = other.HandType;
      }
      if (other.HasTargetNumOfHands) {
        TargetNumOfHands = other.TargetNumOfHands;
      }
      if (other.HasIsRewardLimited) {
        IsRewardLimited = other.IsRewardLimited;
      }
      if (other.HasNumOfRewards) {
        NumOfRewards = other.NumOfRewards;
      }
      if (other.HasRewardType) {
        RewardType = other.RewardType;
      }
      if (other.HasRewardAmount) {
        RewardAmount = other.RewardAmount;
      }
      if (other.HasRewardLuckydrawBasePrice) {
        RewardLuckydrawBasePrice = other.RewardLuckydrawBasePrice;
      }
      if (other.HasRewardLuckydrawMultiplier) {
        RewardLuckydrawMultiplier = other.RewardLuckydrawMultiplier;
      }
      if (other.HasRewardDescription) {
        RewardDescription = other.RewardDescription;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasCanceledTime) {
        CanceledTime = other.CanceledTime;
      }
      if (other.HasAbortedTime) {
        AbortedTime = other.AbortedTime;
      }
      if (other.HasStopTime) {
        StopTime = other.StopTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandMissionId = input.ReadInt64();
            break;
          }
          case 16: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 48: {
            CreatorUid = input.ReadInt64();
            break;
          }
          case 56: {
            IsRepeated = input.ReadInt32();
            break;
          }
          case 64: {
            StartTime = input.ReadInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadInt64();
            break;
          }
          case 80: {
            TerminateTime = input.ReadInt64();
            break;
          }
          case 88: {
            IsHandWithFee = input.ReadInt32();
            break;
          }
          case 96: {
            MinBlind = input.ReadInt32();
            break;
          }
          case 104: {
            MaxBlind = input.ReadInt32();
            break;
          }
          case 112: {
            HandMissionType = input.ReadInt32();
            break;
          }
          case 122: {
            if (gameModes_ == null) {
              GameModes = new global::Texas.Protocol.HandMissionGameModes();
            }
            input.ReadMessage(GameModes);
            break;
          }
          case 128: {
            HandType = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 136: {
            TargetNumOfHands = input.ReadInt32();
            break;
          }
          case 144: {
            IsRewardLimited = input.ReadInt32();
            break;
          }
          case 152: {
            NumOfRewards = input.ReadInt32();
            break;
          }
          case 160: {
            RewardType = (global::Texas.Protocol.HandMissionRewardTypes) input.ReadEnum();
            break;
          }
          case 168: {
            RewardAmount = input.ReadInt64();
            break;
          }
          case 176: {
            RewardLuckydrawBasePrice = input.ReadInt32();
            break;
          }
          case 184: {
            RewardLuckydrawMultiplier = input.ReadInt32();
            break;
          }
          case 194: {
            RewardDescription = input.ReadString();
            break;
          }
          case 200: {
            Status = input.ReadInt32();
            break;
          }
          case 208: {
            CanceledTime = input.ReadInt64();
            break;
          }
          case 216: {
            AbortedTime = input.ReadInt64();
            break;
          }
          case 224: {
            StopTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HandMissionId = input.ReadInt64();
            break;
          }
          case 16: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 48: {
            CreatorUid = input.ReadInt64();
            break;
          }
          case 56: {
            IsRepeated = input.ReadInt32();
            break;
          }
          case 64: {
            StartTime = input.ReadInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadInt64();
            break;
          }
          case 80: {
            TerminateTime = input.ReadInt64();
            break;
          }
          case 88: {
            IsHandWithFee = input.ReadInt32();
            break;
          }
          case 96: {
            MinBlind = input.ReadInt32();
            break;
          }
          case 104: {
            MaxBlind = input.ReadInt32();
            break;
          }
          case 112: {
            HandMissionType = input.ReadInt32();
            break;
          }
          case 122: {
            if (gameModes_ == null) {
              GameModes = new global::Texas.Protocol.HandMissionGameModes();
            }
            input.ReadMessage(GameModes);
            break;
          }
          case 128: {
            HandType = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 136: {
            TargetNumOfHands = input.ReadInt32();
            break;
          }
          case 144: {
            IsRewardLimited = input.ReadInt32();
            break;
          }
          case 152: {
            NumOfRewards = input.ReadInt32();
            break;
          }
          case 160: {
            RewardType = (global::Texas.Protocol.HandMissionRewardTypes) input.ReadEnum();
            break;
          }
          case 168: {
            RewardAmount = input.ReadInt64();
            break;
          }
          case 176: {
            RewardLuckydrawBasePrice = input.ReadInt32();
            break;
          }
          case 184: {
            RewardLuckydrawMultiplier = input.ReadInt32();
            break;
          }
          case 194: {
            RewardDescription = input.ReadString();
            break;
          }
          case 200: {
            Status = input.ReadInt32();
            break;
          }
          case 208: {
            CanceledTime = input.ReadInt64();
            break;
          }
          case 216: {
            AbortedTime = input.ReadInt64();
            break;
          }
          case 224: {
            StopTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionInfo : pb::IMessage<HandMissionInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionInfo> _parser = new pb::MessageParser<HandMissionInfo>(() => new HandMissionInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfo(HandMissionInfo other) : this() {
      _hasBits0 = other._hasBits0;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      numOfHands_ = other.numOfHands_;
      numOfCompleted_ = other.numOfCompleted_;
      status_ = other.status_;
      missionTimeLeft_ = other.missionTimeLeft_;
      rewardLeft_ = other.rewardLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfo Clone() {
      return new HandMissionInfo(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    private global::Texas.Protocol.HandMissionConfig config_;
    /// <summary>
    /// 手牌任務配置資訊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "num_of_hands" field.</summary>
    public const int NumOfHandsFieldNumber = 2;
    private readonly static int NumOfHandsDefaultValue = 0;

    private int numOfHands_;
    /// <summary>
    /// 玩家目前進度手數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOfHands {
      get { if ((_hasBits0 & 1) != 0) { return numOfHands_; } else { return NumOfHandsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numOfHands_ = value;
      }
    }
    /// <summary>Gets whether the "num_of_hands" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumOfHands {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_of_hands" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumOfHands() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num_of_completed" field.</summary>
    public const int NumOfCompletedFieldNumber = 3;
    private readonly static int NumOfCompletedDefaultValue = 0;

    private int numOfCompleted_;
    /// <summary>
    /// 已完成任務的人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOfCompleted {
      get { if ((_hasBits0 & 2) != 0) { return numOfCompleted_; } else { return NumOfCompletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numOfCompleted_ = value;
      }
    }
    /// <summary>Gets whether the "num_of_completed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumOfCompleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_of_completed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumOfCompleted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private readonly static global::Texas.Protocol.HandMissionsStatus StatusDefaultValue = global::Texas.Protocol.HandMissionsStatus.OnGoing;

    private global::Texas.Protocol.HandMissionsStatus status_;
    /// <summary>
    /// 前端顯示的手牌任務狀態 (由任務狀態、任務暫停狀態、玩家進度構成)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionsStatus Status {
      get { if ((_hasBits0 & 4) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "mission_time_left" field.</summary>
    public const int MissionTimeLeftFieldNumber = 5;
    private readonly static long MissionTimeLeftDefaultValue = 0L;

    private long missionTimeLeft_;
    /// <summary>
    /// 手牌任務倒數結束時間戳 (未完成的非重複任務為結束到數，已完成任務為領獎到數，0 表示無倒數)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MissionTimeLeft {
      get { if ((_hasBits0 & 8) != 0) { return missionTimeLeft_; } else { return MissionTimeLeftDefaultValue; } }
      set {
        _hasBits0 |= 8;
        missionTimeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "mission_time_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMissionTimeLeft {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "mission_time_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMissionTimeLeft() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "reward_left" field.</summary>
    public const int RewardLeftFieldNumber = 6;
    private readonly static int RewardLeftDefaultValue = 0;

    private int rewardLeft_;
    /// <summary>
    /// 剩餘獎勵次數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardLeft {
      get { if ((_hasBits0 & 16) != 0) { return rewardLeft_; } else { return RewardLeftDefaultValue; } }
      set {
        _hasBits0 |= 16;
        rewardLeft_ = value;
      }
    }
    /// <summary>Gets whether the "reward_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardLeft {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "reward_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardLeft() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (NumOfHands != other.NumOfHands) return false;
      if (NumOfCompleted != other.NumOfCompleted) return false;
      if (Status != other.Status) return false;
      if (MissionTimeLeft != other.MissionTimeLeft) return false;
      if (RewardLeft != other.RewardLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (config_ != null) hash ^= Config.GetHashCode();
      if (HasNumOfHands) hash ^= NumOfHands.GetHashCode();
      if (HasNumOfCompleted) hash ^= NumOfCompleted.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasMissionTimeLeft) hash ^= MissionTimeLeft.GetHashCode();
      if (HasRewardLeft) hash ^= RewardLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (HasNumOfHands) {
        output.WriteRawTag(16);
        output.WriteInt32(NumOfHands);
      }
      if (HasNumOfCompleted) {
        output.WriteRawTag(24);
        output.WriteInt32(NumOfCompleted);
      }
      if (HasStatus) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (HasMissionTimeLeft) {
        output.WriteRawTag(40);
        output.WriteInt64(MissionTimeLeft);
      }
      if (HasRewardLeft) {
        output.WriteRawTag(48);
        output.WriteInt32(RewardLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (config_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (HasNumOfHands) {
        output.WriteRawTag(16);
        output.WriteInt32(NumOfHands);
      }
      if (HasNumOfCompleted) {
        output.WriteRawTag(24);
        output.WriteInt32(NumOfCompleted);
      }
      if (HasStatus) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (HasMissionTimeLeft) {
        output.WriteRawTag(40);
        output.WriteInt64(MissionTimeLeft);
      }
      if (HasRewardLeft) {
        output.WriteRawTag(48);
        output.WriteInt32(RewardLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (HasNumOfHands) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOfHands);
      }
      if (HasNumOfCompleted) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOfCompleted);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (HasMissionTimeLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MissionTimeLeft);
      }
      if (HasRewardLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionInfo other) {
      if (other == null) {
        return;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Texas.Protocol.HandMissionConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.HasNumOfHands) {
        NumOfHands = other.NumOfHands;
      }
      if (other.HasNumOfCompleted) {
        NumOfCompleted = other.NumOfCompleted;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasMissionTimeLeft) {
        MissionTimeLeft = other.MissionTimeLeft;
      }
      if (other.HasRewardLeft) {
        RewardLeft = other.RewardLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 16: {
            NumOfHands = input.ReadInt32();
            break;
          }
          case 24: {
            NumOfCompleted = input.ReadInt32();
            break;
          }
          case 32: {
            Status = (global::Texas.Protocol.HandMissionsStatus) input.ReadEnum();
            break;
          }
          case 40: {
            MissionTimeLeft = input.ReadInt64();
            break;
          }
          case 48: {
            RewardLeft = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 16: {
            NumOfHands = input.ReadInt32();
            break;
          }
          case 24: {
            NumOfCompleted = input.ReadInt32();
            break;
          }
          case 32: {
            Status = (global::Texas.Protocol.HandMissionsStatus) input.ReadEnum();
            break;
          }
          case 40: {
            MissionTimeLeft = input.ReadInt64();
            break;
          }
          case 48: {
            RewardLeft = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionRecord : pb::IMessage<HandMissionRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionRecord> _parser = new pb::MessageParser<HandMissionRecord>(() => new HandMissionRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecord(HandMissionRecord other) : this() {
      _hasBits0 = other._hasBits0;
      userName_ = other.userName_;
      uid_ = other.uid_;
      rewardClaimTime_ = other.rewardClaimTime_;
      ppChipsClaimed_ = other.ppChipsClaimed_;
      rewardAmountClaimed_ = other.rewardAmountClaimed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecord Clone() {
      return new HandMissionRecord(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private readonly static string UserNameDefaultValue = "";

    private string userName_;
    /// <summary>
    /// 領獎玩家名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_ ?? UserNameDefaultValue; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserName {
      get { return userName_ != null; }
    }
    /// <summary>Clears the value of the "user_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserName() {
      userName_ = null;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    /// <summary>
    /// 領獎玩家 uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward_claim_time" field.</summary>
    public const int RewardClaimTimeFieldNumber = 3;
    private readonly static long RewardClaimTimeDefaultValue = 0L;

    private long rewardClaimTime_;
    /// <summary>
    /// 玩家最後領獎時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RewardClaimTime {
      get { if ((_hasBits0 & 2) != 0) { return rewardClaimTime_; } else { return RewardClaimTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rewardClaimTime_ = value;
      }
    }
    /// <summary>Gets whether the "reward_claim_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardClaimTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward_claim_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardClaimTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pp_chips_claimed" field.</summary>
    public const int PpChipsClaimedFieldNumber = 4;
    private readonly static long PpChipsClaimedDefaultValue = 0L;

    private long ppChipsClaimed_;
    /// <summary>
    /// 玩家已領總 pp 幣數量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpChipsClaimed {
      get { if ((_hasBits0 & 4) != 0) { return ppChipsClaimed_; } else { return PpChipsClaimedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ppChipsClaimed_ = value;
      }
    }
    /// <summary>Gets whether the "pp_chips_claimed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpChipsClaimed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pp_chips_claimed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpChipsClaimed() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "reward_amount_claimed" field.</summary>
    public const int RewardAmountClaimedFieldNumber = 5;
    private readonly static long RewardAmountClaimedDefaultValue = 0L;

    private long rewardAmountClaimed_;
    /// <summary>
    /// 玩家已領獎總次數 (pp 幣獎勵、描述性獎勵為 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RewardAmountClaimed {
      get { if ((_hasBits0 & 8) != 0) { return rewardAmountClaimed_; } else { return RewardAmountClaimedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rewardAmountClaimed_ = value;
      }
    }
    /// <summary>Gets whether the "reward_amount_claimed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardAmountClaimed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "reward_amount_claimed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardAmountClaimed() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Uid != other.Uid) return false;
      if (RewardClaimTime != other.RewardClaimTime) return false;
      if (PpChipsClaimed != other.PpChipsClaimed) return false;
      if (RewardAmountClaimed != other.RewardAmountClaimed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserName) hash ^= UserName.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasRewardClaimTime) hash ^= RewardClaimTime.GetHashCode();
      if (HasPpChipsClaimed) hash ^= PpChipsClaimed.GetHashCode();
      if (HasRewardAmountClaimed) hash ^= RewardAmountClaimed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUserName) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (HasRewardClaimTime) {
        output.WriteRawTag(24);
        output.WriteInt64(RewardClaimTime);
      }
      if (HasPpChipsClaimed) {
        output.WriteRawTag(32);
        output.WriteInt64(PpChipsClaimed);
      }
      if (HasRewardAmountClaimed) {
        output.WriteRawTag(40);
        output.WriteInt64(RewardAmountClaimed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUserName) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (HasRewardClaimTime) {
        output.WriteRawTag(24);
        output.WriteInt64(RewardClaimTime);
      }
      if (HasPpChipsClaimed) {
        output.WriteRawTag(32);
        output.WriteInt64(PpChipsClaimed);
      }
      if (HasRewardAmountClaimed) {
        output.WriteRawTag(40);
        output.WriteInt64(RewardAmountClaimed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUserName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasRewardClaimTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RewardClaimTime);
      }
      if (HasPpChipsClaimed) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PpChipsClaimed);
      }
      if (HasRewardAmountClaimed) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RewardAmountClaimed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasRewardClaimTime) {
        RewardClaimTime = other.RewardClaimTime;
      }
      if (other.HasPpChipsClaimed) {
        PpChipsClaimed = other.PpChipsClaimed;
      }
      if (other.HasRewardAmountClaimed) {
        RewardAmountClaimed = other.RewardAmountClaimed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            RewardClaimTime = input.ReadInt64();
            break;
          }
          case 32: {
            PpChipsClaimed = input.ReadInt64();
            break;
          }
          case 40: {
            RewardAmountClaimed = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            RewardClaimTime = input.ReadInt64();
            break;
          }
          case 32: {
            PpChipsClaimed = input.ReadInt64();
            break;
          }
          case 40: {
            RewardAmountClaimed = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 創建, 修改, 取消手牌任務
  /// </summary>
  public sealed partial class HandMissionOpREQ : pb::IMessage<HandMissionOpREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionOpREQ> _parser = new pb::MessageParser<HandMissionOpREQ>(() => new HandMissionOpREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionOpREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionOpREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionOpREQ(HandMissionOpREQ other) : this() {
      _hasBits0 = other._hasBits0;
      action_ = other.action_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionOpREQ Clone() {
      return new HandMissionOpREQ(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private readonly static int ActionDefaultValue = 0;

    private int action_;
    /// <summary>
    /// 0: 創建, 1: 修改, 2: 取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Action {
      get { if ((_hasBits0 & 1) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAction {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAction() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Texas.Protocol.HandMissionConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionOpREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionOpREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAction) hash ^= Action.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAction) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAction) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionOpREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Texas.Protocol.HandMissionConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 通用 code:  0: 操作成功, -3: 權限不足, -9: 所有手牌任務功能已關閉、非法操作
  /// 創建 code: -2: 餘額不足, -5: 配置時間參數錯誤, -11: 配置玩法設定錯誤, -14: 同時間存在任務超過上線, -15: 任務已暫停, -9: 其他配置錯誤、資料庫錯誤
  /// 修改 code: -5: 配置時間參數錯誤, -7: 非法狀態下編輯, -11: 配置玩法設定錯誤, -14: 同時間存在任務超過上線, -9: 其他配置錯誤、資料庫錯誤
  /// 取消 code: -7: 非法狀態下取消, -9: 資料庫錯誤
  /// </summary>
  public sealed partial class HandMissionOpRSP : pb::IMessage<HandMissionOpRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionOpRSP> _parser = new pb::MessageParser<HandMissionOpRSP>(() => new HandMissionOpRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionOpRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionOpRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionOpRSP(HandMissionOpRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      action_ = other.action_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      warningLimit_ = other.warningLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionOpRSP Clone() {
      return new HandMissionOpRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private readonly static int ActionDefaultValue = 0;

    private int action_;
    /// <summary>
    /// 0: 創建, 1: 修改, 2: 取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Texas.Protocol.HandMissionConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "warning_limit" field.</summary>
    public const int WarningLimitFieldNumber = 4;
    private readonly static long WarningLimitDefaultValue = 0L;

    private long warningLimit_;
    /// <summary>
    /// code = -2 時，提供成功解除須滿足的 pp 幣數量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WarningLimit {
      get { if ((_hasBits0 & 4) != 0) { return warningLimit_; } else { return WarningLimitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        warningLimit_ = value;
      }
    }
    /// <summary>Gets whether the "warning_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWarningLimit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "warning_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWarningLimit() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionOpRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionOpRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (WarningLimit != other.WarningLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (HasWarningLimit) hash ^= WarningLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasAction) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (HasWarningLimit) {
        output.WriteRawTag(32);
        output.WriteInt64(WarningLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasAction) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (HasWarningLimit) {
        output.WriteRawTag(32);
        output.WriteInt64(WarningLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (HasWarningLimit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarningLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionOpRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Texas.Protocol.HandMissionConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.HasWarningLimit) {
        WarningLimit = other.WarningLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 32: {
            WarningLimit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 32: {
            WarningLimit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ClubActivityInfoRSP 右下角活動入口相關顯示
  /// </summary>
  public sealed partial class HandMissionSimpleInfo : pb::IMessage<HandMissionSimpleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionSimpleInfo> _parser = new pb::MessageParser<HandMissionSimpleInfo>(() => new HandMissionSimpleInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionSimpleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionSimpleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionSimpleInfo(HandMissionSimpleInfo other) : this() {
      _hasBits0 = other._hasBits0;
      showHandMission_ = other.showHandMission_;
      isHandMissionStop_ = other.isHandMissionStop_;
      numOfCompleteMissions_ = other.numOfCompleteMissions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionSimpleInfo Clone() {
      return new HandMissionSimpleInfo(this);
    }

    /// <summary>Field number for the "show_hand_mission" field.</summary>
    public const int ShowHandMissionFieldNumber = 1;
    private readonly static int ShowHandMissionDefaultValue = 0;

    private int showHandMission_;
    /// <summary>
    /// 1: 當有 "進行中" or "24 小時內已結束/ 已取消" 之手牌任務，0: 無需顯示的手牌任務
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShowHandMission {
      get { if ((_hasBits0 & 1) != 0) { return showHandMission_; } else { return ShowHandMissionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        showHandMission_ = value;
      }
    }
    /// <summary>Gets whether the "show_hand_mission" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShowHandMission {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "show_hand_mission" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShowHandMission() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_hand_mission_stop" field.</summary>
    public const int IsHandMissionStopFieldNumber = 2;
    private readonly static int IsHandMissionStopDefaultValue = 0;

    private int isHandMissionStop_;
    /// <summary>
    /// 手牌任務是否有暫停狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsHandMissionStop {
      get { if ((_hasBits0 & 2) != 0) { return isHandMissionStop_; } else { return IsHandMissionStopDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isHandMissionStop_ = value;
      }
    }
    /// <summary>Gets whether the "is_hand_mission_stop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHandMissionStop {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_hand_mission_stop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHandMissionStop() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "num_of_complete_missions" field.</summary>
    public const int NumOfCompleteMissionsFieldNumber = 3;
    private readonly static int NumOfCompleteMissionsDefaultValue = 0;

    private int numOfCompleteMissions_;
    /// <summary>
    /// 無暫停時顯示可領獎數量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumOfCompleteMissions {
      get { if ((_hasBits0 & 4) != 0) { return numOfCompleteMissions_; } else { return NumOfCompleteMissionsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        numOfCompleteMissions_ = value;
      }
    }
    /// <summary>Gets whether the "num_of_complete_missions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumOfCompleteMissions {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "num_of_complete_missions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumOfCompleteMissions() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionSimpleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionSimpleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowHandMission != other.ShowHandMission) return false;
      if (IsHandMissionStop != other.IsHandMissionStop) return false;
      if (NumOfCompleteMissions != other.NumOfCompleteMissions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShowHandMission) hash ^= ShowHandMission.GetHashCode();
      if (HasIsHandMissionStop) hash ^= IsHandMissionStop.GetHashCode();
      if (HasNumOfCompleteMissions) hash ^= NumOfCompleteMissions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShowHandMission) {
        output.WriteRawTag(8);
        output.WriteInt32(ShowHandMission);
      }
      if (HasIsHandMissionStop) {
        output.WriteRawTag(16);
        output.WriteInt32(IsHandMissionStop);
      }
      if (HasNumOfCompleteMissions) {
        output.WriteRawTag(24);
        output.WriteInt32(NumOfCompleteMissions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShowHandMission) {
        output.WriteRawTag(8);
        output.WriteInt32(ShowHandMission);
      }
      if (HasIsHandMissionStop) {
        output.WriteRawTag(16);
        output.WriteInt32(IsHandMissionStop);
      }
      if (HasNumOfCompleteMissions) {
        output.WriteRawTag(24);
        output.WriteInt32(NumOfCompleteMissions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasShowHandMission) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowHandMission);
      }
      if (HasIsHandMissionStop) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHandMissionStop);
      }
      if (HasNumOfCompleteMissions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOfCompleteMissions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionSimpleInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasShowHandMission) {
        ShowHandMission = other.ShowHandMission;
      }
      if (other.HasIsHandMissionStop) {
        IsHandMissionStop = other.IsHandMissionStop;
      }
      if (other.HasNumOfCompleteMissions) {
        NumOfCompleteMissions = other.NumOfCompleteMissions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowHandMission = input.ReadInt32();
            break;
          }
          case 16: {
            IsHandMissionStop = input.ReadInt32();
            break;
          }
          case 24: {
            NumOfCompleteMissions = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ShowHandMission = input.ReadInt32();
            break;
          }
          case 16: {
            IsHandMissionStop = input.ReadInt32();
            break;
          }
          case 24: {
            NumOfCompleteMissions = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 點擊活動入口查看手牌任務清單
  /// </summary>
  public sealed partial class HandMissionInfoREQ : pb::IMessage<HandMissionInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionInfoREQ> _parser = new pb::MessageParser<HandMissionInfoREQ>(() => new HandMissionInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfoREQ(HandMissionInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      clubid_ = other.clubid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfoREQ Clone() {
      return new HandMissionInfoREQ(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionInfoRSP : pb::IMessage<HandMissionInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionInfoRSP> _parser = new pb::MessageParser<HandMissionInfoRSP>(() => new HandMissionInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfoRSP(HandMissionInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      isHandMissionStop_ = other.isHandMissionStop_;
      stopTimeLeft_ = other.stopTimeLeft_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionInfoRSP Clone() {
      return new HandMissionInfoRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0: 操作成功, -1: 其他失敗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_hand_mission_stop" field.</summary>
    public const int IsHandMissionStopFieldNumber = 2;
    private readonly static int IsHandMissionStopDefaultValue = 0;

    private int isHandMissionStop_;
    /// <summary>
    /// 是否顯示已暫停
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsHandMissionStop {
      get { if ((_hasBits0 & 2) != 0) { return isHandMissionStop_; } else { return IsHandMissionStopDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isHandMissionStop_ = value;
      }
    }
    /// <summary>Gets whether the "is_hand_mission_stop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHandMissionStop {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_hand_mission_stop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHandMissionStop() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "stop_time_left" field.</summary>
    public const int StopTimeLeftFieldNumber = 3;
    private readonly static int StopTimeLeftDefaultValue = 0;

    private int stopTimeLeft_;
    /// <summary>
    /// 任務暫停倒數時間戳 (0: 無倒數)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StopTimeLeft {
      get { if ((_hasBits0 & 4) != 0) { return stopTimeLeft_; } else { return StopTimeLeftDefaultValue; } }
      set {
        _hasBits0 |= 4;
        stopTimeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "stop_time_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStopTimeLeft {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "stop_time_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStopTimeLeft() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.HandMissionInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.HandMissionInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.HandMissionInfo> info_ = new pbc::RepeatedField<global::Texas.Protocol.HandMissionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.HandMissionInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (IsHandMissionStop != other.IsHandMissionStop) return false;
      if (StopTimeLeft != other.StopTimeLeft) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasIsHandMissionStop) hash ^= IsHandMissionStop.GetHashCode();
      if (HasStopTimeLeft) hash ^= StopTimeLeft.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasIsHandMissionStop) {
        output.WriteRawTag(16);
        output.WriteInt32(IsHandMissionStop);
      }
      if (HasStopTimeLeft) {
        output.WriteRawTag(24);
        output.WriteInt32(StopTimeLeft);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasIsHandMissionStop) {
        output.WriteRawTag(16);
        output.WriteInt32(IsHandMissionStop);
      }
      if (HasStopTimeLeft) {
        output.WriteRawTag(24);
        output.WriteInt32(StopTimeLeft);
      }
      info_.WriteTo(ref output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasIsHandMissionStop) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHandMissionStop);
      }
      if (HasStopTimeLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StopTimeLeft);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasIsHandMissionStop) {
        IsHandMissionStop = other.IsHandMissionStop;
      }
      if (other.HasStopTimeLeft) {
        StopTimeLeft = other.StopTimeLeft;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            IsHandMissionStop = input.ReadInt32();
            break;
          }
          case 24: {
            StopTimeLeft = input.ReadInt32();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            IsHandMissionStop = input.ReadInt32();
            break;
          }
          case 24: {
            StopTimeLeft = input.ReadInt32();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Host/ Managers 查看 ActivityRecord 時使用
  /// </summary>
  public sealed partial class HandMissionRecordREQ : pb::IMessage<HandMissionRecordREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionRecordREQ> _parser = new pb::MessageParser<HandMissionRecordREQ>(() => new HandMissionRecordREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionRecordREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecordREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecordREQ(HandMissionRecordREQ other) : this() {
      _hasBits0 = other._hasBits0;
      handMissionId_ = other.handMissionId_;
      clubid_ = other.clubid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecordREQ Clone() {
      return new HandMissionRecordREQ(this);
    }

    /// <summary>Field number for the "hand_mission_id" field.</summary>
    public const int HandMissionIdFieldNumber = 1;
    private readonly static long HandMissionIdDefaultValue = 0L;

    private long handMissionId_;
    /// <summary>
    /// 手牌任務 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandMissionId {
      get { if ((_hasBits0 & 1) != 0) { return handMissionId_; } else { return HandMissionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handMissionId_ = value;
      }
    }
    /// <summary>Gets whether the "hand_mission_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandMissionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hand_mission_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandMissionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 2) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionRecordREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionRecordREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandMissionId != other.HandMissionId) return false;
      if (Clubid != other.Clubid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandMissionId) hash ^= HandMissionId.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandMissionId) {
        output.WriteRawTag(8);
        output.WriteInt64(HandMissionId);
      }
      if (HasClubid) {
        output.WriteRawTag(16);
        output.WriteInt32(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandMissionId) {
        output.WriteRawTag(8);
        output.WriteInt64(HandMissionId);
      }
      if (HasClubid) {
        output.WriteRawTag(16);
        output.WriteInt32(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHandMissionId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandMissionId);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionRecordREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasHandMissionId) {
        HandMissionId = other.HandMissionId;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandMissionId = input.ReadInt64();
            break;
          }
          case 16: {
            Clubid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HandMissionId = input.ReadInt64();
            break;
          }
          case 16: {
            Clubid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionRecordRSP : pb::IMessage<HandMissionRecordRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionRecordRSP> _parser = new pb::MessageParser<HandMissionRecordRSP>(() => new HandMissionRecordRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionRecordRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecordRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecordRSP(HandMissionRecordRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      record_ = other.record_.Clone();
      rewardAmountSent_ = other.rewardAmountSent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionRecordRSP Clone() {
      return new HandMissionRecordRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0: 操作成功, -3: 權限不足, -9: 其他失敗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Texas.Protocol.HandMissionConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.HandMissionRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.HandMissionRecord.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.HandMissionRecord> record_ = new pbc::RepeatedField<global::Texas.Protocol.HandMissionRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.HandMissionRecord> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "reward_amount_sent" field.</summary>
    public const int RewardAmountSentFieldNumber = 4;
    private readonly static long RewardAmountSentDefaultValue = 0L;

    private long rewardAmountSent_;
    /// <summary>
    /// 已發送出的獎勵數量 (總 pp 幣數量/ 總領獎人數)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RewardAmountSent {
      get { if ((_hasBits0 & 2) != 0) { return rewardAmountSent_; } else { return RewardAmountSentDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rewardAmountSent_ = value;
      }
    }
    /// <summary>Gets whether the "reward_amount_sent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardAmountSent {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward_amount_sent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardAmountSent() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionRecordRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionRecordRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if(!record_.Equals(other.record_)) return false;
      if (RewardAmountSent != other.RewardAmountSent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      hash ^= record_.GetHashCode();
      if (HasRewardAmountSent) hash ^= RewardAmountSent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      record_.WriteTo(output, _repeated_record_codec);
      if (HasRewardAmountSent) {
        output.WriteRawTag(32);
        output.WriteInt64(RewardAmountSent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      record_.WriteTo(ref output, _repeated_record_codec);
      if (HasRewardAmountSent) {
        output.WriteRawTag(32);
        output.WriteInt64(RewardAmountSent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      size += record_.CalculateSize(_repeated_record_codec);
      if (HasRewardAmountSent) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RewardAmountSent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionRecordRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Texas.Protocol.HandMissionConfig();
        }
        Config.MergeFrom(other.Config);
      }
      record_.Add(other.record_);
      if (other.HasRewardAmountSent) {
        RewardAmountSent = other.RewardAmountSent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 26: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
          case 32: {
            RewardAmountSent = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.HandMissionConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 26: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
          case 32: {
            RewardAmountSent = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 領取手牌任務獎勵
  /// </summary>
  public sealed partial class HandMissionClaimRewardREQ : pb::IMessage<HandMissionClaimRewardREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionClaimRewardREQ> _parser = new pb::MessageParser<HandMissionClaimRewardREQ>(() => new HandMissionClaimRewardREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionClaimRewardREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionClaimRewardREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionClaimRewardREQ(HandMissionClaimRewardREQ other) : this() {
      _hasBits0 = other._hasBits0;
      handMissionId_ = other.handMissionId_;
      clubid_ = other.clubid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionClaimRewardREQ Clone() {
      return new HandMissionClaimRewardREQ(this);
    }

    /// <summary>Field number for the "hand_mission_id" field.</summary>
    public const int HandMissionIdFieldNumber = 1;
    private readonly static long HandMissionIdDefaultValue = 0L;

    private long handMissionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandMissionId {
      get { if ((_hasBits0 & 1) != 0) { return handMissionId_; } else { return HandMissionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handMissionId_ = value;
      }
    }
    /// <summary>Gets whether the "hand_mission_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandMissionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hand_mission_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandMissionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static long ClubidDefaultValue = 0L;

    private long clubid_;
    /// <summary>
    /// 玩家俱樂部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Clubid {
      get { if ((_hasBits0 & 2) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionClaimRewardREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionClaimRewardREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandMissionId != other.HandMissionId) return false;
      if (Clubid != other.Clubid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandMissionId) hash ^= HandMissionId.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandMissionId) {
        output.WriteRawTag(8);
        output.WriteInt64(HandMissionId);
      }
      if (HasClubid) {
        output.WriteRawTag(16);
        output.WriteInt64(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandMissionId) {
        output.WriteRawTag(8);
        output.WriteInt64(HandMissionId);
      }
      if (HasClubid) {
        output.WriteRawTag(16);
        output.WriteInt64(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHandMissionId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandMissionId);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Clubid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionClaimRewardREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasHandMissionId) {
        HandMissionId = other.HandMissionId;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandMissionId = input.ReadInt64();
            break;
          }
          case 16: {
            Clubid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HandMissionId = input.ReadInt64();
            break;
          }
          case 16: {
            Clubid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionClaimRewardRSP : pb::IMessage<HandMissionClaimRewardRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionClaimRewardRSP> _parser = new pb::MessageParser<HandMissionClaimRewardRSP>(() => new HandMissionClaimRewardRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionClaimRewardRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionClaimRewardRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionClaimRewardRSP(HandMissionClaimRewardRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      rewardType_ = other.rewardType_;
      ppChips_ = other.ppChips_;
      luckydrawIndex_ = other.luckydrawIndex_;
      rewardLeft_ = other.rewardLeft_;
      simpleInfo_ = other.simpleInfo_ != null ? other.simpleInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionClaimRewardRSP Clone() {
      return new HandMissionClaimRewardRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0: 操作成功, -1: 其他失敗, -2: 已暫停, -3: PP 幣不足 (導致暫停)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward_type" field.</summary>
    public const int RewardTypeFieldNumber = 2;
    private readonly static global::Texas.Protocol.HandMissionRewardTypes RewardTypeDefaultValue = global::Texas.Protocol.HandMissionRewardTypes.PpChips;

    private global::Texas.Protocol.HandMissionRewardTypes rewardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionRewardTypes RewardType {
      get { if ((_hasBits0 & 2) != 0) { return rewardType_; } else { return RewardTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rewardType_ = value;
      }
    }
    /// <summary>Gets whether the "reward_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pp_chips" field.</summary>
    public const int PpChipsFieldNumber = 3;
    private readonly static long PpChipsDefaultValue = 0L;

    private long ppChips_;
    /// <summary>
    /// 實際中獎的 pp 幣數量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpChips {
      get { if ((_hasBits0 & 4) != 0) { return ppChips_; } else { return PpChipsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ppChips_ = value;
      }
    }
    /// <summary>Gets whether the "pp_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpChips {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pp_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpChips() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "luckydraw_index" field.</summary>
    public const int LuckydrawIndexFieldNumber = 4;
    private readonly static int LuckydrawIndexDefaultValue = 0;

    private int luckydrawIndex_;
    /// <summary>
    /// 提供前端控制轉盤的中獎代號 (實際中多少倍率可根據此 index 查詢機率配置表，0 ~ 5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LuckydrawIndex {
      get { if ((_hasBits0 & 8) != 0) { return luckydrawIndex_; } else { return LuckydrawIndexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        luckydrawIndex_ = value;
      }
    }
    /// <summary>Gets whether the "luckydraw_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLuckydrawIndex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "luckydraw_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLuckydrawIndex() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "reward_left" field.</summary>
    public const int RewardLeftFieldNumber = 5;
    private readonly static int RewardLeftDefaultValue = 0;

    private int rewardLeft_;
    /// <summary>
    /// 剩餘獎勵次數 (獎勵為 luckydraw 時提供前端更新資訊)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardLeft {
      get { if ((_hasBits0 & 16) != 0) { return rewardLeft_; } else { return RewardLeftDefaultValue; } }
      set {
        _hasBits0 |= 16;
        rewardLeft_ = value;
      }
    }
    /// <summary>Gets whether the "reward_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardLeft {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "reward_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardLeft() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "simple_info" field.</summary>
    public const int SimpleInfoFieldNumber = 6;
    private global::Texas.Protocol.HandMissionSimpleInfo simpleInfo_;
    /// <summary>
    /// 領獎後刷新資料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionSimpleInfo SimpleInfo {
      get { return simpleInfo_; }
      set {
        simpleInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionClaimRewardRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionClaimRewardRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (RewardType != other.RewardType) return false;
      if (PpChips != other.PpChips) return false;
      if (LuckydrawIndex != other.LuckydrawIndex) return false;
      if (RewardLeft != other.RewardLeft) return false;
      if (!object.Equals(SimpleInfo, other.SimpleInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasRewardType) hash ^= RewardType.GetHashCode();
      if (HasPpChips) hash ^= PpChips.GetHashCode();
      if (HasLuckydrawIndex) hash ^= LuckydrawIndex.GetHashCode();
      if (HasRewardLeft) hash ^= RewardLeft.GetHashCode();
      if (simpleInfo_ != null) hash ^= SimpleInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasRewardType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RewardType);
      }
      if (HasPpChips) {
        output.WriteRawTag(24);
        output.WriteInt64(PpChips);
      }
      if (HasLuckydrawIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckydrawIndex);
      }
      if (HasRewardLeft) {
        output.WriteRawTag(40);
        output.WriteInt32(RewardLeft);
      }
      if (simpleInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SimpleInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasRewardType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RewardType);
      }
      if (HasPpChips) {
        output.WriteRawTag(24);
        output.WriteInt64(PpChips);
      }
      if (HasLuckydrawIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckydrawIndex);
      }
      if (HasRewardLeft) {
        output.WriteRawTag(40);
        output.WriteInt32(RewardLeft);
      }
      if (simpleInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SimpleInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasRewardType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RewardType);
      }
      if (HasPpChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PpChips);
      }
      if (HasLuckydrawIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckydrawIndex);
      }
      if (HasRewardLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardLeft);
      }
      if (simpleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionClaimRewardRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasRewardType) {
        RewardType = other.RewardType;
      }
      if (other.HasPpChips) {
        PpChips = other.PpChips;
      }
      if (other.HasLuckydrawIndex) {
        LuckydrawIndex = other.LuckydrawIndex;
      }
      if (other.HasRewardLeft) {
        RewardLeft = other.RewardLeft;
      }
      if (other.simpleInfo_ != null) {
        if (simpleInfo_ == null) {
          SimpleInfo = new global::Texas.Protocol.HandMissionSimpleInfo();
        }
        SimpleInfo.MergeFrom(other.SimpleInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            RewardType = (global::Texas.Protocol.HandMissionRewardTypes) input.ReadEnum();
            break;
          }
          case 24: {
            PpChips = input.ReadInt64();
            break;
          }
          case 32: {
            LuckydrawIndex = input.ReadInt32();
            break;
          }
          case 40: {
            RewardLeft = input.ReadInt32();
            break;
          }
          case 50: {
            if (simpleInfo_ == null) {
              SimpleInfo = new global::Texas.Protocol.HandMissionSimpleInfo();
            }
            input.ReadMessage(SimpleInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            RewardType = (global::Texas.Protocol.HandMissionRewardTypes) input.ReadEnum();
            break;
          }
          case 24: {
            PpChips = input.ReadInt64();
            break;
          }
          case 32: {
            LuckydrawIndex = input.ReadInt32();
            break;
          }
          case 40: {
            RewardLeft = input.ReadInt32();
            break;
          }
          case 50: {
            if (simpleInfo_ == null) {
              SimpleInfo = new global::Texas.Protocol.HandMissionSimpleInfo();
            }
            input.ReadMessage(SimpleInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 提供給有權限之 Host/ Managers 的暫停提醒 (用戶於俱樂部頁面時，前端每 20 秒發協議來詢問)
  /// </summary>
  public sealed partial class HandMissionStopStatusREQ : pb::IMessage<HandMissionStopStatusREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionStopStatusREQ> _parser = new pb::MessageParser<HandMissionStopStatusREQ>(() => new HandMissionStopStatusREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionStopStatusREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusREQ(HandMissionStopStatusREQ other) : this() {
      _hasBits0 = other._hasBits0;
      clubid_ = other.clubid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusREQ Clone() {
      return new HandMissionStopStatusREQ(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionStopStatusREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionStopStatusREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionStopStatusREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionStopStatusRSP : pb::IMessage<HandMissionStopStatusRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionStopStatusRSP> _parser = new pb::MessageParser<HandMissionStopStatusRSP>(() => new HandMissionStopStatusRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionStopStatusRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusRSP(HandMissionStopStatusRSP other) : this() {
      _hasBits0 = other._hasBits0;
      isHandMissionStop_ = other.isHandMissionStop_;
      name_ = other.name_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      superLeagueid_ = other.superLeagueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusRSP Clone() {
      return new HandMissionStopStatusRSP(this);
    }

    /// <summary>Field number for the "is_hand_mission_stop" field.</summary>
    public const int IsHandMissionStopFieldNumber = 1;
    private readonly static int IsHandMissionStopDefaultValue = 0;

    private int isHandMissionStop_;
    /// <summary>
    /// 0: 未暫停, 1: 暫停中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IsHandMissionStop {
      get { if ((_hasBits0 & 1) != 0) { return isHandMissionStop_; } else { return IsHandMissionStopDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isHandMissionStop_ = value;
      }
    }
    /// <summary>Gets whether the "is_hand_mission_stop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHandMissionStop {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_hand_mission_stop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHandMissionStop() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// 手牌任務暫停之俱樂部/ 聯盟/ 超聯名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 2) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 4;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 5;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 8) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionStopStatusRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionStopStatusRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHandMissionStop != other.IsHandMissionStop) return false;
      if (Name != other.Name) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsHandMissionStop) hash ^= IsHandMissionStop.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsHandMissionStop) {
        output.WriteRawTag(8);
        output.WriteInt32(IsHandMissionStop);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(40);
        output.WriteInt32(SuperLeagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsHandMissionStop) {
        output.WriteRawTag(8);
        output.WriteInt32(IsHandMissionStop);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasClubid) {
        output.WriteRawTag(24);
        output.WriteInt32(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(40);
        output.WriteInt32(SuperLeagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsHandMissionStop) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHandMissionStop);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSuperLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionStopStatusRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasIsHandMissionStop) {
        IsHandMissionStop = other.IsHandMissionStop;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsHandMissionStop = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsHandMissionStop = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Clubid = input.ReadInt32();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 有權限之 Host/ Managers 對暫停情況之操作
  /// </summary>
  public sealed partial class HandMissionStopStatusOpREQ : pb::IMessage<HandMissionStopStatusOpREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionStopStatusOpREQ> _parser = new pb::MessageParser<HandMissionStopStatusOpREQ>(() => new HandMissionStopStatusOpREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionStopStatusOpREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusOpREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusOpREQ(HandMissionStopStatusOpREQ other) : this() {
      _hasBits0 = other._hasBits0;
      clubid_ = other.clubid_;
      operation_ = other.operation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusOpREQ Clone() {
      return new HandMissionStopStatusOpREQ(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private readonly static int OperationDefaultValue = 0;

    private int operation_;
    /// <summary>
    /// 0: 恢復, 1: 強制中止所有手牌任務
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Operation {
      get { if ((_hasBits0 & 2) != 0) { return operation_; } else { return OperationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        operation_ = value;
      }
    }
    /// <summary>Gets whether the "operation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOperation {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "operation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOperation() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionStopStatusOpREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionStopStatusOpREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      if (Operation != other.Operation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasOperation) hash ^= Operation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (HasOperation) {
        output.WriteRawTag(16);
        output.WriteInt32(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (HasOperation) {
        output.WriteRawTag(16);
        output.WriteInt32(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasOperation) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionStopStatusOpREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasOperation) {
        Operation = other.Operation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
          case 16: {
            Operation = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
          case 16: {
            Operation = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandMissionStopStatusOpRSP : pb::IMessage<HandMissionStopStatusOpRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandMissionStopStatusOpRSP> _parser = new pb::MessageParser<HandMissionStopStatusOpRSP>(() => new HandMissionStopStatusOpRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HandMissionStopStatusOpRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.HandMissionReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusOpRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusOpRSP(HandMissionStopStatusOpRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      operation_ = other.operation_;
      warningLimit_ = other.warningLimit_;
      simpleInfo_ = other.simpleInfo_ != null ? other.simpleInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HandMissionStopStatusOpRSP Clone() {
      return new HandMissionStopStatusOpRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0: 操作成功, -1: 其他失敗, -2: 俱樂部 PP 不足 1000 無法恢復, -3: 權限不足, -7: 狀態錯誤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private readonly static int OperationDefaultValue = 0;

    private int operation_;
    /// <summary>
    /// 0: 恢復, 1: 強制中止所有手牌任務
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Operation {
      get { if ((_hasBits0 & 2) != 0) { return operation_; } else { return OperationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        operation_ = value;
      }
    }
    /// <summary>Gets whether the "operation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOperation {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "operation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOperation() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "warning_limit" field.</summary>
    public const int WarningLimitFieldNumber = 3;
    private readonly static int WarningLimitDefaultValue = 0;

    private int warningLimit_;
    /// <summary>
    /// code = -2 時，提供成功解除須滿足的 pp 幣數量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WarningLimit {
      get { if ((_hasBits0 & 4) != 0) { return warningLimit_; } else { return WarningLimitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        warningLimit_ = value;
      }
    }
    /// <summary>Gets whether the "warning_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWarningLimit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "warning_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWarningLimit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "simple_info" field.</summary>
    public const int SimpleInfoFieldNumber = 4;
    private global::Texas.Protocol.HandMissionSimpleInfo simpleInfo_;
    /// <summary>
    /// 恢復暫停後刷新資料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandMissionSimpleInfo SimpleInfo {
      get { return simpleInfo_; }
      set {
        simpleInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HandMissionStopStatusOpRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HandMissionStopStatusOpRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Operation != other.Operation) return false;
      if (WarningLimit != other.WarningLimit) return false;
      if (!object.Equals(SimpleInfo, other.SimpleInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasOperation) hash ^= Operation.GetHashCode();
      if (HasWarningLimit) hash ^= WarningLimit.GetHashCode();
      if (simpleInfo_ != null) hash ^= SimpleInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasOperation) {
        output.WriteRawTag(16);
        output.WriteInt32(Operation);
      }
      if (HasWarningLimit) {
        output.WriteRawTag(24);
        output.WriteInt32(WarningLimit);
      }
      if (simpleInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SimpleInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasOperation) {
        output.WriteRawTag(16);
        output.WriteInt32(Operation);
      }
      if (HasWarningLimit) {
        output.WriteRawTag(24);
        output.WriteInt32(WarningLimit);
      }
      if (simpleInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SimpleInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasOperation) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
      }
      if (HasWarningLimit) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningLimit);
      }
      if (simpleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HandMissionStopStatusOpRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasOperation) {
        Operation = other.Operation;
      }
      if (other.HasWarningLimit) {
        WarningLimit = other.WarningLimit;
      }
      if (other.simpleInfo_ != null) {
        if (simpleInfo_ == null) {
          SimpleInfo = new global::Texas.Protocol.HandMissionSimpleInfo();
        }
        SimpleInfo.MergeFrom(other.SimpleInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Operation = input.ReadInt32();
            break;
          }
          case 24: {
            WarningLimit = input.ReadInt32();
            break;
          }
          case 34: {
            if (simpleInfo_ == null) {
              SimpleInfo = new global::Texas.Protocol.HandMissionSimpleInfo();
            }
            input.ReadMessage(SimpleInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Operation = input.ReadInt32();
            break;
          }
          case 24: {
            WarningLimit = input.ReadInt32();
            break;
          }
          case 34: {
            if (simpleInfo_ == null) {
              SimpleInfo = new global::Texas.Protocol.HandMissionSimpleInfo();
            }
            input.ReadMessage(SimpleInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
