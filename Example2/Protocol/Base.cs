// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpiYXNlLnByb3RvGg5wcmVfYmFzZS5wcm90bxoPcHJlX2Jhc2UxLnByb3Rv",
            "GgpwcGdsLnByb3RvIsodCghSb29tSW5mbxITCgZyb29taWQYASABKAlIAIgB",
            "ARIWCglyb29tX25hbWUYAiABKAlIAYgBARIXCgpvd25lcl9uYW1lGAMgASgJ",
            "SAKIAQESEgoFYmxpbmQYBCABKANIA4gBARIRCgRhbnRlGAUgASgDSASIAQES",
            "FgoJbWluX2J1eWluGAYgASgDSAWIAQESGAoLYWN0aW9uX3RpbWUYByABKAVI",
            "BogBARIWCglnYW1lX3RpbWUYCCABKAVIB4gBARIVCghzZWF0X251bRgJIAEo",
            "BUgIiAEBEhQKB293bmVyaWQYCiABKANICYgBARIhCglyb29tX3R5cGUYCyAB",
            "KA4yCS5Sb29tVHlwZUgKiAEBEhQKB2ZlZXR5cGUYDCABKAVIC4gBARIVCghm",
            "ZWVwb2ludBgNIAEoBUgMiAEBEhcKCmF1dGhfbGltaXQYDiABKAhIDYgBARIT",
            "CgZyZWdpb24YDyABKAVIDogBARIXCgpvd25lcl9pY29uGBAgASgJSA+IAQES",
            "EwoGY2x1YmlkGBEgASgJSBCIAQESFQoIcGxhdGZvcm0YEiABKAlIEYgBARIa",
            "Cg1kZWZhdWx0X2J1eWluGBMgASgDSBKIAQESEAoDY2FwGBQgASgFSBOIAQES",
            "FwoKcG9vbF9saW1pdBgVIAEoCEgUiAEBEhYKCW1heF9idXlpbhgWIAEoA0gV",
            "iAEBEh8KEmlzX3J1bl9tdWx0aV90aW1lcxgXIAEoCEgWiAEBEhkKDGlzX2lu",
            "c3VyYW5jZRgYIAEoCEgXiAEBEhUKCGxlYWd1ZWlkGBkgASgFSBiIAQESFgoJ",
            "Y2x1Yl9uYW1lGBogASgJSBmIAQESGQoMY2x1Yl9vd25lcmlkGBsgASgDSBqI",
            "AQESFgoJY2x1Yl9pY29uGBwgASgJSBuIAQESEwoGdGVtcGlkGB0gASgJSByI",
            "AQESFQoIb2ZmaWNpYWwYHiABKAhIHYgBARIWCglncHNfbGltaXQYHyABKAhI",
            "HogBARIVCghpcF9saW1pdBggIAEoCEgfiAEBEh8KEmdwc19kaXN0YW5jZV9s",
            "aW1pdBghIAEoBUggiAEBEhMKBmNpdHlpZBgiIAEoBUghiAEBEiEKCXJvb21f",
            "bW9kZRgjIAEoDjIJLlJvb21Nb2RlSCKIAQESHAoPb3duZXJfdmlwX2xldmVs",
            "GCQgASgNSCOIAQESFwoKYXV0b19zdGFydBglIAEoBUgkiAEBEiEKCWdhbWVf",
            "bW9kZRgmIAEoDjIJLkdhbWVNb2RlSCWIAQESHQoQcmViYXRlX2hhbmRzX251",
            "bRgnIAEoBUgmiAEBEhkKDHJlYmF0ZV9wb2ludBgoIAEoBUgniAEBEh0KEGNh",
            "bGx0aW1lX21pbnV0ZXMYKSABKAVIKIgBARIXCgpyZWJhdGVfZmVlGCogASgD",
            "SCmIAQESJgoZcmViYXRlX3Nocmlua19jb2VmZmljaWVudBgrIAEoBUgqiAEB",
            "EhwKD2dldF9yZWJhdGVfdHlwZRgsIAEoBUgriAEBEhsKDndpdGhkcmF3X2No",
            "aXBzGC0gASgISCyIAQESJAoXaXNfYXV0b19kZWxheV9yb29tX292ZXIYLiAB",
            "KAhILYgBARInChphdXRvX2RlbGF5X3Jvb21fb3Zlcl90aW1lcxgvIAEoBUgu",
            "iAEBEiAKE2lzX2F1dG9fY3JlYXRlX3Jvb20YMCABKAhIL4gBARIXCgp2cGlw",
            "X2xpbWl0GDEgASgFSDCIAQESFQoIbW9kdWxlaWQYMiABKANIMYgBARIbCg5m",
            "b3JiaWRkZW5fY2hhdBgzIAEoCEgyiAEBEhYKCWlzX2V2Y2hvcBg0IAEoCEgz",
            "iAEBEh8KEnZwaXBfbGltaXRfcGVyX3NldBg1IAEoBUg0iAEBEh4KEW1pbl9o",
            "YW5kc19wZXJfc2V0GDYgASgFSDWIAQESGQoMcGFzc3dkX2xpbWl0GDcgASgI",
            "SDaIAQESEwoGcGFzc3dkGDggASgJSDeIAQESGwoOc3VwZXJfbGVhZ3VlaWQY",
            "OSABKAVIOIgBARIeChFzdXBlcl9sZWFndWVfdHlwZRg6IAEoBUg5iAEBEhMK",
            "C2FudGVfdXBfdmVjGDsgAygDEhgKC2xvYmJ5X3Njb3JlGDwgASgFSDqIAQES",
            "FwoKaXNfY2FwdGNoYRg9IAEoCEg7iAEBEhYKCWlzX2Jhbl9wYxg+IAEoCEg8",
            "iAEBEhoKDWlzX2NoZWNrX21haWwYPyABKAhIPYgBARIqCh1zZXZlbl9kZXVj",
            "ZV9yZXdhcmRfbXVsdGlwbGllchhAIAEoBUg+iAEBEiAKE2ZvcmJpZGRlbl9j",
            "aGF0X21vZGUYQSABKAVIP4gBARIZCgxpc192aXBfdGFibGUYQiABKAhIQIgB",
            "ARIqCh1lbnRlcl9yb29tX2NoaXBzX3ByZXJlcXVpc2l0ZRhDIAEoA0hBiAEB",
            "EhMKBnBwc3JpZBhEIAEoBUhCiAEBEh8KEnBwc3JfZXhjaGFuZ2VfcmF0ZRhF",
            "IAEoBUhDiAEBEhcKCmlzX2phY2twb3QYRiABKAhIRIgBARIdChBpc19jZXJ0",
            "aWZpY2F0aW9uGEcgASgISEWIAQESGQoMYm9tYnBvdF90eXBlGEggASgFSEaI",
            "AQESIAoTY3ljbGVfYm9tYnBvdF9oYW5kcxhJIAEoBUhHiAEBEiIKFWN5Y2xl",
            "X2JvbWJwb3Rfc2Vjb25kcxhKIAEoBUhIiAEBEh0KEGhhbmRzX3RvX2JvbWJw",
            "b3QYSyABKAVISYgBARIfChJzZWNvbmRzX3RvX2JvbWJwb3QYTCABKAVISogB",
            "ARIaCg1pc19pbl9ib21icG90GE0gASgISEuIAQESGwoObWluX2JvbWJfdGlt",
            "ZXMYTiABKAVITIgBARIbCg5tYXhfYm9tYl90aW1lcxhPIAEoBUhNiAEBEiUK",
            "GGJvbWJwb3RfYWRkaXRpb25hbF9ib2FyZBhQIAEoBUhOiAEBEh0KEGFkZGl0",
            "aW9uYWxfYm9hcmQYUSABKAVIT4gBARIkChdpc19zZXF1ZW50aWFsX3ZpZXdf",
            "Y2FyZBhSIAEoCEhQiAEBEiYKGWlzX2JvbWJwb3Rfd2l0aG91dF9ldmNob3AY",
            "UyABKAhIUYgBAUIJCgdfcm9vbWlkQgwKCl9yb29tX25hbWVCDQoLX293bmVy",
            "X25hbWVCCAoGX2JsaW5kQgcKBV9hbnRlQgwKCl9taW5fYnV5aW5CDgoMX2Fj",
            "dGlvbl90aW1lQgwKCl9nYW1lX3RpbWVCCwoJX3NlYXRfbnVtQgoKCF9vd25l",
            "cmlkQgwKCl9yb29tX3R5cGVCCgoIX2ZlZXR5cGVCCwoJX2ZlZXBvaW50Qg0K",
            "C19hdXRoX2xpbWl0QgkKB19yZWdpb25CDQoLX293bmVyX2ljb25CCQoHX2Ns",
            "dWJpZEILCglfcGxhdGZvcm1CEAoOX2RlZmF1bHRfYnV5aW5CBgoEX2NhcEIN",
            "CgtfcG9vbF9saW1pdEIMCgpfbWF4X2J1eWluQhUKE19pc19ydW5fbXVsdGlf",
            "dGltZXNCDwoNX2lzX2luc3VyYW5jZUILCglfbGVhZ3VlaWRCDAoKX2NsdWJf",
            "bmFtZUIPCg1fY2x1Yl9vd25lcmlkQgwKCl9jbHViX2ljb25CCQoHX3RlbXBp",
            "ZEILCglfb2ZmaWNpYWxCDAoKX2dwc19saW1pdEILCglfaXBfbGltaXRCFQoT",
            "X2dwc19kaXN0YW5jZV9saW1pdEIJCgdfY2l0eWlkQgwKCl9yb29tX21vZGVC",
            "EgoQX293bmVyX3ZpcF9sZXZlbEINCgtfYXV0b19zdGFydEIMCgpfZ2FtZV9t",
            "b2RlQhMKEV9yZWJhdGVfaGFuZHNfbnVtQg8KDV9yZWJhdGVfcG9pbnRCEwoR",
            "X2NhbGx0aW1lX21pbnV0ZXNCDQoLX3JlYmF0ZV9mZWVCHAoaX3JlYmF0ZV9z",
            "aHJpbmtfY29lZmZpY2llbnRCEgoQX2dldF9yZWJhdGVfdHlwZUIRCg9fd2l0",
            "aGRyYXdfY2hpcHNCGgoYX2lzX2F1dG9fZGVsYXlfcm9vbV9vdmVyQh0KG19h",
            "dXRvX2RlbGF5X3Jvb21fb3Zlcl90aW1lc0IWChRfaXNfYXV0b19jcmVhdGVf",
            "cm9vbUINCgtfdnBpcF9saW1pdEILCglfbW9kdWxlaWRCEQoPX2ZvcmJpZGRl",
            "bl9jaGF0QgwKCl9pc19ldmNob3BCFQoTX3ZwaXBfbGltaXRfcGVyX3NldEIU",
            "ChJfbWluX2hhbmRzX3Blcl9zZXRCDwoNX3Bhc3N3ZF9saW1pdEIJCgdfcGFz",
            "c3dkQhEKD19zdXBlcl9sZWFndWVpZEIUChJfc3VwZXJfbGVhZ3VlX3R5cGVC",
            "DgoMX2xvYmJ5X3Njb3JlQg0KC19pc19jYXB0Y2hhQgwKCl9pc19iYW5fcGNC",
            "EAoOX2lzX2NoZWNrX21haWxCIAoeX3NldmVuX2RldWNlX3Jld2FyZF9tdWx0",
            "aXBsaWVyQhYKFF9mb3JiaWRkZW5fY2hhdF9tb2RlQg8KDV9pc192aXBfdGFi",
            "bGVCIAoeX2VudGVyX3Jvb21fY2hpcHNfcHJlcmVxdWlzaXRlQgkKB19wcHNy",
            "aWRCFQoTX3Bwc3JfZXhjaGFuZ2VfcmF0ZUINCgtfaXNfamFja3BvdEITChFf",
            "aXNfY2VydGlmaWNhdGlvbkIPCg1fYm9tYnBvdF90eXBlQhYKFF9jeWNsZV9i",
            "b21icG90X2hhbmRzQhgKFl9jeWNsZV9ib21icG90X3NlY29uZHNCEwoRX2hh",
            "bmRzX3RvX2JvbWJwb3RCFQoTX3NlY29uZHNfdG9fYm9tYnBvdEIQCg5faXNf",
            "aW5fYm9tYnBvdEIRCg9fbWluX2JvbWJfdGltZXNCEQoPX21heF9ib21iX3Rp",
            "bWVzQhsKGV9ib21icG90X2FkZGl0aW9uYWxfYm9hcmRCEwoRX2FkZGl0aW9u",
            "YWxfYm9hcmRCGgoYX2lzX3NlcXVlbnRpYWxfdmlld19jYXJkQhwKGl9pc19i",
            "b21icG90X3dpdGhvdXRfZXZjaG9wIqsYCgtTbmdSb29tSW5mbxITCgZyb29t",
            "aWQYASABKAlIAIgBARIWCglyb29tX25hbWUYAiABKAlIAYgBARIUCgdvd25l",
            "cmlkGAMgASgDSAKIAQESFwoKb3duZXJfbmFtZRgEIAEoCUgDiAEBEhcKCm93",
            "bmVyX2ljb24YBSABKAlIBIgBARIXCgpibGluZF90eXBlGAYgASgFSAWIAQES",
            "EgoKYmxpbmRfbGlzdBgHIAMoAxIRCglhbnRlX2xpc3QYCCADKAMSGQoMdXBi",
            "bGluZF90aW1lGAkgASgFSAaIAQESEgoFYnV5aW4YCiABKANIB4gBARIYCgti",
            "ZWdpbl9jaGlwcxgLIAEoA0gIiAEBEhgKC2FjdGlvbl90aW1lGAwgASgFSAmI",
            "AQESFQoIc2VhdF9udW0YDSABKAVICogBARIhCglyb29tX3R5cGUYDiABKA4y",
            "CS5Sb29tVHlwZUgLiAEBEhcKCmF1dGhfbGltaXQYDyABKAhIDIgBARITCgZy",
            "ZWdpb24YECABKAVIDYgBARITCgZjbHViaWQYESABKAlIDogBARIVCghwbGF0",
            "Zm9ybRgSIAEoCUgPiAEBEhYKCWNsdWJfbmFtZRgTIAEoCUgQiAEBEhIKBWJs",
            "aW5kGBQgASgDSBGIAQESEQoEYW50ZRgVIAEoA0gSiAEBEhMKBmNoYXJnZRgW",
            "IAEoA0gTiAEBEhUKCGxlYWd1ZWlkGBcgASgFSBSIAQESFgoJaXRlbV9uYW1l",
            "GBggASgJSBWIAQESFQoIcHJpb3JpdHkYGSABKAVIFogBARIZCgxjbHViX293",
            "bmVyaWQYGiABKANIF4gBARIWCgljbHViX2ljb24YGyABKAlIGIgBARITCgZ0",
            "ZW1waWQYHCABKAlIGYgBARIVCghvZmZpY2lhbBgdIAEoCEgaiAEBEhkKDGZp",
            "eGVkX3Jld2FyZBgeIAEoCEgbiAEBEiMKC3Jld2FyZF9pbmZvGB8gAygLMg4u",
            "TXR0UmV3YXJkSW5mbxIWCglncHNfbGltaXQYICABKAhIHIgBARIVCghpcF9s",
            "aW1pdBghIAEoCEgdiAEBEh8KEmdwc19kaXN0YW5jZV9saW1pdBgiIAEoBUge",
            "iAEBEiEKCXJvb21fbW9kZRgjIAEoDjIJLlJvb21Nb2RlSB+IAQESHAoPb3du",
            "ZXJfdmlwX2xldmVsGCQgASgNSCCIAQESIQoJaXRlbV9pbmZvGCUgAygLMg4u",
            "SXRlbUNsYXNzSW5mbxIYCgtzaXR0aW5nX291dBgmIAEoCEghiAEBEiUKC3Np",
            "Z251cF90eXBlGCcgASgOMgsuU2lnbnVwVHlwZUgiiAEBEikKCWRlc2NfdHlw",
            "ZRgoIAEoDjIRLk9mZmljaWFsRGVzY1R5cGVII4gBARIoCghsb2NhdGlvbhgp",
            "IAEoDjIRLk9mZmljaWFsTG9jYXRpb25IJIgBARIXCg9wbGF0Zm9ybV9saW1p",
            "dHMYKiADKAkSIQoJZ2FtZV9tb2RlGCsgASgOMgkuR2FtZU1vZGVIJYgBARIY",
            "CgtyZWJhdGVfcmF0ZRgsIAEoBUgmiAEBEhcKCnBvb2xfbGltaXQYLSABKAhI",
            "J4gBARIjCg1vZmZpY2lhbF90YWdzGC4gAygOMgwuT2ZmaWNpYWxUYWcSFQoI",
            "bWF0Y2hfaWQYLyABKANIKIgBARIrCg5vZmZpY2lhbF9wb3B1cBgwIAEoDjIO",
            "Lk9mZmljaWFsUG9wdXBIKYgBARIgChNvZmZpY2lhbF9wb3B1cF90aW1lGDEg",
            "ASgFSCqIAQESHwoSZmlyc3Rfc3BlY2lhbF9zaG93GDIgASgJSCuIAQESGgoN",
            "c3BlY2lhbF9vcmRlchgzIAEoBUgsiAEBEhsKE3NoaWVsZGluZ19wbGF0Zm9y",
            "bXMYNCADKAkSFQoIbW9kdWxlaWQYNSABKANILYgBARIgChNpc19hdXRvX2Ny",
            "ZWF0ZV9yb29tGDYgASgISC6IAQESHQoQb2ZmaWNpYWxfcmRfdHlwZRg3IAEo",
            "BUgviAEBEhsKDmZvcmJpZGRlbl9jaGF0GDggASgISDCIAQESGwoOc3VwZXJf",
            "bGVhZ3VlaWQYOSABKAVIMYgBARIcCg9pc19zdXBlcl9sZWFndWUYOiABKAhI",
            "MogBARIZCgxwYXNzd2RfbGltaXQYOyABKAhIM4gBARITCgZwYXNzd2QYPCAB",
            "KAlINIgBARIdChBtYXhfcmV3YXJkX3JhdGlvGD0gASgFSDWIAQESIwoWcGF1",
            "c2VfYXV0b19jcmVhdGVfdGltZRg+IAEoA0g2iAEBEh4KEXN1cGVyX2xlYWd1",
            "ZV90eXBlGD8gASgFSDeIAQESKAoLcmV3YXJkX21vZGUYQCABKA4yDi5NdHRS",
            "ZXdhcmRNb2RlSDiIAQESGQoMY2hhcmdlX3JhdGlvGEEgASgFSDmIAQESFgoJ",
            "aXNfYmFuX3BjGEIgASgISDqIAQESGgoNaXNfY2hlY2tfbWFpbBhDIAEoCEg7",
            "iAEBEisKHnVwYmxpbmRfdGltZV9hZnRlcl9yZWJ1eV9lbmRlZBhEIAEoBUg8",
            "iAEBEisKHnVwYmxpbmRfdGltZV9hZnRlcl9maW5hbF90YWJsZRhFIAEoBUg9",
            "iAEBEhMKBnBwc3RpZBhGIAEoBUg+iAEBEiAKE3Bwc3Rfcm9vbV9hdXRob3Jp",
            "dHkYRyABKAhIP4gBARIgChNmb3JiaWRkZW5fY2hhdF9tb2RlGEggASgFSECI",
            "AQFCCQoHX3Jvb21pZEIMCgpfcm9vbV9uYW1lQgoKCF9vd25lcmlkQg0KC19v",
            "d25lcl9uYW1lQg0KC19vd25lcl9pY29uQg0KC19ibGluZF90eXBlQg8KDV91",
            "cGJsaW5kX3RpbWVCCAoGX2J1eWluQg4KDF9iZWdpbl9jaGlwc0IOCgxfYWN0",
            "aW9uX3RpbWVCCwoJX3NlYXRfbnVtQgwKCl9yb29tX3R5cGVCDQoLX2F1dGhf",
            "bGltaXRCCQoHX3JlZ2lvbkIJCgdfY2x1YmlkQgsKCV9wbGF0Zm9ybUIMCgpf",
            "Y2x1Yl9uYW1lQggKBl9ibGluZEIHCgVfYW50ZUIJCgdfY2hhcmdlQgsKCV9s",
            "ZWFndWVpZEIMCgpfaXRlbV9uYW1lQgsKCV9wcmlvcml0eUIPCg1fY2x1Yl9v",
            "d25lcmlkQgwKCl9jbHViX2ljb25CCQoHX3RlbXBpZEILCglfb2ZmaWNpYWxC",
            "DwoNX2ZpeGVkX3Jld2FyZEIMCgpfZ3BzX2xpbWl0QgsKCV9pcF9saW1pdEIV",
            "ChNfZ3BzX2Rpc3RhbmNlX2xpbWl0QgwKCl9yb29tX21vZGVCEgoQX293bmVy",
            "X3ZpcF9sZXZlbEIOCgxfc2l0dGluZ19vdXRCDgoMX3NpZ251cF90eXBlQgwK",
            "Cl9kZXNjX3R5cGVCCwoJX2xvY2F0aW9uQgwKCl9nYW1lX21vZGVCDgoMX3Jl",
            "YmF0ZV9yYXRlQg0KC19wb29sX2xpbWl0QgsKCV9tYXRjaF9pZEIRCg9fb2Zm",
            "aWNpYWxfcG9wdXBCFgoUX29mZmljaWFsX3BvcHVwX3RpbWVCFQoTX2ZpcnN0",
            "X3NwZWNpYWxfc2hvd0IQCg5fc3BlY2lhbF9vcmRlckILCglfbW9kdWxlaWRC",
            "FgoUX2lzX2F1dG9fY3JlYXRlX3Jvb21CEwoRX29mZmljaWFsX3JkX3R5cGVC",
            "EQoPX2ZvcmJpZGRlbl9jaGF0QhEKD19zdXBlcl9sZWFndWVpZEISChBfaXNf",
            "c3VwZXJfbGVhZ3VlQg8KDV9wYXNzd2RfbGltaXRCCQoHX3Bhc3N3ZEITChFf",
            "bWF4X3Jld2FyZF9yYXRpb0IZChdfcGF1c2VfYXV0b19jcmVhdGVfdGltZUIU",
            "ChJfc3VwZXJfbGVhZ3VlX3R5cGVCDgoMX3Jld2FyZF9tb2RlQg8KDV9jaGFy",
            "Z2VfcmF0aW9CDAoKX2lzX2Jhbl9wY0IQCg5faXNfY2hlY2tfbWFpbEIhCh9f",
            "dXBibGluZF90aW1lX2FmdGVyX3JlYnV5X2VuZGVkQiEKH191cGJsaW5kX3Rp",
            "bWVfYWZ0ZXJfZmluYWxfdGFibGVCCQoHX3Bwc3RpZEIWChRfcHBzdF9yb29t",
            "X2F1dGhvcml0eUIWChRfZm9yYmlkZGVuX2NoYXRfbW9kZSLOIgoLTXR0Um9v",
            "bUluZm8SGwoObXR0X3N0YXJ0X3RpbWUYASABKANIAIgBARIdChBkZWxheV9q",
            "b2luX2xldmVsGAIgASgFSAGIAQESFgoJcmVidXlfbnVtGAMgASgFSAKIAQES",
            "FwoKYWRkb25fcmF0ZRgEIAEoBUgDiAEBEhcKCmJyZWFrX3RpbWUYBSABKAVI",
            "BIgBARIbCg5taW5fcGxheWVyX251bRgGIAEoBUgFiAEBEhsKDm1heF9wbGF5",
            "ZXJfbnVtGAcgASgFSAaIAQESGQoMZW5zdXJlX2NoaXBzGBggASgDSAeIAQES",
            "GgoNaHVudGVyX3Jld2FyZBgZIAEoA0gIiAEBEhcKCnNjb3JlX3JhdGUYGiAB",
            "KAFICYgBARIcCg9tdHRfc2lnbnVwX3RpbWUYGyABKANICogBARIcCg9zdGFy",
            "dF90aW1lc3RhbXAYCCABKANIC4gBARIZCgx0b3RhbF9yZXdhcmQYCSABKANI",
            "DIgBARIdChB0b3RhbF9wbGF5ZXJfbnVtGAogASgFSA2IAQESHwoSY3VycmVu",
            "dF9wbGF5ZXJfbnVtGAsgASgFSA6IAQESFgoJYXZnX2NoaXBzGAwgASgDSA+I",
            "AQESGgoNY3VycmVudF9sZXZlbBgNIAEoBUgQiAEBEhwKD2FkZG9uX3RpbWVf",
            "bGVmdBgOIAEoBUgRiAEBEhwKD2JyZWFrX3RpbWVfbGVmdBgPIAEoBUgSiAEB",
            "EhwKD3BhdXNlX3RpbWVfbGVmdBgmIAEoBUgTiAEBEhcKCm10dF9zdGF0dXMY",
            "EiABKAVIFIgBARIgChNlbmRfcmVidXlfdGltZXN0YW1wGBMgASgDSBWIAQES",
            "EAoDbm93GBQgASgDSBaIAQESGAoLam9pbl9zdGF0dXMYECABKAVIF4gBARIb",
            "Cg5yZWJ1eV9udW1fbGVmdBgRIAEoBUgYiAEBEhsKDmFkZG9uX251bV9sZWZ0",
            "GBUgASgFSBmIAQESFwoKaXNfcGxheWluZxgWIAEoCEgaiAEBEhAKA3RpZBgX",
            "IAEoBUgbiAEBEiEKCXJvb21fbW9kZRgcIAEoDjIJLlJvb21Nb2RlSByIAQES",
            "FgoJaXNfcGxheWVkGB0gASgISB2IAQESFAoHcmVidXlpbhgeIAEoA0geiAEB",
            "EhgKC2FkZG9uX2J1eWluGB8gASgDSB+IAQESMAoMcGVyY2VudF90eXBlGCAg",
            "ASgOMhUuTXR0UmV3YXJkUGVyY2VudFR5cGVIIIgBARIZCgxyZWJ1eV9jaGFy",
            "Z2UYISABKANIIYgBARIZCgxhZGRvbl9jaGFyZ2UYIiABKANIIogBARIhCgln",
            "YW1lX21vZGUYIyABKA4yCS5HYW1lTW9kZUgjiAEBEhcKCnBvb2xfbGltaXQY",
            "JCABKAhIJIgBARIgCghyb29tdHlwZRglIAEoDjIJLlJvb21UeXBlSCWIAQES",
            "HwoSaXNfc25vd2JhbGxfaHVudGVyGCcgASgISCaIAQESHgoRc2l0dGluZ19v",
            "dXRfbGV2ZWwYKCABKAVIJ4gBARIZCgxpc19zYXRlbGxpdGUYKSABKAhIKIgB",
            "ARIqCgxyZXdhcmRfaXRlbXMYKiADKAsyFC5SZXdhcmRDb25maWd1cmVJdGVt",
            "Eh0KEHJld2FyZF9hbGdvcml0aG0YKyABKAVIKYgBARIZCgx0aWNrZXRfcHJp",
            "Y2UYLCABKANIKogBARIcCg90b3RhbF9hZGRvbl9udW0YLSABKAVIK4gBARIc",
            "Cg90b3RhbF9yZWJ1eV9udW0YLiABKAVILIgBARIVCghtb2R1bGVpZBgvIAEo",
            "A0gtiAEBEhcKCnJlYnV5X3R5cGUYMCABKAVILogBARIXCgphZGRvbl90eXBl",
            "GDEgASgFSC+IAQESHAoPcmVidXlfaXRlbV9uYW1lGDIgASgJSDCIAQESHAoP",
            "YWRkb25faXRlbV9uYW1lGDMgASgJSDGIAQESHwoScmVidXlfdGlja2V0X3By",
            "aWNlGDQgASgDSDKIAQESHwoSYWRkb25fdGlja2V0X3ByaWNlGDUgASgDSDOI",
            "AQESFQoIaXNfYWRkb24YNiABKAhINIgBARIbCg5mb3JiaWRkZW5fY2hhdBg3",
            "IAEoCEg1iAEBEhsKDmVhcmx5X2JpcmRfbnVtGDggASgFSDaIAQESGwoObXR0",
            "X3Njb3JlX3JhdGUYOSABKAVIN4gBARIcCg9icmVha190aW1lX3dhaXQYOiAB",
            "KAVIOIgBARIcCg9icmVha190aW1lX3Jlc3QYOyABKAVIOYgBARIcCg9hZGRv",
            "bl90aW1lX3Jlc3QYPCABKAVIOogBARIZCgxpc19zdXNwZW5kZWQYPSABKAhI",
            "O4gBARIeChFzdXNwZW5kX3RpbWVzdGFtcBg+IAEoA0g8iAEBEhkKDHN1c3Bl",
            "bmRfdGltZRg/IAEoA0g9iAEBEhkKDGlzX2dyb3VwX210dBhAIAEoCEg+iAEB",
            "Eh0KEGdyb3VwX292ZXJfbGV2ZWwYQSABKAVIP4gBARIXCgpncm91cF9mbGFn",
            "GEIgASgJSECIAQESGAoLZ3JvdXBfc3RhZ2UYQyABKAVIQYgBARIWCglncm91",
            "cF9rZXkYRCABKAlIQogBARIaCg1pc19mcmVlemVfb3V0GEUgASgISEOIAQES",
            "HgoRdG90YWxfYnV5aW5fdGltZXMYRiABKAVIRIgBARIbCg5wcm9tb3Rpb25f",
            "ZmxhZxhHIAEoCEhFiAEBEhkKDHJlY292ZXJfdHlwZRhIIAEoBUhGiAEBEh8K",
            "EnJlY292ZXJfc3RhcnRfdGltZRhJIAEoA0hHiAEBEhoKDWlzX210dF9kaXZp",
            "ZGUYSiABKAhISIgBARImCgtyZXdhcmRfaW5mbxhLIAMoCzIRLk10dEljbVJl",
            "d2FyZEluZm8SHAoPaWNtX2RpdmlkZV9ob3N0GEwgASgDSEmIAQESHQoQaXNf",
            "dm90aW5nX2RpdmlkZRhNIAEoCEhKiAEBEh0KEHZvdGVfZGl2aWRlX2xlZnQY",
            "TiABKAVIS4gBARIaCg1pc19jYW5fZGl2aWRlGE8gASgISEyIAQESFwoKcmVi",
            "dXlfcmF0ZRhYIAEoBUhNiAEBEiAKE2Vhcmx5X2JpcmRfZGlzY291bnQYWSAB",
            "KAVITogBARIeChFsZWZ0X2RpdmlkZV90aW1lcxhaIAEoBUhPiAEBEiAKE2Zv",
            "cmJpZGRlbl9jaGF0X21vZGUYWyABKAVIUIgBARIRCgRyYW5rGFwgASgFSFGI",
            "AQESGwoOaXRtX3BsYXllcl9udW0YXSABKAVIUogBARIjChZjdXJyZW50X3Jl",
            "d2FyZF9wcGNvaW5zGF4gASgDSFOIAQESKAobY3VycmVudF9yZXdhcmRfdGlj",
            "a2V0X3ByaWNlGF8gASgDSFSIAQESJgoZY3VycmVudF9yZXdhcmRfaXRlbV9w",
            "cmljZRhgIAEoA0hViAEBEh0KEGFsaXZlX3BsYXllcl9udW0YYSABKANIVogB",
            "ARIcCg9pc19wcGdsX3RyeW91dHMYYiABKAhIV4gBARIaCg1pc19wcGdsX2Zp",
            "bmFsGGMgASgISFiIAQESLgoQcHBnbF9zZWFzb25faW5mbxhkIAEoCzIPLlBQ",
            "R0xTZWFzb25JbmZvSFmIAQESHAoPZWFybHlfYmlyZF91c2VkGGUgASgFSFqI",
            "AQFCEQoPX210dF9zdGFydF90aW1lQhMKEV9kZWxheV9qb2luX2xldmVsQgwK",
            "Cl9yZWJ1eV9udW1CDQoLX2FkZG9uX3JhdGVCDQoLX2JyZWFrX3RpbWVCEQoP",
            "X21pbl9wbGF5ZXJfbnVtQhEKD19tYXhfcGxheWVyX251bUIPCg1fZW5zdXJl",
            "X2NoaXBzQhAKDl9odW50ZXJfcmV3YXJkQg0KC19zY29yZV9yYXRlQhIKEF9t",
            "dHRfc2lnbnVwX3RpbWVCEgoQX3N0YXJ0X3RpbWVzdGFtcEIPCg1fdG90YWxf",
            "cmV3YXJkQhMKEV90b3RhbF9wbGF5ZXJfbnVtQhUKE19jdXJyZW50X3BsYXll",
            "cl9udW1CDAoKX2F2Z19jaGlwc0IQCg5fY3VycmVudF9sZXZlbEISChBfYWRk",
            "b25fdGltZV9sZWZ0QhIKEF9icmVha190aW1lX2xlZnRCEgoQX3BhdXNlX3Rp",
            "bWVfbGVmdEINCgtfbXR0X3N0YXR1c0IWChRfZW5kX3JlYnV5X3RpbWVzdGFt",
            "cEIGCgRfbm93Qg4KDF9qb2luX3N0YXR1c0IRCg9fcmVidXlfbnVtX2xlZnRC",
            "EQoPX2FkZG9uX251bV9sZWZ0Qg0KC19pc19wbGF5aW5nQgYKBF90aWRCDAoK",
            "X3Jvb21fbW9kZUIMCgpfaXNfcGxheWVkQgoKCF9yZWJ1eWluQg4KDF9hZGRv",
            "bl9idXlpbkIPCg1fcGVyY2VudF90eXBlQg8KDV9yZWJ1eV9jaGFyZ2VCDwoN",
            "X2FkZG9uX2NoYXJnZUIMCgpfZ2FtZV9tb2RlQg0KC19wb29sX2xpbWl0QgsK",
            "CV9yb29tdHlwZUIVChNfaXNfc25vd2JhbGxfaHVudGVyQhQKEl9zaXR0aW5n",
            "X291dF9sZXZlbEIPCg1faXNfc2F0ZWxsaXRlQhMKEV9yZXdhcmRfYWxnb3Jp",
            "dGhtQg8KDV90aWNrZXRfcHJpY2VCEgoQX3RvdGFsX2FkZG9uX251bUISChBf",
            "dG90YWxfcmVidXlfbnVtQgsKCV9tb2R1bGVpZEINCgtfcmVidXlfdHlwZUIN",
            "CgtfYWRkb25fdHlwZUISChBfcmVidXlfaXRlbV9uYW1lQhIKEF9hZGRvbl9p",
            "dGVtX25hbWVCFQoTX3JlYnV5X3RpY2tldF9wcmljZUIVChNfYWRkb25fdGlj",
            "a2V0X3ByaWNlQgsKCV9pc19hZGRvbkIRCg9fZm9yYmlkZGVuX2NoYXRCEQoP",
            "X2Vhcmx5X2JpcmRfbnVtQhEKD19tdHRfc2NvcmVfcmF0ZUISChBfYnJlYWtf",
            "dGltZV93YWl0QhIKEF9icmVha190aW1lX3Jlc3RCEgoQX2FkZG9uX3RpbWVf",
            "cmVzdEIPCg1faXNfc3VzcGVuZGVkQhQKEl9zdXNwZW5kX3RpbWVzdGFtcEIP",
            "Cg1fc3VzcGVuZF90aW1lQg8KDV9pc19ncm91cF9tdHRCEwoRX2dyb3VwX292",
            "ZXJfbGV2ZWxCDQoLX2dyb3VwX2ZsYWdCDgoMX2dyb3VwX3N0YWdlQgwKCl9n",
            "cm91cF9rZXlCEAoOX2lzX2ZyZWV6ZV9vdXRCFAoSX3RvdGFsX2J1eWluX3Rp",
            "bWVzQhEKD19wcm9tb3Rpb25fZmxhZ0IPCg1fcmVjb3Zlcl90eXBlQhUKE19y",
            "ZWNvdmVyX3N0YXJ0X3RpbWVCEAoOX2lzX210dF9kaXZpZGVCEgoQX2ljbV9k",
            "aXZpZGVfaG9zdEITChFfaXNfdm90aW5nX2RpdmlkZUITChFfdm90ZV9kaXZp",
            "ZGVfbGVmdEIQCg5faXNfY2FuX2RpdmlkZUINCgtfcmVidXlfcmF0ZUIWChRf",
            "ZWFybHlfYmlyZF9kaXNjb3VudEIUChJfbGVmdF9kaXZpZGVfdGltZXNCFgoU",
            "X2ZvcmJpZGRlbl9jaGF0X21vZGVCBwoFX3JhbmtCEQoPX2l0bV9wbGF5ZXJf",
            "bnVtQhkKF19jdXJyZW50X3Jld2FyZF9wcGNvaW5zQh4KHF9jdXJyZW50X3Jl",
            "d2FyZF90aWNrZXRfcHJpY2VCHAoaX2N1cnJlbnRfcmV3YXJkX2l0ZW1fcHJp",
            "Y2VCEwoRX2FsaXZlX3BsYXllcl9udW1CEgoQX2lzX3BwZ2xfdHJ5b3V0c0IQ",
            "Cg5faXNfcHBnbF9maW5hbEITChFfcHBnbF9zZWFzb25faW5mb0ISChBfZWFy",
            "bHlfYmlyZF91c2VkIkYKDlRhYmxlTm90aWNlTXNnEhEKBGNvZGUYASABKAVI",
            "AIgBARIQCgNtc2cYAiABKAlIAYgBAUIHCgVfY29kZUIGCgRfbXNnIkQKDFRh",
            "YmxlVGlwc01zZxIRCgRjb2RlGAEgASgFSACIAQESEAoDbXNnGAIgASgJSAGI",
            "AQFCBwoFX2NvZGVCBgoEX21zZyL0AgoSWm9vbUZvbGRTZWF0U3RhdHVzEhMK",
            "BnNlYXRpZBgBIAEoBUgAiAEBEh8KBnBsYXllchgCIAEoCzIKLlVzZXJCcmll",
            "ZkgBiAEBEhcKCmhhbmRfY2hpcHMYAyABKANIAogBARIUCgdjb3VudHJ5GAQg",
            "ASgJSAOIAQESFgoJdmlwX2xldmVsGAUgASgNSASIAQESEwoGY2x1YmlkGAYg",
            "ASgJSAWIAQESFgoJY2x1Yl9uYW1lGAcgASgJSAaIAQESEQoEZm9sZBgIIAEo",
            "CEgHiAEBEhIKBWxldmVsGAkgASgFSAiIAQESFQoIZnJhbWVfaWQYCiABKAlI",
            "CYgBAUIJCgdfc2VhdGlkQgkKB19wbGF5ZXJCDQoLX2hhbmRfY2hpcHNCCgoI",
            "X2NvdW50cnlCDAoKX3ZpcF9sZXZlbEIJCgdfY2x1YmlkQgwKCl9jbHViX25h",
            "bWVCBwoFX2ZvbGRCCAoGX2xldmVsQgsKCV9mcmFtZV9pZCLMAQoQUFBjaGlw",
            "c1N0b3JtSW5mbxIVCghzdG9ybV9ubxgBIAEoBUgAiAEBEhcKCmJlZ2luX3Rp",
            "bWUYAiABKANIAYgBARIWCglsZWZ0X3RpbWUYAyABKANIAogBARIVCghlbmRf",
            "dGltZRgEIAEoA0gDiAEBEhUKCG5vd190aW1lGAUgASgDSASIAQFCCwoJX3N0",
            "b3JtX25vQg0KC19iZWdpbl90aW1lQgwKCl9sZWZ0X3RpbWVCCwoJX2VuZF90",
            "aW1lQgsKCV9ub3dfdGltZSKEAQoOU2V2ZW5EZXVjZVVzZXISEwoGc2VhdGlk",
            "GAEgASgFSACIAQESEAoDdWlkGAIgASgJSAGIAQESEgoFY2hpcHMYAyABKANI",
            "AogBARIRCgRuYW1lGAQgASgJSAOIAQFCCQoHX3NlYXRpZEIGCgRfdWlkQggK",
            "Bl9jaGlwc0IHCgVfbmFtZSJhCg5TZXZlbkRldWNlSW5mbxIkCgZ3aW5uZXIY",
            "ASABKAsyDy5TZXZlbkRldWNlVXNlckgAiAEBEh4KBXBheWVyGAIgAygLMg8u",
            "U2V2ZW5EZXVjZVVzZXJCCQoHX3dpbm5lciI6Cg1TZXZlbkRldWNlQlJDEikK",
            "EHNldmVuX2RldWNlX2luZm8YASADKAsyDy5TZXZlbkRldWNlSW5mb0IaWgcv",
            "cGJwcGdvqgIOVGV4YXMuUHJvdG9jb2xQAFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.PreBaseReflection.Descriptor, global::Texas.Protocol.PreBase1Reflection.Descriptor, global::Texas.Protocol.PpglReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RoomInfo), global::Texas.Protocol.RoomInfo.Parser, new[]{ "Roomid", "RoomName", "OwnerName", "Blind", "Ante", "MinBuyin", "ActionTime", "GameTime", "SeatNum", "Ownerid", "RoomType", "Feetype", "Feepoint", "AuthLimit", "Region", "OwnerIcon", "Clubid", "Platform", "DefaultBuyin", "Cap", "PoolLimit", "MaxBuyin", "IsRunMultiTimes", "IsInsurance", "Leagueid", "ClubName", "ClubOwnerid", "ClubIcon", "Tempid", "Official", "GpsLimit", "IpLimit", "GpsDistanceLimit", "Cityid", "RoomMode", "OwnerVipLevel", "AutoStart", "GameMode", "RebateHandsNum", "RebatePoint", "CalltimeMinutes", "RebateFee", "RebateShrinkCoefficient", "GetRebateType", "WithdrawChips", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "VpipLimit", "Moduleid", "ForbiddenChat", "IsEvchop", "VpipLimitPerSet", "MinHandsPerSet", "PasswdLimit", "Passwd", "SuperLeagueid", "SuperLeagueType", "AnteUpVec", "LobbyScore", "IsCaptcha", "IsBanPc", "IsCheckMail", "SevenDeuceRewardMultiplier", "ForbiddenChatMode", "IsVipTable", "EnterRoomChipsPrerequisite", "Ppsrid", "PpsrExchangeRate", "IsJackpot", "IsCertification", "BombpotType", "CycleBombpotHands", "CycleBombpotSeconds", "HandsToBombpot", "SecondsToBombpot", "IsInBombpot", "MinBombTimes", "MaxBombTimes", "BombpotAdditionalBoard", "AdditionalBoard", "IsSequentialViewCard", "IsBombpotWithoutEvchop" }, new[]{ "Roomid", "RoomName", "OwnerName", "Blind", "Ante", "MinBuyin", "ActionTime", "GameTime", "SeatNum", "Ownerid", "RoomType", "Feetype", "Feepoint", "AuthLimit", "Region", "OwnerIcon", "Clubid", "Platform", "DefaultBuyin", "Cap", "PoolLimit", "MaxBuyin", "IsRunMultiTimes", "IsInsurance", "Leagueid", "ClubName", "ClubOwnerid", "ClubIcon", "Tempid", "Official", "GpsLimit", "IpLimit", "GpsDistanceLimit", "Cityid", "RoomMode", "OwnerVipLevel", "AutoStart", "GameMode", "RebateHandsNum", "RebatePoint", "CalltimeMinutes", "RebateFee", "RebateShrinkCoefficient", "GetRebateType", "WithdrawChips", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "VpipLimit", "Moduleid", "ForbiddenChat", "IsEvchop", "VpipLimitPerSet", "MinHandsPerSet", "PasswdLimit", "Passwd", "SuperLeagueid", "SuperLeagueType", "LobbyScore", "IsCaptcha", "IsBanPc", "IsCheckMail", "SevenDeuceRewardMultiplier", "ForbiddenChatMode", "IsVipTable", "EnterRoomChipsPrerequisite", "Ppsrid", "PpsrExchangeRate", "IsJackpot", "IsCertification", "BombpotType", "CycleBombpotHands", "CycleBombpotSeconds", "HandsToBombpot", "SecondsToBombpot", "IsInBombpot", "MinBombTimes", "MaxBombTimes", "BombpotAdditionalBoard", "AdditionalBoard", "IsSequentialViewCard", "IsBombpotWithoutEvchop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SngRoomInfo), global::Texas.Protocol.SngRoomInfo.Parser, new[]{ "Roomid", "RoomName", "Ownerid", "OwnerName", "OwnerIcon", "BlindType", "BlindList", "AnteList", "UpblindTime", "Buyin", "BeginChips", "ActionTime", "SeatNum", "RoomType", "AuthLimit", "Region", "Clubid", "Platform", "ClubName", "Blind", "Ante", "Charge", "Leagueid", "ItemName", "Priority", "ClubOwnerid", "ClubIcon", "Tempid", "Official", "FixedReward", "RewardInfo", "GpsLimit", "IpLimit", "GpsDistanceLimit", "RoomMode", "OwnerVipLevel", "ItemInfo", "SittingOut", "SignupType", "DescType", "Location", "PlatformLimits", "GameMode", "RebateRate", "PoolLimit", "OfficialTags", "MatchId", "OfficialPopup", "OfficialPopupTime", "FirstSpecialShow", "SpecialOrder", "ShieldingPlatforms", "Moduleid", "IsAutoCreateRoom", "OfficialRdType", "ForbiddenChat", "SuperLeagueid", "IsSuperLeague", "PasswdLimit", "Passwd", "MaxRewardRatio", "PauseAutoCreateTime", "SuperLeagueType", "RewardMode", "ChargeRatio", "IsBanPc", "IsCheckMail", "UpblindTimeAfterRebuyEnded", "UpblindTimeAfterFinalTable", "Ppstid", "PpstRoomAuthority", "ForbiddenChatMode" }, new[]{ "Roomid", "RoomName", "Ownerid", "OwnerName", "OwnerIcon", "BlindType", "UpblindTime", "Buyin", "BeginChips", "ActionTime", "SeatNum", "RoomType", "AuthLimit", "Region", "Clubid", "Platform", "ClubName", "Blind", "Ante", "Charge", "Leagueid", "ItemName", "Priority", "ClubOwnerid", "ClubIcon", "Tempid", "Official", "FixedReward", "GpsLimit", "IpLimit", "GpsDistanceLimit", "RoomMode", "OwnerVipLevel", "SittingOut", "SignupType", "DescType", "Location", "GameMode", "RebateRate", "PoolLimit", "MatchId", "OfficialPopup", "OfficialPopupTime", "FirstSpecialShow", "SpecialOrder", "Moduleid", "IsAutoCreateRoom", "OfficialRdType", "ForbiddenChat", "SuperLeagueid", "IsSuperLeague", "PasswdLimit", "Passwd", "MaxRewardRatio", "PauseAutoCreateTime", "SuperLeagueType", "RewardMode", "ChargeRatio", "IsBanPc", "IsCheckMail", "UpblindTimeAfterRebuyEnded", "UpblindTimeAfterFinalTable", "Ppstid", "PpstRoomAuthority", "ForbiddenChatMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MttRoomInfo), global::Texas.Protocol.MttRoomInfo.Parser, new[]{ "MttStartTime", "DelayJoinLevel", "RebuyNum", "AddonRate", "BreakTime", "MinPlayerNum", "MaxPlayerNum", "EnsureChips", "HunterReward", "ScoreRate", "MttSignupTime", "StartTimestamp", "TotalReward", "TotalPlayerNum", "CurrentPlayerNum", "AvgChips", "CurrentLevel", "AddonTimeLeft", "BreakTimeLeft", "PauseTimeLeft", "MttStatus", "EndRebuyTimestamp", "Now", "JoinStatus", "RebuyNumLeft", "AddonNumLeft", "IsPlaying", "Tid", "RoomMode", "IsPlayed", "Rebuyin", "AddonBuyin", "PercentType", "RebuyCharge", "AddonCharge", "GameMode", "PoolLimit", "Roomtype", "IsSnowballHunter", "SittingOutLevel", "IsSatellite", "RewardItems", "RewardAlgorithm", "TicketPrice", "TotalAddonNum", "TotalRebuyNum", "Moduleid", "RebuyType", "AddonType", "RebuyItemName", "AddonItemName", "RebuyTicketPrice", "AddonTicketPrice", "IsAddon", "ForbiddenChat", "EarlyBirdNum", "MttScoreRate", "BreakTimeWait", "BreakTimeRest", "AddonTimeRest", "IsSuspended", "SuspendTimestamp", "SuspendTime", "IsGroupMtt", "GroupOverLevel", "GroupFlag", "GroupStage", "GroupKey", "IsFreezeOut", "TotalBuyinTimes", "PromotionFlag", "RecoverType", "RecoverStartTime", "IsMttDivide", "RewardInfo", "IcmDivideHost", "IsVotingDivide", "VoteDivideLeft", "IsCanDivide", "RebuyRate", "EarlyBirdDiscount", "LeftDivideTimes", "ForbiddenChatMode", "Rank", "ItmPlayerNum", "CurrentRewardPpcoins", "CurrentRewardTicketPrice", "CurrentRewardItemPrice", "AlivePlayerNum", "IsPpglTryouts", "IsPpglFinal", "PpglSeasonInfo", "EarlyBirdUsed" }, new[]{ "MttStartTime", "DelayJoinLevel", "RebuyNum", "AddonRate", "BreakTime", "MinPlayerNum", "MaxPlayerNum", "EnsureChips", "HunterReward", "ScoreRate", "MttSignupTime", "StartTimestamp", "TotalReward", "TotalPlayerNum", "CurrentPlayerNum", "AvgChips", "CurrentLevel", "AddonTimeLeft", "BreakTimeLeft", "PauseTimeLeft", "MttStatus", "EndRebuyTimestamp", "Now", "JoinStatus", "RebuyNumLeft", "AddonNumLeft", "IsPlaying", "Tid", "RoomMode", "IsPlayed", "Rebuyin", "AddonBuyin", "PercentType", "RebuyCharge", "AddonCharge", "GameMode", "PoolLimit", "Roomtype", "IsSnowballHunter", "SittingOutLevel", "IsSatellite", "RewardAlgorithm", "TicketPrice", "TotalAddonNum", "TotalRebuyNum", "Moduleid", "RebuyType", "AddonType", "RebuyItemName", "AddonItemName", "RebuyTicketPrice", "AddonTicketPrice", "IsAddon", "ForbiddenChat", "EarlyBirdNum", "MttScoreRate", "BreakTimeWait", "BreakTimeRest", "AddonTimeRest", "IsSuspended", "SuspendTimestamp", "SuspendTime", "IsGroupMtt", "GroupOverLevel", "GroupFlag", "GroupStage", "GroupKey", "IsFreezeOut", "TotalBuyinTimes", "PromotionFlag", "RecoverType", "RecoverStartTime", "IsMttDivide", "IcmDivideHost", "IsVotingDivide", "VoteDivideLeft", "IsCanDivide", "RebuyRate", "EarlyBirdDiscount", "LeftDivideTimes", "ForbiddenChatMode", "Rank", "ItmPlayerNum", "CurrentRewardPpcoins", "CurrentRewardTicketPrice", "CurrentRewardItemPrice", "AlivePlayerNum", "IsPpglTryouts", "IsPpglFinal", "PpglSeasonInfo", "EarlyBirdUsed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TableNoticeMsg), global::Texas.Protocol.TableNoticeMsg.Parser, new[]{ "Code", "Msg" }, new[]{ "Code", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TableTipsMsg), global::Texas.Protocol.TableTipsMsg.Parser, new[]{ "Code", "Msg" }, new[]{ "Code", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ZoomFoldSeatStatus), global::Texas.Protocol.ZoomFoldSeatStatus.Parser, new[]{ "Seatid", "Player", "HandChips", "Country", "VipLevel", "Clubid", "ClubName", "Fold", "Level", "FrameId" }, new[]{ "Seatid", "Player", "HandChips", "Country", "VipLevel", "Clubid", "ClubName", "Fold", "Level", "FrameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.PPchipsStormInfo), global::Texas.Protocol.PPchipsStormInfo.Parser, new[]{ "StormNo", "BeginTime", "LeftTime", "EndTime", "NowTime" }, new[]{ "StormNo", "BeginTime", "LeftTime", "EndTime", "NowTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SevenDeuceUser), global::Texas.Protocol.SevenDeuceUser.Parser, new[]{ "Seatid", "Uid", "Chips", "Name" }, new[]{ "Seatid", "Uid", "Chips", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SevenDeuceInfo), global::Texas.Protocol.SevenDeuceInfo.Parser, new[]{ "Winner", "Payer" }, new[]{ "Winner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SevenDeuceBRC), global::Texas.Protocol.SevenDeuceBRC.Parser, new[]{ "SevenDeuceInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomInfo(RoomInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      roomid_ = other.roomid_;
      roomName_ = other.roomName_;
      ownerName_ = other.ownerName_;
      blind_ = other.blind_;
      ante_ = other.ante_;
      minBuyin_ = other.minBuyin_;
      actionTime_ = other.actionTime_;
      gameTime_ = other.gameTime_;
      seatNum_ = other.seatNum_;
      ownerid_ = other.ownerid_;
      roomType_ = other.roomType_;
      feetype_ = other.feetype_;
      feepoint_ = other.feepoint_;
      authLimit_ = other.authLimit_;
      region_ = other.region_;
      ownerIcon_ = other.ownerIcon_;
      clubid_ = other.clubid_;
      platform_ = other.platform_;
      defaultBuyin_ = other.defaultBuyin_;
      cap_ = other.cap_;
      poolLimit_ = other.poolLimit_;
      maxBuyin_ = other.maxBuyin_;
      isRunMultiTimes_ = other.isRunMultiTimes_;
      isInsurance_ = other.isInsurance_;
      leagueid_ = other.leagueid_;
      clubName_ = other.clubName_;
      clubOwnerid_ = other.clubOwnerid_;
      clubIcon_ = other.clubIcon_;
      tempid_ = other.tempid_;
      official_ = other.official_;
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      gpsDistanceLimit_ = other.gpsDistanceLimit_;
      cityid_ = other.cityid_;
      roomMode_ = other.roomMode_;
      ownerVipLevel_ = other.ownerVipLevel_;
      autoStart_ = other.autoStart_;
      gameMode_ = other.gameMode_;
      rebateHandsNum_ = other.rebateHandsNum_;
      rebatePoint_ = other.rebatePoint_;
      calltimeMinutes_ = other.calltimeMinutes_;
      rebateFee_ = other.rebateFee_;
      rebateShrinkCoefficient_ = other.rebateShrinkCoefficient_;
      getRebateType_ = other.getRebateType_;
      withdrawChips_ = other.withdrawChips_;
      isAutoDelayRoomOver_ = other.isAutoDelayRoomOver_;
      autoDelayRoomOverTimes_ = other.autoDelayRoomOverTimes_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      vpipLimit_ = other.vpipLimit_;
      moduleid_ = other.moduleid_;
      forbiddenChat_ = other.forbiddenChat_;
      isEvchop_ = other.isEvchop_;
      vpipLimitPerSet_ = other.vpipLimitPerSet_;
      minHandsPerSet_ = other.minHandsPerSet_;
      passwdLimit_ = other.passwdLimit_;
      passwd_ = other.passwd_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      anteUpVec_ = other.anteUpVec_.Clone();
      lobbyScore_ = other.lobbyScore_;
      isCaptcha_ = other.isCaptcha_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      sevenDeuceRewardMultiplier_ = other.sevenDeuceRewardMultiplier_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      isVipTable_ = other.isVipTable_;
      enterRoomChipsPrerequisite_ = other.enterRoomChipsPrerequisite_;
      ppsrid_ = other.ppsrid_;
      ppsrExchangeRate_ = other.ppsrExchangeRate_;
      isJackpot_ = other.isJackpot_;
      isCertification_ = other.isCertification_;
      bombpotType_ = other.bombpotType_;
      cycleBombpotHands_ = other.cycleBombpotHands_;
      cycleBombpotSeconds_ = other.cycleBombpotSeconds_;
      handsToBombpot_ = other.handsToBombpot_;
      secondsToBombpot_ = other.secondsToBombpot_;
      isInBombpot_ = other.isInBombpot_;
      minBombTimes_ = other.minBombTimes_;
      maxBombTimes_ = other.maxBombTimes_;
      bombpotAdditionalBoard_ = other.bombpotAdditionalBoard_;
      additionalBoard_ = other.additionalBoard_;
      isSequentialViewCard_ = other.isSequentialViewCard_;
      isBombpotWithoutEvchop_ = other.isBombpotWithoutEvchop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    /// <summary>
    ///邀请码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 3;
    private readonly static string OwnerNameDefaultValue = "";

    private string ownerName_;
    /// <summary>
    ///房主名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerName {
      get { return ownerName_ ?? OwnerNameDefaultValue; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerName {
      get { return ownerName_ != null; }
    }
    /// <summary>Clears the value of the "owner_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerName() {
      ownerName_ = null;
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 4;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    /// <summary>
    ///小盲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 1) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 5;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    /// <summary>
    ///前注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 2) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "min_buyin" field.</summary>
    public const int MinBuyinFieldNumber = 6;
    private readonly static long MinBuyinDefaultValue = 0L;

    private long minBuyin_;
    /// <summary>
    ///最小买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBuyin {
      get { if ((_hasBits0 & 4) != 0) { return minBuyin_; } else { return MinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBuyin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBuyin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 7;
    private readonly static int ActionTimeDefaultValue = 0;

    private int actionTime_;
    /// <summary>
    ///下注时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionTime {
      get { if ((_hasBits0 & 8) != 0) { return actionTime_; } else { return ActionTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        actionTime_ = value;
      }
    }
    /// <summary>Gets whether the "action_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "action_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 8;
    private readonly static int GameTimeDefaultValue = 0;

    private int gameTime_;
    /// <summary>
    ///游戏时间,0表示无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameTime {
      get { if ((_hasBits0 & 16) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 9;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    /// <summary>
    ///房间座位数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 32) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 32;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ownerid" field.</summary>
    public const int OwneridFieldNumber = 10;
    private readonly static long OwneridDefaultValue = 0L;

    private long ownerid_;
    /// <summary>
    ///房主id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ownerid {
      get { if ((_hasBits0 & 64) != 0) { return ownerid_; } else { return OwneridDefaultValue; } }
      set {
        _hasBits0 |= 64;
        ownerid_ = value;
      }
    }
    /// <summary>Gets whether the "ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerid {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerid() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 11;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    /// <summary>
    ///默认俱乐部房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 128) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "feetype" field.</summary>
    public const int FeetypeFieldNumber = 12;
    private readonly static int FeetypeDefaultValue = 0;

    private int feetype_;
    /// <summary>
    ///fee类型， 1 买入收取服务费  2 每局fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feetype {
      get { if ((_hasBits0 & 256) != 0) { return feetype_; } else { return FeetypeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        feetype_ = value;
      }
    }
    /// <summary>Gets whether the "feetype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeetype {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "feetype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeetype() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 13;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    /// <summary>
    ///fee比例，3代表%3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 512) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 512;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "auth_limit" field.</summary>
    public const int AuthLimitFieldNumber = 14;
    private readonly static bool AuthLimitDefaultValue = false;

    private bool authLimit_;
    /// <summary>
    ///是否授权买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AuthLimit {
      get { if ((_hasBits0 & 1024) != 0) { return authLimit_; } else { return AuthLimitDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        authLimit_ = value;
      }
    }
    /// <summary>Gets whether the "auth_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuthLimit {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "auth_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuthLimit() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 15;
    private readonly static int RegionDefaultValue = 0;

    private int region_;
    /// <summary>
    ///房间所属的区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Region {
      get { if ((_hasBits0 & 2048) != 0) { return region_; } else { return RegionDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        region_ = value;
      }
    }
    /// <summary>Gets whether the "region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegion {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegion() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "owner_icon" field.</summary>
    public const int OwnerIconFieldNumber = 16;
    private readonly static string OwnerIconDefaultValue = "";

    private string ownerIcon_;
    /// <summary>
    ///房主头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerIcon {
      get { return ownerIcon_ ?? OwnerIconDefaultValue; }
      set {
        ownerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerIcon {
      get { return ownerIcon_ != null; }
    }
    /// <summary>Clears the value of the "owner_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerIcon() {
      ownerIcon_ = null;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 17;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///俱乐部id，0代表普通房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 18;
    private readonly static string PlatformDefaultValue = "";

    private string platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Platform {
      get { return platform_ ?? PlatformDefaultValue; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlatform {
      get { return platform_ != null; }
    }
    /// <summary>Clears the value of the "platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlatform() {
      platform_ = null;
    }

    /// <summary>Field number for the "default_buyin" field.</summary>
    public const int DefaultBuyinFieldNumber = 19;
    private readonly static long DefaultBuyinDefaultValue = 0L;

    private long defaultBuyin_;
    /// <summary>
    ///默认买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DefaultBuyin {
      get { if ((_hasBits0 & 4096) != 0) { return defaultBuyin_; } else { return DefaultBuyinDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        defaultBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "default_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefaultBuyin {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "default_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefaultBuyin() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 20;
    private readonly static int CapDefaultValue = 0;

    private int cap_;
    /// <summary>
    ///fee封頂
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cap {
      get { if ((_hasBits0 & 8192) != 0) { return cap_; } else { return CapDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        cap_ = value;
      }
    }
    /// <summary>Gets whether the "cap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCap {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "cap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCap() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "pool_limit" field.</summary>
    public const int PoolLimitFieldNumber = 21;
    private readonly static bool PoolLimitDefaultValue = false;

    private bool poolLimit_;
    /// <summary>
    ///底池限注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PoolLimit {
      get { if ((_hasBits0 & 16384) != 0) { return poolLimit_; } else { return PoolLimitDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        poolLimit_ = value;
      }
    }
    /// <summary>Gets whether the "pool_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPoolLimit {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "pool_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPoolLimit() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "max_buyin" field.</summary>
    public const int MaxBuyinFieldNumber = 22;
    private readonly static long MaxBuyinDefaultValue = 0L;

    private long maxBuyin_;
    /// <summary>
    ///最大买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxBuyin {
      get { if ((_hasBits0 & 32768) != 0) { return maxBuyin_; } else { return MaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        maxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBuyin {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBuyin() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "is_run_multi_times" field.</summary>
    public const int IsRunMultiTimesFieldNumber = 23;
    private readonly static bool IsRunMultiTimesDefaultValue = false;

    private bool isRunMultiTimes_;
    /// <summary>
    ///是否发多次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRunMultiTimes {
      get { if ((_hasBits0 & 65536) != 0) { return isRunMultiTimes_; } else { return IsRunMultiTimesDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        isRunMultiTimes_ = value;
      }
    }
    /// <summary>Gets whether the "is_run_multi_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRunMultiTimes {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "is_run_multi_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRunMultiTimes() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "is_insurance" field.</summary>
    public const int IsInsuranceFieldNumber = 24;
    private readonly static bool IsInsuranceDefaultValue = false;

    private bool isInsurance_;
    /// <summary>
    ///是否发保险
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInsurance {
      get { if ((_hasBits0 & 131072) != 0) { return isInsurance_; } else { return IsInsuranceDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        isInsurance_ = value;
      }
    }
    /// <summary>Gets whether the "is_insurance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInsurance {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "is_insurance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInsurance() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 25;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 262144) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 26;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "club_ownerid" field.</summary>
    public const int ClubOwneridFieldNumber = 27;
    private readonly static long ClubOwneridDefaultValue = 0L;

    private long clubOwnerid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClubOwnerid {
      get { if ((_hasBits0 & 524288) != 0) { return clubOwnerid_; } else { return ClubOwneridDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        clubOwnerid_ = value;
      }
    }
    /// <summary>Gets whether the "club_ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubOwnerid {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "club_ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubOwnerid() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "club_icon" field.</summary>
    public const int ClubIconFieldNumber = 28;
    private readonly static string ClubIconDefaultValue = "";

    private string clubIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubIcon {
      get { return clubIcon_ ?? ClubIconDefaultValue; }
      set {
        clubIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubIcon {
      get { return clubIcon_ != null; }
    }
    /// <summary>Clears the value of the "club_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubIcon() {
      clubIcon_ = null;
    }

    /// <summary>Field number for the "tempid" field.</summary>
    public const int TempidFieldNumber = 29;
    private readonly static string TempidDefaultValue = "";

    private string tempid_;
    /// <summary>
    ///房间模板
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tempid {
      get { return tempid_ ?? TempidDefaultValue; }
      set {
        tempid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tempid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTempid {
      get { return tempid_ != null; }
    }
    /// <summary>Clears the value of the "tempid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTempid() {
      tempid_ = null;
    }

    /// <summary>Field number for the "official" field.</summary>
    public const int OfficialFieldNumber = 30;
    private readonly static bool OfficialDefaultValue = false;

    private bool official_;
    /// <summary>
    ///是否官方赛事
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Official {
      get { if ((_hasBits0 & 1048576) != 0) { return official_; } else { return OfficialDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        official_ = value;
      }
    }
    /// <summary>Gets whether the "official" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficial {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "official" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficial() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 31;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 2097152) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 32;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 4194304) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "gps_distance_limit" field.</summary>
    public const int GpsDistanceLimitFieldNumber = 33;
    private readonly static int GpsDistanceLimitDefaultValue = 0;

    private int gpsDistanceLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsDistanceLimit {
      get { if ((_hasBits0 & 8388608) != 0) { return gpsDistanceLimit_; } else { return GpsDistanceLimitDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        gpsDistanceLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_distance_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsDistanceLimit {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "gps_distance_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsDistanceLimit() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "cityid" field.</summary>
    public const int CityidFieldNumber = 34;
    private readonly static int CityidDefaultValue = 0;

    private int cityid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cityid {
      get { if ((_hasBits0 & 16777216) != 0) { return cityid_; } else { return CityidDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        cityid_ = value;
      }
    }
    /// <summary>Gets whether the "cityid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCityid {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "cityid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCityid() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "room_mode" field.</summary>
    public const int RoomModeFieldNumber = 35;
    private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

    private global::Texas.Protocol.RoomMode roomMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomMode RoomMode {
      get { if ((_hasBits0 & 33554432) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        roomMode_ = value;
      }
    }
    /// <summary>Gets whether the "room_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomMode {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "room_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomMode() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "owner_vip_level" field.</summary>
    public const int OwnerVipLevelFieldNumber = 36;
    private readonly static uint OwnerVipLevelDefaultValue = 0;

    private uint ownerVipLevel_;
    /// <summary>
    /// 房主vip信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OwnerVipLevel {
      get { if ((_hasBits0 & 67108864) != 0) { return ownerVipLevel_; } else { return OwnerVipLevelDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        ownerVipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "owner_vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerVipLevel {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "owner_vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerVipLevel() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "auto_start" field.</summary>
    public const int AutoStartFieldNumber = 37;
    private readonly static int AutoStartDefaultValue = 0;

    private int autoStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoStart {
      get { if ((_hasBits0 & 134217728) != 0) { return autoStart_; } else { return AutoStartDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        autoStart_ = value;
      }
    }
    /// <summary>Gets whether the "auto_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoStart {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "auto_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoStart() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 38;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 268435456) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "rebate_hands_num" field.</summary>
    public const int RebateHandsNumFieldNumber = 39;
    private readonly static int RebateHandsNumDefaultValue = 0;

    private int rebateHandsNum_;
    /// <summary>
    /// 返利积分所需手牌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebateHandsNum {
      get { if ((_hasBits0 & 536870912) != 0) { return rebateHandsNum_; } else { return RebateHandsNumDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        rebateHandsNum_ = value;
      }
    }
    /// <summary>Gets whether the "rebate_hands_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebateHandsNum {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "rebate_hands_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebateHandsNum() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "rebate_point" field.</summary>
    public const int RebatePointFieldNumber = 40;
    private readonly static int RebatePointDefaultValue = 0;

    private int rebatePoint_;
    /// <summary>
    /// 返利积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebatePoint {
      get { if ((_hasBits0 & 1073741824) != 0) { return rebatePoint_; } else { return RebatePointDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        rebatePoint_ = value;
      }
    }
    /// <summary>Gets whether the "rebate_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebatePoint {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "rebate_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebatePoint() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "calltime_minutes" field.</summary>
    public const int CalltimeMinutesFieldNumber = 41;
    private readonly static int CalltimeMinutesDefaultValue = 0;

    private int calltimeMinutes_;
    /// <summary>
    /// CALLTIME房间CT时长(分钟)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalltimeMinutes {
      get { if ((_hasBits0 & -2147483648) != 0) { return calltimeMinutes_; } else { return CalltimeMinutesDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        calltimeMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "calltime_minutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCalltimeMinutes {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "calltime_minutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCalltimeMinutes() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "rebate_fee" field.</summary>
    public const int RebateFeeFieldNumber = 42;
    private readonly static long RebateFeeDefaultValue = 0L;

    private long rebateFee_;
    /// <summary>
    ///积分fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RebateFee {
      get { if ((_hasBits1 & 1) != 0) { return rebateFee_; } else { return RebateFeeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        rebateFee_ = value;
      }
    }
    /// <summary>Gets whether the "rebate_fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebateFee {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rebate_fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebateFee() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "rebate_shrink_coefficient" field.</summary>
    public const int RebateShrinkCoefficientFieldNumber = 43;
    private readonly static int RebateShrinkCoefficientDefaultValue = 0;

    private int rebateShrinkCoefficient_;
    /// <summary>
    ///积分缩小系数（要除以100）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebateShrinkCoefficient {
      get { if ((_hasBits1 & 2) != 0) { return rebateShrinkCoefficient_; } else { return RebateShrinkCoefficientDefaultValue; } }
      set {
        _hasBits1 |= 2;
        rebateShrinkCoefficient_ = value;
      }
    }
    /// <summary>Gets whether the "rebate_shrink_coefficient" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebateShrinkCoefficient {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rebate_shrink_coefficient" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebateShrinkCoefficient() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "get_rebate_type" field.</summary>
    public const int GetRebateTypeFieldNumber = 44;
    private readonly static int GetRebateTypeDefaultValue = 0;

    private int getRebateType_;
    /// <summary>
    ///产生积分的类型(1：拿到手牌时按照固定值走积分进度，2：每手牌结算时根据fee底池返回积分)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GetRebateType {
      get { if ((_hasBits1 & 4) != 0) { return getRebateType_; } else { return GetRebateTypeDefaultValue; } }
      set {
        _hasBits1 |= 4;
        getRebateType_ = value;
      }
    }
    /// <summary>Gets whether the "get_rebate_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGetRebateType {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "get_rebate_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGetRebateType() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "withdraw_chips" field.</summary>
    public const int WithdrawChipsFieldNumber = 45;
    private readonly static bool WithdrawChipsDefaultValue = false;

    private bool withdrawChips_;
    /// <summary>
    /// 是否开启撤回筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WithdrawChips {
      get { if ((_hasBits1 & 8) != 0) { return withdrawChips_; } else { return WithdrawChipsDefaultValue; } }
      set {
        _hasBits1 |= 8;
        withdrawChips_ = value;
      }
    }
    /// <summary>Gets whether the "withdraw_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWithdrawChips {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "withdraw_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWithdrawChips() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "is_auto_delay_room_over" field.</summary>
    public const int IsAutoDelayRoomOverFieldNumber = 46;
    private readonly static bool IsAutoDelayRoomOverDefaultValue = false;

    private bool isAutoDelayRoomOver_;
    /// <summary>
    ///是否自动延时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoDelayRoomOver {
      get { if ((_hasBits1 & 16) != 0) { return isAutoDelayRoomOver_; } else { return IsAutoDelayRoomOverDefaultValue; } }
      set {
        _hasBits1 |= 16;
        isAutoDelayRoomOver_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_delay_room_over" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoDelayRoomOver {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_delay_room_over" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoDelayRoomOver() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "auto_delay_room_over_times" field.</summary>
    public const int AutoDelayRoomOverTimesFieldNumber = 47;
    private readonly static int AutoDelayRoomOverTimesDefaultValue = 0;

    private int autoDelayRoomOverTimes_;
    /// <summary>
    ///自动延时次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoDelayRoomOverTimes {
      get { if ((_hasBits1 & 32) != 0) { return autoDelayRoomOverTimes_; } else { return AutoDelayRoomOverTimesDefaultValue; } }
      set {
        _hasBits1 |= 32;
        autoDelayRoomOverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "auto_delay_room_over_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoDelayRoomOverTimes {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "auto_delay_room_over_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoDelayRoomOverTimes() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 48;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    /// <summary>
    ///是否自动开桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits1 & 64) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits1 |= 64;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "vpip_limit" field.</summary>
    public const int VpipLimitFieldNumber = 49;
    private readonly static int VpipLimitDefaultValue = 0;

    private int vpipLimit_;
    /// <summary>
    ///vpip入池率限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VpipLimit {
      get { if ((_hasBits1 & 128) != 0) { return vpipLimit_; } else { return VpipLimitDefaultValue; } }
      set {
        _hasBits1 |= 128;
        vpipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "vpip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpipLimit {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "vpip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpipLimit() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 50;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    /// when module create room use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits1 & 256) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits1 |= 256;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 51;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits1 & 512) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits1 |= 512;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "is_evchop" field.</summary>
    public const int IsEvchopFieldNumber = 52;
    private readonly static bool IsEvchopDefaultValue = false;

    private bool isEvchop_;
    /// <summary>
    ///是否提前兑现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEvchop {
      get { if ((_hasBits1 & 1024) != 0) { return isEvchop_; } else { return IsEvchopDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        isEvchop_ = value;
      }
    }
    /// <summary>Gets whether the "is_evchop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEvchop {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_evchop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEvchop() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "vpip_limit_per_set" field.</summary>
    public const int VpipLimitPerSetFieldNumber = 53;
    private readonly static int VpipLimitPerSetDefaultValue = 0;

    private int vpipLimitPerSet_;
    /// <summary>
    ///本局vpip 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VpipLimitPerSet {
      get { if ((_hasBits1 & 2048) != 0) { return vpipLimitPerSet_; } else { return VpipLimitPerSetDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        vpipLimitPerSet_ = value;
      }
    }
    /// <summary>Gets whether the "vpip_limit_per_set" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpipLimitPerSet {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "vpip_limit_per_set" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpipLimitPerSet() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "min_hands_per_set" field.</summary>
    public const int MinHandsPerSetFieldNumber = 54;
    private readonly static int MinHandsPerSetDefaultValue = 0;

    private int minHandsPerSet_;
    /// <summary>
    ///本局vpip检测的最低手数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinHandsPerSet {
      get { if ((_hasBits1 & 4096) != 0) { return minHandsPerSet_; } else { return MinHandsPerSetDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        minHandsPerSet_ = value;
      }
    }
    /// <summary>Gets whether the "min_hands_per_set" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinHandsPerSet {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "min_hands_per_set" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinHandsPerSet() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 55;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    /// 是否密码桌, 与授权买入互斥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits1 & 8192) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 56;
    private readonly static string PasswdDefaultValue = "";

    private string passwd_;
    /// <summary>
    /// private room password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Passwd {
      get { return passwd_ ?? PasswdDefaultValue; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "passwd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswd {
      get { return passwd_ != null; }
    }
    /// <summary>Clears the value of the "passwd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswd() {
      passwd_ = null;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 57;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits1 & 16384) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 58;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    /// 1 not ppst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits1 & 32768) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "ante_up_vec" field.</summary>
    public const int AnteUpVecFieldNumber = 59;
    private static readonly pb::FieldCodec<long> _repeated_anteUpVec_codec
        = pb::FieldCodec.ForInt64(474);
    private readonly pbc::RepeatedField<long> anteUpVec_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///ante 递增组, ante字段表示当前的前注是多少
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> AnteUpVec {
      get { return anteUpVec_; }
    }

    /// <summary>Field number for the "lobby_score" field.</summary>
    public const int LobbyScoreFieldNumber = 60;
    private readonly static int LobbyScoreDefaultValue = 0;

    private int lobbyScore_;
    /// <summary>
    /// 大厅高币值活动积分配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LobbyScore {
      get { if ((_hasBits1 & 65536) != 0) { return lobbyScore_; } else { return LobbyScoreDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        lobbyScore_ = value;
      }
    }
    /// <summary>Gets whether the "lobby_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLobbyScore {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "lobby_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLobbyScore() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "is_captcha" field.</summary>
    public const int IsCaptchaFieldNumber = 61;
    private readonly static bool IsCaptchaDefaultValue = false;

    private bool isCaptcha_;
    /// <summary>
    ///是否人机校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCaptcha {
      get { if ((_hasBits1 & 131072) != 0) { return isCaptcha_; } else { return IsCaptchaDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        isCaptcha_ = value;
      }
    }
    /// <summary>Gets whether the "is_captcha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCaptcha {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "is_captcha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCaptcha() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 62;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits1 & 262144) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 63;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits1 & 524288) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "seven_deuce_reward_multiplier" field.</summary>
    public const int SevenDeuceRewardMultiplierFieldNumber = 64;
    private readonly static int SevenDeuceRewardMultiplierDefaultValue = 0;

    private int sevenDeuceRewardMultiplier_;
    /// <summary>
    ///72o獎勵抽取大盲倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SevenDeuceRewardMultiplier {
      get { if ((_hasBits1 & 1048576) != 0) { return sevenDeuceRewardMultiplier_; } else { return SevenDeuceRewardMultiplierDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        sevenDeuceRewardMultiplier_ = value;
      }
    }
    /// <summary>Gets whether the "seven_deuce_reward_multiplier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSevenDeuceRewardMultiplier {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "seven_deuce_reward_multiplier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSevenDeuceRewardMultiplier() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 65;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits1 & 2097152) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "is_vip_table" field.</summary>
    public const int IsVipTableFieldNumber = 66;
    private readonly static bool IsVipTableDefaultValue = false;

    private bool isVipTable_;
    /// <summary>
    ///是否為貴賓桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVipTable {
      get { if ((_hasBits1 & 4194304) != 0) { return isVipTable_; } else { return IsVipTableDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        isVipTable_ = value;
      }
    }
    /// <summary>Gets whether the "is_vip_table" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVipTable {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "is_vip_table" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVipTable() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "enter_room_chips_prerequisite" field.</summary>
    public const int EnterRoomChipsPrerequisiteFieldNumber = 67;
    private readonly static long EnterRoomChipsPrerequisiteDefaultValue = 0L;

    private long enterRoomChipsPrerequisite_;
    /// <summary>
    ///進房的最低PP幣量要求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EnterRoomChipsPrerequisite {
      get { if ((_hasBits1 & 8388608) != 0) { return enterRoomChipsPrerequisite_; } else { return EnterRoomChipsPrerequisiteDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        enterRoomChipsPrerequisite_ = value;
      }
    }
    /// <summary>Gets whether the "enter_room_chips_prerequisite" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnterRoomChipsPrerequisite {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "enter_room_chips_prerequisite" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnterRoomChipsPrerequisite() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 68;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits1 & 16777216) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "ppsr_exchange_rate" field.</summary>
    public const int PpsrExchangeRateFieldNumber = 69;
    private readonly static int PpsrExchangeRateDefaultValue = 0;

    private int ppsrExchangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PpsrExchangeRate {
      get { if ((_hasBits1 & 33554432) != 0) { return ppsrExchangeRate_; } else { return PpsrExchangeRateDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        ppsrExchangeRate_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_exchange_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrExchangeRate {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_exchange_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrExchangeRate() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "is_jackpot" field.</summary>
    public const int IsJackpotFieldNumber = 70;
    private readonly static bool IsJackpotDefaultValue = false;

    private bool isJackpot_;
    /// <summary>
    ///是否為JP桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsJackpot {
      get { if ((_hasBits1 & 67108864) != 0) { return isJackpot_; } else { return IsJackpotDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        isJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsJackpot {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "is_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsJackpot() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "is_certification" field.</summary>
    public const int IsCertificationFieldNumber = 71;
    private readonly static bool IsCertificationDefaultValue = false;

    private bool isCertification_;
    /// <summary>
    ///是否僅限制認證會員
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCertification {
      get { if ((_hasBits1 & 134217728) != 0) { return isCertification_; } else { return IsCertificationDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        isCertification_ = value;
      }
    }
    /// <summary>Gets whether the "is_certification" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCertification {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "is_certification" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCertification() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "bombpot_type" field.</summary>
    public const int BombpotTypeFieldNumber = 72;
    private readonly static int BombpotTypeDefaultValue = 0;

    private int bombpotType_;
    /// <summary>
    /// 0 no bombpot, 1 hands cycle bombpot, 2 minutes cycle bombpot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BombpotType {
      get { if ((_hasBits1 & 268435456) != 0) { return bombpotType_; } else { return BombpotTypeDefaultValue; } }
      set {
        _hasBits1 |= 268435456;
        bombpotType_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotType {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotType() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "cycle_bombpot_hands" field.</summary>
    public const int CycleBombpotHandsFieldNumber = 73;
    private readonly static int CycleBombpotHandsDefaultValue = 0;

    private int cycleBombpotHands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CycleBombpotHands {
      get { if ((_hasBits1 & 536870912) != 0) { return cycleBombpotHands_; } else { return CycleBombpotHandsDefaultValue; } }
      set {
        _hasBits1 |= 536870912;
        cycleBombpotHands_ = value;
      }
    }
    /// <summary>Gets whether the "cycle_bombpot_hands" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCycleBombpotHands {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "cycle_bombpot_hands" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCycleBombpotHands() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "cycle_bombpot_seconds" field.</summary>
    public const int CycleBombpotSecondsFieldNumber = 74;
    private readonly static int CycleBombpotSecondsDefaultValue = 0;

    private int cycleBombpotSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CycleBombpotSeconds {
      get { if ((_hasBits1 & 1073741824) != 0) { return cycleBombpotSeconds_; } else { return CycleBombpotSecondsDefaultValue; } }
      set {
        _hasBits1 |= 1073741824;
        cycleBombpotSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "cycle_bombpot_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCycleBombpotSeconds {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "cycle_bombpot_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCycleBombpotSeconds() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "hands_to_bombpot" field.</summary>
    public const int HandsToBombpotFieldNumber = 75;
    private readonly static int HandsToBombpotDefaultValue = 0;

    private int handsToBombpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HandsToBombpot {
      get { if ((_hasBits1 & -2147483648) != 0) { return handsToBombpot_; } else { return HandsToBombpotDefaultValue; } }
      set {
        _hasBits1 |= -2147483648;
        handsToBombpot_ = value;
      }
    }
    /// <summary>Gets whether the "hands_to_bombpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsToBombpot {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "hands_to_bombpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsToBombpot() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "seconds_to_bombpot" field.</summary>
    public const int SecondsToBombpotFieldNumber = 76;
    private readonly static int SecondsToBombpotDefaultValue = 0;

    private int secondsToBombpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SecondsToBombpot {
      get { if ((_hasBits2 & 1) != 0) { return secondsToBombpot_; } else { return SecondsToBombpotDefaultValue; } }
      set {
        _hasBits2 |= 1;
        secondsToBombpot_ = value;
      }
    }
    /// <summary>Gets whether the "seconds_to_bombpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecondsToBombpot {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seconds_to_bombpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecondsToBombpot() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "is_in_bombpot" field.</summary>
    public const int IsInBombpotFieldNumber = 77;
    private readonly static bool IsInBombpotDefaultValue = false;

    private bool isInBombpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInBombpot {
      get { if ((_hasBits2 & 2) != 0) { return isInBombpot_; } else { return IsInBombpotDefaultValue; } }
      set {
        _hasBits2 |= 2;
        isInBombpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_in_bombpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInBombpot {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_in_bombpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInBombpot() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "min_bomb_times" field.</summary>
    public const int MinBombTimesFieldNumber = 78;
    private readonly static int MinBombTimesDefaultValue = 0;

    private int minBombTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBombTimes {
      get { if ((_hasBits2 & 4) != 0) { return minBombTimes_; } else { return MinBombTimesDefaultValue; } }
      set {
        _hasBits2 |= 4;
        minBombTimes_ = value;
      }
    }
    /// <summary>Gets whether the "min_bomb_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBombTimes {
      get { return (_hasBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_bomb_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBombTimes() {
      _hasBits2 &= ~4;
    }

    /// <summary>Field number for the "max_bomb_times" field.</summary>
    public const int MaxBombTimesFieldNumber = 79;
    private readonly static int MaxBombTimesDefaultValue = 0;

    private int maxBombTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxBombTimes {
      get { if ((_hasBits2 & 8) != 0) { return maxBombTimes_; } else { return MaxBombTimesDefaultValue; } }
      set {
        _hasBits2 |= 8;
        maxBombTimes_ = value;
      }
    }
    /// <summary>Gets whether the "max_bomb_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBombTimes {
      get { return (_hasBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_bomb_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBombTimes() {
      _hasBits2 &= ~8;
    }

    /// <summary>Field number for the "bombpot_additional_board" field.</summary>
    public const int BombpotAdditionalBoardFieldNumber = 80;
    private readonly static int BombpotAdditionalBoardDefaultValue = 0;

    private int bombpotAdditionalBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BombpotAdditionalBoard {
      get { if ((_hasBits2 & 16) != 0) { return bombpotAdditionalBoard_; } else { return BombpotAdditionalBoardDefaultValue; } }
      set {
        _hasBits2 |= 16;
        bombpotAdditionalBoard_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_additional_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotAdditionalBoard {
      get { return (_hasBits2 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_additional_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotAdditionalBoard() {
      _hasBits2 &= ~16;
    }

    /// <summary>Field number for the "additional_board" field.</summary>
    public const int AdditionalBoardFieldNumber = 81;
    private readonly static int AdditionalBoardDefaultValue = 0;

    private int additionalBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdditionalBoard {
      get { if ((_hasBits2 & 32) != 0) { return additionalBoard_; } else { return AdditionalBoardDefaultValue; } }
      set {
        _hasBits2 |= 32;
        additionalBoard_ = value;
      }
    }
    /// <summary>Gets whether the "additional_board" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdditionalBoard {
      get { return (_hasBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "additional_board" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdditionalBoard() {
      _hasBits2 &= ~32;
    }

    /// <summary>Field number for the "is_sequential_view_card" field.</summary>
    public const int IsSequentialViewCardFieldNumber = 82;
    private readonly static bool IsSequentialViewCardDefaultValue = false;

    private bool isSequentialViewCard_;
    /// <summary>
    /// 是否開啟順序看牌功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSequentialViewCard {
      get { if ((_hasBits2 & 64) != 0) { return isSequentialViewCard_; } else { return IsSequentialViewCardDefaultValue; } }
      set {
        _hasBits2 |= 64;
        isSequentialViewCard_ = value;
      }
    }
    /// <summary>Gets whether the "is_sequential_view_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSequentialViewCard {
      get { return (_hasBits2 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_sequential_view_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSequentialViewCard() {
      _hasBits2 &= ~64;
    }

    /// <summary>Field number for the "is_bombpot_without_evchop" field.</summary>
    public const int IsBombpotWithoutEvchopFieldNumber = 83;
    private readonly static bool IsBombpotWithoutEvchopDefaultValue = false;

    private bool isBombpotWithoutEvchop_;
    /// <summary>
    /// bombpot時不能使用evchop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBombpotWithoutEvchop {
      get { if ((_hasBits2 & 128) != 0) { return isBombpotWithoutEvchop_; } else { return IsBombpotWithoutEvchopDefaultValue; } }
      set {
        _hasBits2 |= 128;
        isBombpotWithoutEvchop_ = value;
      }
    }
    /// <summary>Gets whether the "is_bombpot_without_evchop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBombpotWithoutEvchop {
      get { return (_hasBits2 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_bombpot_without_evchop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBombpotWithoutEvchop() {
      _hasBits2 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (RoomName != other.RoomName) return false;
      if (OwnerName != other.OwnerName) return false;
      if (Blind != other.Blind) return false;
      if (Ante != other.Ante) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (ActionTime != other.ActionTime) return false;
      if (GameTime != other.GameTime) return false;
      if (SeatNum != other.SeatNum) return false;
      if (Ownerid != other.Ownerid) return false;
      if (RoomType != other.RoomType) return false;
      if (Feetype != other.Feetype) return false;
      if (Feepoint != other.Feepoint) return false;
      if (AuthLimit != other.AuthLimit) return false;
      if (Region != other.Region) return false;
      if (OwnerIcon != other.OwnerIcon) return false;
      if (Clubid != other.Clubid) return false;
      if (Platform != other.Platform) return false;
      if (DefaultBuyin != other.DefaultBuyin) return false;
      if (Cap != other.Cap) return false;
      if (PoolLimit != other.PoolLimit) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (IsRunMultiTimes != other.IsRunMultiTimes) return false;
      if (IsInsurance != other.IsInsurance) return false;
      if (Leagueid != other.Leagueid) return false;
      if (ClubName != other.ClubName) return false;
      if (ClubOwnerid != other.ClubOwnerid) return false;
      if (ClubIcon != other.ClubIcon) return false;
      if (Tempid != other.Tempid) return false;
      if (Official != other.Official) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (GpsDistanceLimit != other.GpsDistanceLimit) return false;
      if (Cityid != other.Cityid) return false;
      if (RoomMode != other.RoomMode) return false;
      if (OwnerVipLevel != other.OwnerVipLevel) return false;
      if (AutoStart != other.AutoStart) return false;
      if (GameMode != other.GameMode) return false;
      if (RebateHandsNum != other.RebateHandsNum) return false;
      if (RebatePoint != other.RebatePoint) return false;
      if (CalltimeMinutes != other.CalltimeMinutes) return false;
      if (RebateFee != other.RebateFee) return false;
      if (RebateShrinkCoefficient != other.RebateShrinkCoefficient) return false;
      if (GetRebateType != other.GetRebateType) return false;
      if (WithdrawChips != other.WithdrawChips) return false;
      if (IsAutoDelayRoomOver != other.IsAutoDelayRoomOver) return false;
      if (AutoDelayRoomOverTimes != other.AutoDelayRoomOverTimes) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (VpipLimit != other.VpipLimit) return false;
      if (Moduleid != other.Moduleid) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (IsEvchop != other.IsEvchop) return false;
      if (VpipLimitPerSet != other.VpipLimitPerSet) return false;
      if (MinHandsPerSet != other.MinHandsPerSet) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (Passwd != other.Passwd) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if(!anteUpVec_.Equals(other.anteUpVec_)) return false;
      if (LobbyScore != other.LobbyScore) return false;
      if (IsCaptcha != other.IsCaptcha) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (SevenDeuceRewardMultiplier != other.SevenDeuceRewardMultiplier) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      if (IsVipTable != other.IsVipTable) return false;
      if (EnterRoomChipsPrerequisite != other.EnterRoomChipsPrerequisite) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (PpsrExchangeRate != other.PpsrExchangeRate) return false;
      if (IsJackpot != other.IsJackpot) return false;
      if (IsCertification != other.IsCertification) return false;
      if (BombpotType != other.BombpotType) return false;
      if (CycleBombpotHands != other.CycleBombpotHands) return false;
      if (CycleBombpotSeconds != other.CycleBombpotSeconds) return false;
      if (HandsToBombpot != other.HandsToBombpot) return false;
      if (SecondsToBombpot != other.SecondsToBombpot) return false;
      if (IsInBombpot != other.IsInBombpot) return false;
      if (MinBombTimes != other.MinBombTimes) return false;
      if (MaxBombTimes != other.MaxBombTimes) return false;
      if (BombpotAdditionalBoard != other.BombpotAdditionalBoard) return false;
      if (AdditionalBoard != other.AdditionalBoard) return false;
      if (IsSequentialViewCard != other.IsSequentialViewCard) return false;
      if (IsBombpotWithoutEvchop != other.IsBombpotWithoutEvchop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasOwnerName) hash ^= OwnerName.GetHashCode();
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasMinBuyin) hash ^= MinBuyin.GetHashCode();
      if (HasActionTime) hash ^= ActionTime.GetHashCode();
      if (HasGameTime) hash ^= GameTime.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasOwnerid) hash ^= Ownerid.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasFeetype) hash ^= Feetype.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasAuthLimit) hash ^= AuthLimit.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasOwnerIcon) hash ^= OwnerIcon.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasDefaultBuyin) hash ^= DefaultBuyin.GetHashCode();
      if (HasCap) hash ^= Cap.GetHashCode();
      if (HasPoolLimit) hash ^= PoolLimit.GetHashCode();
      if (HasMaxBuyin) hash ^= MaxBuyin.GetHashCode();
      if (HasIsRunMultiTimes) hash ^= IsRunMultiTimes.GetHashCode();
      if (HasIsInsurance) hash ^= IsInsurance.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasClubOwnerid) hash ^= ClubOwnerid.GetHashCode();
      if (HasClubIcon) hash ^= ClubIcon.GetHashCode();
      if (HasTempid) hash ^= Tempid.GetHashCode();
      if (HasOfficial) hash ^= Official.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasGpsDistanceLimit) hash ^= GpsDistanceLimit.GetHashCode();
      if (HasCityid) hash ^= Cityid.GetHashCode();
      if (HasRoomMode) hash ^= RoomMode.GetHashCode();
      if (HasOwnerVipLevel) hash ^= OwnerVipLevel.GetHashCode();
      if (HasAutoStart) hash ^= AutoStart.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasRebateHandsNum) hash ^= RebateHandsNum.GetHashCode();
      if (HasRebatePoint) hash ^= RebatePoint.GetHashCode();
      if (HasCalltimeMinutes) hash ^= CalltimeMinutes.GetHashCode();
      if (HasRebateFee) hash ^= RebateFee.GetHashCode();
      if (HasRebateShrinkCoefficient) hash ^= RebateShrinkCoefficient.GetHashCode();
      if (HasGetRebateType) hash ^= GetRebateType.GetHashCode();
      if (HasWithdrawChips) hash ^= WithdrawChips.GetHashCode();
      if (HasIsAutoDelayRoomOver) hash ^= IsAutoDelayRoomOver.GetHashCode();
      if (HasAutoDelayRoomOverTimes) hash ^= AutoDelayRoomOverTimes.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasVpipLimit) hash ^= VpipLimit.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasIsEvchop) hash ^= IsEvchop.GetHashCode();
      if (HasVpipLimitPerSet) hash ^= VpipLimitPerSet.GetHashCode();
      if (HasMinHandsPerSet) hash ^= MinHandsPerSet.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasPasswd) hash ^= Passwd.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      hash ^= anteUpVec_.GetHashCode();
      if (HasLobbyScore) hash ^= LobbyScore.GetHashCode();
      if (HasIsCaptcha) hash ^= IsCaptcha.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasSevenDeuceRewardMultiplier) hash ^= SevenDeuceRewardMultiplier.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (HasIsVipTable) hash ^= IsVipTable.GetHashCode();
      if (HasEnterRoomChipsPrerequisite) hash ^= EnterRoomChipsPrerequisite.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasPpsrExchangeRate) hash ^= PpsrExchangeRate.GetHashCode();
      if (HasIsJackpot) hash ^= IsJackpot.GetHashCode();
      if (HasIsCertification) hash ^= IsCertification.GetHashCode();
      if (HasBombpotType) hash ^= BombpotType.GetHashCode();
      if (HasCycleBombpotHands) hash ^= CycleBombpotHands.GetHashCode();
      if (HasCycleBombpotSeconds) hash ^= CycleBombpotSeconds.GetHashCode();
      if (HasHandsToBombpot) hash ^= HandsToBombpot.GetHashCode();
      if (HasSecondsToBombpot) hash ^= SecondsToBombpot.GetHashCode();
      if (HasIsInBombpot) hash ^= IsInBombpot.GetHashCode();
      if (HasMinBombTimes) hash ^= MinBombTimes.GetHashCode();
      if (HasMaxBombTimes) hash ^= MaxBombTimes.GetHashCode();
      if (HasBombpotAdditionalBoard) hash ^= BombpotAdditionalBoard.GetHashCode();
      if (HasAdditionalBoard) hash ^= AdditionalBoard.GetHashCode();
      if (HasIsSequentialViewCard) hash ^= IsSequentialViewCard.GetHashCode();
      if (HasIsBombpotWithoutEvchop) hash ^= IsBombpotWithoutEvchop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasRoomName) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (HasOwnerName) {
        output.WriteRawTag(26);
        output.WriteString(OwnerName);
      }
      if (HasBlind) {
        output.WriteRawTag(32);
        output.WriteInt64(Blind);
      }
      if (HasAnte) {
        output.WriteRawTag(40);
        output.WriteInt64(Ante);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(48);
        output.WriteInt64(MinBuyin);
      }
      if (HasActionTime) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionTime);
      }
      if (HasGameTime) {
        output.WriteRawTag(64);
        output.WriteInt32(GameTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(72);
        output.WriteInt32(SeatNum);
      }
      if (HasOwnerid) {
        output.WriteRawTag(80);
        output.WriteInt64(Ownerid);
      }
      if (HasRoomType) {
        output.WriteRawTag(88);
        output.WriteEnum((int) RoomType);
      }
      if (HasFeetype) {
        output.WriteRawTag(96);
        output.WriteInt32(Feetype);
      }
      if (HasFeepoint) {
        output.WriteRawTag(104);
        output.WriteInt32(Feepoint);
      }
      if (HasAuthLimit) {
        output.WriteRawTag(112);
        output.WriteBool(AuthLimit);
      }
      if (HasRegion) {
        output.WriteRawTag(120);
        output.WriteInt32(Region);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(130, 1);
        output.WriteString(OwnerIcon);
      }
      if (HasClubid) {
        output.WriteRawTag(138, 1);
        output.WriteString(Clubid);
      }
      if (HasPlatform) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasCap) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Cap);
      }
      if (HasPoolLimit) {
        output.WriteRawTag(168, 1);
        output.WriteBool(PoolLimit);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(MaxBuyin);
      }
      if (HasIsRunMultiTimes) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsRunMultiTimes);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsInsurance);
      }
      if (HasLeagueid) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasClubName) {
        output.WriteRawTag(210, 1);
        output.WriteString(ClubName);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(226, 1);
        output.WriteString(ClubIcon);
      }
      if (HasTempid) {
        output.WriteRawTag(234, 1);
        output.WriteString(Tempid);
      }
      if (HasOfficial) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Official);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(248, 1);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IpLimit);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasCityid) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Cityid);
      }
      if (HasRoomMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) RoomMode);
      }
      if (HasOwnerVipLevel) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(OwnerVipLevel);
      }
      if (HasAutoStart) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(AutoStart);
      }
      if (HasGameMode) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) GameMode);
      }
      if (HasRebateHandsNum) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(RebateHandsNum);
      }
      if (HasRebatePoint) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(RebatePoint);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasRebateFee) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(RebateFee);
      }
      if (HasRebateShrinkCoefficient) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(RebateShrinkCoefficient);
      }
      if (HasGetRebateType) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(GetRebateType);
      }
      if (HasWithdrawChips) {
        output.WriteRawTag(232, 2);
        output.WriteBool(WithdrawChips);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(128, 3);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasVpipLimit) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(VpipLimit);
      }
      if (HasModuleid) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(Moduleid);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(152, 3);
        output.WriteBool(ForbiddenChat);
      }
      if (HasIsEvchop) {
        output.WriteRawTag(160, 3);
        output.WriteBool(IsEvchop);
      }
      if (HasVpipLimitPerSet) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(VpipLimitPerSet);
      }
      if (HasMinHandsPerSet) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(MinHandsPerSet);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(184, 3);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(194, 3);
        output.WriteString(Passwd);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(SuperLeagueType);
      }
      anteUpVec_.WriteTo(output, _repeated_anteUpVec_codec);
      if (HasLobbyScore) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(LobbyScore);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(232, 3);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(240, 3);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(248, 3);
        output.WriteBool(IsCheckMail);
      }
      if (HasSevenDeuceRewardMultiplier) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(SevenDeuceRewardMultiplier);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasIsVipTable) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IsVipTable);
      }
      if (HasEnterRoomChipsPrerequisite) {
        output.WriteRawTag(152, 4);
        output.WriteInt64(EnterRoomChipsPrerequisite);
      }
      if (HasPpsrid) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(Ppsrid);
      }
      if (HasPpsrExchangeRate) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(PpsrExchangeRate);
      }
      if (HasIsJackpot) {
        output.WriteRawTag(176, 4);
        output.WriteBool(IsJackpot);
      }
      if (HasIsCertification) {
        output.WriteRawTag(184, 4);
        output.WriteBool(IsCertification);
      }
      if (HasBombpotType) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(BombpotType);
      }
      if (HasCycleBombpotHands) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(CycleBombpotHands);
      }
      if (HasCycleBombpotSeconds) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(CycleBombpotSeconds);
      }
      if (HasHandsToBombpot) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(HandsToBombpot);
      }
      if (HasSecondsToBombpot) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SecondsToBombpot);
      }
      if (HasIsInBombpot) {
        output.WriteRawTag(232, 4);
        output.WriteBool(IsInBombpot);
      }
      if (HasMinBombTimes) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(MinBombTimes);
      }
      if (HasMaxBombTimes) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(MaxBombTimes);
      }
      if (HasBombpotAdditionalBoard) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(BombpotAdditionalBoard);
      }
      if (HasAdditionalBoard) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(AdditionalBoard);
      }
      if (HasIsSequentialViewCard) {
        output.WriteRawTag(144, 5);
        output.WriteBool(IsSequentialViewCard);
      }
      if (HasIsBombpotWithoutEvchop) {
        output.WriteRawTag(152, 5);
        output.WriteBool(IsBombpotWithoutEvchop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasRoomName) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (HasOwnerName) {
        output.WriteRawTag(26);
        output.WriteString(OwnerName);
      }
      if (HasBlind) {
        output.WriteRawTag(32);
        output.WriteInt64(Blind);
      }
      if (HasAnte) {
        output.WriteRawTag(40);
        output.WriteInt64(Ante);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(48);
        output.WriteInt64(MinBuyin);
      }
      if (HasActionTime) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionTime);
      }
      if (HasGameTime) {
        output.WriteRawTag(64);
        output.WriteInt32(GameTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(72);
        output.WriteInt32(SeatNum);
      }
      if (HasOwnerid) {
        output.WriteRawTag(80);
        output.WriteInt64(Ownerid);
      }
      if (HasRoomType) {
        output.WriteRawTag(88);
        output.WriteEnum((int) RoomType);
      }
      if (HasFeetype) {
        output.WriteRawTag(96);
        output.WriteInt32(Feetype);
      }
      if (HasFeepoint) {
        output.WriteRawTag(104);
        output.WriteInt32(Feepoint);
      }
      if (HasAuthLimit) {
        output.WriteRawTag(112);
        output.WriteBool(AuthLimit);
      }
      if (HasRegion) {
        output.WriteRawTag(120);
        output.WriteInt32(Region);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(130, 1);
        output.WriteString(OwnerIcon);
      }
      if (HasClubid) {
        output.WriteRawTag(138, 1);
        output.WriteString(Clubid);
      }
      if (HasPlatform) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasCap) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Cap);
      }
      if (HasPoolLimit) {
        output.WriteRawTag(168, 1);
        output.WriteBool(PoolLimit);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(MaxBuyin);
      }
      if (HasIsRunMultiTimes) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsRunMultiTimes);
      }
      if (HasIsInsurance) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsInsurance);
      }
      if (HasLeagueid) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasClubName) {
        output.WriteRawTag(210, 1);
        output.WriteString(ClubName);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(226, 1);
        output.WriteString(ClubIcon);
      }
      if (HasTempid) {
        output.WriteRawTag(234, 1);
        output.WriteString(Tempid);
      }
      if (HasOfficial) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Official);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(248, 1);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IpLimit);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasCityid) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Cityid);
      }
      if (HasRoomMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) RoomMode);
      }
      if (HasOwnerVipLevel) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(OwnerVipLevel);
      }
      if (HasAutoStart) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(AutoStart);
      }
      if (HasGameMode) {
        output.WriteRawTag(176, 2);
        output.WriteEnum((int) GameMode);
      }
      if (HasRebateHandsNum) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(RebateHandsNum);
      }
      if (HasRebatePoint) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(RebatePoint);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasRebateFee) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(RebateFee);
      }
      if (HasRebateShrinkCoefficient) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(RebateShrinkCoefficient);
      }
      if (HasGetRebateType) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(GetRebateType);
      }
      if (HasWithdrawChips) {
        output.WriteRawTag(232, 2);
        output.WriteBool(WithdrawChips);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(128, 3);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasVpipLimit) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(VpipLimit);
      }
      if (HasModuleid) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(Moduleid);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(152, 3);
        output.WriteBool(ForbiddenChat);
      }
      if (HasIsEvchop) {
        output.WriteRawTag(160, 3);
        output.WriteBool(IsEvchop);
      }
      if (HasVpipLimitPerSet) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(VpipLimitPerSet);
      }
      if (HasMinHandsPerSet) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(MinHandsPerSet);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(184, 3);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(194, 3);
        output.WriteString(Passwd);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(SuperLeagueType);
      }
      anteUpVec_.WriteTo(ref output, _repeated_anteUpVec_codec);
      if (HasLobbyScore) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(LobbyScore);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(232, 3);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(240, 3);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(248, 3);
        output.WriteBool(IsCheckMail);
      }
      if (HasSevenDeuceRewardMultiplier) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(SevenDeuceRewardMultiplier);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasIsVipTable) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IsVipTable);
      }
      if (HasEnterRoomChipsPrerequisite) {
        output.WriteRawTag(152, 4);
        output.WriteInt64(EnterRoomChipsPrerequisite);
      }
      if (HasPpsrid) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(Ppsrid);
      }
      if (HasPpsrExchangeRate) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(PpsrExchangeRate);
      }
      if (HasIsJackpot) {
        output.WriteRawTag(176, 4);
        output.WriteBool(IsJackpot);
      }
      if (HasIsCertification) {
        output.WriteRawTag(184, 4);
        output.WriteBool(IsCertification);
      }
      if (HasBombpotType) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(BombpotType);
      }
      if (HasCycleBombpotHands) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(CycleBombpotHands);
      }
      if (HasCycleBombpotSeconds) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(CycleBombpotSeconds);
      }
      if (HasHandsToBombpot) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(HandsToBombpot);
      }
      if (HasSecondsToBombpot) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SecondsToBombpot);
      }
      if (HasIsInBombpot) {
        output.WriteRawTag(232, 4);
        output.WriteBool(IsInBombpot);
      }
      if (HasMinBombTimes) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(MinBombTimes);
      }
      if (HasMaxBombTimes) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(MaxBombTimes);
      }
      if (HasBombpotAdditionalBoard) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(BombpotAdditionalBoard);
      }
      if (HasAdditionalBoard) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(AdditionalBoard);
      }
      if (HasIsSequentialViewCard) {
        output.WriteRawTag(144, 5);
        output.WriteBool(IsSequentialViewCard);
      }
      if (HasIsBombpotWithoutEvchop) {
        output.WriteRawTag(152, 5);
        output.WriteBool(IsBombpotWithoutEvchop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasOwnerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (HasBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasMinBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinBuyin);
      }
      if (HasActionTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTime);
      }
      if (HasGameTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasOwnerid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ownerid);
      }
      if (HasRoomType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasFeetype) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feetype);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasAuthLimit) {
        size += 1 + 1;
      }
      if (HasRegion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (HasOwnerIcon) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OwnerIcon);
      }
      if (HasClubid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (HasDefaultBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultBuyin);
      }
      if (HasCap) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cap);
      }
      if (HasPoolLimit) {
        size += 2 + 1;
      }
      if (HasMaxBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxBuyin);
      }
      if (HasIsRunMultiTimes) {
        size += 2 + 1;
      }
      if (HasIsInsurance) {
        size += 2 + 1;
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasClubOwnerid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClubOwnerid);
      }
      if (HasClubIcon) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubIcon);
      }
      if (HasTempid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tempid);
      }
      if (HasOfficial) {
        size += 2 + 1;
      }
      if (HasGpsLimit) {
        size += 2 + 1;
      }
      if (HasIpLimit) {
        size += 2 + 1;
      }
      if (HasGpsDistanceLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GpsDistanceLimit);
      }
      if (HasCityid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cityid);
      }
      if (HasRoomMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
      }
      if (HasOwnerVipLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OwnerVipLevel);
      }
      if (HasAutoStart) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoStart);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasRebateHandsNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebateHandsNum);
      }
      if (HasRebatePoint) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebatePoint);
      }
      if (HasCalltimeMinutes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CalltimeMinutes);
      }
      if (HasRebateFee) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RebateFee);
      }
      if (HasRebateShrinkCoefficient) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebateShrinkCoefficient);
      }
      if (HasGetRebateType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GetRebateType);
      }
      if (HasWithdrawChips) {
        size += 2 + 1;
      }
      if (HasIsAutoDelayRoomOver) {
        size += 2 + 1;
      }
      if (HasAutoDelayRoomOverTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasVpipLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VpipLimit);
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasIsEvchop) {
        size += 2 + 1;
      }
      if (HasVpipLimitPerSet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VpipLimitPerSet);
      }
      if (HasMinHandsPerSet) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinHandsPerSet);
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasPasswd) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      size += anteUpVec_.CalculateSize(_repeated_anteUpVec_codec);
      if (HasLobbyScore) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LobbyScore);
      }
      if (HasIsCaptcha) {
        size += 2 + 1;
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasSevenDeuceRewardMultiplier) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SevenDeuceRewardMultiplier);
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (HasIsVipTable) {
        size += 2 + 1;
      }
      if (HasEnterRoomChipsPrerequisite) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EnterRoomChipsPrerequisite);
      }
      if (HasPpsrid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasPpsrExchangeRate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PpsrExchangeRate);
      }
      if (HasIsJackpot) {
        size += 2 + 1;
      }
      if (HasIsCertification) {
        size += 2 + 1;
      }
      if (HasBombpotType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombpotType);
      }
      if (HasCycleBombpotHands) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CycleBombpotHands);
      }
      if (HasCycleBombpotSeconds) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CycleBombpotSeconds);
      }
      if (HasHandsToBombpot) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HandsToBombpot);
      }
      if (HasSecondsToBombpot) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SecondsToBombpot);
      }
      if (HasIsInBombpot) {
        size += 2 + 1;
      }
      if (HasMinBombTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinBombTimes);
      }
      if (HasMaxBombTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBombTimes);
      }
      if (HasBombpotAdditionalBoard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombpotAdditionalBoard);
      }
      if (HasAdditionalBoard) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdditionalBoard);
      }
      if (HasIsSequentialViewCard) {
        size += 2 + 1;
      }
      if (HasIsBombpotWithoutEvchop) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasOwnerName) {
        OwnerName = other.OwnerName;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasMinBuyin) {
        MinBuyin = other.MinBuyin;
      }
      if (other.HasActionTime) {
        ActionTime = other.ActionTime;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasOwnerid) {
        Ownerid = other.Ownerid;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasFeetype) {
        Feetype = other.Feetype;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasAuthLimit) {
        AuthLimit = other.AuthLimit;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasOwnerIcon) {
        OwnerIcon = other.OwnerIcon;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasDefaultBuyin) {
        DefaultBuyin = other.DefaultBuyin;
      }
      if (other.HasCap) {
        Cap = other.Cap;
      }
      if (other.HasPoolLimit) {
        PoolLimit = other.PoolLimit;
      }
      if (other.HasMaxBuyin) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.HasIsRunMultiTimes) {
        IsRunMultiTimes = other.IsRunMultiTimes;
      }
      if (other.HasIsInsurance) {
        IsInsurance = other.IsInsurance;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasClubOwnerid) {
        ClubOwnerid = other.ClubOwnerid;
      }
      if (other.HasClubIcon) {
        ClubIcon = other.ClubIcon;
      }
      if (other.HasTempid) {
        Tempid = other.Tempid;
      }
      if (other.HasOfficial) {
        Official = other.Official;
      }
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasGpsDistanceLimit) {
        GpsDistanceLimit = other.GpsDistanceLimit;
      }
      if (other.HasCityid) {
        Cityid = other.Cityid;
      }
      if (other.HasRoomMode) {
        RoomMode = other.RoomMode;
      }
      if (other.HasOwnerVipLevel) {
        OwnerVipLevel = other.OwnerVipLevel;
      }
      if (other.HasAutoStart) {
        AutoStart = other.AutoStart;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasRebateHandsNum) {
        RebateHandsNum = other.RebateHandsNum;
      }
      if (other.HasRebatePoint) {
        RebatePoint = other.RebatePoint;
      }
      if (other.HasCalltimeMinutes) {
        CalltimeMinutes = other.CalltimeMinutes;
      }
      if (other.HasRebateFee) {
        RebateFee = other.RebateFee;
      }
      if (other.HasRebateShrinkCoefficient) {
        RebateShrinkCoefficient = other.RebateShrinkCoefficient;
      }
      if (other.HasGetRebateType) {
        GetRebateType = other.GetRebateType;
      }
      if (other.HasWithdrawChips) {
        WithdrawChips = other.WithdrawChips;
      }
      if (other.HasIsAutoDelayRoomOver) {
        IsAutoDelayRoomOver = other.IsAutoDelayRoomOver;
      }
      if (other.HasAutoDelayRoomOverTimes) {
        AutoDelayRoomOverTimes = other.AutoDelayRoomOverTimes;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasVpipLimit) {
        VpipLimit = other.VpipLimit;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasIsEvchop) {
        IsEvchop = other.IsEvchop;
      }
      if (other.HasVpipLimitPerSet) {
        VpipLimitPerSet = other.VpipLimitPerSet;
      }
      if (other.HasMinHandsPerSet) {
        MinHandsPerSet = other.MinHandsPerSet;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasPasswd) {
        Passwd = other.Passwd;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      anteUpVec_.Add(other.anteUpVec_);
      if (other.HasLobbyScore) {
        LobbyScore = other.LobbyScore;
      }
      if (other.HasIsCaptcha) {
        IsCaptcha = other.IsCaptcha;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasSevenDeuceRewardMultiplier) {
        SevenDeuceRewardMultiplier = other.SevenDeuceRewardMultiplier;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      if (other.HasIsVipTable) {
        IsVipTable = other.IsVipTable;
      }
      if (other.HasEnterRoomChipsPrerequisite) {
        EnterRoomChipsPrerequisite = other.EnterRoomChipsPrerequisite;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasPpsrExchangeRate) {
        PpsrExchangeRate = other.PpsrExchangeRate;
      }
      if (other.HasIsJackpot) {
        IsJackpot = other.IsJackpot;
      }
      if (other.HasIsCertification) {
        IsCertification = other.IsCertification;
      }
      if (other.HasBombpotType) {
        BombpotType = other.BombpotType;
      }
      if (other.HasCycleBombpotHands) {
        CycleBombpotHands = other.CycleBombpotHands;
      }
      if (other.HasCycleBombpotSeconds) {
        CycleBombpotSeconds = other.CycleBombpotSeconds;
      }
      if (other.HasHandsToBombpot) {
        HandsToBombpot = other.HandsToBombpot;
      }
      if (other.HasSecondsToBombpot) {
        SecondsToBombpot = other.SecondsToBombpot;
      }
      if (other.HasIsInBombpot) {
        IsInBombpot = other.IsInBombpot;
      }
      if (other.HasMinBombTimes) {
        MinBombTimes = other.MinBombTimes;
      }
      if (other.HasMaxBombTimes) {
        MaxBombTimes = other.MaxBombTimes;
      }
      if (other.HasBombpotAdditionalBoard) {
        BombpotAdditionalBoard = other.BombpotAdditionalBoard;
      }
      if (other.HasAdditionalBoard) {
        AdditionalBoard = other.AdditionalBoard;
      }
      if (other.HasIsSequentialViewCard) {
        IsSequentialViewCard = other.IsSequentialViewCard;
      }
      if (other.HasIsBombpotWithoutEvchop) {
        IsBombpotWithoutEvchop = other.IsBombpotWithoutEvchop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 26: {
            OwnerName = input.ReadString();
            break;
          }
          case 32: {
            Blind = input.ReadInt64();
            break;
          }
          case 40: {
            Ante = input.ReadInt64();
            break;
          }
          case 48: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 56: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 64: {
            GameTime = input.ReadInt32();
            break;
          }
          case 72: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 80: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 88: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 96: {
            Feetype = input.ReadInt32();
            break;
          }
          case 104: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 112: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 120: {
            Region = input.ReadInt32();
            break;
          }
          case 130: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 138: {
            Clubid = input.ReadString();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 152: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 160: {
            Cap = input.ReadInt32();
            break;
          }
          case 168: {
            PoolLimit = input.ReadBool();
            break;
          }
          case 176: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 184: {
            IsRunMultiTimes = input.ReadBool();
            break;
          }
          case 192: {
            IsInsurance = input.ReadBool();
            break;
          }
          case 200: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 210: {
            ClubName = input.ReadString();
            break;
          }
          case 216: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 226: {
            ClubIcon = input.ReadString();
            break;
          }
          case 234: {
            Tempid = input.ReadString();
            break;
          }
          case 240: {
            Official = input.ReadBool();
            break;
          }
          case 248: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 256: {
            IpLimit = input.ReadBool();
            break;
          }
          case 264: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 272: {
            Cityid = input.ReadInt32();
            break;
          }
          case 280: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 288: {
            OwnerVipLevel = input.ReadUInt32();
            break;
          }
          case 296: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 304: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 312: {
            RebateHandsNum = input.ReadInt32();
            break;
          }
          case 320: {
            RebatePoint = input.ReadInt32();
            break;
          }
          case 328: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 336: {
            RebateFee = input.ReadInt64();
            break;
          }
          case 344: {
            RebateShrinkCoefficient = input.ReadInt32();
            break;
          }
          case 352: {
            GetRebateType = input.ReadInt32();
            break;
          }
          case 360: {
            WithdrawChips = input.ReadBool();
            break;
          }
          case 368: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 376: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 384: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 392: {
            VpipLimit = input.ReadInt32();
            break;
          }
          case 400: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 408: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 416: {
            IsEvchop = input.ReadBool();
            break;
          }
          case 424: {
            VpipLimitPerSet = input.ReadInt32();
            break;
          }
          case 432: {
            MinHandsPerSet = input.ReadInt32();
            break;
          }
          case 440: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 450: {
            Passwd = input.ReadString();
            break;
          }
          case 456: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 464: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 474:
          case 472: {
            anteUpVec_.AddEntriesFrom(input, _repeated_anteUpVec_codec);
            break;
          }
          case 480: {
            LobbyScore = input.ReadInt32();
            break;
          }
          case 488: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 496: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 504: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 512: {
            SevenDeuceRewardMultiplier = input.ReadInt32();
            break;
          }
          case 520: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 528: {
            IsVipTable = input.ReadBool();
            break;
          }
          case 536: {
            EnterRoomChipsPrerequisite = input.ReadInt64();
            break;
          }
          case 544: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 552: {
            PpsrExchangeRate = input.ReadInt32();
            break;
          }
          case 560: {
            IsJackpot = input.ReadBool();
            break;
          }
          case 568: {
            IsCertification = input.ReadBool();
            break;
          }
          case 576: {
            BombpotType = input.ReadInt32();
            break;
          }
          case 584: {
            CycleBombpotHands = input.ReadInt32();
            break;
          }
          case 592: {
            CycleBombpotSeconds = input.ReadInt32();
            break;
          }
          case 600: {
            HandsToBombpot = input.ReadInt32();
            break;
          }
          case 608: {
            SecondsToBombpot = input.ReadInt32();
            break;
          }
          case 616: {
            IsInBombpot = input.ReadBool();
            break;
          }
          case 624: {
            MinBombTimes = input.ReadInt32();
            break;
          }
          case 632: {
            MaxBombTimes = input.ReadInt32();
            break;
          }
          case 640: {
            BombpotAdditionalBoard = input.ReadInt32();
            break;
          }
          case 648: {
            AdditionalBoard = input.ReadInt32();
            break;
          }
          case 656: {
            IsSequentialViewCard = input.ReadBool();
            break;
          }
          case 664: {
            IsBombpotWithoutEvchop = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 26: {
            OwnerName = input.ReadString();
            break;
          }
          case 32: {
            Blind = input.ReadInt64();
            break;
          }
          case 40: {
            Ante = input.ReadInt64();
            break;
          }
          case 48: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 56: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 64: {
            GameTime = input.ReadInt32();
            break;
          }
          case 72: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 80: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 88: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 96: {
            Feetype = input.ReadInt32();
            break;
          }
          case 104: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 112: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 120: {
            Region = input.ReadInt32();
            break;
          }
          case 130: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 138: {
            Clubid = input.ReadString();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 152: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 160: {
            Cap = input.ReadInt32();
            break;
          }
          case 168: {
            PoolLimit = input.ReadBool();
            break;
          }
          case 176: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 184: {
            IsRunMultiTimes = input.ReadBool();
            break;
          }
          case 192: {
            IsInsurance = input.ReadBool();
            break;
          }
          case 200: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 210: {
            ClubName = input.ReadString();
            break;
          }
          case 216: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 226: {
            ClubIcon = input.ReadString();
            break;
          }
          case 234: {
            Tempid = input.ReadString();
            break;
          }
          case 240: {
            Official = input.ReadBool();
            break;
          }
          case 248: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 256: {
            IpLimit = input.ReadBool();
            break;
          }
          case 264: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 272: {
            Cityid = input.ReadInt32();
            break;
          }
          case 280: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 288: {
            OwnerVipLevel = input.ReadUInt32();
            break;
          }
          case 296: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 304: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 312: {
            RebateHandsNum = input.ReadInt32();
            break;
          }
          case 320: {
            RebatePoint = input.ReadInt32();
            break;
          }
          case 328: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 336: {
            RebateFee = input.ReadInt64();
            break;
          }
          case 344: {
            RebateShrinkCoefficient = input.ReadInt32();
            break;
          }
          case 352: {
            GetRebateType = input.ReadInt32();
            break;
          }
          case 360: {
            WithdrawChips = input.ReadBool();
            break;
          }
          case 368: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 376: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 384: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 392: {
            VpipLimit = input.ReadInt32();
            break;
          }
          case 400: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 408: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 416: {
            IsEvchop = input.ReadBool();
            break;
          }
          case 424: {
            VpipLimitPerSet = input.ReadInt32();
            break;
          }
          case 432: {
            MinHandsPerSet = input.ReadInt32();
            break;
          }
          case 440: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 450: {
            Passwd = input.ReadString();
            break;
          }
          case 456: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 464: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 474:
          case 472: {
            anteUpVec_.AddEntriesFrom(ref input, _repeated_anteUpVec_codec);
            break;
          }
          case 480: {
            LobbyScore = input.ReadInt32();
            break;
          }
          case 488: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 496: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 504: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 512: {
            SevenDeuceRewardMultiplier = input.ReadInt32();
            break;
          }
          case 520: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 528: {
            IsVipTable = input.ReadBool();
            break;
          }
          case 536: {
            EnterRoomChipsPrerequisite = input.ReadInt64();
            break;
          }
          case 544: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 552: {
            PpsrExchangeRate = input.ReadInt32();
            break;
          }
          case 560: {
            IsJackpot = input.ReadBool();
            break;
          }
          case 568: {
            IsCertification = input.ReadBool();
            break;
          }
          case 576: {
            BombpotType = input.ReadInt32();
            break;
          }
          case 584: {
            CycleBombpotHands = input.ReadInt32();
            break;
          }
          case 592: {
            CycleBombpotSeconds = input.ReadInt32();
            break;
          }
          case 600: {
            HandsToBombpot = input.ReadInt32();
            break;
          }
          case 608: {
            SecondsToBombpot = input.ReadInt32();
            break;
          }
          case 616: {
            IsInBombpot = input.ReadBool();
            break;
          }
          case 624: {
            MinBombTimes = input.ReadInt32();
            break;
          }
          case 632: {
            MaxBombTimes = input.ReadInt32();
            break;
          }
          case 640: {
            BombpotAdditionalBoard = input.ReadInt32();
            break;
          }
          case 648: {
            AdditionalBoard = input.ReadInt32();
            break;
          }
          case 656: {
            IsSequentialViewCard = input.ReadBool();
            break;
          }
          case 664: {
            IsBombpotWithoutEvchop = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SngRoomInfo : pb::IMessage<SngRoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SngRoomInfo> _parser = new pb::MessageParser<SngRoomInfo>(() => new SngRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SngRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SngRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SngRoomInfo(SngRoomInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      roomid_ = other.roomid_;
      roomName_ = other.roomName_;
      ownerid_ = other.ownerid_;
      ownerName_ = other.ownerName_;
      ownerIcon_ = other.ownerIcon_;
      blindType_ = other.blindType_;
      blindList_ = other.blindList_.Clone();
      anteList_ = other.anteList_.Clone();
      upblindTime_ = other.upblindTime_;
      buyin_ = other.buyin_;
      beginChips_ = other.beginChips_;
      actionTime_ = other.actionTime_;
      seatNum_ = other.seatNum_;
      roomType_ = other.roomType_;
      authLimit_ = other.authLimit_;
      region_ = other.region_;
      clubid_ = other.clubid_;
      platform_ = other.platform_;
      clubName_ = other.clubName_;
      blind_ = other.blind_;
      ante_ = other.ante_;
      charge_ = other.charge_;
      leagueid_ = other.leagueid_;
      itemName_ = other.itemName_;
      priority_ = other.priority_;
      clubOwnerid_ = other.clubOwnerid_;
      clubIcon_ = other.clubIcon_;
      tempid_ = other.tempid_;
      official_ = other.official_;
      fixedReward_ = other.fixedReward_;
      rewardInfo_ = other.rewardInfo_.Clone();
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      gpsDistanceLimit_ = other.gpsDistanceLimit_;
      roomMode_ = other.roomMode_;
      ownerVipLevel_ = other.ownerVipLevel_;
      itemInfo_ = other.itemInfo_.Clone();
      sittingOut_ = other.sittingOut_;
      signupType_ = other.signupType_;
      descType_ = other.descType_;
      location_ = other.location_;
      platformLimits_ = other.platformLimits_.Clone();
      gameMode_ = other.gameMode_;
      rebateRate_ = other.rebateRate_;
      poolLimit_ = other.poolLimit_;
      officialTags_ = other.officialTags_.Clone();
      matchId_ = other.matchId_;
      officialPopup_ = other.officialPopup_;
      officialPopupTime_ = other.officialPopupTime_;
      firstSpecialShow_ = other.firstSpecialShow_;
      specialOrder_ = other.specialOrder_;
      shieldingPlatforms_ = other.shieldingPlatforms_.Clone();
      moduleid_ = other.moduleid_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      officialRdType_ = other.officialRdType_;
      forbiddenChat_ = other.forbiddenChat_;
      superLeagueid_ = other.superLeagueid_;
      isSuperLeague_ = other.isSuperLeague_;
      passwdLimit_ = other.passwdLimit_;
      passwd_ = other.passwd_;
      maxRewardRatio_ = other.maxRewardRatio_;
      pauseAutoCreateTime_ = other.pauseAutoCreateTime_;
      superLeagueType_ = other.superLeagueType_;
      rewardMode_ = other.rewardMode_;
      chargeRatio_ = other.chargeRatio_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      upblindTimeAfterRebuyEnded_ = other.upblindTimeAfterRebuyEnded_;
      upblindTimeAfterFinalTable_ = other.upblindTimeAfterFinalTable_;
      ppstid_ = other.ppstid_;
      ppstRoomAuthority_ = other.ppstRoomAuthority_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SngRoomInfo Clone() {
      return new SngRoomInfo(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    /// <summary>
    ///邀请码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "ownerid" field.</summary>
    public const int OwneridFieldNumber = 3;
    private readonly static long OwneridDefaultValue = 0L;

    private long ownerid_;
    /// <summary>
    ///房主id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ownerid {
      get { if ((_hasBits0 & 1) != 0) { return ownerid_; } else { return OwneridDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ownerid_ = value;
      }
    }
    /// <summary>Gets whether the "ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 4;
    private readonly static string OwnerNameDefaultValue = "";

    private string ownerName_;
    /// <summary>
    ///房主名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerName {
      get { return ownerName_ ?? OwnerNameDefaultValue; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerName {
      get { return ownerName_ != null; }
    }
    /// <summary>Clears the value of the "owner_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerName() {
      ownerName_ = null;
    }

    /// <summary>Field number for the "owner_icon" field.</summary>
    public const int OwnerIconFieldNumber = 5;
    private readonly static string OwnerIconDefaultValue = "";

    private string ownerIcon_;
    /// <summary>
    ///房主头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerIcon {
      get { return ownerIcon_ ?? OwnerIconDefaultValue; }
      set {
        ownerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerIcon {
      get { return ownerIcon_ != null; }
    }
    /// <summary>Clears the value of the "owner_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerIcon() {
      ownerIcon_ = null;
    }

    /// <summary>Field number for the "blind_type" field.</summary>
    public const int BlindTypeFieldNumber = 6;
    private readonly static int BlindTypeDefaultValue = 0;

    private int blindType_;
    /// <summary>
    ///涨盲类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlindType {
      get { if ((_hasBits0 & 2) != 0) { return blindType_; } else { return BlindTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        blindType_ = value;
      }
    }
    /// <summary>Gets whether the "blind_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlindType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "blind_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlindType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "blind_list" field.</summary>
    public const int BlindListFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_blindList_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> blindList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///小盲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> BlindList {
      get { return blindList_; }
    }

    /// <summary>Field number for the "ante_list" field.</summary>
    public const int AnteListFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_anteList_codec
        = pb::FieldCodec.ForInt64(66);
    private readonly pbc::RepeatedField<long> anteList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///前注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> AnteList {
      get { return anteList_; }
    }

    /// <summary>Field number for the "upblind_time" field.</summary>
    public const int UpblindTimeFieldNumber = 9;
    private readonly static int UpblindTimeDefaultValue = 0;

    private int upblindTime_;
    /// <summary>
    ///涨盲时间，单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpblindTime {
      get { if ((_hasBits0 & 4) != 0) { return upblindTime_; } else { return UpblindTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        upblindTime_ = value;
      }
    }
    /// <summary>Gets whether the "upblind_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpblindTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "upblind_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpblindTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "buyin" field.</summary>
    public const int BuyinFieldNumber = 10;
    private readonly static long BuyinDefaultValue = 0L;

    private long buyin_;
    /// <summary>
    ///买入，包括服务费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Buyin {
      get { if ((_hasBits0 & 8) != 0) { return buyin_; } else { return BuyinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        buyin_ = value;
      }
    }
    /// <summary>Gets whether the "buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBuyin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBuyin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "begin_chips" field.</summary>
    public const int BeginChipsFieldNumber = 11;
    private readonly static long BeginChipsDefaultValue = 0L;

    private long beginChips_;
    /// <summary>
    ///初始筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BeginChips {
      get { if ((_hasBits0 & 16) != 0) { return beginChips_; } else { return BeginChipsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        beginChips_ = value;
      }
    }
    /// <summary>Gets whether the "begin_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBeginChips {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "begin_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBeginChips() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 12;
    private readonly static int ActionTimeDefaultValue = 0;

    private int actionTime_;
    /// <summary>
    ///下注时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionTime {
      get { if ((_hasBits0 & 32) != 0) { return actionTime_; } else { return ActionTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        actionTime_ = value;
      }
    }
    /// <summary>Gets whether the "action_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "action_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 13;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    /// <summary>
    ///房间座位数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 64) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 14;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    /// <summary>
    ///默认俱乐部房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 128) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "auth_limit" field.</summary>
    public const int AuthLimitFieldNumber = 15;
    private readonly static bool AuthLimitDefaultValue = false;

    private bool authLimit_;
    /// <summary>
    ///是否授权买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AuthLimit {
      get { if ((_hasBits0 & 256) != 0) { return authLimit_; } else { return AuthLimitDefaultValue; } }
      set {
        _hasBits0 |= 256;
        authLimit_ = value;
      }
    }
    /// <summary>Gets whether the "auth_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAuthLimit {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "auth_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAuthLimit() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 16;
    private readonly static int RegionDefaultValue = 0;

    private int region_;
    /// <summary>
    ///房间所属的区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Region {
      get { if ((_hasBits0 & 512) != 0) { return region_; } else { return RegionDefaultValue; } }
      set {
        _hasBits0 |= 512;
        region_ = value;
      }
    }
    /// <summary>Gets whether the "region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegion {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegion() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 17;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///俱乐部id，0代表普通房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 18;
    private readonly static string PlatformDefaultValue = "";

    private string platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Platform {
      get { return platform_ ?? PlatformDefaultValue; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlatform {
      get { return platform_ != null; }
    }
    /// <summary>Clears the value of the "platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlatform() {
      platform_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 19;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 20;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 1024) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 21;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 2048) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "charge" field.</summary>
    public const int ChargeFieldNumber = 22;
    private readonly static long ChargeDefaultValue = 0L;

    private long charge_;
    /// <summary>
    ///服务费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Charge {
      get { if ((_hasBits0 & 4096) != 0) { return charge_; } else { return ChargeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        charge_ = value;
      }
    }
    /// <summary>Gets whether the "charge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCharge {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "charge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCharge() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 23;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 8192) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "item_name" field.</summary>
    public const int ItemNameFieldNumber = 24;
    private readonly static string ItemNameDefaultValue = "";

    private string itemName_;
    /// <summary>
    ///可以使用的票券
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ItemName {
      get { return itemName_ ?? ItemNameDefaultValue; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "item_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemName {
      get { return itemName_ != null; }
    }
    /// <summary>Clears the value of the "item_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemName() {
      itemName_ = null;
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 25;
    private readonly static int PriorityDefaultValue = 0;

    private int priority_;
    /// <summary>
    ///优先级 0 ~ 100 大的优先
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Priority {
      get { if ((_hasBits0 & 16384) != 0) { return priority_; } else { return PriorityDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        priority_ = value;
      }
    }
    /// <summary>Gets whether the "priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPriority {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPriority() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "club_ownerid" field.</summary>
    public const int ClubOwneridFieldNumber = 26;
    private readonly static long ClubOwneridDefaultValue = 0L;

    private long clubOwnerid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClubOwnerid {
      get { if ((_hasBits0 & 32768) != 0) { return clubOwnerid_; } else { return ClubOwneridDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        clubOwnerid_ = value;
      }
    }
    /// <summary>Gets whether the "club_ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubOwnerid {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "club_ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubOwnerid() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "club_icon" field.</summary>
    public const int ClubIconFieldNumber = 27;
    private readonly static string ClubIconDefaultValue = "";

    private string clubIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubIcon {
      get { return clubIcon_ ?? ClubIconDefaultValue; }
      set {
        clubIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubIcon {
      get { return clubIcon_ != null; }
    }
    /// <summary>Clears the value of the "club_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubIcon() {
      clubIcon_ = null;
    }

    /// <summary>Field number for the "tempid" field.</summary>
    public const int TempidFieldNumber = 28;
    private readonly static string TempidDefaultValue = "";

    private string tempid_;
    /// <summary>
    ///房间模板
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tempid {
      get { return tempid_ ?? TempidDefaultValue; }
      set {
        tempid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tempid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTempid {
      get { return tempid_ != null; }
    }
    /// <summary>Clears the value of the "tempid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTempid() {
      tempid_ = null;
    }

    /// <summary>Field number for the "official" field.</summary>
    public const int OfficialFieldNumber = 29;
    private readonly static bool OfficialDefaultValue = false;

    private bool official_;
    /// <summary>
    ///是否官方赛事
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Official {
      get { if ((_hasBits0 & 65536) != 0) { return official_; } else { return OfficialDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        official_ = value;
      }
    }
    /// <summary>Gets whether the "official" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficial {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "official" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficial() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "fixed_reward" field.</summary>
    public const int FixedRewardFieldNumber = 30;
    private readonly static bool FixedRewardDefaultValue = false;

    private bool fixedReward_;
    /// <summary>
    ///是否固定奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FixedReward {
      get { if ((_hasBits0 & 131072) != 0) { return fixedReward_; } else { return FixedRewardDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        fixedReward_ = value;
      }
    }
    /// <summary>Gets whether the "fixed_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFixedReward {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "fixed_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFixedReward() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "reward_info" field.</summary>
    public const int RewardInfoFieldNumber = 31;
    private static readonly pb::FieldCodec<global::Texas.Protocol.MttRewardInfo> _repeated_rewardInfo_codec
        = pb::FieldCodec.ForMessage(250, global::Texas.Protocol.MttRewardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.MttRewardInfo> rewardInfo_ = new pbc::RepeatedField<global::Texas.Protocol.MttRewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.MttRewardInfo> RewardInfo {
      get { return rewardInfo_; }
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 32;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 262144) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 33;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 524288) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "gps_distance_limit" field.</summary>
    public const int GpsDistanceLimitFieldNumber = 34;
    private readonly static int GpsDistanceLimitDefaultValue = 0;

    private int gpsDistanceLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsDistanceLimit {
      get { if ((_hasBits0 & 1048576) != 0) { return gpsDistanceLimit_; } else { return GpsDistanceLimitDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        gpsDistanceLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_distance_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsDistanceLimit {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "gps_distance_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsDistanceLimit() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "room_mode" field.</summary>
    public const int RoomModeFieldNumber = 35;
    private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

    private global::Texas.Protocol.RoomMode roomMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomMode RoomMode {
      get { if ((_hasBits0 & 2097152) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        roomMode_ = value;
      }
    }
    /// <summary>Gets whether the "room_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomMode {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "room_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomMode() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "owner_vip_level" field.</summary>
    public const int OwnerVipLevelFieldNumber = 36;
    private readonly static uint OwnerVipLevelDefaultValue = 0;

    private uint ownerVipLevel_;
    /// <summary>
    /// 房主vip信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OwnerVipLevel {
      get { if ((_hasBits0 & 4194304) != 0) { return ownerVipLevel_; } else { return OwnerVipLevelDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        ownerVipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "owner_vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerVipLevel {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "owner_vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerVipLevel() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "item_info" field.</summary>
    public const int ItemInfoFieldNumber = 37;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ItemClassInfo> _repeated_itemInfo_codec
        = pb::FieldCodec.ForMessage(298, global::Texas.Protocol.ItemClassInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ItemClassInfo> itemInfo_ = new pbc::RepeatedField<global::Texas.Protocol.ItemClassInfo>();
    /// <summary>
    /// 存放物品的价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ItemClassInfo> ItemInfo {
      get { return itemInfo_; }
    }

    /// <summary>Field number for the "sitting_out" field.</summary>
    public const int SittingOutFieldNumber = 38;
    private readonly static bool SittingOutDefaultValue = false;

    private bool sittingOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SittingOut {
      get { if ((_hasBits0 & 8388608) != 0) { return sittingOut_; } else { return SittingOutDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        sittingOut_ = value;
      }
    }
    /// <summary>Gets whether the "sitting_out" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSittingOut {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "sitting_out" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSittingOut() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "signup_type" field.</summary>
    public const int SignupTypeFieldNumber = 39;
    private readonly static global::Texas.Protocol.SignupType SignupTypeDefaultValue = global::Texas.Protocol.SignupType.All;

    private global::Texas.Protocol.SignupType signupType_;
    /// <summary>
    /// 报名方式 0都可以|1仅金币|2仅门票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.SignupType SignupType {
      get { if ((_hasBits0 & 16777216) != 0) { return signupType_; } else { return SignupTypeDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        signupType_ = value;
      }
    }
    /// <summary>Gets whether the "signup_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSignupType {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "signup_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSignupType() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "desc_type" field.</summary>
    public const int DescTypeFieldNumber = 40;
    private readonly static global::Texas.Protocol.OfficialDescType DescTypeDefaultValue = global::Texas.Protocol.OfficialDescType.None;

    private global::Texas.Protocol.OfficialDescType descType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.OfficialDescType DescType {
      get { if ((_hasBits0 & 33554432) != 0) { return descType_; } else { return DescTypeDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        descType_ = value;
      }
    }
    /// <summary>Gets whether the "desc_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescType {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "desc_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescType() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 41;
    private readonly static global::Texas.Protocol.OfficialLocation LocationDefaultValue = global::Texas.Protocol.OfficialLocation.Online;

    private global::Texas.Protocol.OfficialLocation location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.OfficialLocation Location {
      get { if ((_hasBits0 & 67108864) != 0) { return location_; } else { return LocationDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        location_ = value;
      }
    }
    /// <summary>Gets whether the "location" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocation {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "location" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocation() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "platform_limits" field.</summary>
    public const int PlatformLimitsFieldNumber = 42;
    private static readonly pb::FieldCodec<string> _repeated_platformLimits_codec
        = pb::FieldCodec.ForString(338);
    private readonly pbc::RepeatedField<string> platformLimits_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> PlatformLimits {
      get { return platformLimits_; }
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 43;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 134217728) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "rebate_rate" field.</summary>
    public const int RebateRateFieldNumber = 44;
    private readonly static int RebateRateDefaultValue = 0;

    private int rebateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebateRate {
      get { if ((_hasBits0 & 268435456) != 0) { return rebateRate_; } else { return RebateRateDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        rebateRate_ = value;
      }
    }
    /// <summary>Gets whether the "rebate_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebateRate {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "rebate_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebateRate() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "pool_limit" field.</summary>
    public const int PoolLimitFieldNumber = 45;
    private readonly static bool PoolLimitDefaultValue = false;

    private bool poolLimit_;
    /// <summary>
    ///底池限注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PoolLimit {
      get { if ((_hasBits0 & 536870912) != 0) { return poolLimit_; } else { return PoolLimitDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        poolLimit_ = value;
      }
    }
    /// <summary>Gets whether the "pool_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPoolLimit {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "pool_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPoolLimit() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "official_tags" field.</summary>
    public const int OfficialTagsFieldNumber = 46;
    private static readonly pb::FieldCodec<global::Texas.Protocol.OfficialTag> _repeated_officialTags_codec
        = pb::FieldCodec.ForEnum(370, x => (int) x, x => (global::Texas.Protocol.OfficialTag) x);
    private readonly pbc::RepeatedField<global::Texas.Protocol.OfficialTag> officialTags_ = new pbc::RepeatedField<global::Texas.Protocol.OfficialTag>();
    /// <summary>
    /// 标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.OfficialTag> OfficialTags {
      get { return officialTags_; }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 47;
    private readonly static long MatchIdDefaultValue = 0L;

    private long matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MatchId {
      get { if ((_hasBits0 & 1073741824) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        matchId_ = value;
      }
    }
    /// <summary>Gets whether the "match_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMatchId {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "match_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMatchId() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "official_popup" field.</summary>
    public const int OfficialPopupFieldNumber = 48;
    private readonly static global::Texas.Protocol.OfficialPopup OfficialPopupDefaultValue = global::Texas.Protocol.OfficialPopup.None;

    private global::Texas.Protocol.OfficialPopup officialPopup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.OfficialPopup OfficialPopup {
      get { if ((_hasBits0 & -2147483648) != 0) { return officialPopup_; } else { return OfficialPopupDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        officialPopup_ = value;
      }
    }
    /// <summary>Gets whether the "official_popup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficialPopup {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "official_popup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficialPopup() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "official_popup_time" field.</summary>
    public const int OfficialPopupTimeFieldNumber = 49;
    private readonly static int OfficialPopupTimeDefaultValue = 0;

    private int officialPopupTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfficialPopupTime {
      get { if ((_hasBits1 & 1) != 0) { return officialPopupTime_; } else { return OfficialPopupTimeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        officialPopupTime_ = value;
      }
    }
    /// <summary>Gets whether the "official_popup_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficialPopupTime {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "official_popup_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficialPopupTime() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "first_special_show" field.</summary>
    public const int FirstSpecialShowFieldNumber = 50;
    private readonly static string FirstSpecialShowDefaultValue = "";

    private string firstSpecialShow_;
    /// <summary>
    ///第一名是否特殊展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirstSpecialShow {
      get { return firstSpecialShow_ ?? FirstSpecialShowDefaultValue; }
      set {
        firstSpecialShow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "first_special_show" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstSpecialShow {
      get { return firstSpecialShow_ != null; }
    }
    /// <summary>Clears the value of the "first_special_show" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstSpecialShow() {
      firstSpecialShow_ = null;
    }

    /// <summary>Field number for the "special_order" field.</summary>
    public const int SpecialOrderFieldNumber = 51;
    private readonly static int SpecialOrderDefaultValue = 0;

    private int specialOrder_;
    /// <summary>
    ///新玩家特性挂牌顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpecialOrder {
      get { if ((_hasBits1 & 2) != 0) { return specialOrder_; } else { return SpecialOrderDefaultValue; } }
      set {
        _hasBits1 |= 2;
        specialOrder_ = value;
      }
    }
    /// <summary>Gets whether the "special_order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpecialOrder {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "special_order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpecialOrder() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "shielding_platforms" field.</summary>
    public const int ShieldingPlatformsFieldNumber = 52;
    private static readonly pb::FieldCodec<string> _repeated_shieldingPlatforms_codec
        = pb::FieldCodec.ForString(418);
    private readonly pbc::RepeatedField<string> shieldingPlatforms_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// players who in these platforms cannot see this game
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ShieldingPlatforms {
      get { return shieldingPlatforms_; }
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 53;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    /// when module create room use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits1 & 4) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits1 |= 4;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 54;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits1 & 8) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits1 |= 8;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "official_rd_type" field.</summary>
    public const int OfficialRdTypeFieldNumber = 55;
    private readonly static int OfficialRdTypeDefaultValue = 0;

    private int officialRdType_;
    /// <summary>
    /// 0,普通比赛，1实物比赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OfficialRdType {
      get { if ((_hasBits1 & 16) != 0) { return officialRdType_; } else { return OfficialRdTypeDefaultValue; } }
      set {
        _hasBits1 |= 16;
        officialRdType_ = value;
      }
    }
    /// <summary>Gets whether the "official_rd_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficialRdType {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "official_rd_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficialRdType() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 56;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits1 & 32) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits1 |= 32;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 57;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    /// <summary>
    ///超级联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits1 & 64) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits1 |= 64;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "is_super_league" field.</summary>
    public const int IsSuperLeagueFieldNumber = 58;
    private readonly static bool IsSuperLeagueDefaultValue = false;

    private bool isSuperLeague_;
    /// <summary>
    ///超级联盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSuperLeague {
      get { if ((_hasBits1 & 128) != 0) { return isSuperLeague_; } else { return IsSuperLeagueDefaultValue; } }
      set {
        _hasBits1 |= 128;
        isSuperLeague_ = value;
      }
    }
    /// <summary>Gets whether the "is_super_league" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSuperLeague {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_super_league" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSuperLeague() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 59;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    /// 是否密码桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits1 & 256) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits1 |= 256;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 60;
    private readonly static string PasswdDefaultValue = "";

    private string passwd_;
    /// <summary>
    /// private room password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Passwd {
      get { return passwd_ ?? PasswdDefaultValue; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "passwd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswd {
      get { return passwd_ != null; }
    }
    /// <summary>Clears the value of the "passwd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswd() {
      passwd_ = null;
    }

    /// <summary>Field number for the "max_reward_ratio" field.</summary>
    public const int MaxRewardRatioFieldNumber = 61;
    private readonly static int MaxRewardRatioDefaultValue = 0;

    private int maxRewardRatio_;
    /// <summary>
    ///spinup 最高奖励倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxRewardRatio {
      get { if ((_hasBits1 & 512) != 0) { return maxRewardRatio_; } else { return MaxRewardRatioDefaultValue; } }
      set {
        _hasBits1 |= 512;
        maxRewardRatio_ = value;
      }
    }
    /// <summary>Gets whether the "max_reward_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxRewardRatio {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "max_reward_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxRewardRatio() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "pause_auto_create_time" field.</summary>
    public const int PauseAutoCreateTimeFieldNumber = 62;
    private readonly static long PauseAutoCreateTimeDefaultValue = 0L;

    private long pauseAutoCreateTime_;
    /// <summary>
    ///暂停自动开桌时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PauseAutoCreateTime {
      get { if ((_hasBits1 & 1024) != 0) { return pauseAutoCreateTime_; } else { return PauseAutoCreateTimeDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        pauseAutoCreateTime_ = value;
      }
    }
    /// <summary>Gets whether the "pause_auto_create_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPauseAutoCreateTime {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "pause_auto_create_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPauseAutoCreateTime() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 63;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    /// 1 not ppst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits1 & 2048) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "reward_mode" field.</summary>
    public const int RewardModeFieldNumber = 64;
    private readonly static global::Texas.Protocol.MttRewardMode RewardModeDefaultValue = global::Texas.Protocol.MttRewardMode.MttSngDefault;

    private global::Texas.Protocol.MttRewardMode rewardMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.MttRewardMode RewardMode {
      get { if ((_hasBits1 & 4096) != 0) { return rewardMode_; } else { return RewardModeDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        rewardMode_ = value;
      }
    }
    /// <summary>Gets whether the "reward_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardMode {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "reward_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardMode() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "charge_ratio" field.</summary>
    public const int ChargeRatioFieldNumber = 65;
    private readonly static int ChargeRatioDefaultValue = 0;

    private int chargeRatio_;
    /// <summary>
    ///服务费的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChargeRatio {
      get { if ((_hasBits1 & 8192) != 0) { return chargeRatio_; } else { return ChargeRatioDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        chargeRatio_ = value;
      }
    }
    /// <summary>Gets whether the "charge_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChargeRatio {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "charge_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChargeRatio() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 66;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits1 & 16384) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 67;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits1 & 32768) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "upblind_time_after_rebuy_ended" field.</summary>
    public const int UpblindTimeAfterRebuyEndedFieldNumber = 68;
    private readonly static int UpblindTimeAfterRebuyEndedDefaultValue = 0;

    private int upblindTimeAfterRebuyEnded_;
    /// <summary>
    ///截止買入後的漲盲時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpblindTimeAfterRebuyEnded {
      get { if ((_hasBits1 & 65536) != 0) { return upblindTimeAfterRebuyEnded_; } else { return UpblindTimeAfterRebuyEndedDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        upblindTimeAfterRebuyEnded_ = value;
      }
    }
    /// <summary>Gets whether the "upblind_time_after_rebuy_ended" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpblindTimeAfterRebuyEnded {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "upblind_time_after_rebuy_ended" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpblindTimeAfterRebuyEnded() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "upblind_time_after_final_table" field.</summary>
    public const int UpblindTimeAfterFinalTableFieldNumber = 69;
    private readonly static int UpblindTimeAfterFinalTableDefaultValue = 0;

    private int upblindTimeAfterFinalTable_;
    /// <summary>
    ///進入final table後的漲盲時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpblindTimeAfterFinalTable {
      get { if ((_hasBits1 & 131072) != 0) { return upblindTimeAfterFinalTable_; } else { return UpblindTimeAfterFinalTableDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        upblindTimeAfterFinalTable_ = value;
      }
    }
    /// <summary>Gets whether the "upblind_time_after_final_table" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpblindTimeAfterFinalTable {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "upblind_time_after_final_table" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpblindTimeAfterFinalTable() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "ppstid" field.</summary>
    public const int PpstidFieldNumber = 70;
    private readonly static int PpstidDefaultValue = 0;

    private int ppstid_;
    /// <summary>
    ///新版ppstid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppstid {
      get { if ((_hasBits1 & 262144) != 0) { return ppstid_; } else { return PpstidDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        ppstid_ = value;
      }
    }
    /// <summary>Gets whether the "ppstid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpstid {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "ppstid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpstid() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "ppst_room_authority" field.</summary>
    public const int PpstRoomAuthorityFieldNumber = 71;
    private readonly static bool PpstRoomAuthorityDefaultValue = false;

    private bool ppstRoomAuthority_;
    /// <summary>
    ///新版ppst開桌權限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PpstRoomAuthority {
      get { if ((_hasBits1 & 524288) != 0) { return ppstRoomAuthority_; } else { return PpstRoomAuthorityDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        ppstRoomAuthority_ = value;
      }
    }
    /// <summary>Gets whether the "ppst_room_authority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpstRoomAuthority {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "ppst_room_authority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpstRoomAuthority() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 72;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits1 & 1048576) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits1 &= ~1048576;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SngRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SngRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (RoomName != other.RoomName) return false;
      if (Ownerid != other.Ownerid) return false;
      if (OwnerName != other.OwnerName) return false;
      if (OwnerIcon != other.OwnerIcon) return false;
      if (BlindType != other.BlindType) return false;
      if(!blindList_.Equals(other.blindList_)) return false;
      if(!anteList_.Equals(other.anteList_)) return false;
      if (UpblindTime != other.UpblindTime) return false;
      if (Buyin != other.Buyin) return false;
      if (BeginChips != other.BeginChips) return false;
      if (ActionTime != other.ActionTime) return false;
      if (SeatNum != other.SeatNum) return false;
      if (RoomType != other.RoomType) return false;
      if (AuthLimit != other.AuthLimit) return false;
      if (Region != other.Region) return false;
      if (Clubid != other.Clubid) return false;
      if (Platform != other.Platform) return false;
      if (ClubName != other.ClubName) return false;
      if (Blind != other.Blind) return false;
      if (Ante != other.Ante) return false;
      if (Charge != other.Charge) return false;
      if (Leagueid != other.Leagueid) return false;
      if (ItemName != other.ItemName) return false;
      if (Priority != other.Priority) return false;
      if (ClubOwnerid != other.ClubOwnerid) return false;
      if (ClubIcon != other.ClubIcon) return false;
      if (Tempid != other.Tempid) return false;
      if (Official != other.Official) return false;
      if (FixedReward != other.FixedReward) return false;
      if(!rewardInfo_.Equals(other.rewardInfo_)) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (GpsDistanceLimit != other.GpsDistanceLimit) return false;
      if (RoomMode != other.RoomMode) return false;
      if (OwnerVipLevel != other.OwnerVipLevel) return false;
      if(!itemInfo_.Equals(other.itemInfo_)) return false;
      if (SittingOut != other.SittingOut) return false;
      if (SignupType != other.SignupType) return false;
      if (DescType != other.DescType) return false;
      if (Location != other.Location) return false;
      if(!platformLimits_.Equals(other.platformLimits_)) return false;
      if (GameMode != other.GameMode) return false;
      if (RebateRate != other.RebateRate) return false;
      if (PoolLimit != other.PoolLimit) return false;
      if(!officialTags_.Equals(other.officialTags_)) return false;
      if (MatchId != other.MatchId) return false;
      if (OfficialPopup != other.OfficialPopup) return false;
      if (OfficialPopupTime != other.OfficialPopupTime) return false;
      if (FirstSpecialShow != other.FirstSpecialShow) return false;
      if (SpecialOrder != other.SpecialOrder) return false;
      if(!shieldingPlatforms_.Equals(other.shieldingPlatforms_)) return false;
      if (Moduleid != other.Moduleid) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (OfficialRdType != other.OfficialRdType) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (IsSuperLeague != other.IsSuperLeague) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (Passwd != other.Passwd) return false;
      if (MaxRewardRatio != other.MaxRewardRatio) return false;
      if (PauseAutoCreateTime != other.PauseAutoCreateTime) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (RewardMode != other.RewardMode) return false;
      if (ChargeRatio != other.ChargeRatio) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (UpblindTimeAfterRebuyEnded != other.UpblindTimeAfterRebuyEnded) return false;
      if (UpblindTimeAfterFinalTable != other.UpblindTimeAfterFinalTable) return false;
      if (Ppstid != other.Ppstid) return false;
      if (PpstRoomAuthority != other.PpstRoomAuthority) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasOwnerid) hash ^= Ownerid.GetHashCode();
      if (HasOwnerName) hash ^= OwnerName.GetHashCode();
      if (HasOwnerIcon) hash ^= OwnerIcon.GetHashCode();
      if (HasBlindType) hash ^= BlindType.GetHashCode();
      hash ^= blindList_.GetHashCode();
      hash ^= anteList_.GetHashCode();
      if (HasUpblindTime) hash ^= UpblindTime.GetHashCode();
      if (HasBuyin) hash ^= Buyin.GetHashCode();
      if (HasBeginChips) hash ^= BeginChips.GetHashCode();
      if (HasActionTime) hash ^= ActionTime.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasAuthLimit) hash ^= AuthLimit.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasCharge) hash ^= Charge.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasItemName) hash ^= ItemName.GetHashCode();
      if (HasPriority) hash ^= Priority.GetHashCode();
      if (HasClubOwnerid) hash ^= ClubOwnerid.GetHashCode();
      if (HasClubIcon) hash ^= ClubIcon.GetHashCode();
      if (HasTempid) hash ^= Tempid.GetHashCode();
      if (HasOfficial) hash ^= Official.GetHashCode();
      if (HasFixedReward) hash ^= FixedReward.GetHashCode();
      hash ^= rewardInfo_.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasGpsDistanceLimit) hash ^= GpsDistanceLimit.GetHashCode();
      if (HasRoomMode) hash ^= RoomMode.GetHashCode();
      if (HasOwnerVipLevel) hash ^= OwnerVipLevel.GetHashCode();
      hash ^= itemInfo_.GetHashCode();
      if (HasSittingOut) hash ^= SittingOut.GetHashCode();
      if (HasSignupType) hash ^= SignupType.GetHashCode();
      if (HasDescType) hash ^= DescType.GetHashCode();
      if (HasLocation) hash ^= Location.GetHashCode();
      hash ^= platformLimits_.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasRebateRate) hash ^= RebateRate.GetHashCode();
      if (HasPoolLimit) hash ^= PoolLimit.GetHashCode();
      hash ^= officialTags_.GetHashCode();
      if (HasMatchId) hash ^= MatchId.GetHashCode();
      if (HasOfficialPopup) hash ^= OfficialPopup.GetHashCode();
      if (HasOfficialPopupTime) hash ^= OfficialPopupTime.GetHashCode();
      if (HasFirstSpecialShow) hash ^= FirstSpecialShow.GetHashCode();
      if (HasSpecialOrder) hash ^= SpecialOrder.GetHashCode();
      hash ^= shieldingPlatforms_.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasOfficialRdType) hash ^= OfficialRdType.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasIsSuperLeague) hash ^= IsSuperLeague.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasPasswd) hash ^= Passwd.GetHashCode();
      if (HasMaxRewardRatio) hash ^= MaxRewardRatio.GetHashCode();
      if (HasPauseAutoCreateTime) hash ^= PauseAutoCreateTime.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasRewardMode) hash ^= RewardMode.GetHashCode();
      if (HasChargeRatio) hash ^= ChargeRatio.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasUpblindTimeAfterRebuyEnded) hash ^= UpblindTimeAfterRebuyEnded.GetHashCode();
      if (HasUpblindTimeAfterFinalTable) hash ^= UpblindTimeAfterFinalTable.GetHashCode();
      if (HasPpstid) hash ^= Ppstid.GetHashCode();
      if (HasPpstRoomAuthority) hash ^= PpstRoomAuthority.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasRoomName) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (HasOwnerid) {
        output.WriteRawTag(24);
        output.WriteInt64(Ownerid);
      }
      if (HasOwnerName) {
        output.WriteRawTag(34);
        output.WriteString(OwnerName);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(42);
        output.WriteString(OwnerIcon);
      }
      if (HasBlindType) {
        output.WriteRawTag(48);
        output.WriteInt32(BlindType);
      }
      blindList_.WriteTo(output, _repeated_blindList_codec);
      anteList_.WriteTo(output, _repeated_anteList_codec);
      if (HasUpblindTime) {
        output.WriteRawTag(72);
        output.WriteInt32(UpblindTime);
      }
      if (HasBuyin) {
        output.WriteRawTag(80);
        output.WriteInt64(Buyin);
      }
      if (HasBeginChips) {
        output.WriteRawTag(88);
        output.WriteInt64(BeginChips);
      }
      if (HasActionTime) {
        output.WriteRawTag(96);
        output.WriteInt32(ActionTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(104);
        output.WriteInt32(SeatNum);
      }
      if (HasRoomType) {
        output.WriteRawTag(112);
        output.WriteEnum((int) RoomType);
      }
      if (HasAuthLimit) {
        output.WriteRawTag(120);
        output.WriteBool(AuthLimit);
      }
      if (HasRegion) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Region);
      }
      if (HasClubid) {
        output.WriteRawTag(138, 1);
        output.WriteString(Clubid);
      }
      if (HasPlatform) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (HasClubName) {
        output.WriteRawTag(154, 1);
        output.WriteString(ClubName);
      }
      if (HasBlind) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Blind);
      }
      if (HasAnte) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(Ante);
      }
      if (HasCharge) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Charge);
      }
      if (HasLeagueid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasItemName) {
        output.WriteRawTag(194, 1);
        output.WriteString(ItemName);
      }
      if (HasPriority) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Priority);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(218, 1);
        output.WriteString(ClubIcon);
      }
      if (HasTempid) {
        output.WriteRawTag(226, 1);
        output.WriteString(Tempid);
      }
      if (HasOfficial) {
        output.WriteRawTag(232, 1);
        output.WriteBool(Official);
      }
      if (HasFixedReward) {
        output.WriteRawTag(240, 1);
        output.WriteBool(FixedReward);
      }
      rewardInfo_.WriteTo(output, _repeated_rewardInfo_codec);
      if (HasGpsLimit) {
        output.WriteRawTag(128, 2);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IpLimit);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasRoomMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) RoomMode);
      }
      if (HasOwnerVipLevel) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(OwnerVipLevel);
      }
      itemInfo_.WriteTo(output, _repeated_itemInfo_codec);
      if (HasSittingOut) {
        output.WriteRawTag(176, 2);
        output.WriteBool(SittingOut);
      }
      if (HasSignupType) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) SignupType);
      }
      if (HasDescType) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) DescType);
      }
      if (HasLocation) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) Location);
      }
      platformLimits_.WriteTo(output, _repeated_platformLimits_codec);
      if (HasGameMode) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) GameMode);
      }
      if (HasRebateRate) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(RebateRate);
      }
      if (HasPoolLimit) {
        output.WriteRawTag(232, 2);
        output.WriteBool(PoolLimit);
      }
      officialTags_.WriteTo(output, _repeated_officialTags_codec);
      if (HasMatchId) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(MatchId);
      }
      if (HasOfficialPopup) {
        output.WriteRawTag(128, 3);
        output.WriteEnum((int) OfficialPopup);
      }
      if (HasOfficialPopupTime) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(OfficialPopupTime);
      }
      if (HasFirstSpecialShow) {
        output.WriteRawTag(146, 3);
        output.WriteString(FirstSpecialShow);
      }
      if (HasSpecialOrder) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(SpecialOrder);
      }
      shieldingPlatforms_.WriteTo(output, _repeated_shieldingPlatforms_codec);
      if (HasModuleid) {
        output.WriteRawTag(168, 3);
        output.WriteInt64(Moduleid);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(176, 3);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasOfficialRdType) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(OfficialRdType);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(192, 3);
        output.WriteBool(ForbiddenChat);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasIsSuperLeague) {
        output.WriteRawTag(208, 3);
        output.WriteBool(IsSuperLeague);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(216, 3);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(226, 3);
        output.WriteString(Passwd);
      }
      if (HasMaxRewardRatio) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(MaxRewardRatio);
      }
      if (HasPauseAutoCreateTime) {
        output.WriteRawTag(240, 3);
        output.WriteInt64(PauseAutoCreateTime);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasRewardMode) {
        output.WriteRawTag(128, 4);
        output.WriteEnum((int) RewardMode);
      }
      if (HasChargeRatio) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ChargeRatio);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IsCheckMail);
      }
      if (HasUpblindTimeAfterRebuyEnded) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(UpblindTimeAfterRebuyEnded);
      }
      if (HasUpblindTimeAfterFinalTable) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(UpblindTimeAfterFinalTable);
      }
      if (HasPpstid) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(Ppstid);
      }
      if (HasPpstRoomAuthority) {
        output.WriteRawTag(184, 4);
        output.WriteBool(PpstRoomAuthority);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomid) {
        output.WriteRawTag(10);
        output.WriteString(Roomid);
      }
      if (HasRoomName) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (HasOwnerid) {
        output.WriteRawTag(24);
        output.WriteInt64(Ownerid);
      }
      if (HasOwnerName) {
        output.WriteRawTag(34);
        output.WriteString(OwnerName);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(42);
        output.WriteString(OwnerIcon);
      }
      if (HasBlindType) {
        output.WriteRawTag(48);
        output.WriteInt32(BlindType);
      }
      blindList_.WriteTo(ref output, _repeated_blindList_codec);
      anteList_.WriteTo(ref output, _repeated_anteList_codec);
      if (HasUpblindTime) {
        output.WriteRawTag(72);
        output.WriteInt32(UpblindTime);
      }
      if (HasBuyin) {
        output.WriteRawTag(80);
        output.WriteInt64(Buyin);
      }
      if (HasBeginChips) {
        output.WriteRawTag(88);
        output.WriteInt64(BeginChips);
      }
      if (HasActionTime) {
        output.WriteRawTag(96);
        output.WriteInt32(ActionTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(104);
        output.WriteInt32(SeatNum);
      }
      if (HasRoomType) {
        output.WriteRawTag(112);
        output.WriteEnum((int) RoomType);
      }
      if (HasAuthLimit) {
        output.WriteRawTag(120);
        output.WriteBool(AuthLimit);
      }
      if (HasRegion) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Region);
      }
      if (HasClubid) {
        output.WriteRawTag(138, 1);
        output.WriteString(Clubid);
      }
      if (HasPlatform) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (HasClubName) {
        output.WriteRawTag(154, 1);
        output.WriteString(ClubName);
      }
      if (HasBlind) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Blind);
      }
      if (HasAnte) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(Ante);
      }
      if (HasCharge) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Charge);
      }
      if (HasLeagueid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasItemName) {
        output.WriteRawTag(194, 1);
        output.WriteString(ItemName);
      }
      if (HasPriority) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Priority);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(218, 1);
        output.WriteString(ClubIcon);
      }
      if (HasTempid) {
        output.WriteRawTag(226, 1);
        output.WriteString(Tempid);
      }
      if (HasOfficial) {
        output.WriteRawTag(232, 1);
        output.WriteBool(Official);
      }
      if (HasFixedReward) {
        output.WriteRawTag(240, 1);
        output.WriteBool(FixedReward);
      }
      rewardInfo_.WriteTo(ref output, _repeated_rewardInfo_codec);
      if (HasGpsLimit) {
        output.WriteRawTag(128, 2);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IpLimit);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasRoomMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) RoomMode);
      }
      if (HasOwnerVipLevel) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(OwnerVipLevel);
      }
      itemInfo_.WriteTo(ref output, _repeated_itemInfo_codec);
      if (HasSittingOut) {
        output.WriteRawTag(176, 2);
        output.WriteBool(SittingOut);
      }
      if (HasSignupType) {
        output.WriteRawTag(184, 2);
        output.WriteEnum((int) SignupType);
      }
      if (HasDescType) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) DescType);
      }
      if (HasLocation) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) Location);
      }
      platformLimits_.WriteTo(ref output, _repeated_platformLimits_codec);
      if (HasGameMode) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) GameMode);
      }
      if (HasRebateRate) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(RebateRate);
      }
      if (HasPoolLimit) {
        output.WriteRawTag(232, 2);
        output.WriteBool(PoolLimit);
      }
      officialTags_.WriteTo(ref output, _repeated_officialTags_codec);
      if (HasMatchId) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(MatchId);
      }
      if (HasOfficialPopup) {
        output.WriteRawTag(128, 3);
        output.WriteEnum((int) OfficialPopup);
      }
      if (HasOfficialPopupTime) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(OfficialPopupTime);
      }
      if (HasFirstSpecialShow) {
        output.WriteRawTag(146, 3);
        output.WriteString(FirstSpecialShow);
      }
      if (HasSpecialOrder) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(SpecialOrder);
      }
      shieldingPlatforms_.WriteTo(ref output, _repeated_shieldingPlatforms_codec);
      if (HasModuleid) {
        output.WriteRawTag(168, 3);
        output.WriteInt64(Moduleid);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(176, 3);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasOfficialRdType) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(OfficialRdType);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(192, 3);
        output.WriteBool(ForbiddenChat);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasIsSuperLeague) {
        output.WriteRawTag(208, 3);
        output.WriteBool(IsSuperLeague);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(216, 3);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(226, 3);
        output.WriteString(Passwd);
      }
      if (HasMaxRewardRatio) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(MaxRewardRatio);
      }
      if (HasPauseAutoCreateTime) {
        output.WriteRawTag(240, 3);
        output.WriteInt64(PauseAutoCreateTime);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasRewardMode) {
        output.WriteRawTag(128, 4);
        output.WriteEnum((int) RewardMode);
      }
      if (HasChargeRatio) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ChargeRatio);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IsCheckMail);
      }
      if (HasUpblindTimeAfterRebuyEnded) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(UpblindTimeAfterRebuyEnded);
      }
      if (HasUpblindTimeAfterFinalTable) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(UpblindTimeAfterFinalTable);
      }
      if (HasPpstid) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(Ppstid);
      }
      if (HasPpstRoomAuthority) {
        output.WriteRawTag(184, 4);
        output.WriteBool(PpstRoomAuthority);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasOwnerid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ownerid);
      }
      if (HasOwnerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (HasOwnerIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerIcon);
      }
      if (HasBlindType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlindType);
      }
      size += blindList_.CalculateSize(_repeated_blindList_codec);
      size += anteList_.CalculateSize(_repeated_anteList_codec);
      if (HasUpblindTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpblindTime);
      }
      if (HasBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Buyin);
      }
      if (HasBeginChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginChips);
      }
      if (HasActionTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTime);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasRoomType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasAuthLimit) {
        size += 1 + 1;
      }
      if (HasRegion) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (HasClubid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (HasClubName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasBlind) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasAnte) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasCharge) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Charge);
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasItemName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (HasPriority) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (HasClubOwnerid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClubOwnerid);
      }
      if (HasClubIcon) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubIcon);
      }
      if (HasTempid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tempid);
      }
      if (HasOfficial) {
        size += 2 + 1;
      }
      if (HasFixedReward) {
        size += 2 + 1;
      }
      size += rewardInfo_.CalculateSize(_repeated_rewardInfo_codec);
      if (HasGpsLimit) {
        size += 2 + 1;
      }
      if (HasIpLimit) {
        size += 2 + 1;
      }
      if (HasGpsDistanceLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GpsDistanceLimit);
      }
      if (HasRoomMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
      }
      if (HasOwnerVipLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OwnerVipLevel);
      }
      size += itemInfo_.CalculateSize(_repeated_itemInfo_codec);
      if (HasSittingOut) {
        size += 2 + 1;
      }
      if (HasSignupType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SignupType);
      }
      if (HasDescType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DescType);
      }
      if (HasLocation) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
      }
      size += platformLimits_.CalculateSize(_repeated_platformLimits_codec);
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasRebateRate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebateRate);
      }
      if (HasPoolLimit) {
        size += 2 + 1;
      }
      size += officialTags_.CalculateSize(_repeated_officialTags_codec);
      if (HasMatchId) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MatchId);
      }
      if (HasOfficialPopup) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OfficialPopup);
      }
      if (HasOfficialPopupTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfficialPopupTime);
      }
      if (HasFirstSpecialShow) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstSpecialShow);
      }
      if (HasSpecialOrder) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpecialOrder);
      }
      size += shieldingPlatforms_.CalculateSize(_repeated_shieldingPlatforms_codec);
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasOfficialRdType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfficialRdType);
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasIsSuperLeague) {
        size += 2 + 1;
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasPasswd) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (HasMaxRewardRatio) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxRewardRatio);
      }
      if (HasPauseAutoCreateTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PauseAutoCreateTime);
      }
      if (HasSuperLeagueType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasRewardMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RewardMode);
      }
      if (HasChargeRatio) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChargeRatio);
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasUpblindTimeAfterRebuyEnded) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpblindTimeAfterRebuyEnded);
      }
      if (HasUpblindTimeAfterFinalTable) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpblindTimeAfterFinalTable);
      }
      if (HasPpstid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppstid);
      }
      if (HasPpstRoomAuthority) {
        size += 2 + 1;
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SngRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasOwnerid) {
        Ownerid = other.Ownerid;
      }
      if (other.HasOwnerName) {
        OwnerName = other.OwnerName;
      }
      if (other.HasOwnerIcon) {
        OwnerIcon = other.OwnerIcon;
      }
      if (other.HasBlindType) {
        BlindType = other.BlindType;
      }
      blindList_.Add(other.blindList_);
      anteList_.Add(other.anteList_);
      if (other.HasUpblindTime) {
        UpblindTime = other.UpblindTime;
      }
      if (other.HasBuyin) {
        Buyin = other.Buyin;
      }
      if (other.HasBeginChips) {
        BeginChips = other.BeginChips;
      }
      if (other.HasActionTime) {
        ActionTime = other.ActionTime;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasAuthLimit) {
        AuthLimit = other.AuthLimit;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasCharge) {
        Charge = other.Charge;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasItemName) {
        ItemName = other.ItemName;
      }
      if (other.HasPriority) {
        Priority = other.Priority;
      }
      if (other.HasClubOwnerid) {
        ClubOwnerid = other.ClubOwnerid;
      }
      if (other.HasClubIcon) {
        ClubIcon = other.ClubIcon;
      }
      if (other.HasTempid) {
        Tempid = other.Tempid;
      }
      if (other.HasOfficial) {
        Official = other.Official;
      }
      if (other.HasFixedReward) {
        FixedReward = other.FixedReward;
      }
      rewardInfo_.Add(other.rewardInfo_);
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasGpsDistanceLimit) {
        GpsDistanceLimit = other.GpsDistanceLimit;
      }
      if (other.HasRoomMode) {
        RoomMode = other.RoomMode;
      }
      if (other.HasOwnerVipLevel) {
        OwnerVipLevel = other.OwnerVipLevel;
      }
      itemInfo_.Add(other.itemInfo_);
      if (other.HasSittingOut) {
        SittingOut = other.SittingOut;
      }
      if (other.HasSignupType) {
        SignupType = other.SignupType;
      }
      if (other.HasDescType) {
        DescType = other.DescType;
      }
      if (other.HasLocation) {
        Location = other.Location;
      }
      platformLimits_.Add(other.platformLimits_);
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasRebateRate) {
        RebateRate = other.RebateRate;
      }
      if (other.HasPoolLimit) {
        PoolLimit = other.PoolLimit;
      }
      officialTags_.Add(other.officialTags_);
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasOfficialPopup) {
        OfficialPopup = other.OfficialPopup;
      }
      if (other.HasOfficialPopupTime) {
        OfficialPopupTime = other.OfficialPopupTime;
      }
      if (other.HasFirstSpecialShow) {
        FirstSpecialShow = other.FirstSpecialShow;
      }
      if (other.HasSpecialOrder) {
        SpecialOrder = other.SpecialOrder;
      }
      shieldingPlatforms_.Add(other.shieldingPlatforms_);
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasOfficialRdType) {
        OfficialRdType = other.OfficialRdType;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasIsSuperLeague) {
        IsSuperLeague = other.IsSuperLeague;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasPasswd) {
        Passwd = other.Passwd;
      }
      if (other.HasMaxRewardRatio) {
        MaxRewardRatio = other.MaxRewardRatio;
      }
      if (other.HasPauseAutoCreateTime) {
        PauseAutoCreateTime = other.PauseAutoCreateTime;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasRewardMode) {
        RewardMode = other.RewardMode;
      }
      if (other.HasChargeRatio) {
        ChargeRatio = other.ChargeRatio;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasUpblindTimeAfterRebuyEnded) {
        UpblindTimeAfterRebuyEnded = other.UpblindTimeAfterRebuyEnded;
      }
      if (other.HasUpblindTimeAfterFinalTable) {
        UpblindTimeAfterFinalTable = other.UpblindTimeAfterFinalTable;
      }
      if (other.HasPpstid) {
        Ppstid = other.Ppstid;
      }
      if (other.HasPpstRoomAuthority) {
        PpstRoomAuthority = other.PpstRoomAuthority;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 34: {
            OwnerName = input.ReadString();
            break;
          }
          case 42: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 48: {
            BlindType = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            blindList_.AddEntriesFrom(input, _repeated_blindList_codec);
            break;
          }
          case 66:
          case 64: {
            anteList_.AddEntriesFrom(input, _repeated_anteList_codec);
            break;
          }
          case 72: {
            UpblindTime = input.ReadInt32();
            break;
          }
          case 80: {
            Buyin = input.ReadInt64();
            break;
          }
          case 88: {
            BeginChips = input.ReadInt64();
            break;
          }
          case 96: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 104: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 112: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 120: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 128: {
            Region = input.ReadInt32();
            break;
          }
          case 138: {
            Clubid = input.ReadString();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 154: {
            ClubName = input.ReadString();
            break;
          }
          case 160: {
            Blind = input.ReadInt64();
            break;
          }
          case 168: {
            Ante = input.ReadInt64();
            break;
          }
          case 176: {
            Charge = input.ReadInt64();
            break;
          }
          case 184: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 194: {
            ItemName = input.ReadString();
            break;
          }
          case 200: {
            Priority = input.ReadInt32();
            break;
          }
          case 208: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 218: {
            ClubIcon = input.ReadString();
            break;
          }
          case 226: {
            Tempid = input.ReadString();
            break;
          }
          case 232: {
            Official = input.ReadBool();
            break;
          }
          case 240: {
            FixedReward = input.ReadBool();
            break;
          }
          case 250: {
            rewardInfo_.AddEntriesFrom(input, _repeated_rewardInfo_codec);
            break;
          }
          case 256: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 264: {
            IpLimit = input.ReadBool();
            break;
          }
          case 272: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 280: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 288: {
            OwnerVipLevel = input.ReadUInt32();
            break;
          }
          case 298: {
            itemInfo_.AddEntriesFrom(input, _repeated_itemInfo_codec);
            break;
          }
          case 304: {
            SittingOut = input.ReadBool();
            break;
          }
          case 312: {
            SignupType = (global::Texas.Protocol.SignupType) input.ReadEnum();
            break;
          }
          case 320: {
            DescType = (global::Texas.Protocol.OfficialDescType) input.ReadEnum();
            break;
          }
          case 328: {
            Location = (global::Texas.Protocol.OfficialLocation) input.ReadEnum();
            break;
          }
          case 338: {
            platformLimits_.AddEntriesFrom(input, _repeated_platformLimits_codec);
            break;
          }
          case 344: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 352: {
            RebateRate = input.ReadInt32();
            break;
          }
          case 360: {
            PoolLimit = input.ReadBool();
            break;
          }
          case 370:
          case 368: {
            officialTags_.AddEntriesFrom(input, _repeated_officialTags_codec);
            break;
          }
          case 376: {
            MatchId = input.ReadInt64();
            break;
          }
          case 384: {
            OfficialPopup = (global::Texas.Protocol.OfficialPopup) input.ReadEnum();
            break;
          }
          case 392: {
            OfficialPopupTime = input.ReadInt32();
            break;
          }
          case 402: {
            FirstSpecialShow = input.ReadString();
            break;
          }
          case 408: {
            SpecialOrder = input.ReadInt32();
            break;
          }
          case 418: {
            shieldingPlatforms_.AddEntriesFrom(input, _repeated_shieldingPlatforms_codec);
            break;
          }
          case 424: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 432: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 440: {
            OfficialRdType = input.ReadInt32();
            break;
          }
          case 448: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 456: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 464: {
            IsSuperLeague = input.ReadBool();
            break;
          }
          case 472: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 482: {
            Passwd = input.ReadString();
            break;
          }
          case 488: {
            MaxRewardRatio = input.ReadInt32();
            break;
          }
          case 496: {
            PauseAutoCreateTime = input.ReadInt64();
            break;
          }
          case 504: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 512: {
            RewardMode = (global::Texas.Protocol.MttRewardMode) input.ReadEnum();
            break;
          }
          case 520: {
            ChargeRatio = input.ReadInt32();
            break;
          }
          case 528: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 536: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 544: {
            UpblindTimeAfterRebuyEnded = input.ReadInt32();
            break;
          }
          case 552: {
            UpblindTimeAfterFinalTable = input.ReadInt32();
            break;
          }
          case 560: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 568: {
            PpstRoomAuthority = input.ReadBool();
            break;
          }
          case 576: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Roomid = input.ReadString();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 34: {
            OwnerName = input.ReadString();
            break;
          }
          case 42: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 48: {
            BlindType = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            blindList_.AddEntriesFrom(ref input, _repeated_blindList_codec);
            break;
          }
          case 66:
          case 64: {
            anteList_.AddEntriesFrom(ref input, _repeated_anteList_codec);
            break;
          }
          case 72: {
            UpblindTime = input.ReadInt32();
            break;
          }
          case 80: {
            Buyin = input.ReadInt64();
            break;
          }
          case 88: {
            BeginChips = input.ReadInt64();
            break;
          }
          case 96: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 104: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 112: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 120: {
            AuthLimit = input.ReadBool();
            break;
          }
          case 128: {
            Region = input.ReadInt32();
            break;
          }
          case 138: {
            Clubid = input.ReadString();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 154: {
            ClubName = input.ReadString();
            break;
          }
          case 160: {
            Blind = input.ReadInt64();
            break;
          }
          case 168: {
            Ante = input.ReadInt64();
            break;
          }
          case 176: {
            Charge = input.ReadInt64();
            break;
          }
          case 184: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 194: {
            ItemName = input.ReadString();
            break;
          }
          case 200: {
            Priority = input.ReadInt32();
            break;
          }
          case 208: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 218: {
            ClubIcon = input.ReadString();
            break;
          }
          case 226: {
            Tempid = input.ReadString();
            break;
          }
          case 232: {
            Official = input.ReadBool();
            break;
          }
          case 240: {
            FixedReward = input.ReadBool();
            break;
          }
          case 250: {
            rewardInfo_.AddEntriesFrom(ref input, _repeated_rewardInfo_codec);
            break;
          }
          case 256: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 264: {
            IpLimit = input.ReadBool();
            break;
          }
          case 272: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 280: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 288: {
            OwnerVipLevel = input.ReadUInt32();
            break;
          }
          case 298: {
            itemInfo_.AddEntriesFrom(ref input, _repeated_itemInfo_codec);
            break;
          }
          case 304: {
            SittingOut = input.ReadBool();
            break;
          }
          case 312: {
            SignupType = (global::Texas.Protocol.SignupType) input.ReadEnum();
            break;
          }
          case 320: {
            DescType = (global::Texas.Protocol.OfficialDescType) input.ReadEnum();
            break;
          }
          case 328: {
            Location = (global::Texas.Protocol.OfficialLocation) input.ReadEnum();
            break;
          }
          case 338: {
            platformLimits_.AddEntriesFrom(ref input, _repeated_platformLimits_codec);
            break;
          }
          case 344: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 352: {
            RebateRate = input.ReadInt32();
            break;
          }
          case 360: {
            PoolLimit = input.ReadBool();
            break;
          }
          case 370:
          case 368: {
            officialTags_.AddEntriesFrom(ref input, _repeated_officialTags_codec);
            break;
          }
          case 376: {
            MatchId = input.ReadInt64();
            break;
          }
          case 384: {
            OfficialPopup = (global::Texas.Protocol.OfficialPopup) input.ReadEnum();
            break;
          }
          case 392: {
            OfficialPopupTime = input.ReadInt32();
            break;
          }
          case 402: {
            FirstSpecialShow = input.ReadString();
            break;
          }
          case 408: {
            SpecialOrder = input.ReadInt32();
            break;
          }
          case 418: {
            shieldingPlatforms_.AddEntriesFrom(ref input, _repeated_shieldingPlatforms_codec);
            break;
          }
          case 424: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 432: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 440: {
            OfficialRdType = input.ReadInt32();
            break;
          }
          case 448: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 456: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 464: {
            IsSuperLeague = input.ReadBool();
            break;
          }
          case 472: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 482: {
            Passwd = input.ReadString();
            break;
          }
          case 488: {
            MaxRewardRatio = input.ReadInt32();
            break;
          }
          case 496: {
            PauseAutoCreateTime = input.ReadInt64();
            break;
          }
          case 504: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 512: {
            RewardMode = (global::Texas.Protocol.MttRewardMode) input.ReadEnum();
            break;
          }
          case 520: {
            ChargeRatio = input.ReadInt32();
            break;
          }
          case 528: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 536: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 544: {
            UpblindTimeAfterRebuyEnded = input.ReadInt32();
            break;
          }
          case 552: {
            UpblindTimeAfterFinalTable = input.ReadInt32();
            break;
          }
          case 560: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 568: {
            PpstRoomAuthority = input.ReadBool();
            break;
          }
          case 576: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///进入房间返回，房间外请求也返回，服务器内部hall保存房间信息
  /// </summary>
  public sealed partial class MttRoomInfo : pb::IMessage<MttRoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MttRoomInfo> _parser = new pb::MessageParser<MttRoomInfo>(() => new MttRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MttRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttRoomInfo(MttRoomInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      mttStartTime_ = other.mttStartTime_;
      delayJoinLevel_ = other.delayJoinLevel_;
      rebuyNum_ = other.rebuyNum_;
      addonRate_ = other.addonRate_;
      breakTime_ = other.breakTime_;
      minPlayerNum_ = other.minPlayerNum_;
      maxPlayerNum_ = other.maxPlayerNum_;
      ensureChips_ = other.ensureChips_;
      hunterReward_ = other.hunterReward_;
      scoreRate_ = other.scoreRate_;
      mttSignupTime_ = other.mttSignupTime_;
      startTimestamp_ = other.startTimestamp_;
      totalReward_ = other.totalReward_;
      totalPlayerNum_ = other.totalPlayerNum_;
      currentPlayerNum_ = other.currentPlayerNum_;
      avgChips_ = other.avgChips_;
      currentLevel_ = other.currentLevel_;
      addonTimeLeft_ = other.addonTimeLeft_;
      breakTimeLeft_ = other.breakTimeLeft_;
      pauseTimeLeft_ = other.pauseTimeLeft_;
      mttStatus_ = other.mttStatus_;
      endRebuyTimestamp_ = other.endRebuyTimestamp_;
      now_ = other.now_;
      joinStatus_ = other.joinStatus_;
      rebuyNumLeft_ = other.rebuyNumLeft_;
      addonNumLeft_ = other.addonNumLeft_;
      isPlaying_ = other.isPlaying_;
      tid_ = other.tid_;
      roomMode_ = other.roomMode_;
      isPlayed_ = other.isPlayed_;
      rebuyin_ = other.rebuyin_;
      addonBuyin_ = other.addonBuyin_;
      percentType_ = other.percentType_;
      rebuyCharge_ = other.rebuyCharge_;
      addonCharge_ = other.addonCharge_;
      gameMode_ = other.gameMode_;
      poolLimit_ = other.poolLimit_;
      roomtype_ = other.roomtype_;
      isSnowballHunter_ = other.isSnowballHunter_;
      sittingOutLevel_ = other.sittingOutLevel_;
      isSatellite_ = other.isSatellite_;
      rewardItems_ = other.rewardItems_.Clone();
      rewardAlgorithm_ = other.rewardAlgorithm_;
      ticketPrice_ = other.ticketPrice_;
      totalAddonNum_ = other.totalAddonNum_;
      totalRebuyNum_ = other.totalRebuyNum_;
      moduleid_ = other.moduleid_;
      rebuyType_ = other.rebuyType_;
      addonType_ = other.addonType_;
      rebuyItemName_ = other.rebuyItemName_;
      addonItemName_ = other.addonItemName_;
      rebuyTicketPrice_ = other.rebuyTicketPrice_;
      addonTicketPrice_ = other.addonTicketPrice_;
      isAddon_ = other.isAddon_;
      forbiddenChat_ = other.forbiddenChat_;
      earlyBirdNum_ = other.earlyBirdNum_;
      mttScoreRate_ = other.mttScoreRate_;
      breakTimeWait_ = other.breakTimeWait_;
      breakTimeRest_ = other.breakTimeRest_;
      addonTimeRest_ = other.addonTimeRest_;
      isSuspended_ = other.isSuspended_;
      suspendTimestamp_ = other.suspendTimestamp_;
      suspendTime_ = other.suspendTime_;
      isGroupMtt_ = other.isGroupMtt_;
      groupOverLevel_ = other.groupOverLevel_;
      groupFlag_ = other.groupFlag_;
      groupStage_ = other.groupStage_;
      groupKey_ = other.groupKey_;
      isFreezeOut_ = other.isFreezeOut_;
      totalBuyinTimes_ = other.totalBuyinTimes_;
      promotionFlag_ = other.promotionFlag_;
      recoverType_ = other.recoverType_;
      recoverStartTime_ = other.recoverStartTime_;
      isMttDivide_ = other.isMttDivide_;
      rewardInfo_ = other.rewardInfo_.Clone();
      icmDivideHost_ = other.icmDivideHost_;
      isVotingDivide_ = other.isVotingDivide_;
      voteDivideLeft_ = other.voteDivideLeft_;
      isCanDivide_ = other.isCanDivide_;
      rebuyRate_ = other.rebuyRate_;
      earlyBirdDiscount_ = other.earlyBirdDiscount_;
      leftDivideTimes_ = other.leftDivideTimes_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      rank_ = other.rank_;
      itmPlayerNum_ = other.itmPlayerNum_;
      currentRewardPpcoins_ = other.currentRewardPpcoins_;
      currentRewardTicketPrice_ = other.currentRewardTicketPrice_;
      currentRewardItemPrice_ = other.currentRewardItemPrice_;
      alivePlayerNum_ = other.alivePlayerNum_;
      isPpglTryouts_ = other.isPpglTryouts_;
      isPpglFinal_ = other.isPpglFinal_;
      ppglSeasonInfo_ = other.ppglSeasonInfo_ != null ? other.ppglSeasonInfo_.Clone() : null;
      earlyBirdUsed_ = other.earlyBirdUsed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttRoomInfo Clone() {
      return new MttRoomInfo(this);
    }

    /// <summary>Field number for the "mtt_start_time" field.</summary>
    public const int MttStartTimeFieldNumber = 1;
    private readonly static long MttStartTimeDefaultValue = 0L;

    private long mttStartTime_;
    /// <summary>
    ///创建传来的参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MttStartTime {
      get { if ((_hasBits0 & 1) != 0) { return mttStartTime_; } else { return MttStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mttStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttStartTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mtt_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttStartTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "delay_join_level" field.</summary>
    public const int DelayJoinLevelFieldNumber = 2;
    private readonly static int DelayJoinLevelDefaultValue = 0;

    private int delayJoinLevel_;
    /// <summary>
    ///延迟报名结束的盲注级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DelayJoinLevel {
      get { if ((_hasBits0 & 2) != 0) { return delayJoinLevel_; } else { return DelayJoinLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        delayJoinLevel_ = value;
      }
    }
    /// <summary>Gets whether the "delay_join_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDelayJoinLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "delay_join_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDelayJoinLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rebuy_num" field.</summary>
    public const int RebuyNumFieldNumber = 3;
    private readonly static int RebuyNumDefaultValue = 0;

    private int rebuyNum_;
    /// <summary>
    ///rebuy次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyNum {
      get { if ((_hasBits0 & 4) != 0) { return rebuyNum_; } else { return RebuyNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rebuyNum_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "addon_rate" field.</summary>
    public const int AddonRateFieldNumber = 4;
    private readonly static int AddonRateDefaultValue = 0;

    private int addonRate_;
    /// <summary>
    ///addon筹码是买入的几倍, 12代表1.2倍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddonRate {
      get { if ((_hasBits0 & 8) != 0) { return addonRate_; } else { return AddonRateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        addonRate_ = value;
      }
    }
    /// <summary>Gets whether the "addon_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonRate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "addon_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonRate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "break_time" field.</summary>
    public const int BreakTimeFieldNumber = 5;
    private readonly static int BreakTimeDefaultValue = 0;

    private int breakTime_;
    /// <summary>
    ///是否有中场休息  0 没有  1 有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BreakTime {
      get { if ((_hasBits0 & 16) != 0) { return breakTime_; } else { return BreakTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        breakTime_ = value;
      }
    }
    /// <summary>Gets whether the "break_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBreakTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "break_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBreakTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "min_player_num" field.</summary>
    public const int MinPlayerNumFieldNumber = 6;
    private readonly static int MinPlayerNumDefaultValue = 0;

    private int minPlayerNum_;
    /// <summary>
    ///人数下限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinPlayerNum {
      get { if ((_hasBits0 & 32) != 0) { return minPlayerNum_; } else { return MinPlayerNumDefaultValue; } }
      set {
        _hasBits0 |= 32;
        minPlayerNum_ = value;
      }
    }
    /// <summary>Gets whether the "min_player_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinPlayerNum {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "min_player_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinPlayerNum() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "max_player_num" field.</summary>
    public const int MaxPlayerNumFieldNumber = 7;
    private readonly static int MaxPlayerNumDefaultValue = 0;

    private int maxPlayerNum_;
    /// <summary>
    ///人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxPlayerNum {
      get { if ((_hasBits0 & 64) != 0) { return maxPlayerNum_; } else { return MaxPlayerNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        maxPlayerNum_ = value;
      }
    }
    /// <summary>Gets whether the "max_player_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxPlayerNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "max_player_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxPlayerNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ensure_chips" field.</summary>
    public const int EnsureChipsFieldNumber = 24;
    private readonly static long EnsureChipsDefaultValue = 0L;

    private long ensureChips_;
    /// <summary>
    ///保底奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EnsureChips {
      get { if ((_hasBits0 & 8388608) != 0) { return ensureChips_; } else { return EnsureChipsDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        ensureChips_ = value;
      }
    }
    /// <summary>Gets whether the "ensure_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnsureChips {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "ensure_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnsureChips() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "hunter_reward" field.</summary>
    public const int HunterRewardFieldNumber = 25;
    private readonly static long HunterRewardDefaultValue = 0L;

    private long hunterReward_;
    /// <summary>
    ///猎人奖金  为0表示普通赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HunterReward {
      get { if ((_hasBits0 & 16777216) != 0) { return hunterReward_; } else { return HunterRewardDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        hunterReward_ = value;
      }
    }
    /// <summary>Gets whether the "hunter_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHunterReward {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "hunter_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHunterReward() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "score_rate" field.</summary>
    public const int ScoreRateFieldNumber = 26;
    private readonly static double ScoreRateDefaultValue = 0D;

    private double scoreRate_;
    /// <summary>
    ///积分倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ScoreRate {
      get { if ((_hasBits0 & 33554432) != 0) { return scoreRate_; } else { return ScoreRateDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        scoreRate_ = value;
      }
    }
    /// <summary>Gets whether the "score_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScoreRate {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "score_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScoreRate() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "mtt_signup_time" field.</summary>
    public const int MttSignupTimeFieldNumber = 27;
    private readonly static long MttSignupTimeDefaultValue = 0L;

    private long mttSignupTime_;
    /// <summary>
    ///开始报名的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MttSignupTime {
      get { if ((_hasBits0 & 67108864) != 0) { return mttSignupTime_; } else { return MttSignupTimeDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        mttSignupTime_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_signup_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttSignupTime {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "mtt_signup_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttSignupTime() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 8;
    private readonly static long StartTimestampDefaultValue = 0L;

    private long startTimestamp_;
    /// <summary>
    ///mtt状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartTimestamp {
      get { if ((_hasBits0 & 128) != 0) { return startTimestamp_; } else { return StartTimestampDefaultValue; } }
      set {
        _hasBits0 |= 128;
        startTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "start_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartTimestamp {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "start_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartTimestamp() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "total_reward" field.</summary>
    public const int TotalRewardFieldNumber = 9;
    private readonly static long TotalRewardDefaultValue = 0L;

    private long totalReward_;
    /// <summary>
    ///奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalReward {
      get { if ((_hasBits0 & 256) != 0) { return totalReward_; } else { return TotalRewardDefaultValue; } }
      set {
        _hasBits0 |= 256;
        totalReward_ = value;
      }
    }
    /// <summary>Gets whether the "total_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalReward {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "total_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalReward() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "total_player_num" field.</summary>
    public const int TotalPlayerNumFieldNumber = 10;
    private readonly static int TotalPlayerNumDefaultValue = 0;

    private int totalPlayerNum_;
    /// <summary>
    ///总参赛人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalPlayerNum {
      get { if ((_hasBits0 & 512) != 0) { return totalPlayerNum_; } else { return TotalPlayerNumDefaultValue; } }
      set {
        _hasBits0 |= 512;
        totalPlayerNum_ = value;
      }
    }
    /// <summary>Gets whether the "total_player_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalPlayerNum {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "total_player_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalPlayerNum() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "current_player_num" field.</summary>
    public const int CurrentPlayerNumFieldNumber = 11;
    private readonly static int CurrentPlayerNumDefaultValue = 0;

    private int currentPlayerNum_;
    /// <summary>
    ///当前参赛人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentPlayerNum {
      get { if ((_hasBits0 & 1024) != 0) { return currentPlayerNum_; } else { return CurrentPlayerNumDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        currentPlayerNum_ = value;
      }
    }
    /// <summary>Gets whether the "current_player_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentPlayerNum {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "current_player_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentPlayerNum() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "avg_chips" field.</summary>
    public const int AvgChipsFieldNumber = 12;
    private readonly static long AvgChipsDefaultValue = 0L;

    private long avgChips_;
    /// <summary>
    ///平均筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AvgChips {
      get { if ((_hasBits0 & 2048) != 0) { return avgChips_; } else { return AvgChipsDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        avgChips_ = value;
      }
    }
    /// <summary>Gets whether the "avg_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAvgChips {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "avg_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAvgChips() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "current_level" field.</summary>
    public const int CurrentLevelFieldNumber = 13;
    private readonly static int CurrentLevelDefaultValue = 0;

    private int currentLevel_;
    /// <summary>
    ///当前盲注级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentLevel {
      get { if ((_hasBits0 & 4096) != 0) { return currentLevel_; } else { return CurrentLevelDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        currentLevel_ = value;
      }
    }
    /// <summary>Gets whether the "current_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentLevel {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "current_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentLevel() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "addon_time_left" field.</summary>
    public const int AddonTimeLeftFieldNumber = 14;
    private readonly static int AddonTimeLeftDefaultValue = 0;

    private int addonTimeLeft_;
    /// <summary>
    ///add on休息剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddonTimeLeft {
      get { if ((_hasBits0 & 8192) != 0) { return addonTimeLeft_; } else { return AddonTimeLeftDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        addonTimeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "addon_time_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonTimeLeft {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "addon_time_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonTimeLeft() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "break_time_left" field.</summary>
    public const int BreakTimeLeftFieldNumber = 15;
    private readonly static int BreakTimeLeftDefaultValue = 0;

    private int breakTimeLeft_;
    /// <summary>
    ///中场休息剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BreakTimeLeft {
      get { if ((_hasBits0 & 16384) != 0) { return breakTimeLeft_; } else { return BreakTimeLeftDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        breakTimeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "break_time_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBreakTimeLeft {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "break_time_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBreakTimeLeft() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "pause_time_left" field.</summary>
    public const int PauseTimeLeftFieldNumber = 38;
    private readonly static int PauseTimeLeftDefaultValue = 0;

    private int pauseTimeLeft_;
    /// <summary>
    ///暂停剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PauseTimeLeft {
      get { if ((_hasBits1 & 32) != 0) { return pauseTimeLeft_; } else { return PauseTimeLeftDefaultValue; } }
      set {
        _hasBits1 |= 32;
        pauseTimeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "pause_time_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPauseTimeLeft {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "pause_time_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPauseTimeLeft() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "mtt_status" field.</summary>
    public const int MttStatusFieldNumber = 18;
    private readonly static int MttStatusDefaultValue = 0;

    private int mttStatus_;
    /// <summary>
    /// 1 未开赛  2 已经开赛，还能延迟登记  3 已经开赛，不能延迟登记  4 已经结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MttStatus {
      get { if ((_hasBits0 & 131072) != 0) { return mttStatus_; } else { return MttStatusDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        mttStatus_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttStatus {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "mtt_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttStatus() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "end_rebuy_timestamp" field.</summary>
    public const int EndRebuyTimestampFieldNumber = 19;
    private readonly static long EndRebuyTimestampDefaultValue = 0L;

    private long endRebuyTimestamp_;
    /// <summary>
    ///截止报名时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndRebuyTimestamp {
      get { if ((_hasBits0 & 262144) != 0) { return endRebuyTimestamp_; } else { return EndRebuyTimestampDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        endRebuyTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "end_rebuy_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndRebuyTimestamp {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "end_rebuy_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndRebuyTimestamp() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "now" field.</summary>
    public const int NowFieldNumber = 20;
    private readonly static long NowDefaultValue = 0L;

    private long now_;
    /// <summary>
    ///当前时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Now {
      get { if ((_hasBits0 & 524288) != 0) { return now_; } else { return NowDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        now_ = value;
      }
    }
    /// <summary>Gets whether the "now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNow {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "now" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNow() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "join_status" field.</summary>
    public const int JoinStatusFieldNumber = 16;
    private readonly static int JoinStatusDefaultValue = 0;

    private int joinStatus_;
    /// <summary>
    ///个人信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinStatus {
      get { if ((_hasBits0 & 32768) != 0) { return joinStatus_; } else { return JoinStatusDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        joinStatus_ = value;
      }
    }
    /// <summary>Gets whether the "join_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJoinStatus {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "join_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJoinStatus() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "rebuy_num_left" field.</summary>
    public const int RebuyNumLeftFieldNumber = 17;
    private readonly static int RebuyNumLeftDefaultValue = 0;

    private int rebuyNumLeft_;
    /// <summary>
    ///rebuy 剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyNumLeft {
      get { if ((_hasBits0 & 65536) != 0) { return rebuyNumLeft_; } else { return RebuyNumLeftDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        rebuyNumLeft_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_num_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyNumLeft {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_num_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyNumLeft() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "addon_num_left" field.</summary>
    public const int AddonNumLeftFieldNumber = 21;
    private readonly static int AddonNumLeftDefaultValue = 0;

    private int addonNumLeft_;
    /// <summary>
    ///addon 剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddonNumLeft {
      get { if ((_hasBits0 & 1048576) != 0) { return addonNumLeft_; } else { return AddonNumLeftDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        addonNumLeft_ = value;
      }
    }
    /// <summary>Gets whether the "addon_num_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonNumLeft {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "addon_num_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonNumLeft() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 22;
    private readonly static bool IsPlayingDefaultValue = false;

    private bool isPlaying_;
    /// <summary>
    ///是否在房间内打牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlaying {
      get { if ((_hasBits0 & 2097152) != 0) { return isPlaying_; } else { return IsPlayingDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        isPlaying_ = value;
      }
    }
    /// <summary>Gets whether the "is_playing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPlaying {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "is_playing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPlaying() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 23;
    private readonly static int TidDefaultValue = 0;

    private int tid_;
    /// <summary>
    ///在哪个桌子打牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tid {
      get { if ((_hasBits0 & 4194304) != 0) { return tid_; } else { return TidDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        tid_ = value;
      }
    }
    /// <summary>Gets whether the "tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTid {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTid() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "room_mode" field.</summary>
    public const int RoomModeFieldNumber = 28;
    private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

    private global::Texas.Protocol.RoomMode roomMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomMode RoomMode {
      get { if ((_hasBits0 & 134217728) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        roomMode_ = value;
      }
    }
    /// <summary>Gets whether the "room_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomMode {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "room_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomMode() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "is_played" field.</summary>
    public const int IsPlayedFieldNumber = 29;
    private readonly static bool IsPlayedDefaultValue = false;

    private bool isPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlayed {
      get { if ((_hasBits0 & 268435456) != 0) { return isPlayed_; } else { return IsPlayedDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        isPlayed_ = value;
      }
    }
    /// <summary>Gets whether the "is_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPlayed {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "is_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPlayed() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "rebuyin" field.</summary>
    public const int RebuyinFieldNumber = 30;
    private readonly static long RebuyinDefaultValue = 0L;

    private long rebuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Rebuyin {
      get { if ((_hasBits0 & 536870912) != 0) { return rebuyin_; } else { return RebuyinDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        rebuyin_ = value;
      }
    }
    /// <summary>Gets whether the "rebuyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyin {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "rebuyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyin() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "addon_buyin" field.</summary>
    public const int AddonBuyinFieldNumber = 31;
    private readonly static long AddonBuyinDefaultValue = 0L;

    private long addonBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AddonBuyin {
      get { if ((_hasBits0 & 1073741824) != 0) { return addonBuyin_; } else { return AddonBuyinDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        addonBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "addon_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonBuyin {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "addon_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonBuyin() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "percent_type" field.</summary>
    public const int PercentTypeFieldNumber = 32;
    private readonly static global::Texas.Protocol.MttRewardPercentType PercentTypeDefaultValue = global::Texas.Protocol.MttRewardPercentType.MttTenPercent;

    private global::Texas.Protocol.MttRewardPercentType percentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.MttRewardPercentType PercentType {
      get { if ((_hasBits0 & -2147483648) != 0) { return percentType_; } else { return PercentTypeDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        percentType_ = value;
      }
    }
    /// <summary>Gets whether the "percent_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPercentType {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "percent_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPercentType() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "rebuy_charge" field.</summary>
    public const int RebuyChargeFieldNumber = 33;
    private readonly static long RebuyChargeDefaultValue = 0L;

    private long rebuyCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RebuyCharge {
      get { if ((_hasBits1 & 1) != 0) { return rebuyCharge_; } else { return RebuyChargeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        rebuyCharge_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_charge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyCharge {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_charge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyCharge() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "addon_charge" field.</summary>
    public const int AddonChargeFieldNumber = 34;
    private readonly static long AddonChargeDefaultValue = 0L;

    private long addonCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AddonCharge {
      get { if ((_hasBits1 & 2) != 0) { return addonCharge_; } else { return AddonChargeDefaultValue; } }
      set {
        _hasBits1 |= 2;
        addonCharge_ = value;
      }
    }
    /// <summary>Gets whether the "addon_charge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonCharge {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "addon_charge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonCharge() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 35;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits1 & 4) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits1 |= 4;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "pool_limit" field.</summary>
    public const int PoolLimitFieldNumber = 36;
    private readonly static bool PoolLimitDefaultValue = false;

    private bool poolLimit_;
    /// <summary>
    ///底池限注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PoolLimit {
      get { if ((_hasBits1 & 8) != 0) { return poolLimit_; } else { return PoolLimitDefaultValue; } }
      set {
        _hasBits1 |= 8;
        poolLimit_ = value;
      }
    }
    /// <summary>Gets whether the "pool_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPoolLimit {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pool_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPoolLimit() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "roomtype" field.</summary>
    public const int RoomtypeFieldNumber = 37;
    private readonly static global::Texas.Protocol.RoomType RoomtypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType Roomtype {
      get { if ((_hasBits1 & 16) != 0) { return roomtype_; } else { return RoomtypeDefaultValue; } }
      set {
        _hasBits1 |= 16;
        roomtype_ = value;
      }
    }
    /// <summary>Gets whether the "roomtype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomtype {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "roomtype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomtype() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "is_snowball_hunter" field.</summary>
    public const int IsSnowballHunterFieldNumber = 39;
    private readonly static bool IsSnowballHunterDefaultValue = false;

    private bool isSnowballHunter_;
    /// <summary>
    /// 是否滚雪球猎人赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSnowballHunter {
      get { if ((_hasBits1 & 64) != 0) { return isSnowballHunter_; } else { return IsSnowballHunterDefaultValue; } }
      set {
        _hasBits1 |= 64;
        isSnowballHunter_ = value;
      }
    }
    /// <summary>Gets whether the "is_snowball_hunter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSnowballHunter {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_snowball_hunter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSnowballHunter() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "sitting_out_level" field.</summary>
    public const int SittingOutLevelFieldNumber = 40;
    private readonly static int SittingOutLevelDefaultValue = 0;

    private int sittingOutLevel_;
    /// <summary>
    /// 在该级别时将玩家从sitting out踢起并返回报名费,有效值:0 &lt; level &lt; delay_join_level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SittingOutLevel {
      get { if ((_hasBits1 & 128) != 0) { return sittingOutLevel_; } else { return SittingOutLevelDefaultValue; } }
      set {
        _hasBits1 |= 128;
        sittingOutLevel_ = value;
      }
    }
    /// <summary>Gets whether the "sitting_out_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSittingOutLevel {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "sitting_out_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSittingOutLevel() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "is_satellite" field.</summary>
    public const int IsSatelliteFieldNumber = 41;
    private readonly static bool IsSatelliteDefaultValue = false;

    private bool isSatellite_;
    /// <summary>
    /// 是否是卫星赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSatellite {
      get { if ((_hasBits1 & 256) != 0) { return isSatellite_; } else { return IsSatelliteDefaultValue; } }
      set {
        _hasBits1 |= 256;
        isSatellite_ = value;
      }
    }
    /// <summary>Gets whether the "is_satellite" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSatellite {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_satellite" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSatellite() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "reward_items" field.</summary>
    public const int RewardItemsFieldNumber = 42;
    private static readonly pb::FieldCodec<global::Texas.Protocol.RewardConfigureItem> _repeated_rewardItems_codec
        = pb::FieldCodec.ForMessage(338, global::Texas.Protocol.RewardConfigureItem.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.RewardConfigureItem> rewardItems_ = new pbc::RepeatedField<global::Texas.Protocol.RewardConfigureItem>();
    /// <summary>
    /// 配置奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.RewardConfigureItem> RewardItems {
      get { return rewardItems_; }
    }

    /// <summary>Field number for the "reward_algorithm" field.</summary>
    public const int RewardAlgorithmFieldNumber = 43;
    private readonly static int RewardAlgorithmDefaultValue = 0;

    private int rewardAlgorithm_;
    /// <summary>
    /// 奖池算法,0:原有(按奖励表分配),1:金币浮动;2:门票浮动;3:实物浮动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardAlgorithm {
      get { if ((_hasBits1 & 512) != 0) { return rewardAlgorithm_; } else { return RewardAlgorithmDefaultValue; } }
      set {
        _hasBits1 |= 512;
        rewardAlgorithm_ = value;
      }
    }
    /// <summary>Gets whether the "reward_algorithm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRewardAlgorithm {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "reward_algorithm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRewardAlgorithm() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "ticket_price" field.</summary>
    public const int TicketPriceFieldNumber = 44;
    private readonly static long TicketPriceDefaultValue = 0L;

    private long ticketPrice_;
    /// <summary>
    /// 门票价值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TicketPrice {
      get { if ((_hasBits1 & 1024) != 0) { return ticketPrice_; } else { return TicketPriceDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        ticketPrice_ = value;
      }
    }
    /// <summary>Gets whether the "ticket_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTicketPrice {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ticket_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicketPrice() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "total_addon_num" field.</summary>
    public const int TotalAddonNumFieldNumber = 45;
    private readonly static int TotalAddonNumDefaultValue = 0;

    private int totalAddonNum_;
    /// <summary>
    ///总addon数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalAddonNum {
      get { if ((_hasBits1 & 2048) != 0) { return totalAddonNum_; } else { return TotalAddonNumDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        totalAddonNum_ = value;
      }
    }
    /// <summary>Gets whether the "total_addon_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalAddonNum {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "total_addon_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalAddonNum() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "total_rebuy_num" field.</summary>
    public const int TotalRebuyNumFieldNumber = 46;
    private readonly static int TotalRebuyNumDefaultValue = 0;

    private int totalRebuyNum_;
    /// <summary>
    ///总rebuy数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalRebuyNum {
      get { if ((_hasBits1 & 4096) != 0) { return totalRebuyNum_; } else { return TotalRebuyNumDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        totalRebuyNum_ = value;
      }
    }
    /// <summary>Gets whether the "total_rebuy_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalRebuyNum {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "total_rebuy_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalRebuyNum() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 47;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    /// when module create room use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits1 & 8192) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "rebuy_type" field.</summary>
    public const int RebuyTypeFieldNumber = 48;
    private readonly static int RebuyTypeDefaultValue = 0;

    private int rebuyType_;
    /// <summary>
    ///rebuy方式 0都可以|1仅金币|2仅门票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyType {
      get { if ((_hasBits1 & 16384) != 0) { return rebuyType_; } else { return RebuyTypeDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        rebuyType_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyType {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyType() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "addon_type" field.</summary>
    public const int AddonTypeFieldNumber = 49;
    private readonly static int AddonTypeDefaultValue = 0;

    private int addonType_;
    /// <summary>
    ///addon方式 0都可以|1仅金币|2仅门票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddonType {
      get { if ((_hasBits1 & 32768) != 0) { return addonType_; } else { return AddonTypeDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        addonType_ = value;
      }
    }
    /// <summary>Gets whether the "addon_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonType {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "addon_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonType() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "rebuy_item_name" field.</summary>
    public const int RebuyItemNameFieldNumber = 50;
    private readonly static string RebuyItemNameDefaultValue = "";

    private string rebuyItemName_;
    /// <summary>
    ///rebuy门票名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebuyItemName {
      get { return rebuyItemName_ ?? RebuyItemNameDefaultValue; }
      set {
        rebuyItemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rebuy_item_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyItemName {
      get { return rebuyItemName_ != null; }
    }
    /// <summary>Clears the value of the "rebuy_item_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyItemName() {
      rebuyItemName_ = null;
    }

    /// <summary>Field number for the "addon_item_name" field.</summary>
    public const int AddonItemNameFieldNumber = 51;
    private readonly static string AddonItemNameDefaultValue = "";

    private string addonItemName_;
    /// <summary>
    ///addon门票名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddonItemName {
      get { return addonItemName_ ?? AddonItemNameDefaultValue; }
      set {
        addonItemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "addon_item_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonItemName {
      get { return addonItemName_ != null; }
    }
    /// <summary>Clears the value of the "addon_item_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonItemName() {
      addonItemName_ = null;
    }

    /// <summary>Field number for the "rebuy_ticket_price" field.</summary>
    public const int RebuyTicketPriceFieldNumber = 52;
    private readonly static long RebuyTicketPriceDefaultValue = 0L;

    private long rebuyTicketPrice_;
    /// <summary>
    /// 门票价值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RebuyTicketPrice {
      get { if ((_hasBits1 & 65536) != 0) { return rebuyTicketPrice_; } else { return RebuyTicketPriceDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        rebuyTicketPrice_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_ticket_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyTicketPrice {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_ticket_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyTicketPrice() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "addon_ticket_price" field.</summary>
    public const int AddonTicketPriceFieldNumber = 53;
    private readonly static long AddonTicketPriceDefaultValue = 0L;

    private long addonTicketPrice_;
    /// <summary>
    /// 门票价值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AddonTicketPrice {
      get { if ((_hasBits1 & 131072) != 0) { return addonTicketPrice_; } else { return AddonTicketPriceDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        addonTicketPrice_ = value;
      }
    }
    /// <summary>Gets whether the "addon_ticket_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonTicketPrice {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "addon_ticket_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonTicketPrice() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "is_addon" field.</summary>
    public const int IsAddonFieldNumber = 54;
    private readonly static bool IsAddonDefaultValue = false;

    private bool isAddon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAddon {
      get { if ((_hasBits1 & 262144) != 0) { return isAddon_; } else { return IsAddonDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        isAddon_ = value;
      }
    }
    /// <summary>Gets whether the "is_addon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAddon {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_addon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAddon() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 55;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits1 & 524288) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "early_bird_num" field.</summary>
    public const int EarlyBirdNumFieldNumber = 56;
    private readonly static int EarlyBirdNumDefaultValue = 0;

    private int earlyBirdNum_;
    /// <summary>
    ///早鸟半价 0：没开启  N: 前N名都能享受早鸟半价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EarlyBirdNum {
      get { if ((_hasBits1 & 1048576) != 0) { return earlyBirdNum_; } else { return EarlyBirdNumDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        earlyBirdNum_ = value;
      }
    }
    /// <summary>Gets whether the "early_bird_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEarlyBirdNum {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "early_bird_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEarlyBirdNum() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "mtt_score_rate" field.</summary>
    public const int MttScoreRateFieldNumber = 57;
    private readonly static int MttScoreRateDefaultValue = 0;

    private int mttScoreRate_;
    /// <summary>
    ///积分倍率(客户端需要的整数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MttScoreRate {
      get { if ((_hasBits1 & 2097152) != 0) { return mttScoreRate_; } else { return MttScoreRateDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        mttScoreRate_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_score_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttScoreRate {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "mtt_score_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttScoreRate() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "break_time_wait" field.</summary>
    public const int BreakTimeWaitFieldNumber = 58;
    private readonly static int BreakTimeWaitDefaultValue = 0;

    private int breakTimeWait_;
    /// <summary>
    ///超级联盟mtt 每隔多长时间进入休息状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BreakTimeWait {
      get { if ((_hasBits1 & 4194304) != 0) { return breakTimeWait_; } else { return BreakTimeWaitDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        breakTimeWait_ = value;
      }
    }
    /// <summary>Gets whether the "break_time_wait" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBreakTimeWait {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "break_time_wait" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBreakTimeWait() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "break_time_rest" field.</summary>
    public const int BreakTimeRestFieldNumber = 59;
    private readonly static int BreakTimeRestDefaultValue = 0;

    private int breakTimeRest_;
    /// <summary>
    ///休息持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BreakTimeRest {
      get { if ((_hasBits1 & 8388608) != 0) { return breakTimeRest_; } else { return BreakTimeRestDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        breakTimeRest_ = value;
      }
    }
    /// <summary>Gets whether the "break_time_rest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBreakTimeRest {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "break_time_rest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBreakTimeRest() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "addon_time_rest" field.</summary>
    public const int AddonTimeRestFieldNumber = 60;
    private readonly static int AddonTimeRestDefaultValue = 0;

    private int addonTimeRest_;
    /// <summary>
    ///超级联盟mtt 的add-on时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddonTimeRest {
      get { if ((_hasBits1 & 16777216) != 0) { return addonTimeRest_; } else { return AddonTimeRestDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        addonTimeRest_ = value;
      }
    }
    /// <summary>Gets whether the "addon_time_rest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonTimeRest {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "addon_time_rest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonTimeRest() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "is_suspended" field.</summary>
    public const int IsSuspendedFieldNumber = 61;
    private readonly static bool IsSuspendedDefaultValue = false;

    private bool isSuspended_;
    /// <summary>
    /// mtt挂起暂停相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSuspended {
      get { if ((_hasBits1 & 33554432) != 0) { return isSuspended_; } else { return IsSuspendedDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        isSuspended_ = value;
      }
    }
    /// <summary>Gets whether the "is_suspended" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSuspended {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "is_suspended" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSuspended() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "suspend_timestamp" field.</summary>
    public const int SuspendTimestampFieldNumber = 62;
    private readonly static long SuspendTimestampDefaultValue = 0L;

    private long suspendTimestamp_;
    /// <summary>
    /// 房间最后一次挂起时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SuspendTimestamp {
      get { if ((_hasBits1 & 67108864) != 0) { return suspendTimestamp_; } else { return SuspendTimestampDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        suspendTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "suspend_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuspendTimestamp {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "suspend_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuspendTimestamp() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "suspend_time" field.</summary>
    public const int SuspendTimeFieldNumber = 63;
    private readonly static long SuspendTimeDefaultValue = 0L;

    private long suspendTime_;
    /// <summary>
    /// 挂起恢复 总流逝时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SuspendTime {
      get { if ((_hasBits1 & 134217728) != 0) { return suspendTime_; } else { return SuspendTimeDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        suspendTime_ = value;
      }
    }
    /// <summary>Gets whether the "suspend_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuspendTime {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "suspend_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuspendTime() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "is_group_mtt" field.</summary>
    public const int IsGroupMttFieldNumber = 64;
    private readonly static bool IsGroupMttDefaultValue = false;

    private bool isGroupMtt_;
    /// <summary>
    ///是否分组赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGroupMtt {
      get { if ((_hasBits1 & 268435456) != 0) { return isGroupMtt_; } else { return IsGroupMttDefaultValue; } }
      set {
        _hasBits1 |= 268435456;
        isGroupMtt_ = value;
      }
    }
    /// <summary>Gets whether the "is_group_mtt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGroupMtt {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "is_group_mtt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGroupMtt() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "group_over_level" field.</summary>
    public const int GroupOverLevelFieldNumber = 65;
    private readonly static int GroupOverLevelDefaultValue = 0;

    private int groupOverLevel_;
    /// <summary>
    ///比赛结束的级别，大于0有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupOverLevel {
      get { if ((_hasBits1 & 536870912) != 0) { return groupOverLevel_; } else { return GroupOverLevelDefaultValue; } }
      set {
        _hasBits1 |= 536870912;
        groupOverLevel_ = value;
      }
    }
    /// <summary>Gets whether the "group_over_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroupOverLevel {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "group_over_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroupOverLevel() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "group_flag" field.</summary>
    public const int GroupFlagFieldNumber = 66;
    private readonly static string GroupFlagDefaultValue = "";

    private string groupFlag_;
    /// <summary>
    /// 分组赛的标记, 小组赛A-E, day2是M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GroupFlag {
      get { return groupFlag_ ?? GroupFlagDefaultValue; }
      set {
        groupFlag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "group_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroupFlag {
      get { return groupFlag_ != null; }
    }
    /// <summary>Clears the value of the "group_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroupFlag() {
      groupFlag_ = null;
    }

    /// <summary>Field number for the "group_stage" field.</summary>
    public const int GroupStageFieldNumber = 67;
    private readonly static int GroupStageDefaultValue = 0;

    private int groupStage_;
    /// <summary>
    ///分组赛的阶段, 小组赛是1, day2 是2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupStage {
      get { if ((_hasBits1 & 1073741824) != 0) { return groupStage_; } else { return GroupStageDefaultValue; } }
      set {
        _hasBits1 |= 1073741824;
        groupStage_ = value;
      }
    }
    /// <summary>Gets whether the "group_stage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroupStage {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "group_stage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroupStage() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "group_key" field.</summary>
    public const int GroupKeyFieldNumber = 68;
    private readonly static string GroupKeyDefaultValue = "";

    private string groupKey_;
    /// <summary>
    /// 分组赛所有比赛关联的key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GroupKey {
      get { return groupKey_ ?? GroupKeyDefaultValue; }
      set {
        groupKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "group_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroupKey {
      get { return groupKey_ != null; }
    }
    /// <summary>Clears the value of the "group_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroupKey() {
      groupKey_ = null;
    }

    /// <summary>Field number for the "is_freeze_out" field.</summary>
    public const int IsFreezeOutFieldNumber = 69;
    private readonly static bool IsFreezeOutDefaultValue = false;

    private bool isFreezeOut_;
    /// <summary>
    ///是否只允许玩家只在一个小组赛中报名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFreezeOut {
      get { if ((_hasBits1 & -2147483648) != 0) { return isFreezeOut_; } else { return IsFreezeOutDefaultValue; } }
      set {
        _hasBits1 |= -2147483648;
        isFreezeOut_ = value;
      }
    }
    /// <summary>Gets whether the "is_freeze_out" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFreezeOut {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "is_freeze_out" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFreezeOut() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "total_buyin_times" field.</summary>
    public const int TotalBuyinTimesFieldNumber = 70;
    private readonly static int TotalBuyinTimesDefaultValue = 0;

    private int totalBuyinTimes_;
    /// <summary>
    ///总买入次数(涵盖报名,rebuy,addon)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalBuyinTimes {
      get { if ((_hasBits2 & 1) != 0) { return totalBuyinTimes_; } else { return TotalBuyinTimesDefaultValue; } }
      set {
        _hasBits2 |= 1;
        totalBuyinTimes_ = value;
      }
    }
    /// <summary>Gets whether the "total_buyin_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBuyinTimes {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total_buyin_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBuyinTimes() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "promotion_flag" field.</summary>
    public const int PromotionFlagFieldNumber = 71;
    private readonly static bool PromotionFlagDefaultValue = false;

    private bool promotionFlag_;
    /// <summary>
    ///是否支持新的day2参赛人数展示方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PromotionFlag {
      get { if ((_hasBits2 & 2) != 0) { return promotionFlag_; } else { return PromotionFlagDefaultValue; } }
      set {
        _hasBits2 |= 2;
        promotionFlag_ = value;
      }
    }
    /// <summary>Gets whether the "promotion_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPromotionFlag {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "promotion_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPromotionFlag() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "recover_type" field.</summary>
    public const int RecoverTypeFieldNumber = 72;
    private readonly static int RecoverTypeDefaultValue = 0;

    private int recoverType_;
    /// <summary>
    ///值为1时表示牌桌处于故障暂停状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoverType {
      get { if ((_hasBits2 & 4) != 0) { return recoverType_; } else { return RecoverTypeDefaultValue; } }
      set {
        _hasBits2 |= 4;
        recoverType_ = value;
      }
    }
    /// <summary>Gets whether the "recover_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRecoverType {
      get { return (_hasBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "recover_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRecoverType() {
      _hasBits2 &= ~4;
    }

    /// <summary>Field number for the "recover_start_time" field.</summary>
    public const int RecoverStartTimeFieldNumber = 73;
    private readonly static long RecoverStartTimeDefaultValue = 0L;

    private long recoverStartTime_;
    /// <summary>
    ///牌桌继续的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RecoverStartTime {
      get { if ((_hasBits2 & 8) != 0) { return recoverStartTime_; } else { return RecoverStartTimeDefaultValue; } }
      set {
        _hasBits2 |= 8;
        recoverStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "recover_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRecoverStartTime {
      get { return (_hasBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "recover_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRecoverStartTime() {
      _hasBits2 &= ~8;
    }

    /// <summary>Field number for the "is_mtt_divide" field.</summary>
    public const int IsMttDivideFieldNumber = 74;
    private readonly static bool IsMttDivideDefaultValue = false;

    private bool isMttDivide_;
    /// <summary>
    ///协商分池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMttDivide {
      get { if ((_hasBits2 & 16) != 0) { return isMttDivide_; } else { return IsMttDivideDefaultValue; } }
      set {
        _hasBits2 |= 16;
        isMttDivide_ = value;
      }
    }
    /// <summary>Gets whether the "is_mtt_divide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMttDivide {
      get { return (_hasBits2 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_mtt_divide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMttDivide() {
      _hasBits2 &= ~16;
    }

    /// <summary>Field number for the "reward_info" field.</summary>
    public const int RewardInfoFieldNumber = 75;
    private static readonly pb::FieldCodec<global::Texas.Protocol.MttIcmRewardInfo> _repeated_rewardInfo_codec
        = pb::FieldCodec.ForMessage(602, global::Texas.Protocol.MttIcmRewardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.MttIcmRewardInfo> rewardInfo_ = new pbc::RepeatedField<global::Texas.Protocol.MttIcmRewardInfo>();
    /// <summary>
    ///玩家的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.MttIcmRewardInfo> RewardInfo {
      get { return rewardInfo_; }
    }

    /// <summary>Field number for the "icm_divide_host" field.</summary>
    public const int IcmDivideHostFieldNumber = 76;
    private readonly static long IcmDivideHostDefaultValue = 0L;

    private long icmDivideHost_;
    /// <summary>
    ///正在协商分池时，操作协商分池的host的uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IcmDivideHost {
      get { if ((_hasBits2 & 32) != 0) { return icmDivideHost_; } else { return IcmDivideHostDefaultValue; } }
      set {
        _hasBits2 |= 32;
        icmDivideHost_ = value;
      }
    }
    /// <summary>Gets whether the "icm_divide_host" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIcmDivideHost {
      get { return (_hasBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "icm_divide_host" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIcmDivideHost() {
      _hasBits2 &= ~32;
    }

    /// <summary>Field number for the "is_voting_divide" field.</summary>
    public const int IsVotingDivideFieldNumber = 77;
    private readonly static bool IsVotingDivideDefaultValue = false;

    private bool isVotingDivide_;
    /// <summary>
    ///玩家是否正在协商分池投票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVotingDivide {
      get { if ((_hasBits2 & 64) != 0) { return isVotingDivide_; } else { return IsVotingDivideDefaultValue; } }
      set {
        _hasBits2 |= 64;
        isVotingDivide_ = value;
      }
    }
    /// <summary>Gets whether the "is_voting_divide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVotingDivide {
      get { return (_hasBits2 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_voting_divide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVotingDivide() {
      _hasBits2 &= ~64;
    }

    /// <summary>Field number for the "vote_divide_left" field.</summary>
    public const int VoteDivideLeftFieldNumber = 78;
    private readonly static int VoteDivideLeftDefaultValue = 0;

    private int voteDivideLeft_;
    /// <summary>
    ///协商分池 玩家投票剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VoteDivideLeft {
      get { if ((_hasBits2 & 128) != 0) { return voteDivideLeft_; } else { return VoteDivideLeftDefaultValue; } }
      set {
        _hasBits2 |= 128;
        voteDivideLeft_ = value;
      }
    }
    /// <summary>Gets whether the "vote_divide_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVoteDivideLeft {
      get { return (_hasBits2 & 128) != 0; }
    }
    /// <summary>Clears the value of the "vote_divide_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVoteDivideLeft() {
      _hasBits2 &= ~128;
    }

    /// <summary>Field number for the "is_can_divide" field.</summary>
    public const int IsCanDivideFieldNumber = 79;
    private readonly static bool IsCanDivideDefaultValue = false;

    private bool isCanDivide_;
    /// <summary>
    ///是否有协商分池功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCanDivide {
      get { if ((_hasBits2 & 256) != 0) { return isCanDivide_; } else { return IsCanDivideDefaultValue; } }
      set {
        _hasBits2 |= 256;
        isCanDivide_ = value;
      }
    }
    /// <summary>Gets whether the "is_can_divide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCanDivide {
      get { return (_hasBits2 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_can_divide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCanDivide() {
      _hasBits2 &= ~256;
    }

    /// <summary>Field number for the "rebuy_rate" field.</summary>
    public const int RebuyRateFieldNumber = 88;
    private readonly static int RebuyRateDefaultValue = 0;

    private int rebuyRate_;
    /// <summary>
    ///rebuy筹码是买入的几倍  10是1倍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyRate {
      get { if ((_hasBits2 & 512) != 0) { return rebuyRate_; } else { return RebuyRateDefaultValue; } }
      set {
        _hasBits2 |= 512;
        rebuyRate_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyRate {
      get { return (_hasBits2 & 512) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyRate() {
      _hasBits2 &= ~512;
    }

    /// <summary>Field number for the "early_bird_discount" field.</summary>
    public const int EarlyBirdDiscountFieldNumber = 89;
    private readonly static int EarlyBirdDiscountDefaultValue = 0;

    private int earlyBirdDiscount_;
    /// <summary>
    ///50代表是50%的折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EarlyBirdDiscount {
      get { if ((_hasBits2 & 1024) != 0) { return earlyBirdDiscount_; } else { return EarlyBirdDiscountDefaultValue; } }
      set {
        _hasBits2 |= 1024;
        earlyBirdDiscount_ = value;
      }
    }
    /// <summary>Gets whether the "early_bird_discount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEarlyBirdDiscount {
      get { return (_hasBits2 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "early_bird_discount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEarlyBirdDiscount() {
      _hasBits2 &= ~1024;
    }

    /// <summary>Field number for the "left_divide_times" field.</summary>
    public const int LeftDivideTimesFieldNumber = 90;
    private readonly static int LeftDivideTimesDefaultValue = 0;

    private int leftDivideTimes_;
    /// <summary>
    ///剩餘可發起獎金分配協議的次數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeftDivideTimes {
      get { if ((_hasBits2 & 2048) != 0) { return leftDivideTimes_; } else { return LeftDivideTimesDefaultValue; } }
      set {
        _hasBits2 |= 2048;
        leftDivideTimes_ = value;
      }
    }
    /// <summary>Gets whether the "left_divide_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftDivideTimes {
      get { return (_hasBits2 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "left_divide_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftDivideTimes() {
      _hasBits2 &= ~2048;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 91;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits2 & 4096) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits2 |= 4096;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits2 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits2 &= ~4096;
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 92;
    private readonly static int RankDefaultValue = 0;

    private int rank_;
    /// <summary>
    /// 同MttMyRankInfoBRC 自身排名&amp;獎勵訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { if ((_hasBits2 & 8192) != 0) { return rank_; } else { return RankDefaultValue; } }
      set {
        _hasBits2 |= 8192;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRank {
      get { return (_hasBits2 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRank() {
      _hasBits2 &= ~8192;
    }

    /// <summary>Field number for the "itm_player_num" field.</summary>
    public const int ItmPlayerNumFieldNumber = 93;
    private readonly static int ItmPlayerNumDefaultValue = 0;

    private int itmPlayerNum_;
    /// <summary>
    /// 錢圈人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItmPlayerNum {
      get { if ((_hasBits2 & 16384) != 0) { return itmPlayerNum_; } else { return ItmPlayerNumDefaultValue; } }
      set {
        _hasBits2 |= 16384;
        itmPlayerNum_ = value;
      }
    }
    /// <summary>Gets whether the "itm_player_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItmPlayerNum {
      get { return (_hasBits2 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "itm_player_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItmPlayerNum() {
      _hasBits2 &= ~16384;
    }

    /// <summary>Field number for the "current_reward_ppcoins" field.</summary>
    public const int CurrentRewardPpcoinsFieldNumber = 94;
    private readonly static long CurrentRewardPpcoinsDefaultValue = 0L;

    private long currentRewardPpcoins_;
    /// <summary>
    /// 當前獎勵PP幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrentRewardPpcoins {
      get { if ((_hasBits2 & 32768) != 0) { return currentRewardPpcoins_; } else { return CurrentRewardPpcoinsDefaultValue; } }
      set {
        _hasBits2 |= 32768;
        currentRewardPpcoins_ = value;
      }
    }
    /// <summary>Gets whether the "current_reward_ppcoins" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentRewardPpcoins {
      get { return (_hasBits2 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "current_reward_ppcoins" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentRewardPpcoins() {
      _hasBits2 &= ~32768;
    }

    /// <summary>Field number for the "current_reward_ticket_price" field.</summary>
    public const int CurrentRewardTicketPriceFieldNumber = 95;
    private readonly static long CurrentRewardTicketPriceDefaultValue = 0L;

    private long currentRewardTicketPrice_;
    /// <summary>
    /// 當前獎勵門票價格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrentRewardTicketPrice {
      get { if ((_hasBits2 & 65536) != 0) { return currentRewardTicketPrice_; } else { return CurrentRewardTicketPriceDefaultValue; } }
      set {
        _hasBits2 |= 65536;
        currentRewardTicketPrice_ = value;
      }
    }
    /// <summary>Gets whether the "current_reward_ticket_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentRewardTicketPrice {
      get { return (_hasBits2 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "current_reward_ticket_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentRewardTicketPrice() {
      _hasBits2 &= ~65536;
    }

    /// <summary>Field number for the "current_reward_item_price" field.</summary>
    public const int CurrentRewardItemPriceFieldNumber = 96;
    private readonly static long CurrentRewardItemPriceDefaultValue = 0L;

    private long currentRewardItemPrice_;
    /// <summary>
    /// 當前獎勵實物價格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrentRewardItemPrice {
      get { if ((_hasBits2 & 131072) != 0) { return currentRewardItemPrice_; } else { return CurrentRewardItemPriceDefaultValue; } }
      set {
        _hasBits2 |= 131072;
        currentRewardItemPrice_ = value;
      }
    }
    /// <summary>Gets whether the "current_reward_item_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentRewardItemPrice {
      get { return (_hasBits2 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "current_reward_item_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentRewardItemPrice() {
      _hasBits2 &= ~131072;
    }

    /// <summary>Field number for the "alive_player_num" field.</summary>
    public const int AlivePlayerNumFieldNumber = 97;
    private readonly static long AlivePlayerNumDefaultValue = 0L;

    private long alivePlayerNum_;
    /// <summary>
    /// 當前存活玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AlivePlayerNum {
      get { if ((_hasBits2 & 262144) != 0) { return alivePlayerNum_; } else { return AlivePlayerNumDefaultValue; } }
      set {
        _hasBits2 |= 262144;
        alivePlayerNum_ = value;
      }
    }
    /// <summary>Gets whether the "alive_player_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlivePlayerNum {
      get { return (_hasBits2 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "alive_player_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlivePlayerNum() {
      _hasBits2 &= ~262144;
    }

    /// <summary>Field number for the "is_ppgl_tryouts" field.</summary>
    public const int IsPpglTryoutsFieldNumber = 98;
    private readonly static bool IsPpglTryoutsDefaultValue = false;

    private bool isPpglTryouts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPpglTryouts {
      get { if ((_hasBits2 & 524288) != 0) { return isPpglTryouts_; } else { return IsPpglTryoutsDefaultValue; } }
      set {
        _hasBits2 |= 524288;
        isPpglTryouts_ = value;
      }
    }
    /// <summary>Gets whether the "is_ppgl_tryouts" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPpglTryouts {
      get { return (_hasBits2 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "is_ppgl_tryouts" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPpglTryouts() {
      _hasBits2 &= ~524288;
    }

    /// <summary>Field number for the "is_ppgl_final" field.</summary>
    public const int IsPpglFinalFieldNumber = 99;
    private readonly static bool IsPpglFinalDefaultValue = false;

    private bool isPpglFinal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPpglFinal {
      get { if ((_hasBits2 & 1048576) != 0) { return isPpglFinal_; } else { return IsPpglFinalDefaultValue; } }
      set {
        _hasBits2 |= 1048576;
        isPpglFinal_ = value;
      }
    }
    /// <summary>Gets whether the "is_ppgl_final" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPpglFinal {
      get { return (_hasBits2 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "is_ppgl_final" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPpglFinal() {
      _hasBits2 &= ~1048576;
    }

    /// <summary>Field number for the "ppgl_season_info" field.</summary>
    public const int PpglSeasonInfoFieldNumber = 100;
    private global::Texas.Protocol.PPGLSeasonInfo ppglSeasonInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.PPGLSeasonInfo PpglSeasonInfo {
      get { return ppglSeasonInfo_; }
      set {
        ppglSeasonInfo_ = value;
      }
    }

    /// <summary>Field number for the "early_bird_used" field.</summary>
    public const int EarlyBirdUsedFieldNumber = 101;
    private readonly static int EarlyBirdUsedDefaultValue = 0;

    private int earlyBirdUsed_;
    /// <summary>
    /// 現在已使用掉的早鳥人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EarlyBirdUsed {
      get { if ((_hasBits2 & 2097152) != 0) { return earlyBirdUsed_; } else { return EarlyBirdUsedDefaultValue; } }
      set {
        _hasBits2 |= 2097152;
        earlyBirdUsed_ = value;
      }
    }
    /// <summary>Gets whether the "early_bird_used" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEarlyBirdUsed {
      get { return (_hasBits2 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "early_bird_used" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEarlyBirdUsed() {
      _hasBits2 &= ~2097152;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MttRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MttRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MttStartTime != other.MttStartTime) return false;
      if (DelayJoinLevel != other.DelayJoinLevel) return false;
      if (RebuyNum != other.RebuyNum) return false;
      if (AddonRate != other.AddonRate) return false;
      if (BreakTime != other.BreakTime) return false;
      if (MinPlayerNum != other.MinPlayerNum) return false;
      if (MaxPlayerNum != other.MaxPlayerNum) return false;
      if (EnsureChips != other.EnsureChips) return false;
      if (HunterReward != other.HunterReward) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScoreRate, other.ScoreRate)) return false;
      if (MttSignupTime != other.MttSignupTime) return false;
      if (StartTimestamp != other.StartTimestamp) return false;
      if (TotalReward != other.TotalReward) return false;
      if (TotalPlayerNum != other.TotalPlayerNum) return false;
      if (CurrentPlayerNum != other.CurrentPlayerNum) return false;
      if (AvgChips != other.AvgChips) return false;
      if (CurrentLevel != other.CurrentLevel) return false;
      if (AddonTimeLeft != other.AddonTimeLeft) return false;
      if (BreakTimeLeft != other.BreakTimeLeft) return false;
      if (PauseTimeLeft != other.PauseTimeLeft) return false;
      if (MttStatus != other.MttStatus) return false;
      if (EndRebuyTimestamp != other.EndRebuyTimestamp) return false;
      if (Now != other.Now) return false;
      if (JoinStatus != other.JoinStatus) return false;
      if (RebuyNumLeft != other.RebuyNumLeft) return false;
      if (AddonNumLeft != other.AddonNumLeft) return false;
      if (IsPlaying != other.IsPlaying) return false;
      if (Tid != other.Tid) return false;
      if (RoomMode != other.RoomMode) return false;
      if (IsPlayed != other.IsPlayed) return false;
      if (Rebuyin != other.Rebuyin) return false;
      if (AddonBuyin != other.AddonBuyin) return false;
      if (PercentType != other.PercentType) return false;
      if (RebuyCharge != other.RebuyCharge) return false;
      if (AddonCharge != other.AddonCharge) return false;
      if (GameMode != other.GameMode) return false;
      if (PoolLimit != other.PoolLimit) return false;
      if (Roomtype != other.Roomtype) return false;
      if (IsSnowballHunter != other.IsSnowballHunter) return false;
      if (SittingOutLevel != other.SittingOutLevel) return false;
      if (IsSatellite != other.IsSatellite) return false;
      if(!rewardItems_.Equals(other.rewardItems_)) return false;
      if (RewardAlgorithm != other.RewardAlgorithm) return false;
      if (TicketPrice != other.TicketPrice) return false;
      if (TotalAddonNum != other.TotalAddonNum) return false;
      if (TotalRebuyNum != other.TotalRebuyNum) return false;
      if (Moduleid != other.Moduleid) return false;
      if (RebuyType != other.RebuyType) return false;
      if (AddonType != other.AddonType) return false;
      if (RebuyItemName != other.RebuyItemName) return false;
      if (AddonItemName != other.AddonItemName) return false;
      if (RebuyTicketPrice != other.RebuyTicketPrice) return false;
      if (AddonTicketPrice != other.AddonTicketPrice) return false;
      if (IsAddon != other.IsAddon) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (EarlyBirdNum != other.EarlyBirdNum) return false;
      if (MttScoreRate != other.MttScoreRate) return false;
      if (BreakTimeWait != other.BreakTimeWait) return false;
      if (BreakTimeRest != other.BreakTimeRest) return false;
      if (AddonTimeRest != other.AddonTimeRest) return false;
      if (IsSuspended != other.IsSuspended) return false;
      if (SuspendTimestamp != other.SuspendTimestamp) return false;
      if (SuspendTime != other.SuspendTime) return false;
      if (IsGroupMtt != other.IsGroupMtt) return false;
      if (GroupOverLevel != other.GroupOverLevel) return false;
      if (GroupFlag != other.GroupFlag) return false;
      if (GroupStage != other.GroupStage) return false;
      if (GroupKey != other.GroupKey) return false;
      if (IsFreezeOut != other.IsFreezeOut) return false;
      if (TotalBuyinTimes != other.TotalBuyinTimes) return false;
      if (PromotionFlag != other.PromotionFlag) return false;
      if (RecoverType != other.RecoverType) return false;
      if (RecoverStartTime != other.RecoverStartTime) return false;
      if (IsMttDivide != other.IsMttDivide) return false;
      if(!rewardInfo_.Equals(other.rewardInfo_)) return false;
      if (IcmDivideHost != other.IcmDivideHost) return false;
      if (IsVotingDivide != other.IsVotingDivide) return false;
      if (VoteDivideLeft != other.VoteDivideLeft) return false;
      if (IsCanDivide != other.IsCanDivide) return false;
      if (RebuyRate != other.RebuyRate) return false;
      if (EarlyBirdDiscount != other.EarlyBirdDiscount) return false;
      if (LeftDivideTimes != other.LeftDivideTimes) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      if (Rank != other.Rank) return false;
      if (ItmPlayerNum != other.ItmPlayerNum) return false;
      if (CurrentRewardPpcoins != other.CurrentRewardPpcoins) return false;
      if (CurrentRewardTicketPrice != other.CurrentRewardTicketPrice) return false;
      if (CurrentRewardItemPrice != other.CurrentRewardItemPrice) return false;
      if (AlivePlayerNum != other.AlivePlayerNum) return false;
      if (IsPpglTryouts != other.IsPpglTryouts) return false;
      if (IsPpglFinal != other.IsPpglFinal) return false;
      if (!object.Equals(PpglSeasonInfo, other.PpglSeasonInfo)) return false;
      if (EarlyBirdUsed != other.EarlyBirdUsed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMttStartTime) hash ^= MttStartTime.GetHashCode();
      if (HasDelayJoinLevel) hash ^= DelayJoinLevel.GetHashCode();
      if (HasRebuyNum) hash ^= RebuyNum.GetHashCode();
      if (HasAddonRate) hash ^= AddonRate.GetHashCode();
      if (HasBreakTime) hash ^= BreakTime.GetHashCode();
      if (HasMinPlayerNum) hash ^= MinPlayerNum.GetHashCode();
      if (HasMaxPlayerNum) hash ^= MaxPlayerNum.GetHashCode();
      if (HasEnsureChips) hash ^= EnsureChips.GetHashCode();
      if (HasHunterReward) hash ^= HunterReward.GetHashCode();
      if (HasScoreRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScoreRate);
      if (HasMttSignupTime) hash ^= MttSignupTime.GetHashCode();
      if (HasStartTimestamp) hash ^= StartTimestamp.GetHashCode();
      if (HasTotalReward) hash ^= TotalReward.GetHashCode();
      if (HasTotalPlayerNum) hash ^= TotalPlayerNum.GetHashCode();
      if (HasCurrentPlayerNum) hash ^= CurrentPlayerNum.GetHashCode();
      if (HasAvgChips) hash ^= AvgChips.GetHashCode();
      if (HasCurrentLevel) hash ^= CurrentLevel.GetHashCode();
      if (HasAddonTimeLeft) hash ^= AddonTimeLeft.GetHashCode();
      if (HasBreakTimeLeft) hash ^= BreakTimeLeft.GetHashCode();
      if (HasPauseTimeLeft) hash ^= PauseTimeLeft.GetHashCode();
      if (HasMttStatus) hash ^= MttStatus.GetHashCode();
      if (HasEndRebuyTimestamp) hash ^= EndRebuyTimestamp.GetHashCode();
      if (HasNow) hash ^= Now.GetHashCode();
      if (HasJoinStatus) hash ^= JoinStatus.GetHashCode();
      if (HasRebuyNumLeft) hash ^= RebuyNumLeft.GetHashCode();
      if (HasAddonNumLeft) hash ^= AddonNumLeft.GetHashCode();
      if (HasIsPlaying) hash ^= IsPlaying.GetHashCode();
      if (HasTid) hash ^= Tid.GetHashCode();
      if (HasRoomMode) hash ^= RoomMode.GetHashCode();
      if (HasIsPlayed) hash ^= IsPlayed.GetHashCode();
      if (HasRebuyin) hash ^= Rebuyin.GetHashCode();
      if (HasAddonBuyin) hash ^= AddonBuyin.GetHashCode();
      if (HasPercentType) hash ^= PercentType.GetHashCode();
      if (HasRebuyCharge) hash ^= RebuyCharge.GetHashCode();
      if (HasAddonCharge) hash ^= AddonCharge.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasPoolLimit) hash ^= PoolLimit.GetHashCode();
      if (HasRoomtype) hash ^= Roomtype.GetHashCode();
      if (HasIsSnowballHunter) hash ^= IsSnowballHunter.GetHashCode();
      if (HasSittingOutLevel) hash ^= SittingOutLevel.GetHashCode();
      if (HasIsSatellite) hash ^= IsSatellite.GetHashCode();
      hash ^= rewardItems_.GetHashCode();
      if (HasRewardAlgorithm) hash ^= RewardAlgorithm.GetHashCode();
      if (HasTicketPrice) hash ^= TicketPrice.GetHashCode();
      if (HasTotalAddonNum) hash ^= TotalAddonNum.GetHashCode();
      if (HasTotalRebuyNum) hash ^= TotalRebuyNum.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasRebuyType) hash ^= RebuyType.GetHashCode();
      if (HasAddonType) hash ^= AddonType.GetHashCode();
      if (HasRebuyItemName) hash ^= RebuyItemName.GetHashCode();
      if (HasAddonItemName) hash ^= AddonItemName.GetHashCode();
      if (HasRebuyTicketPrice) hash ^= RebuyTicketPrice.GetHashCode();
      if (HasAddonTicketPrice) hash ^= AddonTicketPrice.GetHashCode();
      if (HasIsAddon) hash ^= IsAddon.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasEarlyBirdNum) hash ^= EarlyBirdNum.GetHashCode();
      if (HasMttScoreRate) hash ^= MttScoreRate.GetHashCode();
      if (HasBreakTimeWait) hash ^= BreakTimeWait.GetHashCode();
      if (HasBreakTimeRest) hash ^= BreakTimeRest.GetHashCode();
      if (HasAddonTimeRest) hash ^= AddonTimeRest.GetHashCode();
      if (HasIsSuspended) hash ^= IsSuspended.GetHashCode();
      if (HasSuspendTimestamp) hash ^= SuspendTimestamp.GetHashCode();
      if (HasSuspendTime) hash ^= SuspendTime.GetHashCode();
      if (HasIsGroupMtt) hash ^= IsGroupMtt.GetHashCode();
      if (HasGroupOverLevel) hash ^= GroupOverLevel.GetHashCode();
      if (HasGroupFlag) hash ^= GroupFlag.GetHashCode();
      if (HasGroupStage) hash ^= GroupStage.GetHashCode();
      if (HasGroupKey) hash ^= GroupKey.GetHashCode();
      if (HasIsFreezeOut) hash ^= IsFreezeOut.GetHashCode();
      if (HasTotalBuyinTimes) hash ^= TotalBuyinTimes.GetHashCode();
      if (HasPromotionFlag) hash ^= PromotionFlag.GetHashCode();
      if (HasRecoverType) hash ^= RecoverType.GetHashCode();
      if (HasRecoverStartTime) hash ^= RecoverStartTime.GetHashCode();
      if (HasIsMttDivide) hash ^= IsMttDivide.GetHashCode();
      hash ^= rewardInfo_.GetHashCode();
      if (HasIcmDivideHost) hash ^= IcmDivideHost.GetHashCode();
      if (HasIsVotingDivide) hash ^= IsVotingDivide.GetHashCode();
      if (HasVoteDivideLeft) hash ^= VoteDivideLeft.GetHashCode();
      if (HasIsCanDivide) hash ^= IsCanDivide.GetHashCode();
      if (HasRebuyRate) hash ^= RebuyRate.GetHashCode();
      if (HasEarlyBirdDiscount) hash ^= EarlyBirdDiscount.GetHashCode();
      if (HasLeftDivideTimes) hash ^= LeftDivideTimes.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (HasRank) hash ^= Rank.GetHashCode();
      if (HasItmPlayerNum) hash ^= ItmPlayerNum.GetHashCode();
      if (HasCurrentRewardPpcoins) hash ^= CurrentRewardPpcoins.GetHashCode();
      if (HasCurrentRewardTicketPrice) hash ^= CurrentRewardTicketPrice.GetHashCode();
      if (HasCurrentRewardItemPrice) hash ^= CurrentRewardItemPrice.GetHashCode();
      if (HasAlivePlayerNum) hash ^= AlivePlayerNum.GetHashCode();
      if (HasIsPpglTryouts) hash ^= IsPpglTryouts.GetHashCode();
      if (HasIsPpglFinal) hash ^= IsPpglFinal.GetHashCode();
      if (ppglSeasonInfo_ != null) hash ^= PpglSeasonInfo.GetHashCode();
      if (HasEarlyBirdUsed) hash ^= EarlyBirdUsed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMttStartTime) {
        output.WriteRawTag(8);
        output.WriteInt64(MttStartTime);
      }
      if (HasDelayJoinLevel) {
        output.WriteRawTag(16);
        output.WriteInt32(DelayJoinLevel);
      }
      if (HasRebuyNum) {
        output.WriteRawTag(24);
        output.WriteInt32(RebuyNum);
      }
      if (HasAddonRate) {
        output.WriteRawTag(32);
        output.WriteInt32(AddonRate);
      }
      if (HasBreakTime) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakTime);
      }
      if (HasMinPlayerNum) {
        output.WriteRawTag(48);
        output.WriteInt32(MinPlayerNum);
      }
      if (HasMaxPlayerNum) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxPlayerNum);
      }
      if (HasStartTimestamp) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTimestamp);
      }
      if (HasTotalReward) {
        output.WriteRawTag(72);
        output.WriteInt64(TotalReward);
      }
      if (HasTotalPlayerNum) {
        output.WriteRawTag(80);
        output.WriteInt32(TotalPlayerNum);
      }
      if (HasCurrentPlayerNum) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrentPlayerNum);
      }
      if (HasAvgChips) {
        output.WriteRawTag(96);
        output.WriteInt64(AvgChips);
      }
      if (HasCurrentLevel) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentLevel);
      }
      if (HasAddonTimeLeft) {
        output.WriteRawTag(112);
        output.WriteInt32(AddonTimeLeft);
      }
      if (HasBreakTimeLeft) {
        output.WriteRawTag(120);
        output.WriteInt32(BreakTimeLeft);
      }
      if (HasJoinStatus) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(JoinStatus);
      }
      if (HasRebuyNumLeft) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RebuyNumLeft);
      }
      if (HasMttStatus) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MttStatus);
      }
      if (HasEndRebuyTimestamp) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(EndRebuyTimestamp);
      }
      if (HasNow) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Now);
      }
      if (HasAddonNumLeft) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(AddonNumLeft);
      }
      if (HasIsPlaying) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsPlaying);
      }
      if (HasTid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Tid);
      }
      if (HasEnsureChips) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(EnsureChips);
      }
      if (HasHunterReward) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(HunterReward);
      }
      if (HasScoreRate) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(ScoreRate);
      }
      if (HasMttSignupTime) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(MttSignupTime);
      }
      if (HasRoomMode) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) RoomMode);
      }
      if (HasIsPlayed) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsPlayed);
      }
      if (HasRebuyin) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(Rebuyin);
      }
      if (HasAddonBuyin) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(AddonBuyin);
      }
      if (HasPercentType) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) PercentType);
      }
      if (HasRebuyCharge) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(RebuyCharge);
      }
      if (HasAddonCharge) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(AddonCharge);
      }
      if (HasGameMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) GameMode);
      }
      if (HasPoolLimit) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PoolLimit);
      }
      if (HasRoomtype) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) Roomtype);
      }
      if (HasPauseTimeLeft) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(PauseTimeLeft);
      }
      if (HasIsSnowballHunter) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsSnowballHunter);
      }
      if (HasSittingOutLevel) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(SittingOutLevel);
      }
      if (HasIsSatellite) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsSatellite);
      }
      rewardItems_.WriteTo(output, _repeated_rewardItems_codec);
      if (HasRewardAlgorithm) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(RewardAlgorithm);
      }
      if (HasTicketPrice) {
        output.WriteRawTag(224, 2);
        output.WriteInt64(TicketPrice);
      }
      if (HasTotalAddonNum) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(TotalAddonNum);
      }
      if (HasTotalRebuyNum) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(TotalRebuyNum);
      }
      if (HasModuleid) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasRebuyType) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(RebuyType);
      }
      if (HasAddonType) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AddonType);
      }
      if (HasRebuyItemName) {
        output.WriteRawTag(146, 3);
        output.WriteString(RebuyItemName);
      }
      if (HasAddonItemName) {
        output.WriteRawTag(154, 3);
        output.WriteString(AddonItemName);
      }
      if (HasRebuyTicketPrice) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(RebuyTicketPrice);
      }
      if (HasAddonTicketPrice) {
        output.WriteRawTag(168, 3);
        output.WriteInt64(AddonTicketPrice);
      }
      if (HasIsAddon) {
        output.WriteRawTag(176, 3);
        output.WriteBool(IsAddon);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(184, 3);
        output.WriteBool(ForbiddenChat);
      }
      if (HasEarlyBirdNum) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(EarlyBirdNum);
      }
      if (HasMttScoreRate) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(MttScoreRate);
      }
      if (HasBreakTimeWait) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(BreakTimeWait);
      }
      if (HasBreakTimeRest) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(BreakTimeRest);
      }
      if (HasAddonTimeRest) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(AddonTimeRest);
      }
      if (HasIsSuspended) {
        output.WriteRawTag(232, 3);
        output.WriteBool(IsSuspended);
      }
      if (HasSuspendTimestamp) {
        output.WriteRawTag(240, 3);
        output.WriteInt64(SuspendTimestamp);
      }
      if (HasSuspendTime) {
        output.WriteRawTag(248, 3);
        output.WriteInt64(SuspendTime);
      }
      if (HasIsGroupMtt) {
        output.WriteRawTag(128, 4);
        output.WriteBool(IsGroupMtt);
      }
      if (HasGroupOverLevel) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(GroupOverLevel);
      }
      if (HasGroupFlag) {
        output.WriteRawTag(146, 4);
        output.WriteString(GroupFlag);
      }
      if (HasGroupStage) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(GroupStage);
      }
      if (HasGroupKey) {
        output.WriteRawTag(162, 4);
        output.WriteString(GroupKey);
      }
      if (HasIsFreezeOut) {
        output.WriteRawTag(168, 4);
        output.WriteBool(IsFreezeOut);
      }
      if (HasTotalBuyinTimes) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(TotalBuyinTimes);
      }
      if (HasPromotionFlag) {
        output.WriteRawTag(184, 4);
        output.WriteBool(PromotionFlag);
      }
      if (HasRecoverType) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(RecoverType);
      }
      if (HasRecoverStartTime) {
        output.WriteRawTag(200, 4);
        output.WriteInt64(RecoverStartTime);
      }
      if (HasIsMttDivide) {
        output.WriteRawTag(208, 4);
        output.WriteBool(IsMttDivide);
      }
      rewardInfo_.WriteTo(output, _repeated_rewardInfo_codec);
      if (HasIcmDivideHost) {
        output.WriteRawTag(224, 4);
        output.WriteInt64(IcmDivideHost);
      }
      if (HasIsVotingDivide) {
        output.WriteRawTag(232, 4);
        output.WriteBool(IsVotingDivide);
      }
      if (HasVoteDivideLeft) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(VoteDivideLeft);
      }
      if (HasIsCanDivide) {
        output.WriteRawTag(248, 4);
        output.WriteBool(IsCanDivide);
      }
      if (HasRebuyRate) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(RebuyRate);
      }
      if (HasEarlyBirdDiscount) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(EarlyBirdDiscount);
      }
      if (HasLeftDivideTimes) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(LeftDivideTimes);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasRank) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(Rank);
      }
      if (HasItmPlayerNum) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(ItmPlayerNum);
      }
      if (HasCurrentRewardPpcoins) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(CurrentRewardPpcoins);
      }
      if (HasCurrentRewardTicketPrice) {
        output.WriteRawTag(248, 5);
        output.WriteInt64(CurrentRewardTicketPrice);
      }
      if (HasCurrentRewardItemPrice) {
        output.WriteRawTag(128, 6);
        output.WriteInt64(CurrentRewardItemPrice);
      }
      if (HasAlivePlayerNum) {
        output.WriteRawTag(136, 6);
        output.WriteInt64(AlivePlayerNum);
      }
      if (HasIsPpglTryouts) {
        output.WriteRawTag(144, 6);
        output.WriteBool(IsPpglTryouts);
      }
      if (HasIsPpglFinal) {
        output.WriteRawTag(152, 6);
        output.WriteBool(IsPpglFinal);
      }
      if (ppglSeasonInfo_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(PpglSeasonInfo);
      }
      if (HasEarlyBirdUsed) {
        output.WriteRawTag(168, 6);
        output.WriteInt32(EarlyBirdUsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMttStartTime) {
        output.WriteRawTag(8);
        output.WriteInt64(MttStartTime);
      }
      if (HasDelayJoinLevel) {
        output.WriteRawTag(16);
        output.WriteInt32(DelayJoinLevel);
      }
      if (HasRebuyNum) {
        output.WriteRawTag(24);
        output.WriteInt32(RebuyNum);
      }
      if (HasAddonRate) {
        output.WriteRawTag(32);
        output.WriteInt32(AddonRate);
      }
      if (HasBreakTime) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakTime);
      }
      if (HasMinPlayerNum) {
        output.WriteRawTag(48);
        output.WriteInt32(MinPlayerNum);
      }
      if (HasMaxPlayerNum) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxPlayerNum);
      }
      if (HasStartTimestamp) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTimestamp);
      }
      if (HasTotalReward) {
        output.WriteRawTag(72);
        output.WriteInt64(TotalReward);
      }
      if (HasTotalPlayerNum) {
        output.WriteRawTag(80);
        output.WriteInt32(TotalPlayerNum);
      }
      if (HasCurrentPlayerNum) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrentPlayerNum);
      }
      if (HasAvgChips) {
        output.WriteRawTag(96);
        output.WriteInt64(AvgChips);
      }
      if (HasCurrentLevel) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentLevel);
      }
      if (HasAddonTimeLeft) {
        output.WriteRawTag(112);
        output.WriteInt32(AddonTimeLeft);
      }
      if (HasBreakTimeLeft) {
        output.WriteRawTag(120);
        output.WriteInt32(BreakTimeLeft);
      }
      if (HasJoinStatus) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(JoinStatus);
      }
      if (HasRebuyNumLeft) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(RebuyNumLeft);
      }
      if (HasMttStatus) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MttStatus);
      }
      if (HasEndRebuyTimestamp) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(EndRebuyTimestamp);
      }
      if (HasNow) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Now);
      }
      if (HasAddonNumLeft) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(AddonNumLeft);
      }
      if (HasIsPlaying) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsPlaying);
      }
      if (HasTid) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Tid);
      }
      if (HasEnsureChips) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(EnsureChips);
      }
      if (HasHunterReward) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(HunterReward);
      }
      if (HasScoreRate) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(ScoreRate);
      }
      if (HasMttSignupTime) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(MttSignupTime);
      }
      if (HasRoomMode) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) RoomMode);
      }
      if (HasIsPlayed) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsPlayed);
      }
      if (HasRebuyin) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(Rebuyin);
      }
      if (HasAddonBuyin) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(AddonBuyin);
      }
      if (HasPercentType) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) PercentType);
      }
      if (HasRebuyCharge) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(RebuyCharge);
      }
      if (HasAddonCharge) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(AddonCharge);
      }
      if (HasGameMode) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) GameMode);
      }
      if (HasPoolLimit) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PoolLimit);
      }
      if (HasRoomtype) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) Roomtype);
      }
      if (HasPauseTimeLeft) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(PauseTimeLeft);
      }
      if (HasIsSnowballHunter) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsSnowballHunter);
      }
      if (HasSittingOutLevel) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(SittingOutLevel);
      }
      if (HasIsSatellite) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsSatellite);
      }
      rewardItems_.WriteTo(ref output, _repeated_rewardItems_codec);
      if (HasRewardAlgorithm) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(RewardAlgorithm);
      }
      if (HasTicketPrice) {
        output.WriteRawTag(224, 2);
        output.WriteInt64(TicketPrice);
      }
      if (HasTotalAddonNum) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(TotalAddonNum);
      }
      if (HasTotalRebuyNum) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(TotalRebuyNum);
      }
      if (HasModuleid) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasRebuyType) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(RebuyType);
      }
      if (HasAddonType) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AddonType);
      }
      if (HasRebuyItemName) {
        output.WriteRawTag(146, 3);
        output.WriteString(RebuyItemName);
      }
      if (HasAddonItemName) {
        output.WriteRawTag(154, 3);
        output.WriteString(AddonItemName);
      }
      if (HasRebuyTicketPrice) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(RebuyTicketPrice);
      }
      if (HasAddonTicketPrice) {
        output.WriteRawTag(168, 3);
        output.WriteInt64(AddonTicketPrice);
      }
      if (HasIsAddon) {
        output.WriteRawTag(176, 3);
        output.WriteBool(IsAddon);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(184, 3);
        output.WriteBool(ForbiddenChat);
      }
      if (HasEarlyBirdNum) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(EarlyBirdNum);
      }
      if (HasMttScoreRate) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(MttScoreRate);
      }
      if (HasBreakTimeWait) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(BreakTimeWait);
      }
      if (HasBreakTimeRest) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(BreakTimeRest);
      }
      if (HasAddonTimeRest) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(AddonTimeRest);
      }
      if (HasIsSuspended) {
        output.WriteRawTag(232, 3);
        output.WriteBool(IsSuspended);
      }
      if (HasSuspendTimestamp) {
        output.WriteRawTag(240, 3);
        output.WriteInt64(SuspendTimestamp);
      }
      if (HasSuspendTime) {
        output.WriteRawTag(248, 3);
        output.WriteInt64(SuspendTime);
      }
      if (HasIsGroupMtt) {
        output.WriteRawTag(128, 4);
        output.WriteBool(IsGroupMtt);
      }
      if (HasGroupOverLevel) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(GroupOverLevel);
      }
      if (HasGroupFlag) {
        output.WriteRawTag(146, 4);
        output.WriteString(GroupFlag);
      }
      if (HasGroupStage) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(GroupStage);
      }
      if (HasGroupKey) {
        output.WriteRawTag(162, 4);
        output.WriteString(GroupKey);
      }
      if (HasIsFreezeOut) {
        output.WriteRawTag(168, 4);
        output.WriteBool(IsFreezeOut);
      }
      if (HasTotalBuyinTimes) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(TotalBuyinTimes);
      }
      if (HasPromotionFlag) {
        output.WriteRawTag(184, 4);
        output.WriteBool(PromotionFlag);
      }
      if (HasRecoverType) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(RecoverType);
      }
      if (HasRecoverStartTime) {
        output.WriteRawTag(200, 4);
        output.WriteInt64(RecoverStartTime);
      }
      if (HasIsMttDivide) {
        output.WriteRawTag(208, 4);
        output.WriteBool(IsMttDivide);
      }
      rewardInfo_.WriteTo(ref output, _repeated_rewardInfo_codec);
      if (HasIcmDivideHost) {
        output.WriteRawTag(224, 4);
        output.WriteInt64(IcmDivideHost);
      }
      if (HasIsVotingDivide) {
        output.WriteRawTag(232, 4);
        output.WriteBool(IsVotingDivide);
      }
      if (HasVoteDivideLeft) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(VoteDivideLeft);
      }
      if (HasIsCanDivide) {
        output.WriteRawTag(248, 4);
        output.WriteBool(IsCanDivide);
      }
      if (HasRebuyRate) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(RebuyRate);
      }
      if (HasEarlyBirdDiscount) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(EarlyBirdDiscount);
      }
      if (HasLeftDivideTimes) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(LeftDivideTimes);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasRank) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(Rank);
      }
      if (HasItmPlayerNum) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(ItmPlayerNum);
      }
      if (HasCurrentRewardPpcoins) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(CurrentRewardPpcoins);
      }
      if (HasCurrentRewardTicketPrice) {
        output.WriteRawTag(248, 5);
        output.WriteInt64(CurrentRewardTicketPrice);
      }
      if (HasCurrentRewardItemPrice) {
        output.WriteRawTag(128, 6);
        output.WriteInt64(CurrentRewardItemPrice);
      }
      if (HasAlivePlayerNum) {
        output.WriteRawTag(136, 6);
        output.WriteInt64(AlivePlayerNum);
      }
      if (HasIsPpglTryouts) {
        output.WriteRawTag(144, 6);
        output.WriteBool(IsPpglTryouts);
      }
      if (HasIsPpglFinal) {
        output.WriteRawTag(152, 6);
        output.WriteBool(IsPpglFinal);
      }
      if (ppglSeasonInfo_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(PpglSeasonInfo);
      }
      if (HasEarlyBirdUsed) {
        output.WriteRawTag(168, 6);
        output.WriteInt32(EarlyBirdUsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMttStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MttStartTime);
      }
      if (HasDelayJoinLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayJoinLevel);
      }
      if (HasRebuyNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebuyNum);
      }
      if (HasAddonRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddonRate);
      }
      if (HasBreakTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakTime);
      }
      if (HasMinPlayerNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinPlayerNum);
      }
      if (HasMaxPlayerNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayerNum);
      }
      if (HasEnsureChips) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EnsureChips);
      }
      if (HasHunterReward) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HunterReward);
      }
      if (HasScoreRate) {
        size += 2 + 8;
      }
      if (HasMttSignupTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MttSignupTime);
      }
      if (HasStartTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (HasTotalReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalReward);
      }
      if (HasTotalPlayerNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPlayerNum);
      }
      if (HasCurrentPlayerNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerNum);
      }
      if (HasAvgChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvgChips);
      }
      if (HasCurrentLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentLevel);
      }
      if (HasAddonTimeLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddonTimeLeft);
      }
      if (HasBreakTimeLeft) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakTimeLeft);
      }
      if (HasPauseTimeLeft) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PauseTimeLeft);
      }
      if (HasMttStatus) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MttStatus);
      }
      if (HasEndRebuyTimestamp) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EndRebuyTimestamp);
      }
      if (HasNow) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Now);
      }
      if (HasJoinStatus) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JoinStatus);
      }
      if (HasRebuyNumLeft) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebuyNumLeft);
      }
      if (HasAddonNumLeft) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddonNumLeft);
      }
      if (HasIsPlaying) {
        size += 2 + 1;
      }
      if (HasTid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (HasRoomMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
      }
      if (HasIsPlayed) {
        size += 2 + 1;
      }
      if (HasRebuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Rebuyin);
      }
      if (HasAddonBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AddonBuyin);
      }
      if (HasPercentType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PercentType);
      }
      if (HasRebuyCharge) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RebuyCharge);
      }
      if (HasAddonCharge) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AddonCharge);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasPoolLimit) {
        size += 2 + 1;
      }
      if (HasRoomtype) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Roomtype);
      }
      if (HasIsSnowballHunter) {
        size += 2 + 1;
      }
      if (HasSittingOutLevel) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SittingOutLevel);
      }
      if (HasIsSatellite) {
        size += 2 + 1;
      }
      size += rewardItems_.CalculateSize(_repeated_rewardItems_codec);
      if (HasRewardAlgorithm) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardAlgorithm);
      }
      if (HasTicketPrice) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TicketPrice);
      }
      if (HasTotalAddonNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalAddonNum);
      }
      if (HasTotalRebuyNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalRebuyNum);
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasRebuyType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebuyType);
      }
      if (HasAddonType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddonType);
      }
      if (HasRebuyItemName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RebuyItemName);
      }
      if (HasAddonItemName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddonItemName);
      }
      if (HasRebuyTicketPrice) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RebuyTicketPrice);
      }
      if (HasAddonTicketPrice) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AddonTicketPrice);
      }
      if (HasIsAddon) {
        size += 2 + 1;
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasEarlyBirdNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EarlyBirdNum);
      }
      if (HasMttScoreRate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MttScoreRate);
      }
      if (HasBreakTimeWait) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BreakTimeWait);
      }
      if (HasBreakTimeRest) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BreakTimeRest);
      }
      if (HasAddonTimeRest) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddonTimeRest);
      }
      if (HasIsSuspended) {
        size += 2 + 1;
      }
      if (HasSuspendTimestamp) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SuspendTimestamp);
      }
      if (HasSuspendTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SuspendTime);
      }
      if (HasIsGroupMtt) {
        size += 2 + 1;
      }
      if (HasGroupOverLevel) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroupOverLevel);
      }
      if (HasGroupFlag) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GroupFlag);
      }
      if (HasGroupStage) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GroupStage);
      }
      if (HasGroupKey) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GroupKey);
      }
      if (HasIsFreezeOut) {
        size += 2 + 1;
      }
      if (HasTotalBuyinTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalBuyinTimes);
      }
      if (HasPromotionFlag) {
        size += 2 + 1;
      }
      if (HasRecoverType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecoverType);
      }
      if (HasRecoverStartTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RecoverStartTime);
      }
      if (HasIsMttDivide) {
        size += 2 + 1;
      }
      size += rewardInfo_.CalculateSize(_repeated_rewardInfo_codec);
      if (HasIcmDivideHost) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IcmDivideHost);
      }
      if (HasIsVotingDivide) {
        size += 2 + 1;
      }
      if (HasVoteDivideLeft) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VoteDivideLeft);
      }
      if (HasIsCanDivide) {
        size += 2 + 1;
      }
      if (HasRebuyRate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RebuyRate);
      }
      if (HasEarlyBirdDiscount) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EarlyBirdDiscount);
      }
      if (HasLeftDivideTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftDivideTimes);
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (HasRank) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HasItmPlayerNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItmPlayerNum);
      }
      if (HasCurrentRewardPpcoins) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurrentRewardPpcoins);
      }
      if (HasCurrentRewardTicketPrice) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurrentRewardTicketPrice);
      }
      if (HasCurrentRewardItemPrice) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurrentRewardItemPrice);
      }
      if (HasAlivePlayerNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AlivePlayerNum);
      }
      if (HasIsPpglTryouts) {
        size += 2 + 1;
      }
      if (HasIsPpglFinal) {
        size += 2 + 1;
      }
      if (ppglSeasonInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PpglSeasonInfo);
      }
      if (HasEarlyBirdUsed) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EarlyBirdUsed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MttRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasMttStartTime) {
        MttStartTime = other.MttStartTime;
      }
      if (other.HasDelayJoinLevel) {
        DelayJoinLevel = other.DelayJoinLevel;
      }
      if (other.HasRebuyNum) {
        RebuyNum = other.RebuyNum;
      }
      if (other.HasAddonRate) {
        AddonRate = other.AddonRate;
      }
      if (other.HasBreakTime) {
        BreakTime = other.BreakTime;
      }
      if (other.HasMinPlayerNum) {
        MinPlayerNum = other.MinPlayerNum;
      }
      if (other.HasMaxPlayerNum) {
        MaxPlayerNum = other.MaxPlayerNum;
      }
      if (other.HasEnsureChips) {
        EnsureChips = other.EnsureChips;
      }
      if (other.HasHunterReward) {
        HunterReward = other.HunterReward;
      }
      if (other.HasScoreRate) {
        ScoreRate = other.ScoreRate;
      }
      if (other.HasMttSignupTime) {
        MttSignupTime = other.MttSignupTime;
      }
      if (other.HasStartTimestamp) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.HasTotalReward) {
        TotalReward = other.TotalReward;
      }
      if (other.HasTotalPlayerNum) {
        TotalPlayerNum = other.TotalPlayerNum;
      }
      if (other.HasCurrentPlayerNum) {
        CurrentPlayerNum = other.CurrentPlayerNum;
      }
      if (other.HasAvgChips) {
        AvgChips = other.AvgChips;
      }
      if (other.HasCurrentLevel) {
        CurrentLevel = other.CurrentLevel;
      }
      if (other.HasAddonTimeLeft) {
        AddonTimeLeft = other.AddonTimeLeft;
      }
      if (other.HasBreakTimeLeft) {
        BreakTimeLeft = other.BreakTimeLeft;
      }
      if (other.HasPauseTimeLeft) {
        PauseTimeLeft = other.PauseTimeLeft;
      }
      if (other.HasMttStatus) {
        MttStatus = other.MttStatus;
      }
      if (other.HasEndRebuyTimestamp) {
        EndRebuyTimestamp = other.EndRebuyTimestamp;
      }
      if (other.HasNow) {
        Now = other.Now;
      }
      if (other.HasJoinStatus) {
        JoinStatus = other.JoinStatus;
      }
      if (other.HasRebuyNumLeft) {
        RebuyNumLeft = other.RebuyNumLeft;
      }
      if (other.HasAddonNumLeft) {
        AddonNumLeft = other.AddonNumLeft;
      }
      if (other.HasIsPlaying) {
        IsPlaying = other.IsPlaying;
      }
      if (other.HasTid) {
        Tid = other.Tid;
      }
      if (other.HasRoomMode) {
        RoomMode = other.RoomMode;
      }
      if (other.HasIsPlayed) {
        IsPlayed = other.IsPlayed;
      }
      if (other.HasRebuyin) {
        Rebuyin = other.Rebuyin;
      }
      if (other.HasAddonBuyin) {
        AddonBuyin = other.AddonBuyin;
      }
      if (other.HasPercentType) {
        PercentType = other.PercentType;
      }
      if (other.HasRebuyCharge) {
        RebuyCharge = other.RebuyCharge;
      }
      if (other.HasAddonCharge) {
        AddonCharge = other.AddonCharge;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasPoolLimit) {
        PoolLimit = other.PoolLimit;
      }
      if (other.HasRoomtype) {
        Roomtype = other.Roomtype;
      }
      if (other.HasIsSnowballHunter) {
        IsSnowballHunter = other.IsSnowballHunter;
      }
      if (other.HasSittingOutLevel) {
        SittingOutLevel = other.SittingOutLevel;
      }
      if (other.HasIsSatellite) {
        IsSatellite = other.IsSatellite;
      }
      rewardItems_.Add(other.rewardItems_);
      if (other.HasRewardAlgorithm) {
        RewardAlgorithm = other.RewardAlgorithm;
      }
      if (other.HasTicketPrice) {
        TicketPrice = other.TicketPrice;
      }
      if (other.HasTotalAddonNum) {
        TotalAddonNum = other.TotalAddonNum;
      }
      if (other.HasTotalRebuyNum) {
        TotalRebuyNum = other.TotalRebuyNum;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasRebuyType) {
        RebuyType = other.RebuyType;
      }
      if (other.HasAddonType) {
        AddonType = other.AddonType;
      }
      if (other.HasRebuyItemName) {
        RebuyItemName = other.RebuyItemName;
      }
      if (other.HasAddonItemName) {
        AddonItemName = other.AddonItemName;
      }
      if (other.HasRebuyTicketPrice) {
        RebuyTicketPrice = other.RebuyTicketPrice;
      }
      if (other.HasAddonTicketPrice) {
        AddonTicketPrice = other.AddonTicketPrice;
      }
      if (other.HasIsAddon) {
        IsAddon = other.IsAddon;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasEarlyBirdNum) {
        EarlyBirdNum = other.EarlyBirdNum;
      }
      if (other.HasMttScoreRate) {
        MttScoreRate = other.MttScoreRate;
      }
      if (other.HasBreakTimeWait) {
        BreakTimeWait = other.BreakTimeWait;
      }
      if (other.HasBreakTimeRest) {
        BreakTimeRest = other.BreakTimeRest;
      }
      if (other.HasAddonTimeRest) {
        AddonTimeRest = other.AddonTimeRest;
      }
      if (other.HasIsSuspended) {
        IsSuspended = other.IsSuspended;
      }
      if (other.HasSuspendTimestamp) {
        SuspendTimestamp = other.SuspendTimestamp;
      }
      if (other.HasSuspendTime) {
        SuspendTime = other.SuspendTime;
      }
      if (other.HasIsGroupMtt) {
        IsGroupMtt = other.IsGroupMtt;
      }
      if (other.HasGroupOverLevel) {
        GroupOverLevel = other.GroupOverLevel;
      }
      if (other.HasGroupFlag) {
        GroupFlag = other.GroupFlag;
      }
      if (other.HasGroupStage) {
        GroupStage = other.GroupStage;
      }
      if (other.HasGroupKey) {
        GroupKey = other.GroupKey;
      }
      if (other.HasIsFreezeOut) {
        IsFreezeOut = other.IsFreezeOut;
      }
      if (other.HasTotalBuyinTimes) {
        TotalBuyinTimes = other.TotalBuyinTimes;
      }
      if (other.HasPromotionFlag) {
        PromotionFlag = other.PromotionFlag;
      }
      if (other.HasRecoverType) {
        RecoverType = other.RecoverType;
      }
      if (other.HasRecoverStartTime) {
        RecoverStartTime = other.RecoverStartTime;
      }
      if (other.HasIsMttDivide) {
        IsMttDivide = other.IsMttDivide;
      }
      rewardInfo_.Add(other.rewardInfo_);
      if (other.HasIcmDivideHost) {
        IcmDivideHost = other.IcmDivideHost;
      }
      if (other.HasIsVotingDivide) {
        IsVotingDivide = other.IsVotingDivide;
      }
      if (other.HasVoteDivideLeft) {
        VoteDivideLeft = other.VoteDivideLeft;
      }
      if (other.HasIsCanDivide) {
        IsCanDivide = other.IsCanDivide;
      }
      if (other.HasRebuyRate) {
        RebuyRate = other.RebuyRate;
      }
      if (other.HasEarlyBirdDiscount) {
        EarlyBirdDiscount = other.EarlyBirdDiscount;
      }
      if (other.HasLeftDivideTimes) {
        LeftDivideTimes = other.LeftDivideTimes;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasItmPlayerNum) {
        ItmPlayerNum = other.ItmPlayerNum;
      }
      if (other.HasCurrentRewardPpcoins) {
        CurrentRewardPpcoins = other.CurrentRewardPpcoins;
      }
      if (other.HasCurrentRewardTicketPrice) {
        CurrentRewardTicketPrice = other.CurrentRewardTicketPrice;
      }
      if (other.HasCurrentRewardItemPrice) {
        CurrentRewardItemPrice = other.CurrentRewardItemPrice;
      }
      if (other.HasAlivePlayerNum) {
        AlivePlayerNum = other.AlivePlayerNum;
      }
      if (other.HasIsPpglTryouts) {
        IsPpglTryouts = other.IsPpglTryouts;
      }
      if (other.HasIsPpglFinal) {
        IsPpglFinal = other.IsPpglFinal;
      }
      if (other.ppglSeasonInfo_ != null) {
        if (ppglSeasonInfo_ == null) {
          PpglSeasonInfo = new global::Texas.Protocol.PPGLSeasonInfo();
        }
        PpglSeasonInfo.MergeFrom(other.PpglSeasonInfo);
      }
      if (other.HasEarlyBirdUsed) {
        EarlyBirdUsed = other.EarlyBirdUsed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MttStartTime = input.ReadInt64();
            break;
          }
          case 16: {
            DelayJoinLevel = input.ReadInt32();
            break;
          }
          case 24: {
            RebuyNum = input.ReadInt32();
            break;
          }
          case 32: {
            AddonRate = input.ReadInt32();
            break;
          }
          case 40: {
            BreakTime = input.ReadInt32();
            break;
          }
          case 48: {
            MinPlayerNum = input.ReadInt32();
            break;
          }
          case 56: {
            MaxPlayerNum = input.ReadInt32();
            break;
          }
          case 64: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 72: {
            TotalReward = input.ReadInt64();
            break;
          }
          case 80: {
            TotalPlayerNum = input.ReadInt32();
            break;
          }
          case 88: {
            CurrentPlayerNum = input.ReadInt32();
            break;
          }
          case 96: {
            AvgChips = input.ReadInt64();
            break;
          }
          case 104: {
            CurrentLevel = input.ReadInt32();
            break;
          }
          case 112: {
            AddonTimeLeft = input.ReadInt32();
            break;
          }
          case 120: {
            BreakTimeLeft = input.ReadInt32();
            break;
          }
          case 128: {
            JoinStatus = input.ReadInt32();
            break;
          }
          case 136: {
            RebuyNumLeft = input.ReadInt32();
            break;
          }
          case 144: {
            MttStatus = input.ReadInt32();
            break;
          }
          case 152: {
            EndRebuyTimestamp = input.ReadInt64();
            break;
          }
          case 160: {
            Now = input.ReadInt64();
            break;
          }
          case 168: {
            AddonNumLeft = input.ReadInt32();
            break;
          }
          case 176: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 184: {
            Tid = input.ReadInt32();
            break;
          }
          case 192: {
            EnsureChips = input.ReadInt64();
            break;
          }
          case 200: {
            HunterReward = input.ReadInt64();
            break;
          }
          case 209: {
            ScoreRate = input.ReadDouble();
            break;
          }
          case 216: {
            MttSignupTime = input.ReadInt64();
            break;
          }
          case 224: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 232: {
            IsPlayed = input.ReadBool();
            break;
          }
          case 240: {
            Rebuyin = input.ReadInt64();
            break;
          }
          case 248: {
            AddonBuyin = input.ReadInt64();
            break;
          }
          case 256: {
            PercentType = (global::Texas.Protocol.MttRewardPercentType) input.ReadEnum();
            break;
          }
          case 264: {
            RebuyCharge = input.ReadInt64();
            break;
          }
          case 272: {
            AddonCharge = input.ReadInt64();
            break;
          }
          case 280: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 288: {
            PoolLimit = input.ReadBool();
            break;
          }
          case 296: {
            Roomtype = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 304: {
            PauseTimeLeft = input.ReadInt32();
            break;
          }
          case 312: {
            IsSnowballHunter = input.ReadBool();
            break;
          }
          case 320: {
            SittingOutLevel = input.ReadInt32();
            break;
          }
          case 328: {
            IsSatellite = input.ReadBool();
            break;
          }
          case 338: {
            rewardItems_.AddEntriesFrom(input, _repeated_rewardItems_codec);
            break;
          }
          case 344: {
            RewardAlgorithm = input.ReadInt32();
            break;
          }
          case 352: {
            TicketPrice = input.ReadInt64();
            break;
          }
          case 360: {
            TotalAddonNum = input.ReadInt32();
            break;
          }
          case 368: {
            TotalRebuyNum = input.ReadInt32();
            break;
          }
          case 376: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 384: {
            RebuyType = input.ReadInt32();
            break;
          }
          case 392: {
            AddonType = input.ReadInt32();
            break;
          }
          case 402: {
            RebuyItemName = input.ReadString();
            break;
          }
          case 410: {
            AddonItemName = input.ReadString();
            break;
          }
          case 416: {
            RebuyTicketPrice = input.ReadInt64();
            break;
          }
          case 424: {
            AddonTicketPrice = input.ReadInt64();
            break;
          }
          case 432: {
            IsAddon = input.ReadBool();
            break;
          }
          case 440: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 448: {
            EarlyBirdNum = input.ReadInt32();
            break;
          }
          case 456: {
            MttScoreRate = input.ReadInt32();
            break;
          }
          case 464: {
            BreakTimeWait = input.ReadInt32();
            break;
          }
          case 472: {
            BreakTimeRest = input.ReadInt32();
            break;
          }
          case 480: {
            AddonTimeRest = input.ReadInt32();
            break;
          }
          case 488: {
            IsSuspended = input.ReadBool();
            break;
          }
          case 496: {
            SuspendTimestamp = input.ReadInt64();
            break;
          }
          case 504: {
            SuspendTime = input.ReadInt64();
            break;
          }
          case 512: {
            IsGroupMtt = input.ReadBool();
            break;
          }
          case 520: {
            GroupOverLevel = input.ReadInt32();
            break;
          }
          case 530: {
            GroupFlag = input.ReadString();
            break;
          }
          case 536: {
            GroupStage = input.ReadInt32();
            break;
          }
          case 546: {
            GroupKey = input.ReadString();
            break;
          }
          case 552: {
            IsFreezeOut = input.ReadBool();
            break;
          }
          case 560: {
            TotalBuyinTimes = input.ReadInt32();
            break;
          }
          case 568: {
            PromotionFlag = input.ReadBool();
            break;
          }
          case 576: {
            RecoverType = input.ReadInt32();
            break;
          }
          case 584: {
            RecoverStartTime = input.ReadInt64();
            break;
          }
          case 592: {
            IsMttDivide = input.ReadBool();
            break;
          }
          case 602: {
            rewardInfo_.AddEntriesFrom(input, _repeated_rewardInfo_codec);
            break;
          }
          case 608: {
            IcmDivideHost = input.ReadInt64();
            break;
          }
          case 616: {
            IsVotingDivide = input.ReadBool();
            break;
          }
          case 624: {
            VoteDivideLeft = input.ReadInt32();
            break;
          }
          case 632: {
            IsCanDivide = input.ReadBool();
            break;
          }
          case 704: {
            RebuyRate = input.ReadInt32();
            break;
          }
          case 712: {
            EarlyBirdDiscount = input.ReadInt32();
            break;
          }
          case 720: {
            LeftDivideTimes = input.ReadInt32();
            break;
          }
          case 728: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 736: {
            Rank = input.ReadInt32();
            break;
          }
          case 744: {
            ItmPlayerNum = input.ReadInt32();
            break;
          }
          case 752: {
            CurrentRewardPpcoins = input.ReadInt64();
            break;
          }
          case 760: {
            CurrentRewardTicketPrice = input.ReadInt64();
            break;
          }
          case 768: {
            CurrentRewardItemPrice = input.ReadInt64();
            break;
          }
          case 776: {
            AlivePlayerNum = input.ReadInt64();
            break;
          }
          case 784: {
            IsPpglTryouts = input.ReadBool();
            break;
          }
          case 792: {
            IsPpglFinal = input.ReadBool();
            break;
          }
          case 802: {
            if (ppglSeasonInfo_ == null) {
              PpglSeasonInfo = new global::Texas.Protocol.PPGLSeasonInfo();
            }
            input.ReadMessage(PpglSeasonInfo);
            break;
          }
          case 808: {
            EarlyBirdUsed = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MttStartTime = input.ReadInt64();
            break;
          }
          case 16: {
            DelayJoinLevel = input.ReadInt32();
            break;
          }
          case 24: {
            RebuyNum = input.ReadInt32();
            break;
          }
          case 32: {
            AddonRate = input.ReadInt32();
            break;
          }
          case 40: {
            BreakTime = input.ReadInt32();
            break;
          }
          case 48: {
            MinPlayerNum = input.ReadInt32();
            break;
          }
          case 56: {
            MaxPlayerNum = input.ReadInt32();
            break;
          }
          case 64: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 72: {
            TotalReward = input.ReadInt64();
            break;
          }
          case 80: {
            TotalPlayerNum = input.ReadInt32();
            break;
          }
          case 88: {
            CurrentPlayerNum = input.ReadInt32();
            break;
          }
          case 96: {
            AvgChips = input.ReadInt64();
            break;
          }
          case 104: {
            CurrentLevel = input.ReadInt32();
            break;
          }
          case 112: {
            AddonTimeLeft = input.ReadInt32();
            break;
          }
          case 120: {
            BreakTimeLeft = input.ReadInt32();
            break;
          }
          case 128: {
            JoinStatus = input.ReadInt32();
            break;
          }
          case 136: {
            RebuyNumLeft = input.ReadInt32();
            break;
          }
          case 144: {
            MttStatus = input.ReadInt32();
            break;
          }
          case 152: {
            EndRebuyTimestamp = input.ReadInt64();
            break;
          }
          case 160: {
            Now = input.ReadInt64();
            break;
          }
          case 168: {
            AddonNumLeft = input.ReadInt32();
            break;
          }
          case 176: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 184: {
            Tid = input.ReadInt32();
            break;
          }
          case 192: {
            EnsureChips = input.ReadInt64();
            break;
          }
          case 200: {
            HunterReward = input.ReadInt64();
            break;
          }
          case 209: {
            ScoreRate = input.ReadDouble();
            break;
          }
          case 216: {
            MttSignupTime = input.ReadInt64();
            break;
          }
          case 224: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 232: {
            IsPlayed = input.ReadBool();
            break;
          }
          case 240: {
            Rebuyin = input.ReadInt64();
            break;
          }
          case 248: {
            AddonBuyin = input.ReadInt64();
            break;
          }
          case 256: {
            PercentType = (global::Texas.Protocol.MttRewardPercentType) input.ReadEnum();
            break;
          }
          case 264: {
            RebuyCharge = input.ReadInt64();
            break;
          }
          case 272: {
            AddonCharge = input.ReadInt64();
            break;
          }
          case 280: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 288: {
            PoolLimit = input.ReadBool();
            break;
          }
          case 296: {
            Roomtype = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 304: {
            PauseTimeLeft = input.ReadInt32();
            break;
          }
          case 312: {
            IsSnowballHunter = input.ReadBool();
            break;
          }
          case 320: {
            SittingOutLevel = input.ReadInt32();
            break;
          }
          case 328: {
            IsSatellite = input.ReadBool();
            break;
          }
          case 338: {
            rewardItems_.AddEntriesFrom(ref input, _repeated_rewardItems_codec);
            break;
          }
          case 344: {
            RewardAlgorithm = input.ReadInt32();
            break;
          }
          case 352: {
            TicketPrice = input.ReadInt64();
            break;
          }
          case 360: {
            TotalAddonNum = input.ReadInt32();
            break;
          }
          case 368: {
            TotalRebuyNum = input.ReadInt32();
            break;
          }
          case 376: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 384: {
            RebuyType = input.ReadInt32();
            break;
          }
          case 392: {
            AddonType = input.ReadInt32();
            break;
          }
          case 402: {
            RebuyItemName = input.ReadString();
            break;
          }
          case 410: {
            AddonItemName = input.ReadString();
            break;
          }
          case 416: {
            RebuyTicketPrice = input.ReadInt64();
            break;
          }
          case 424: {
            AddonTicketPrice = input.ReadInt64();
            break;
          }
          case 432: {
            IsAddon = input.ReadBool();
            break;
          }
          case 440: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 448: {
            EarlyBirdNum = input.ReadInt32();
            break;
          }
          case 456: {
            MttScoreRate = input.ReadInt32();
            break;
          }
          case 464: {
            BreakTimeWait = input.ReadInt32();
            break;
          }
          case 472: {
            BreakTimeRest = input.ReadInt32();
            break;
          }
          case 480: {
            AddonTimeRest = input.ReadInt32();
            break;
          }
          case 488: {
            IsSuspended = input.ReadBool();
            break;
          }
          case 496: {
            SuspendTimestamp = input.ReadInt64();
            break;
          }
          case 504: {
            SuspendTime = input.ReadInt64();
            break;
          }
          case 512: {
            IsGroupMtt = input.ReadBool();
            break;
          }
          case 520: {
            GroupOverLevel = input.ReadInt32();
            break;
          }
          case 530: {
            GroupFlag = input.ReadString();
            break;
          }
          case 536: {
            GroupStage = input.ReadInt32();
            break;
          }
          case 546: {
            GroupKey = input.ReadString();
            break;
          }
          case 552: {
            IsFreezeOut = input.ReadBool();
            break;
          }
          case 560: {
            TotalBuyinTimes = input.ReadInt32();
            break;
          }
          case 568: {
            PromotionFlag = input.ReadBool();
            break;
          }
          case 576: {
            RecoverType = input.ReadInt32();
            break;
          }
          case 584: {
            RecoverStartTime = input.ReadInt64();
            break;
          }
          case 592: {
            IsMttDivide = input.ReadBool();
            break;
          }
          case 602: {
            rewardInfo_.AddEntriesFrom(ref input, _repeated_rewardInfo_codec);
            break;
          }
          case 608: {
            IcmDivideHost = input.ReadInt64();
            break;
          }
          case 616: {
            IsVotingDivide = input.ReadBool();
            break;
          }
          case 624: {
            VoteDivideLeft = input.ReadInt32();
            break;
          }
          case 632: {
            IsCanDivide = input.ReadBool();
            break;
          }
          case 704: {
            RebuyRate = input.ReadInt32();
            break;
          }
          case 712: {
            EarlyBirdDiscount = input.ReadInt32();
            break;
          }
          case 720: {
            LeftDivideTimes = input.ReadInt32();
            break;
          }
          case 728: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 736: {
            Rank = input.ReadInt32();
            break;
          }
          case 744: {
            ItmPlayerNum = input.ReadInt32();
            break;
          }
          case 752: {
            CurrentRewardPpcoins = input.ReadInt64();
            break;
          }
          case 760: {
            CurrentRewardTicketPrice = input.ReadInt64();
            break;
          }
          case 768: {
            CurrentRewardItemPrice = input.ReadInt64();
            break;
          }
          case 776: {
            AlivePlayerNum = input.ReadInt64();
            break;
          }
          case 784: {
            IsPpglTryouts = input.ReadBool();
            break;
          }
          case 792: {
            IsPpglFinal = input.ReadBool();
            break;
          }
          case 802: {
            if (ppglSeasonInfo_ == null) {
              PpglSeasonInfo = new global::Texas.Protocol.PPGLSeasonInfo();
            }
            input.ReadMessage(PpglSeasonInfo);
            break;
          }
          case 808: {
            EarlyBirdUsed = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableNoticeMsg : pb::IMessage<TableNoticeMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableNoticeMsg> _parser = new pb::MessageParser<TableNoticeMsg>(() => new TableNoticeMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TableNoticeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableNoticeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableNoticeMsg(TableNoticeMsg other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableNoticeMsg Clone() {
      return new TableNoticeMsg(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// -1:不能离桌 3:PP币盈利超过 100BB 4:商店評論 5:3-1棄牌完離座 6:將在這手牌結束後站起 7:將在這手牌結束後退出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMsg() {
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TableNoticeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TableNoticeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TableNoticeMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TableTipsMsg : pb::IMessage<TableTipsMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableTipsMsg> _parser = new pb::MessageParser<TableTipsMsg>(() => new TableTipsMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TableTipsMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableTipsMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableTipsMsg(TableTipsMsg other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableTipsMsg Clone() {
      return new TableTipsMsg(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 1.时间银行已经被使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMsg() {
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TableTipsMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TableTipsMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TableTipsMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ZoomFoldSeatStatus : pb::IMessage<ZoomFoldSeatStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ZoomFoldSeatStatus> _parser = new pb::MessageParser<ZoomFoldSeatStatus>(() => new ZoomFoldSeatStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ZoomFoldSeatStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomFoldSeatStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomFoldSeatStatus(ZoomFoldSeatStatus other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      handChips_ = other.handChips_;
      country_ = other.country_;
      vipLevel_ = other.vipLevel_;
      clubid_ = other.clubid_;
      clubName_ = other.clubName_;
      fold_ = other.fold_;
      level_ = other.level_;
      frameId_ = other.frameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomFoldSeatStatus Clone() {
      return new ZoomFoldSeatStatus(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Texas.Protocol.UserBrief player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserBrief Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "hand_chips" field.</summary>
    public const int HandChipsFieldNumber = 3;
    private readonly static long HandChipsDefaultValue = 0L;

    private long handChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandChips {
      get { if ((_hasBits0 & 2) != 0) { return handChips_; } else { return HandChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        handChips_ = value;
      }
    }
    /// <summary>Gets whether the "hand_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hand_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 4;
    private readonly static string CountryDefaultValue = "";

    private string country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Country {
      get { return country_ ?? CountryDefaultValue; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCountry {
      get { return country_ != null; }
    }
    /// <summary>Clears the value of the "country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCountry() {
      country_ = null;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 5;
    private readonly static uint VipLevelDefaultValue = 0;

    private uint vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipLevel {
      get { if ((_hasBits0 & 4) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 6;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 7;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "fold" field.</summary>
    public const int FoldFieldNumber = 8;
    private readonly static bool FoldDefaultValue = false;

    private bool fold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Fold {
      get { if ((_hasBits0 & 8) != 0) { return fold_; } else { return FoldDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fold_ = value;
      }
    }
    /// <summary>Gets whether the "fold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFold {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "fold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFold() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 9;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { if ((_hasBits0 & 16) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 16;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 10;
    private readonly static string FrameIdDefaultValue = "";

    private string frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FrameId {
      get { return frameId_ ?? FrameIdDefaultValue; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameId {
      get { return frameId_ != null; }
    }
    /// <summary>Clears the value of the "frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameId() {
      frameId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ZoomFoldSeatStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ZoomFoldSeatStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (HandChips != other.HandChips) return false;
      if (Country != other.Country) return false;
      if (VipLevel != other.VipLevel) return false;
      if (Clubid != other.Clubid) return false;
      if (ClubName != other.ClubName) return false;
      if (Fold != other.Fold) return false;
      if (Level != other.Level) return false;
      if (FrameId != other.FrameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (HasHandChips) hash ^= HandChips.GetHashCode();
      if (HasCountry) hash ^= Country.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasFold) hash ^= Fold.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasFrameId) hash ^= FrameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (HasHandChips) {
        output.WriteRawTag(24);
        output.WriteInt64(HandChips);
      }
      if (HasCountry) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      if (HasVipLevel) {
        output.WriteRawTag(40);
        output.WriteUInt32(VipLevel);
      }
      if (HasClubid) {
        output.WriteRawTag(50);
        output.WriteString(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(58);
        output.WriteString(ClubName);
      }
      if (HasFold) {
        output.WriteRawTag(64);
        output.WriteBool(Fold);
      }
      if (HasLevel) {
        output.WriteRawTag(72);
        output.WriteInt32(Level);
      }
      if (HasFrameId) {
        output.WriteRawTag(82);
        output.WriteString(FrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (HasHandChips) {
        output.WriteRawTag(24);
        output.WriteInt64(HandChips);
      }
      if (HasCountry) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      if (HasVipLevel) {
        output.WriteRawTag(40);
        output.WriteUInt32(VipLevel);
      }
      if (HasClubid) {
        output.WriteRawTag(50);
        output.WriteString(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(58);
        output.WriteString(ClubName);
      }
      if (HasFold) {
        output.WriteRawTag(64);
        output.WriteBool(Fold);
      }
      if (HasLevel) {
        output.WriteRawTag(72);
        output.WriteInt32(Level);
      }
      if (HasFrameId) {
        output.WriteRawTag(82);
        output.WriteString(FrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (HasHandChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandChips);
      }
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasFold) {
        size += 1 + 1;
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HasFrameId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ZoomFoldSeatStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Texas.Protocol.UserBrief();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.HasHandChips) {
        HandChips = other.HandChips;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasFold) {
        Fold = other.Fold;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasFrameId) {
        FrameId = other.FrameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              Player = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Player);
            break;
          }
          case 24: {
            HandChips = input.ReadInt64();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
          case 40: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 50: {
            Clubid = input.ReadString();
            break;
          }
          case 58: {
            ClubName = input.ReadString();
            break;
          }
          case 64: {
            Fold = input.ReadBool();
            break;
          }
          case 72: {
            Level = input.ReadInt32();
            break;
          }
          case 82: {
            FrameId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              Player = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Player);
            break;
          }
          case 24: {
            HandChips = input.ReadInt64();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
          case 40: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 50: {
            Clubid = input.ReadString();
            break;
          }
          case 58: {
            ClubName = input.ReadString();
            break;
          }
          case 64: {
            Fold = input.ReadBool();
            break;
          }
          case 72: {
            Level = input.ReadInt32();
            break;
          }
          case 82: {
            FrameId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PPchipsStormInfo : pb::IMessage<PPchipsStormInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PPchipsStormInfo> _parser = new pb::MessageParser<PPchipsStormInfo>(() => new PPchipsStormInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PPchipsStormInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PPchipsStormInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PPchipsStormInfo(PPchipsStormInfo other) : this() {
      _hasBits0 = other._hasBits0;
      stormNo_ = other.stormNo_;
      beginTime_ = other.beginTime_;
      leftTime_ = other.leftTime_;
      endTime_ = other.endTime_;
      nowTime_ = other.nowTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PPchipsStormInfo Clone() {
      return new PPchipsStormInfo(this);
    }

    /// <summary>Field number for the "storm_no" field.</summary>
    public const int StormNoFieldNumber = 1;
    private readonly static int StormNoDefaultValue = 0;

    private int stormNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StormNo {
      get { if ((_hasBits0 & 1) != 0) { return stormNo_; } else { return StormNoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stormNo_ = value;
      }
    }
    /// <summary>Gets whether the "storm_no" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStormNo {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storm_no" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStormNo() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private readonly static long BeginTimeDefaultValue = 0L;

    private long beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BeginTime {
      get { if ((_hasBits0 & 2) != 0) { return beginTime_; } else { return BeginTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        beginTime_ = value;
      }
    }
    /// <summary>Gets whether the "begin_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBeginTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "begin_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBeginTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "left_time" field.</summary>
    public const int LeftTimeFieldNumber = 3;
    private readonly static long LeftTimeDefaultValue = 0L;

    private long leftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LeftTime {
      get { if ((_hasBits0 & 4) != 0) { return leftTime_; } else { return LeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leftTime_ = value;
      }
    }
    /// <summary>Gets whether the "left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private readonly static long EndTimeDefaultValue = 0L;

    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndTime {
      get { if ((_hasBits0 & 8) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "now_time" field.</summary>
    public const int NowTimeFieldNumber = 5;
    private readonly static long NowTimeDefaultValue = 0L;

    private long nowTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NowTime {
      get { if ((_hasBits0 & 16) != 0) { return nowTime_; } else { return NowTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        nowTime_ = value;
      }
    }
    /// <summary>Gets whether the "now_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNowTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "now_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNowTime() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PPchipsStormInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PPchipsStormInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StormNo != other.StormNo) return false;
      if (BeginTime != other.BeginTime) return false;
      if (LeftTime != other.LeftTime) return false;
      if (EndTime != other.EndTime) return false;
      if (NowTime != other.NowTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStormNo) hash ^= StormNo.GetHashCode();
      if (HasBeginTime) hash ^= BeginTime.GetHashCode();
      if (HasLeftTime) hash ^= LeftTime.GetHashCode();
      if (HasEndTime) hash ^= EndTime.GetHashCode();
      if (HasNowTime) hash ^= NowTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStormNo) {
        output.WriteRawTag(8);
        output.WriteInt32(StormNo);
      }
      if (HasBeginTime) {
        output.WriteRawTag(16);
        output.WriteInt64(BeginTime);
      }
      if (HasLeftTime) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (HasNowTime) {
        output.WriteRawTag(40);
        output.WriteInt64(NowTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStormNo) {
        output.WriteRawTag(8);
        output.WriteInt32(StormNo);
      }
      if (HasBeginTime) {
        output.WriteRawTag(16);
        output.WriteInt64(BeginTime);
      }
      if (HasLeftTime) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (HasNowTime) {
        output.WriteRawTag(40);
        output.WriteInt64(NowTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStormNo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StormNo);
      }
      if (HasBeginTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginTime);
      }
      if (HasLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftTime);
      }
      if (HasEndTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (HasNowTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NowTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PPchipsStormInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasStormNo) {
        StormNo = other.StormNo;
      }
      if (other.HasBeginTime) {
        BeginTime = other.BeginTime;
      }
      if (other.HasLeftTime) {
        LeftTime = other.LeftTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasNowTime) {
        NowTime = other.NowTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StormNo = input.ReadInt32();
            break;
          }
          case 16: {
            BeginTime = input.ReadInt64();
            break;
          }
          case 24: {
            LeftTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            NowTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StormNo = input.ReadInt32();
            break;
          }
          case 16: {
            BeginTime = input.ReadInt64();
            break;
          }
          case 24: {
            LeftTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            NowTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SevenDeuceUser : pb::IMessage<SevenDeuceUser>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SevenDeuceUser> _parser = new pb::MessageParser<SevenDeuceUser>(() => new SevenDeuceUser());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SevenDeuceUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceUser(SevenDeuceUser other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      uid_ = other.uid_;
      chips_ = other.chips_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceUser Clone() {
      return new SevenDeuceUser(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 3;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SevenDeuceUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SevenDeuceUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Uid != other.Uid) return false;
      if (Chips != other.Chips) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SevenDeuceUser other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SevenDeuceInfo : pb::IMessage<SevenDeuceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SevenDeuceInfo> _parser = new pb::MessageParser<SevenDeuceInfo>(() => new SevenDeuceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SevenDeuceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceInfo(SevenDeuceInfo other) : this() {
      winner_ = other.winner_ != null ? other.winner_.Clone() : null;
      payer_ = other.payer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceInfo Clone() {
      return new SevenDeuceInfo(this);
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private global::Texas.Protocol.SevenDeuceUser winner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.SevenDeuceUser Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "payer" field.</summary>
    public const int PayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.SevenDeuceUser> _repeated_payer_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.SevenDeuceUser.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.SevenDeuceUser> payer_ = new pbc::RepeatedField<global::Texas.Protocol.SevenDeuceUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.SevenDeuceUser> Payer {
      get { return payer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SevenDeuceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SevenDeuceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Winner, other.Winner)) return false;
      if(!payer_.Equals(other.payer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (winner_ != null) hash ^= Winner.GetHashCode();
      hash ^= payer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (winner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Winner);
      }
      payer_.WriteTo(output, _repeated_payer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (winner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Winner);
      }
      payer_.WriteTo(ref output, _repeated_payer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (winner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Winner);
      }
      size += payer_.CalculateSize(_repeated_payer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SevenDeuceInfo other) {
      if (other == null) {
        return;
      }
      if (other.winner_ != null) {
        if (winner_ == null) {
          Winner = new global::Texas.Protocol.SevenDeuceUser();
        }
        Winner.MergeFrom(other.Winner);
      }
      payer_.Add(other.payer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (winner_ == null) {
              Winner = new global::Texas.Protocol.SevenDeuceUser();
            }
            input.ReadMessage(Winner);
            break;
          }
          case 18: {
            payer_.AddEntriesFrom(input, _repeated_payer_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (winner_ == null) {
              Winner = new global::Texas.Protocol.SevenDeuceUser();
            }
            input.ReadMessage(Winner);
            break;
          }
          case 18: {
            payer_.AddEntriesFrom(ref input, _repeated_payer_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SevenDeuceBRC : pb::IMessage<SevenDeuceBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SevenDeuceBRC> _parser = new pb::MessageParser<SevenDeuceBRC>(() => new SevenDeuceBRC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SevenDeuceBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.BaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceBRC(SevenDeuceBRC other) : this() {
      sevenDeuceInfo_ = other.sevenDeuceInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SevenDeuceBRC Clone() {
      return new SevenDeuceBRC(this);
    }

    /// <summary>Field number for the "seven_deuce_info" field.</summary>
    public const int SevenDeuceInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.SevenDeuceInfo> _repeated_sevenDeuceInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.SevenDeuceInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.SevenDeuceInfo> sevenDeuceInfo_ = new pbc::RepeatedField<global::Texas.Protocol.SevenDeuceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.SevenDeuceInfo> SevenDeuceInfo {
      get { return sevenDeuceInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SevenDeuceBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SevenDeuceBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sevenDeuceInfo_.Equals(other.sevenDeuceInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sevenDeuceInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      sevenDeuceInfo_.WriteTo(output, _repeated_sevenDeuceInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      sevenDeuceInfo_.WriteTo(ref output, _repeated_sevenDeuceInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += sevenDeuceInfo_.CalculateSize(_repeated_sevenDeuceInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SevenDeuceBRC other) {
      if (other == null) {
        return;
      }
      sevenDeuceInfo_.Add(other.sevenDeuceInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sevenDeuceInfo_.AddEntriesFrom(input, _repeated_sevenDeuceInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            sevenDeuceInfo_.AddEntriesFrom(ref input, _repeated_sevenDeuceInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
