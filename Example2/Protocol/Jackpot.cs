// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: jackpot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from jackpot.proto</summary>
  public static partial class JackpotReflection {

    #region Descriptor
    /// <summary>File descriptor for jackpot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JackpotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1qYWNrcG90LnByb3RvGgpiYXNlLnByb3RvInAKCkphY2tQb3RSRVESFQoI",
            "bGVhZ3VlaWQYASABKAVIAIgBARITCgZjbHViaWQYAiABKAlIAYgBARITCgZw",
            "cHNyaWQYAyABKAVIAogBAUILCglfbGVhZ3VlaWRCCQoHX2NsdWJpZEIJCgdf",
            "cHBzcmlkIq4FCgpKYWNrUG90UlNQEhUKCGxlYWd1ZWlkGAEgASgFSACIAQES",
            "EwoGY2x1YmlkGAIgASgJSAGIAQESGgoNamFja3BvdF9jaGlwcxgDIAEoA0gC",
            "iAEBEh0KEGphY2twb3RfcmVjaGFyZ2UYBCABKANIA4gBARIbCg5qYWNrcG90",
            "X3N0YXR1cxgFIAEoBUgEiAEBEhgKC2NvbmZpZ19uYW1lGAYgASgJSAWIAQES",
            "GwoOaXNfbmV3X2phY2twb3QYByABKAhIBogBARIbCg5pc19vcHRfamFja3Bv",
            "dBgIIAEoCEgHiAEBEh0KEGphY2twb3RfZmVlX3R5cGUYCSABKAVICIgBARIT",
            "CgZwcHNyaWQYCiABKAVICYgBARIfChJwcHNyX2phY2twb3RfY2hpcHMYCyAB",
            "KANICogBARIiChVwcHNyX2phY2twb3RfcmVjaGFyZ2UYDCABKANIC4gBARIg",
            "ChNwcHNyX2phY2twb3Rfc3RhdHVzGA0gASgFSAyIAQESIgoVcHBzcl9qYWNr",
            "cG90X2ZlZV90eXBlGA4gASgFSA2IAQFCCwoJX2xlYWd1ZWlkQgkKB19jbHVi",
            "aWRCEAoOX2phY2twb3RfY2hpcHNCEwoRX2phY2twb3RfcmVjaGFyZ2VCEQoP",
            "X2phY2twb3Rfc3RhdHVzQg4KDF9jb25maWdfbmFtZUIRCg9faXNfbmV3X2ph",
            "Y2twb3RCEQoPX2lzX29wdF9qYWNrcG90QhMKEV9qYWNrcG90X2ZlZV90eXBl",
            "QgkKB19wcHNyaWRCFQoTX3Bwc3JfamFja3BvdF9jaGlwc0IYChZfcHBzcl9q",
            "YWNrcG90X3JlY2hhcmdlQhYKFF9wcHNyX2phY2twb3Rfc3RhdHVzQhgKFl9w",
            "cHNyX2phY2twb3RfZmVlX3R5cGUidgoQSmFja1BvdFJlY29yZFJFURIVCghs",
            "ZWFndWVpZBgBIAEoBUgAiAEBEhMKBmNsdWJpZBgCIAEoCUgBiAEBEhMKBnBw",
            "c3JpZBgDIAEoBUgCiAEBQgsKCV9sZWFndWVpZEIJCgdfY2x1YmlkQgkKB19w",
            "cHNyaWQi7wEKDUphY2tQb3RSZWNvcmQSEAoDdWlkGAEgASgJSACIAQESEQoE",
            "dHlwZRgCIAEoBUgBiAEBEhMKBnJld2FyZBgDIAEoA0gCiAEBEhEKCXNlbGZf",
            "Y2FyZBgEIAMoBRIVCg1vcHBvbmVudF9jYXJkGAUgAygFEhcKCmZldGNoX3Rp",
            "bWUYBiABKANIA4gBARIRCgRuYW1lGAcgASgJSASIAQESEQoEaWNvbhgIIAEo",
            "CUgFiAEBQgYKBF91aWRCBwoFX3R5cGVCCQoHX3Jld2FyZEINCgtfZmV0Y2hf",
            "dGltZUIHCgVfbmFtZUIHCgVfaWNvbiKgAQoQTmV3SmFja1BvdFJld2FyZBIQ",
            "CgN1aWQYASABKAlIAIgBARIRCgR0eXBlGAIgASgFSAGIAQESEwoGcmV3YXJk",
            "GAMgASgDSAKIAQESEQoEbmFtZRgEIAEoCUgDiAEBEhEKBGljb24YBSABKAlI",
            "BIgBAUIGCgRfdWlkQgcKBV90eXBlQgkKB19yZXdhcmRCBwoFX25hbWVCBwoF",
            "X2ljb24i0QEKEE5ld0phY2tQb3RSZWNvcmQSEwoGZ2FtZWlkGAEgASgJSACI",
            "AQESFwoKZmV0Y2hfdGltZRgCIAEoA0gBiAEBEhkKDGphY2twb3RfdHlwZRgD",
            "IAEoBUgCiAEBEhEKCXdpbl9jYXJkcxgEIAMoBRISCgpsb3NlX2NhcmRzGAUg",
            "AygFEiIKB3Jld2FyZHMYBiADKAsyES5OZXdKYWNrUG90UmV3YXJkQgkKB19n",
            "YW1laWRCDQoLX2ZldGNoX3RpbWVCDwoNX2phY2twb3RfdHlwZSKgAQoQT3B0",
            "SmFja1BvdFJld2FyZBIQCgN1aWQYASABKAlIAIgBARIRCgR0eXBlGAIgASgF",
            "SAGIAQESEwoGcmV3YXJkGAMgASgDSAKIAQESEQoEbmFtZRgEIAEoCUgDiAEB",
            "EhEKBGljb24YBSABKAlIBIgBAUIGCgRfdWlkQgcKBV90eXBlQgkKB19yZXdh",
            "cmRCBwoFX25hbWVCBwoFX2ljb24imwIKEE9wdEphY2tQb3RSZWNvcmQSEwoG",
            "Z2FtZWlkGAEgASgJSACIAQESFwoKZmV0Y2hfdGltZRgCIAEoA0gBiAEBEhcK",
            "CnRhYmxlX3R5cGUYAyABKAVIAogBARIUCgdiYl9hbnRlGAQgASgDSAOIAQES",
            "GQoMamFja3BvdF90eXBlGAUgASgFSASIAQESEQoJd2luX2NhcmRzGAYgAygF",
            "EhIKCmxvc2VfY2FyZHMYByADKAUSIgoHcmV3YXJkcxgIIAMoCzIRLk9wdEph",
            "Y2tQb3RSZXdhcmRCCQoHX2dhbWVpZEINCgtfZmV0Y2hfdGltZUINCgtfdGFi",
            "bGVfdHlwZUIKCghfYmJfYW50ZUIPCg1famFja3BvdF90eXBlIrkCChBKYWNr",
            "UG90UmVjb3JkUlNQEhUKCGxlYWd1ZWlkGAEgASgFSACIAQESEwoGY2x1Ymlk",
            "GAIgASgJSAGIAQESHgoGcmVjb3JkGAMgAygLMg4uSmFja1BvdFJlY29yZBIl",
            "CgpuZXdfcmVjb3JkGAQgAygLMhEuTmV3SmFja1BvdFJlY29yZBIlCgpvcHRf",
            "cmVjb3JkGAUgAygLMhEuT3B0SmFja1BvdFJlY29yZBI3ChdvcHRfcmVjb3Jk",
            "X3RoZV9ncmVhdGVzdBgGIAEoCzIRLk9wdEphY2tQb3RSZWNvcmRIAogBARIT",
            "CgZwcHNyaWQYByABKAVIA4gBAUILCglfbGVhZ3VlaWRCCQoHX2NsdWJpZEIa",
            "Chhfb3B0X3JlY29yZF90aGVfZ3JlYXRlc3RCCQoHX3Bwc3JpZCKWAQoSUmVj",
            "aGFyZ2VKYWNrUG90UkVREhUKCGxlYWd1ZWlkGAEgASgFSACIAQESEwoGY2x1",
            "YmlkGAIgASgJSAGIAQESEgoFY2hpcHMYAyABKANIAogBARITCgZwcHNyaWQY",
            "BCABKAVIA4gBAUILCglfbGVhZ3VlaWRCCQoHX2NsdWJpZEIICgZfY2hpcHNC",
            "CQoHX3Bwc3JpZCKyAQoSUmVjaGFyZ2VKYWNrUG90UlNQEhUKCGxlYWd1ZWlk",
            "GAEgASgFSACIAQESEwoGY2x1YmlkGAIgASgJSAGIAQESEQoEY29kZRgDIAEo",
            "BUgCiAEBEhIKBWNoaXBzGAQgASgDSAOIAQESEwoGcHBzcmlkGAUgASgFSASI",
            "AQFCCwoJX2xlYWd1ZWlkQgkKB19jbHViaWRCBwoFX2NvZGVCCAoGX2NoaXBz",
            "QgkKB19wcHNyaWQi2wEKDVNldEphY2tQb3RSRVESFQoIbGVhZ3VlaWQYASAB",
            "KAVIAIgBARITCgZjbHViaWQYAiABKAlIAYgBARITCgZzdGF0dXMYAyABKAVI",
            "AogBARIVCghyZWNoYXJnZRgEIAEoA0gDiAEBEhMKBnBwc3JpZBgFIAEoBUgE",
            "iAEBEhUKCGZlZV90eXBlGAYgASgFSAWIAQFCCwoJX2xlYWd1ZWlkQgkKB19j",
            "bHViaWRCCQoHX3N0YXR1c0ILCglfcmVjaGFyZ2VCCQoHX3Bwc3JpZEILCglf",
            "ZmVlX3R5cGUi0wEKDVNldEphY2tQb3RSU1ASFQoIbGVhZ3VlaWQYASABKAVI",
            "AIgBARITCgZjbHViaWQYAiABKAlIAYgBARIRCgRjb2RlGAMgASgFSAKIAQES",
            "EwoGc3RhdHVzGAQgASgFSAOIAQESEwoGcHBzcmlkGAUgASgFSASIAQESFQoI",
            "ZmVlX3R5cGUYBiABKAVIBYgBAUILCglfbGVhZ3VlaWRCCQoHX2NsdWJpZEIH",
            "CgVfY29kZUIJCgdfc3RhdHVzQgkKB19wcHNyaWRCCwoJX2ZlZV90eXBlIp0B",
            "Cg1KYWNrUG90Q29uZmlnEhYKCXJvb21fdHlwZRgBIAEoBUgAiAEBEhYKCWNh",
            "cmRfdHlwZRgCIAEoBUgBiAEBEhYKCWJpZ19ibGluZBgDIAEoBUgCiAEBEhEK",
            "BHJhdGUYBCABKAVIA4gBAUIMCgpfcm9vbV90eXBlQgwKCl9jYXJkX3R5cGVC",
            "DAoKX2JpZ19ibGluZEIHCgVfcmF0ZSLpAQoTSmFja1BvdEJyY0NvbmZpZ1JF",
            "URITCgZjbHViaWQYASABKAlIAIgBARIoChtpc19qYWNrcG90X2Jyb2FkY2Fz",
            "dF9lbmFibGUYAiABKAhIAYgBARIoChtqYWNrcG90X2Jyb2FkY2FzdF90aHJl",
            "c2hvbGQYAyABKANIAogBARITCgZwcHNyaWQYBCABKAVIA4gBAUIJCgdfY2x1",
            "YmlkQh4KHF9pc19qYWNrcG90X2Jyb2FkY2FzdF9lbmFibGVCHgocX2phY2tw",
            "b3RfYnJvYWRjYXN0X3RocmVzaG9sZEIJCgdfcHBzcmlkIoUCChNKYWNrUG90",
            "QnJjQ29uZmlnUlNQEhEKBGNvZGUYASABKAVIAIgBARITCgZjbHViaWQYAiAB",
            "KAlIAYgBARIoChtpc19qYWNrcG90X2Jyb2FkY2FzdF9lbmFibGUYAyABKAhI",
            "AogBARIoChtqYWNrcG90X2Jyb2FkY2FzdF90aHJlc2hvbGQYBCABKANIA4gB",
            "ARITCgZwcHNyaWQYBSABKAVIBIgBAUIHCgVfY29kZUIJCgdfY2x1YmlkQh4K",
            "HF9pc19qYWNrcG90X2Jyb2FkY2FzdF9lbmFibGVCHgocX2phY2twb3RfYnJv",
            "YWRjYXN0X3RocmVzaG9sZEIJCgdfcHBzcmlkItQCChBuZXdKYWNrUG90Q29u",
            "ZmlnEhYKCWdhbWVfdHlwZRgBIAEoBUgAiAEBEhYKCWNhcmRfdHlwZRgCIAEo",
            "BUgBiAEBEhoKDW1pbl9iaWdfYmxpbmQYAyABKAVIAogBARIaCg1tYXhfYmln",
            "X2JsaW5kGAQgASgFSAOIAQESFwoKdG90YWxfcmF0ZRgFIAEoBUgEiAEBEhUK",
            "CHdpbl9yYXRlGAYgASgFSAWIAQESFgoJbG9zZV9yYXRlGAcgASgFSAaIAQES",
            "FwoKc2hhcmVfcmF0ZRgIIAEoBUgHiAEBQgwKCl9nYW1lX3R5cGVCDAoKX2Nh",
            "cmRfdHlwZUIQCg5fbWluX2JpZ19ibGluZEIQCg5fbWF4X2JpZ19ibGluZEIN",
            "CgtfdG90YWxfcmF0ZUILCglfd2luX3JhdGVCDAoKX2xvc2VfcmF0ZUINCgtf",
            "c2hhcmVfcmF0ZSL7AQoTQ29vbGVySmFja1BvdENvbmZpZxIWCglnYW1lX3R5",
            "cGUYASABKAVIAIgBARIWCgljYXJkX3R5cGUYAiABKAVIAYgBARIXCgp0b3Rh",
            "bF9yYXRlGAMgASgFSAKIAQESFQoId2luX3JhdGUYBCABKAVIA4gBARIWCgls",
            "b3NlX3JhdGUYBSABKAVIBIgBARIXCgpzaGFyZV9yYXRlGAYgASgFSAWIAQFC",
            "DAoKX2dhbWVfdHlwZUIMCgpfY2FyZF90eXBlQg0KC190b3RhbF9yYXRlQgsK",
            "CV93aW5fcmF0ZUIMCgpfbG9zZV9yYXRlQg0KC19zaGFyZV9yYXRlItcBChVI",
            "aWdoSGFuZEphY2tQb3RDb25maWcSFgoJZ2FtZV90eXBlGAEgASgFSACIAQES",
            "FgoJY2FyZF90eXBlGAIgASgFSAGIAQESFwoKdG90YWxfcmF0ZRgDIAEoBUgC",
            "iAEBEhUKCHdpbl9yYXRlGAQgASgFSAOIAQESFwoKc2hhcmVfcmF0ZRgFIAEo",
            "BUgEiAEBQgwKCl9nYW1lX3R5cGVCDAoKX2NhcmRfdHlwZUINCgtfdG90YWxf",
            "cmF0ZUILCglfd2luX3JhdGVCDQoLX3NoYXJlX3JhdGUi4AEKEG9wdEphY2tQ",
            "b3RDb25maWcSLAoOY29vbGVyX2phY2twb3QYASADKAsyFC5Db29sZXJKYWNr",
            "UG90Q29uZmlnEjEKE2Nvb2xlcl9wbHVzX2phY2twb3QYAiADKAsyFC5Db29s",
            "ZXJKYWNrUG90Q29uZmlnEjIKFGNvb2xlcl9taXhlZF9qYWNrcG90GAMgAygL",
            "MhQuQ29vbGVySmFja1BvdENvbmZpZxI3ChdoaWdoX2hhbmRfbWl4ZWRfamFj",
            "a3BvdBgEIAMoCzIWLkhpZ2hIYW5kSmFja1BvdENvbmZpZyKlAQoTb3B0SmFj",
            "a1BvdEZlZUNvbmZpZxIUCgdiYl9hbnRlGAEgASgFSACIAQESGQoMcG9sbGlu",
            "Z19oYW5kGAIgASgFSAGIAQESFwoKZm9yY2VfaGFuZBgDIAEoBUgCiAEBEhAK",
            "A2ZlZRgEIAEoBUgDiAEBQgoKCF9iYl9hbnRlQg8KDV9wb2xsaW5nX2hhbmRC",
            "DQoLX2ZvcmNlX2hhbmRCBgoEX2ZlZSJBCg1vcHRKYWNrUG90RmVlEjAKEmph",
            "Y2twb3RfZmVlX2NvbmZpZxgBIAMoCzIULm9wdEphY2tQb3RGZWVDb25maWci",
            "dgoQSmFja1BvdENvbmZpZ1JFURIVCghsZWFndWVpZBgBIAEoBUgAiAEBEhMK",
            "BmNsdWJpZBgCIAEoCUgBiAEBEhMKBnBwc3JpZBgDIAEoBUgCiAEBQgsKCV9s",
            "ZWFndWVpZEIJCgdfY2x1YmlkQgkKB19wcHNyaWQi5wsKEEphY2tQb3RDb25m",
            "aWdSU1ASFQoIbGVhZ3VlaWQYASABKAVIAIgBARITCgZjbHViaWQYAiABKAlI",
            "AYgBARIjCgtiaWdfamFja3BvdBgDIAMoCzIOLkphY2tQb3RDb25maWcSJgoO",
            "Y29vbGVyX2phY2twb3QYBCADKAsyDi5KYWNrUG90Q29uZmlnEiIKB2phY2tw",
            "b3QYBSADKAsyES5uZXdKYWNrUG90Q29uZmlnEhsKDmlzX25ld19qYWNrcG90",
            "GAYgASgISAKIAQESKwoLb3B0X2phY2twb3QYByABKAsyES5vcHRKYWNrUG90",
            "Q29uZmlnSAOIAQESGwoOaXNfb3B0X2phY2twb3QYCCABKAhIBIgBARIsCg9v",
            "cHRfamFja3BvdF9mZWUYCSABKAsyDi5vcHRKYWNrUG90RmVlSAWIAQESHwoS",
            "aXNfY2FuX3NldF9qYWNrcG90GAogASgISAaIAQESIwoWc2V0X2phY2twb3Rf",
            "c3RhcnRfdGltZRgLIAEoA0gHiAEBEiEKFHNldF9qYWNrcG90X2VuZF90aW1l",
            "GAwgASgDSAiIAQESKAobaXNfamFja3BvdF9icm9hZGNhc3RfZW5hYmxlGA0g",
            "ASgISAmIAQESKAobamFja3BvdF9icm9hZGNhc3RfdGhyZXNob2xkGA4gASgD",
            "SAqIAQESMgoSamFja3BvdF9wYXlvdXRfcG90GA8gASgLMhEub3B0SmFja1Bv",
            "dENvbmZpZ0gLiAEBEiwKD2phY2twb3RfZmVlX3BvdBgQIAEoCzIOLm9wdEph",
            "Y2tQb3RGZWVIDIgBARITCgZwcHNyaWQYESABKAVIDYgBARIfChJwcHNyX2V4",
            "Y2hhbmdlX3JhdGUYEiABKAVIDogBARIkChdwcHNyX2lzX2Nhbl9zZXRfamFj",
            "a3BvdBgTIAEoCEgPiAEBEigKG3Bwc3Jfc2V0X2phY2twb3Rfc3RhcnRfdGlt",
            "ZRgUIAEoA0gQiAEBEiYKGXBwc3Jfc2V0X2phY2twb3RfZW5kX3RpbWUYFSAB",
            "KANIEYgBARItCiBwcHNyX2lzX2phY2twb3RfYnJvYWRjYXN0X2VuYWJsZRgW",
            "IAEoCEgSiAEBEi0KIHBwc3JfamFja3BvdF9icm9hZGNhc3RfdGhyZXNob2xk",
            "GBcgASgDSBOIAQESMgoVcHBzcl9qYWNrcG90X2ZlZV9oYW5kGBggASgLMg4u",
            "b3B0SmFja1BvdEZlZUgUiAEBEjEKFHBwc3JfamFja3BvdF9mZWVfcG90GBkg",
            "ASgLMg4ub3B0SmFja1BvdEZlZUgViAEBQgsKCV9sZWFndWVpZEIJCgdfY2x1",
            "YmlkQhEKD19pc19uZXdfamFja3BvdEIOCgxfb3B0X2phY2twb3RCEQoPX2lz",
            "X29wdF9qYWNrcG90QhIKEF9vcHRfamFja3BvdF9mZWVCFQoTX2lzX2Nhbl9z",
            "ZXRfamFja3BvdEIZChdfc2V0X2phY2twb3Rfc3RhcnRfdGltZUIXChVfc2V0",
            "X2phY2twb3RfZW5kX3RpbWVCHgocX2lzX2phY2twb3RfYnJvYWRjYXN0X2Vu",
            "YWJsZUIeChxfamFja3BvdF9icm9hZGNhc3RfdGhyZXNob2xkQhUKE19qYWNr",
            "cG90X3BheW91dF9wb3RCEgoQX2phY2twb3RfZmVlX3BvdEIJCgdfcHBzcmlk",
            "QhUKE19wcHNyX2V4Y2hhbmdlX3JhdGVCGgoYX3Bwc3JfaXNfY2FuX3NldF9q",
            "YWNrcG90Qh4KHF9wcHNyX3NldF9qYWNrcG90X3N0YXJ0X3RpbWVCHAoaX3Bw",
            "c3Jfc2V0X2phY2twb3RfZW5kX3RpbWVCIwohX3Bwc3JfaXNfamFja3BvdF9i",
            "cm9hZGNhc3RfZW5hYmxlQiMKIV9wcHNyX2phY2twb3RfYnJvYWRjYXN0X3Ro",
            "cmVzaG9sZEIYChZfcHBzcl9qYWNrcG90X2ZlZV9oYW5kQhcKFV9wcHNyX2ph",
            "Y2twb3RfZmVlX3BvdCK5AQoHSmFja1BvdBITCgZzZWF0aWQYASABKAVIAIgB",
            "ARITCgZjbHViaWQYAiABKAlIAYgBARIQCgN1aWQYAyABKAlIAogBARISCgVj",
            "aGlwcxgEIAEoA0gDiAEBEhEKBG5hbWUYBSABKAlIBIgBARIRCgRpY29uGAYg",
            "ASgJSAWIAQFCCQoHX3NlYXRpZEIJCgdfY2x1YmlkQgYKBF91aWRCCAoGX2No",
            "aXBzQgcKBV9uYW1lQgcKBV9pY29uIpYBCgpKYWNrUG90QlJDEhUKCGxlYWd1",
            "ZWlkGAEgASgFSACIAQESGgoIamFja3BvdHMYAiADKAsyCC5KYWNrUG90EhkK",
            "DGphY2twb3RfdHlwZRgDIAEoBUgBiAEBEhIKBWxldmVsGAQgASgFSAKIAQFC",
            "CwoJX2xlYWd1ZWlkQg8KDV9qYWNrcG90X3R5cGVCCAoGX2xldmVsIjgKFEph",
            "Y2tQb3RNdWx0aUJvYXJkQlJDEiAKC2phY2twb3RfYnJjGAEgAygLMgsuSmFj",
            "a1BvdEJSQyLeAQoUSmFja1BvdFJvb21TdGF0dXNCUkMSFQoIbGVhZ3VlaWQY",
            "ASABKAVIAIgBARITCgZjbHViaWQYAiABKAlIAYgBARITCgZyb29taWQYAyAB",
            "KAlIAogBARIbCg5qYWNrcG90X3N0YXR1cxgEIAEoBUgDiAEBEh0KEGphY2tw",
            "b3RfZmVlX3R5cGUYBSABKAVIBIgBAUILCglfbGVhZ3VlaWRCCQoHX2NsdWJp",
            "ZEIJCgdfcm9vbWlkQhEKD19qYWNrcG90X3N0YXR1c0ITChFfamFja3BvdF9m",
            "ZWVfdHlwZSJ+ChhSZWNoYXJnZUphY2tQb3RSZWNvcmRSRVESFQoIbGVhZ3Vl",
            "aWQYASABKAVIAIgBARITCgZjbHViaWQYAiABKAlIAYgBARITCgZwcHNyaWQY",
            "AyABKAVIAogBAUILCglfbGVhZ3VlaWRCCQoHX2NsdWJpZEIJCgdfcHBzcmlk",
            "Im0KFVJlY2hhcmdlSmFja1BvdFJlY29yZBIRCgRuYW1lGAEgASgJSACIAQES",
            "EgoFY2hpcHMYAiABKANIAYgBARIRCgR0aW1lGAMgASgDSAKIAQFCBwoFX25h",
            "bWVCCAoGX2NoaXBzQgcKBV90aW1lIsIBChhSZWNoYXJnZUphY2tQb3RSZWNv",
            "cmRSU1ASEQoEY29kZRgBIAEoBUgAiAEBEhUKCGxlYWd1ZWlkGAIgASgFSAGI",
            "AQESEwoGY2x1YmlkGAMgASgJSAKIAQESJgoGcmVjb3JkGAQgAygLMhYuUmVj",
            "aGFyZ2VKYWNrUG90UmVjb3JkEhMKBnBwc3JpZBgFIAEoBUgDiAEBQgcKBV9j",
            "b2RlQgsKCV9sZWFndWVpZEIJCgdfY2x1YmlkQgkKB19wcHNyaWQiNQoTR2V0",
            "SmFja1BvdFJld2FyZFJTUBITCgZyZXdhcmQYASABKANIAIgBAUIJCgdfcmV3",
            "YXJkKmYKD0phY2tQb3RSb29tVHlwZRIaChZKQUNLUE9UX1JPT01fVFlQRV9O",
            "T05FEAASGgoWSkFDS1BPVF9ST09NX1RZUEVfQ0FTSBABEhsKF0pBQ0tQT1Rf",
            "Uk9PTV9UWVBFX09NQUhBEAIqzAEKDVRhYmxlR2FtZVR5cGUSGAoUVEFCTEVf",
            "R0FNRV9UWVBFX05PTkUQABIXChNUQUJMRV9HQU1FX1RZUEVfTkxIEAESFgoS",
            "VEFCTEVfR0FNRV9UWVBFXzZQEAISGAoUVEFCTEVfR0FNRV9UWVBFX1BMTzQQ",
            "AxIdChlUQUJMRV9HQU1FX1RZUEVfUExPNF9ISUxPEAQSGAoUVEFCTEVfR0FN",
            "RV9UWVBFX1BMTzUQBRIdChlUQUJMRV9HQU1FX1RZUEVfUExPNV9ISUxPEAYq",
            "xQEKFE5ld0phY2tQb3RSZXdhcmRUeXBlEiAKHE5FV19KQUNLUE9UX1JFV0FS",
            "RF9UWVBFX05PTkUQABIhCh1ORVdfSkFDS1BPVF9SRVdBUkRfVFlQRV9XSU5F",
            "UhABEiEKHU5FV19KQUNLUE9UX1JFV0FSRF9UWVBFX0xPU0VSEAISIgoeTkVX",
            "X0pBQ0tQT1RfUkVXQVJEX1RZUEVfU0hBUkVSEAMSIQodTkVXX0pBQ0tQT1Rf",
            "UkVXQVJEX1RZUEVfVE9UQUwQBCrgAQoQT3B0VGFibGVHYW1lVHlwZRIcChhP",
            "UFRfVEFCTEVfR0FNRV9UWVBFX05PTkUQABIbChdPUFRfVEFCTEVfR0FNRV9U",
            "WVBFX05MSBABEhsKF09QVF9UQUJMRV9HQU1FX1RZUEVfQU9GEAISGgoWT1BU",
            "X1RBQkxFX0dBTUVfVFlQRV82UBADEhwKGE9QVF9UQUJMRV9HQU1FX1RZUEVf",
            "UExPNBAEEhwKGE9QVF9UQUJMRV9HQU1FX1RZUEVfUExPNRAFEhwKGE9QVF9U",
            "QUJMRV9HQU1FX1RZUEVfUExPNhAGKsUBChRPcHRKYWNrUG90UmV3YXJkVHlw",
            "ZRIgChxPUFRfSkFDS1BPVF9SRVdBUkRfVFlQRV9OT05FEAASIQodT1BUX0pB",
            "Q0tQT1RfUkVXQVJEX1RZUEVfV0lORVIQARIhCh1PUFRfSkFDS1BPVF9SRVdB",
            "UkRfVFlQRV9MT1NFUhACEiIKHk9QVF9KQUNLUE9UX1JFV0FSRF9UWVBFX1NI",
            "QVJFUhADEiEKHU9QVF9KQUNLUE9UX1JFV0FSRF9UWVBFX1RPVEFMEAQq0AEK",
            "Ek9wdEphY2tQb3RDYXJkVHlwZRIeChpPUFRfSkFDS1BPVF9DQVJEX1RZUEVf",
            "Tk9ORRAAEiQKIE9QVF9KQUNLUE9UX0NBUkRfVFlQRV9GVUxMX0hPVVNFEAES",
            "IwofT1BUX0pBQ0tQT1RfQ0FSRF9UWVBFX0ZPVVJfS0lORBACEigKJE9QVF9K",
            "QUNLUE9UX0NBUkRfVFlQRV9TVFJBSUdIVF9GTFVTSBADEiUKIU9QVF9KQUNL",
            "UE9UX0NBUkRfVFlQRV9ST1lBTF9GTFVTSBAEQhpaBy9wYnBwZ2+qAg5UZXhh",
            "cy5Qcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Texas.Protocol.JackPotRoomType), typeof(global::Texas.Protocol.TableGameType), typeof(global::Texas.Protocol.NewJackPotRewardType), typeof(global::Texas.Protocol.OptTableGameType), typeof(global::Texas.Protocol.OptJackPotRewardType), typeof(global::Texas.Protocol.OptJackPotCardType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotREQ), global::Texas.Protocol.JackPotREQ.Parser, new[]{ "Leagueid", "Clubid", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotRSP), global::Texas.Protocol.JackPotRSP.Parser, new[]{ "Leagueid", "Clubid", "JackpotChips", "JackpotRecharge", "JackpotStatus", "ConfigName", "IsNewJackpot", "IsOptJackpot", "JackpotFeeType", "Ppsrid", "PpsrJackpotChips", "PpsrJackpotRecharge", "PpsrJackpotStatus", "PpsrJackpotFeeType" }, new[]{ "Leagueid", "Clubid", "JackpotChips", "JackpotRecharge", "JackpotStatus", "ConfigName", "IsNewJackpot", "IsOptJackpot", "JackpotFeeType", "Ppsrid", "PpsrJackpotChips", "PpsrJackpotRecharge", "PpsrJackpotStatus", "PpsrJackpotFeeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotRecordREQ), global::Texas.Protocol.JackPotRecordREQ.Parser, new[]{ "Leagueid", "Clubid", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotRecord), global::Texas.Protocol.JackPotRecord.Parser, new[]{ "Uid", "Type", "Reward", "SelfCard", "OpponentCard", "FetchTime", "Name", "Icon" }, new[]{ "Uid", "Type", "Reward", "FetchTime", "Name", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.NewJackPotReward), global::Texas.Protocol.NewJackPotReward.Parser, new[]{ "Uid", "Type", "Reward", "Name", "Icon" }, new[]{ "Uid", "Type", "Reward", "Name", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.NewJackPotRecord), global::Texas.Protocol.NewJackPotRecord.Parser, new[]{ "Gameid", "FetchTime", "JackpotType", "WinCards", "LoseCards", "Rewards" }, new[]{ "Gameid", "FetchTime", "JackpotType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.OptJackPotReward), global::Texas.Protocol.OptJackPotReward.Parser, new[]{ "Uid", "Type", "Reward", "Name", "Icon" }, new[]{ "Uid", "Type", "Reward", "Name", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.OptJackPotRecord), global::Texas.Protocol.OptJackPotRecord.Parser, new[]{ "Gameid", "FetchTime", "TableType", "BbAnte", "JackpotType", "WinCards", "LoseCards", "Rewards" }, new[]{ "Gameid", "FetchTime", "TableType", "BbAnte", "JackpotType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotRecordRSP), global::Texas.Protocol.JackPotRecordRSP.Parser, new[]{ "Leagueid", "Clubid", "Record", "NewRecord", "OptRecord", "OptRecordTheGreatest", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "OptRecordTheGreatest", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RechargeJackPotREQ), global::Texas.Protocol.RechargeJackPotREQ.Parser, new[]{ "Leagueid", "Clubid", "Chips", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "Chips", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RechargeJackPotRSP), global::Texas.Protocol.RechargeJackPotRSP.Parser, new[]{ "Leagueid", "Clubid", "Code", "Chips", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "Code", "Chips", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SetJackPotREQ), global::Texas.Protocol.SetJackPotREQ.Parser, new[]{ "Leagueid", "Clubid", "Status", "Recharge", "Ppsrid", "FeeType" }, new[]{ "Leagueid", "Clubid", "Status", "Recharge", "Ppsrid", "FeeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.SetJackPotRSP), global::Texas.Protocol.SetJackPotRSP.Parser, new[]{ "Leagueid", "Clubid", "Code", "Status", "Ppsrid", "FeeType" }, new[]{ "Leagueid", "Clubid", "Code", "Status", "Ppsrid", "FeeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotConfig), global::Texas.Protocol.JackPotConfig.Parser, new[]{ "RoomType", "CardType", "BigBlind", "Rate" }, new[]{ "RoomType", "CardType", "BigBlind", "Rate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotBrcConfigREQ), global::Texas.Protocol.JackPotBrcConfigREQ.Parser, new[]{ "Clubid", "IsJackpotBroadcastEnable", "JackpotBroadcastThreshold", "Ppsrid" }, new[]{ "Clubid", "IsJackpotBroadcastEnable", "JackpotBroadcastThreshold", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotBrcConfigRSP), global::Texas.Protocol.JackPotBrcConfigRSP.Parser, new[]{ "Code", "Clubid", "IsJackpotBroadcastEnable", "JackpotBroadcastThreshold", "Ppsrid" }, new[]{ "Code", "Clubid", "IsJackpotBroadcastEnable", "JackpotBroadcastThreshold", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.newJackPotConfig), global::Texas.Protocol.newJackPotConfig.Parser, new[]{ "GameType", "CardType", "MinBigBlind", "MaxBigBlind", "TotalRate", "WinRate", "LoseRate", "ShareRate" }, new[]{ "GameType", "CardType", "MinBigBlind", "MaxBigBlind", "TotalRate", "WinRate", "LoseRate", "ShareRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CoolerJackPotConfig), global::Texas.Protocol.CoolerJackPotConfig.Parser, new[]{ "GameType", "CardType", "TotalRate", "WinRate", "LoseRate", "ShareRate" }, new[]{ "GameType", "CardType", "TotalRate", "WinRate", "LoseRate", "ShareRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.HighHandJackPotConfig), global::Texas.Protocol.HighHandJackPotConfig.Parser, new[]{ "GameType", "CardType", "TotalRate", "WinRate", "ShareRate" }, new[]{ "GameType", "CardType", "TotalRate", "WinRate", "ShareRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.optJackPotConfig), global::Texas.Protocol.optJackPotConfig.Parser, new[]{ "CoolerJackpot", "CoolerPlusJackpot", "CoolerMixedJackpot", "HighHandMixedJackpot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.optJackPotFeeConfig), global::Texas.Protocol.optJackPotFeeConfig.Parser, new[]{ "BbAnte", "PollingHand", "ForceHand", "Fee" }, new[]{ "BbAnte", "PollingHand", "ForceHand", "Fee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.optJackPotFee), global::Texas.Protocol.optJackPotFee.Parser, new[]{ "JackpotFeeConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotConfigREQ), global::Texas.Protocol.JackPotConfigREQ.Parser, new[]{ "Leagueid", "Clubid", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotConfigRSP), global::Texas.Protocol.JackPotConfigRSP.Parser, new[]{ "Leagueid", "Clubid", "BigJackpot", "CoolerJackpot", "Jackpot", "IsNewJackpot", "OptJackpot", "IsOptJackpot", "OptJackpotFee", "IsCanSetJackpot", "SetJackpotStartTime", "SetJackpotEndTime", "IsJackpotBroadcastEnable", "JackpotBroadcastThreshold", "JackpotPayoutPot", "JackpotFeePot", "Ppsrid", "PpsrExchangeRate", "PpsrIsCanSetJackpot", "PpsrSetJackpotStartTime", "PpsrSetJackpotEndTime", "PpsrIsJackpotBroadcastEnable", "PpsrJackpotBroadcastThreshold", "PpsrJackpotFeeHand", "PpsrJackpotFeePot" }, new[]{ "Leagueid", "Clubid", "IsNewJackpot", "OptJackpot", "IsOptJackpot", "OptJackpotFee", "IsCanSetJackpot", "SetJackpotStartTime", "SetJackpotEndTime", "IsJackpotBroadcastEnable", "JackpotBroadcastThreshold", "JackpotPayoutPot", "JackpotFeePot", "Ppsrid", "PpsrExchangeRate", "PpsrIsCanSetJackpot", "PpsrSetJackpotStartTime", "PpsrSetJackpotEndTime", "PpsrIsJackpotBroadcastEnable", "PpsrJackpotBroadcastThreshold", "PpsrJackpotFeeHand", "PpsrJackpotFeePot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPot), global::Texas.Protocol.JackPot.Parser, new[]{ "Seatid", "Clubid", "Uid", "Chips", "Name", "Icon" }, new[]{ "Seatid", "Clubid", "Uid", "Chips", "Name", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotBRC), global::Texas.Protocol.JackPotBRC.Parser, new[]{ "Leagueid", "Jackpots", "JackpotType", "Level" }, new[]{ "Leagueid", "JackpotType", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotMultiBoardBRC), global::Texas.Protocol.JackPotMultiBoardBRC.Parser, new[]{ "JackpotBrc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.JackPotRoomStatusBRC), global::Texas.Protocol.JackPotRoomStatusBRC.Parser, new[]{ "Leagueid", "Clubid", "Roomid", "JackpotStatus", "JackpotFeeType" }, new[]{ "Leagueid", "Clubid", "Roomid", "JackpotStatus", "JackpotFeeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RechargeJackPotRecordREQ), global::Texas.Protocol.RechargeJackPotRecordREQ.Parser, new[]{ "Leagueid", "Clubid", "Ppsrid" }, new[]{ "Leagueid", "Clubid", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RechargeJackPotRecord), global::Texas.Protocol.RechargeJackPotRecord.Parser, new[]{ "Name", "Chips", "Time" }, new[]{ "Name", "Chips", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RechargeJackPotRecordRSP), global::Texas.Protocol.RechargeJackPotRecordRSP.Parser, new[]{ "Code", "Leagueid", "Clubid", "Record", "Ppsrid" }, new[]{ "Code", "Leagueid", "Clubid", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.GetJackPotRewardRSP), global::Texas.Protocol.GetJackPotRewardRSP.Parser, new[]{ "Reward" }, new[]{ "Reward" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum JackPotRoomType {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("JACKPOT_ROOM_TYPE_NONE")] None = 0,
    /// <summary>
    ///ring game
    /// </summary>
    [pbr::OriginalName("JACKPOT_ROOM_TYPE_CASH")] Cash = 1,
    /// <summary>
    ///OMAHA
    /// </summary>
    [pbr::OriginalName("JACKPOT_ROOM_TYPE_OMAHA")] Omaha = 2,
  }

  /// <summary>
  /// 新版jackpot 需要更多玩法区分
  /// </summary>
  public enum TableGameType {
    [pbr::OriginalName("TABLE_GAME_TYPE_NONE")] None = 0,
    /// <summary>
    /// NLH
    /// </summary>
    [pbr::OriginalName("TABLE_GAME_TYPE_NLH")] Nlh = 1,
    /// <summary>
    /// 6+
    /// </summary>
    [pbr::OriginalName("TABLE_GAME_TYPE_6P")] _6P = 2,
    /// <summary>
    /// PLO4
    /// </summary>
    [pbr::OriginalName("TABLE_GAME_TYPE_PLO4")] Plo4 = 3,
    [pbr::OriginalName("TABLE_GAME_TYPE_PLO4_HILO")] Plo4Hilo = 4,
    [pbr::OriginalName("TABLE_GAME_TYPE_PLO5")] Plo5 = 5,
    [pbr::OriginalName("TABLE_GAME_TYPE_PLO5_HILO")] Plo5Hilo = 6,
  }

  /// <summary>
  /// 新版cooler jackpot 奖励分winer, loser, sharer
  /// </summary>
  public enum NewJackPotRewardType {
    [pbr::OriginalName("NEW_JACKPOT_REWARD_TYPE_NONE")] None = 0,
    /// <summary>
    /// winer reward
    /// </summary>
    [pbr::OriginalName("NEW_JACKPOT_REWARD_TYPE_WINER")] Winer = 1,
    /// <summary>
    /// loser reward
    /// </summary>
    [pbr::OriginalName("NEW_JACKPOT_REWARD_TYPE_LOSER")] Loser = 2,
    /// <summary>
    /// sharer reward
    /// </summary>
    [pbr::OriginalName("NEW_JACKPOT_REWARD_TYPE_SHARER")] Sharer = 3,
    /// <summary>
    /// total reward
    /// </summary>
    [pbr::OriginalName("NEW_JACKPOT_REWARD_TYPE_TOTAL")] Total = 4,
  }

  /// <summary>
  /// 優化版jackpot 玩法
  /// </summary>
  public enum OptTableGameType {
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_NONE")] None = 0,
    /// <summary>
    /// NLH
    /// </summary>
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_NLH")] Nlh = 1,
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_AOF")] Aof = 2,
    /// <summary>
    /// 6+
    /// </summary>
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_6P")] _6P = 3,
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_PLO4")] Plo4 = 4,
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_PLO5")] Plo5 = 5,
    [pbr::OriginalName("OPT_TABLE_GAME_TYPE_PLO6")] Plo6 = 6,
  }

  public enum OptJackPotRewardType {
    [pbr::OriginalName("OPT_JACKPOT_REWARD_TYPE_NONE")] None = 0,
    /// <summary>
    /// winer reward
    /// </summary>
    [pbr::OriginalName("OPT_JACKPOT_REWARD_TYPE_WINER")] Winer = 1,
    /// <summary>
    /// loser reward
    /// </summary>
    [pbr::OriginalName("OPT_JACKPOT_REWARD_TYPE_LOSER")] Loser = 2,
    /// <summary>
    /// sharer reward
    /// </summary>
    [pbr::OriginalName("OPT_JACKPOT_REWARD_TYPE_SHARER")] Sharer = 3,
    /// <summary>
    /// total reward
    /// </summary>
    [pbr::OriginalName("OPT_JACKPOT_REWARD_TYPE_TOTAL")] Total = 4,
  }

  public enum OptJackPotCardType {
    [pbr::OriginalName("OPT_JACKPOT_CARD_TYPE_NONE")] None = 0,
    [pbr::OriginalName("OPT_JACKPOT_CARD_TYPE_FULL_HOUSE")] FullHouse = 1,
    [pbr::OriginalName("OPT_JACKPOT_CARD_TYPE_FOUR_KIND")] FourKind = 2,
    [pbr::OriginalName("OPT_JACKPOT_CARD_TYPE_STRAIGHT_FLUSH")] StraightFlush = 3,
    [pbr::OriginalName("OPT_JACKPOT_CARD_TYPE_ROYAL_FLUSH")] RoyalFlush = 4,
  }

  #endregion

  #region Messages
  public sealed partial class JackPotREQ : pb::IMessage<JackPotREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotREQ> _parser = new pb::MessageParser<JackPotREQ>(() => new JackPotREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotREQ(JackPotREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotREQ Clone() {
      return new JackPotREQ(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 3;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 2) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotRSP : pb::IMessage<JackPotRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotRSP> _parser = new pb::MessageParser<JackPotRSP>(() => new JackPotRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRSP(JackPotRSP other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      jackpotChips_ = other.jackpotChips_;
      jackpotRecharge_ = other.jackpotRecharge_;
      jackpotStatus_ = other.jackpotStatus_;
      configName_ = other.configName_;
      isNewJackpot_ = other.isNewJackpot_;
      isOptJackpot_ = other.isOptJackpot_;
      jackpotFeeType_ = other.jackpotFeeType_;
      ppsrid_ = other.ppsrid_;
      ppsrJackpotChips_ = other.ppsrJackpotChips_;
      ppsrJackpotRecharge_ = other.ppsrJackpotRecharge_;
      ppsrJackpotStatus_ = other.ppsrJackpotStatus_;
      ppsrJackpotFeeType_ = other.ppsrJackpotFeeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRSP Clone() {
      return new JackPotRSP(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "jackpot_chips" field.</summary>
    public const int JackpotChipsFieldNumber = 3;
    private readonly static long JackpotChipsDefaultValue = 0L;

    private long jackpotChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotChips {
      get { if ((_hasBits0 & 2) != 0) { return jackpotChips_; } else { return JackpotChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        jackpotChips_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "jackpot_recharge" field.</summary>
    public const int JackpotRechargeFieldNumber = 4;
    private readonly static long JackpotRechargeDefaultValue = 0L;

    private long jackpotRecharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotRecharge {
      get { if ((_hasBits0 & 4) != 0) { return jackpotRecharge_; } else { return JackpotRechargeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        jackpotRecharge_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_recharge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotRecharge {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_recharge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotRecharge() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "jackpot_status" field.</summary>
    public const int JackpotStatusFieldNumber = 5;
    private readonly static int JackpotStatusDefaultValue = 0;

    private int jackpotStatus_;
    /// <summary>
    /// 0:關閉, 1:Coller JP, 2:Coller JP Puls, 3:Mixed JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotStatus {
      get { if ((_hasBits0 & 8) != 0) { return jackpotStatus_; } else { return JackpotStatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        jackpotStatus_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotStatus() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "config_name" field.</summary>
    public const int ConfigNameFieldNumber = 6;
    private readonly static string ConfigNameDefaultValue = "";

    private string configName_;
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConfigName {
      get { return configName_ ?? ConfigNameDefaultValue; }
      set {
        configName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "config_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConfigName {
      get { return configName_ != null; }
    }
    /// <summary>Clears the value of the "config_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConfigName() {
      configName_ = null;
    }

    /// <summary>Field number for the "is_new_jackpot" field.</summary>
    public const int IsNewJackpotFieldNumber = 7;
    private readonly static bool IsNewJackpotDefaultValue = false;

    private bool isNewJackpot_;
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsNewJackpot {
      get { if ((_hasBits0 & 16) != 0) { return isNewJackpot_; } else { return IsNewJackpotDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isNewJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_new_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsNewJackpot {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_new_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsNewJackpot() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_opt_jackpot" field.</summary>
    public const int IsOptJackpotFieldNumber = 8;
    private readonly static bool IsOptJackpotDefaultValue = false;

    private bool isOptJackpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOptJackpot {
      get { if ((_hasBits0 & 32) != 0) { return isOptJackpot_; } else { return IsOptJackpotDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isOptJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_opt_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOptJackpot {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_opt_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOptJackpot() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "jackpot_fee_type" field.</summary>
    public const int JackpotFeeTypeFieldNumber = 9;
    private readonly static int JackpotFeeTypeDefaultValue = 0;

    private int jackpotFeeType_;
    /// <summary>
    /// 0:每手牌抽, 1:抽20BB以上的池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotFeeType {
      get { if ((_hasBits0 & 64) != 0) { return jackpotFeeType_; } else { return JackpotFeeTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        jackpotFeeType_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_fee_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotFeeType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_fee_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotFeeType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 10;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 128) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 128;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "ppsr_jackpot_chips" field.</summary>
    public const int PpsrJackpotChipsFieldNumber = 11;
    private readonly static long PpsrJackpotChipsDefaultValue = 0L;

    private long ppsrJackpotChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpsrJackpotChips {
      get { if ((_hasBits0 & 256) != 0) { return ppsrJackpotChips_; } else { return PpsrJackpotChipsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        ppsrJackpotChips_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_jackpot_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrJackpotChips {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_jackpot_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrJackpotChips() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "ppsr_jackpot_recharge" field.</summary>
    public const int PpsrJackpotRechargeFieldNumber = 12;
    private readonly static long PpsrJackpotRechargeDefaultValue = 0L;

    private long ppsrJackpotRecharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpsrJackpotRecharge {
      get { if ((_hasBits0 & 512) != 0) { return ppsrJackpotRecharge_; } else { return PpsrJackpotRechargeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ppsrJackpotRecharge_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_jackpot_recharge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrJackpotRecharge {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_jackpot_recharge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrJackpotRecharge() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ppsr_jackpot_status" field.</summary>
    public const int PpsrJackpotStatusFieldNumber = 13;
    private readonly static int PpsrJackpotStatusDefaultValue = 0;

    private int ppsrJackpotStatus_;
    /// <summary>
    /// 0:關閉, 1:Coller JP, 2:Coller JP Puls, 3:Mixed JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PpsrJackpotStatus {
      get { if ((_hasBits0 & 1024) != 0) { return ppsrJackpotStatus_; } else { return PpsrJackpotStatusDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ppsrJackpotStatus_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_jackpot_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrJackpotStatus {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_jackpot_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrJackpotStatus() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ppsr_jackpot_fee_type" field.</summary>
    public const int PpsrJackpotFeeTypeFieldNumber = 14;
    private readonly static int PpsrJackpotFeeTypeDefaultValue = 0;

    private int ppsrJackpotFeeType_;
    /// <summary>
    /// 0:每手牌抽, 1:抽20BB以上的池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PpsrJackpotFeeType {
      get { if ((_hasBits0 & 2048) != 0) { return ppsrJackpotFeeType_; } else { return PpsrJackpotFeeTypeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        ppsrJackpotFeeType_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_jackpot_fee_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrJackpotFeeType {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_jackpot_fee_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrJackpotFeeType() {
      _hasBits0 &= ~2048;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (JackpotChips != other.JackpotChips) return false;
      if (JackpotRecharge != other.JackpotRecharge) return false;
      if (JackpotStatus != other.JackpotStatus) return false;
      if (ConfigName != other.ConfigName) return false;
      if (IsNewJackpot != other.IsNewJackpot) return false;
      if (IsOptJackpot != other.IsOptJackpot) return false;
      if (JackpotFeeType != other.JackpotFeeType) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (PpsrJackpotChips != other.PpsrJackpotChips) return false;
      if (PpsrJackpotRecharge != other.PpsrJackpotRecharge) return false;
      if (PpsrJackpotStatus != other.PpsrJackpotStatus) return false;
      if (PpsrJackpotFeeType != other.PpsrJackpotFeeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasJackpotChips) hash ^= JackpotChips.GetHashCode();
      if (HasJackpotRecharge) hash ^= JackpotRecharge.GetHashCode();
      if (HasJackpotStatus) hash ^= JackpotStatus.GetHashCode();
      if (HasConfigName) hash ^= ConfigName.GetHashCode();
      if (HasIsNewJackpot) hash ^= IsNewJackpot.GetHashCode();
      if (HasIsOptJackpot) hash ^= IsOptJackpot.GetHashCode();
      if (HasJackpotFeeType) hash ^= JackpotFeeType.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasPpsrJackpotChips) hash ^= PpsrJackpotChips.GetHashCode();
      if (HasPpsrJackpotRecharge) hash ^= PpsrJackpotRecharge.GetHashCode();
      if (HasPpsrJackpotStatus) hash ^= PpsrJackpotStatus.GetHashCode();
      if (HasPpsrJackpotFeeType) hash ^= PpsrJackpotFeeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasJackpotChips) {
        output.WriteRawTag(24);
        output.WriteInt64(JackpotChips);
      }
      if (HasJackpotRecharge) {
        output.WriteRawTag(32);
        output.WriteInt64(JackpotRecharge);
      }
      if (HasJackpotStatus) {
        output.WriteRawTag(40);
        output.WriteInt32(JackpotStatus);
      }
      if (HasConfigName) {
        output.WriteRawTag(50);
        output.WriteString(ConfigName);
      }
      if (HasIsNewJackpot) {
        output.WriteRawTag(56);
        output.WriteBool(IsNewJackpot);
      }
      if (HasIsOptJackpot) {
        output.WriteRawTag(64);
        output.WriteBool(IsOptJackpot);
      }
      if (HasJackpotFeeType) {
        output.WriteRawTag(72);
        output.WriteInt32(JackpotFeeType);
      }
      if (HasPpsrid) {
        output.WriteRawTag(80);
        output.WriteInt32(Ppsrid);
      }
      if (HasPpsrJackpotChips) {
        output.WriteRawTag(88);
        output.WriteInt64(PpsrJackpotChips);
      }
      if (HasPpsrJackpotRecharge) {
        output.WriteRawTag(96);
        output.WriteInt64(PpsrJackpotRecharge);
      }
      if (HasPpsrJackpotStatus) {
        output.WriteRawTag(104);
        output.WriteInt32(PpsrJackpotStatus);
      }
      if (HasPpsrJackpotFeeType) {
        output.WriteRawTag(112);
        output.WriteInt32(PpsrJackpotFeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasJackpotChips) {
        output.WriteRawTag(24);
        output.WriteInt64(JackpotChips);
      }
      if (HasJackpotRecharge) {
        output.WriteRawTag(32);
        output.WriteInt64(JackpotRecharge);
      }
      if (HasJackpotStatus) {
        output.WriteRawTag(40);
        output.WriteInt32(JackpotStatus);
      }
      if (HasConfigName) {
        output.WriteRawTag(50);
        output.WriteString(ConfigName);
      }
      if (HasIsNewJackpot) {
        output.WriteRawTag(56);
        output.WriteBool(IsNewJackpot);
      }
      if (HasIsOptJackpot) {
        output.WriteRawTag(64);
        output.WriteBool(IsOptJackpot);
      }
      if (HasJackpotFeeType) {
        output.WriteRawTag(72);
        output.WriteInt32(JackpotFeeType);
      }
      if (HasPpsrid) {
        output.WriteRawTag(80);
        output.WriteInt32(Ppsrid);
      }
      if (HasPpsrJackpotChips) {
        output.WriteRawTag(88);
        output.WriteInt64(PpsrJackpotChips);
      }
      if (HasPpsrJackpotRecharge) {
        output.WriteRawTag(96);
        output.WriteInt64(PpsrJackpotRecharge);
      }
      if (HasPpsrJackpotStatus) {
        output.WriteRawTag(104);
        output.WriteInt32(PpsrJackpotStatus);
      }
      if (HasPpsrJackpotFeeType) {
        output.WriteRawTag(112);
        output.WriteInt32(PpsrJackpotFeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasJackpotChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotChips);
      }
      if (HasJackpotRecharge) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotRecharge);
      }
      if (HasJackpotStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotStatus);
      }
      if (HasConfigName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigName);
      }
      if (HasIsNewJackpot) {
        size += 1 + 1;
      }
      if (HasIsOptJackpot) {
        size += 1 + 1;
      }
      if (HasJackpotFeeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotFeeType);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasPpsrJackpotChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PpsrJackpotChips);
      }
      if (HasPpsrJackpotRecharge) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PpsrJackpotRecharge);
      }
      if (HasPpsrJackpotStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PpsrJackpotStatus);
      }
      if (HasPpsrJackpotFeeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PpsrJackpotFeeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasJackpotChips) {
        JackpotChips = other.JackpotChips;
      }
      if (other.HasJackpotRecharge) {
        JackpotRecharge = other.JackpotRecharge;
      }
      if (other.HasJackpotStatus) {
        JackpotStatus = other.JackpotStatus;
      }
      if (other.HasConfigName) {
        ConfigName = other.ConfigName;
      }
      if (other.HasIsNewJackpot) {
        IsNewJackpot = other.IsNewJackpot;
      }
      if (other.HasIsOptJackpot) {
        IsOptJackpot = other.IsOptJackpot;
      }
      if (other.HasJackpotFeeType) {
        JackpotFeeType = other.JackpotFeeType;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasPpsrJackpotChips) {
        PpsrJackpotChips = other.PpsrJackpotChips;
      }
      if (other.HasPpsrJackpotRecharge) {
        PpsrJackpotRecharge = other.PpsrJackpotRecharge;
      }
      if (other.HasPpsrJackpotStatus) {
        PpsrJackpotStatus = other.PpsrJackpotStatus;
      }
      if (other.HasPpsrJackpotFeeType) {
        PpsrJackpotFeeType = other.PpsrJackpotFeeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            JackpotChips = input.ReadInt64();
            break;
          }
          case 32: {
            JackpotRecharge = input.ReadInt64();
            break;
          }
          case 40: {
            JackpotStatus = input.ReadInt32();
            break;
          }
          case 50: {
            ConfigName = input.ReadString();
            break;
          }
          case 56: {
            IsNewJackpot = input.ReadBool();
            break;
          }
          case 64: {
            IsOptJackpot = input.ReadBool();
            break;
          }
          case 72: {
            JackpotFeeType = input.ReadInt32();
            break;
          }
          case 80: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 88: {
            PpsrJackpotChips = input.ReadInt64();
            break;
          }
          case 96: {
            PpsrJackpotRecharge = input.ReadInt64();
            break;
          }
          case 104: {
            PpsrJackpotStatus = input.ReadInt32();
            break;
          }
          case 112: {
            PpsrJackpotFeeType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            JackpotChips = input.ReadInt64();
            break;
          }
          case 32: {
            JackpotRecharge = input.ReadInt64();
            break;
          }
          case 40: {
            JackpotStatus = input.ReadInt32();
            break;
          }
          case 50: {
            ConfigName = input.ReadString();
            break;
          }
          case 56: {
            IsNewJackpot = input.ReadBool();
            break;
          }
          case 64: {
            IsOptJackpot = input.ReadBool();
            break;
          }
          case 72: {
            JackpotFeeType = input.ReadInt32();
            break;
          }
          case 80: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 88: {
            PpsrJackpotChips = input.ReadInt64();
            break;
          }
          case 96: {
            PpsrJackpotRecharge = input.ReadInt64();
            break;
          }
          case 104: {
            PpsrJackpotStatus = input.ReadInt32();
            break;
          }
          case 112: {
            PpsrJackpotFeeType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotRecordREQ : pb::IMessage<JackPotRecordREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotRecordREQ> _parser = new pb::MessageParser<JackPotRecordREQ>(() => new JackPotRecordREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotRecordREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecordREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecordREQ(JackPotRecordREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecordREQ Clone() {
      return new JackPotRecordREQ(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 3;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 2) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotRecordREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotRecordREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotRecordREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotRecord : pb::IMessage<JackPotRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotRecord> _parser = new pb::MessageParser<JackPotRecord>(() => new JackPotRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecord(JackPotRecord other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      type_ = other.type_;
      reward_ = other.reward_;
      selfCard_ = other.selfCard_.Clone();
      opponentCard_ = other.opponentCard_.Clone();
      fetchTime_ = other.fetchTime_;
      name_ = other.name_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecord Clone() {
      return new JackPotRecord(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private readonly static long RewardDefaultValue = 0L;

    private long reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Reward {
      get { if ((_hasBits0 & 2) != 0) { return reward_; } else { return RewardDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reward_ = value;
      }
    }
    /// <summary>Gets whether the "reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReward {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReward() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "self_card" field.</summary>
    public const int SelfCardFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_selfCard_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> selfCard_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SelfCard {
      get { return selfCard_; }
    }

    /// <summary>Field number for the "opponent_card" field.</summary>
    public const int OpponentCardFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_opponentCard_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> opponentCard_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> OpponentCard {
      get { return opponentCard_; }
    }

    /// <summary>Field number for the "fetch_time" field.</summary>
    public const int FetchTimeFieldNumber = 6;
    private readonly static long FetchTimeDefaultValue = 0L;

    private long fetchTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FetchTime {
      get { if ((_hasBits0 & 4) != 0) { return fetchTime_; } else { return FetchTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fetchTime_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFetchTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "fetch_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFetchTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 8;
    private readonly static string IconDefaultValue = "";

    private string icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Icon {
      get { return icon_ ?? IconDefaultValue; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIcon {
      get { return icon_ != null; }
    }
    /// <summary>Clears the value of the "icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIcon() {
      icon_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Reward != other.Reward) return false;
      if(!selfCard_.Equals(other.selfCard_)) return false;
      if(!opponentCard_.Equals(other.opponentCard_)) return false;
      if (FetchTime != other.FetchTime) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasReward) hash ^= Reward.GetHashCode();
      hash ^= selfCard_.GetHashCode();
      hash ^= opponentCard_.GetHashCode();
      if (HasFetchTime) hash ^= FetchTime.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIcon) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasReward) {
        output.WriteRawTag(24);
        output.WriteInt64(Reward);
      }
      selfCard_.WriteTo(output, _repeated_selfCard_codec);
      opponentCard_.WriteTo(output, _repeated_opponentCard_codec);
      if (HasFetchTime) {
        output.WriteRawTag(48);
        output.WriteInt64(FetchTime);
      }
      if (HasName) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(66);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasReward) {
        output.WriteRawTag(24);
        output.WriteInt64(Reward);
      }
      selfCard_.WriteTo(ref output, _repeated_selfCard_codec);
      opponentCard_.WriteTo(ref output, _repeated_opponentCard_codec);
      if (HasFetchTime) {
        output.WriteRawTag(48);
        output.WriteInt64(FetchTime);
      }
      if (HasName) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(66);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      size += selfCard_.CalculateSize(_repeated_selfCard_codec);
      size += opponentCard_.CalculateSize(_repeated_opponentCard_codec);
      if (HasFetchTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FetchTime);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasReward) {
        Reward = other.Reward;
      }
      selfCard_.Add(other.selfCard_);
      opponentCard_.Add(other.opponentCard_);
      if (other.HasFetchTime) {
        FetchTime = other.FetchTime;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            selfCard_.AddEntriesFrom(input, _repeated_selfCard_codec);
            break;
          }
          case 42:
          case 40: {
            opponentCard_.AddEntriesFrom(input, _repeated_opponentCard_codec);
            break;
          }
          case 48: {
            FetchTime = input.ReadInt64();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            selfCard_.AddEntriesFrom(ref input, _repeated_selfCard_codec);
            break;
          }
          case 42:
          case 40: {
            opponentCard_.AddEntriesFrom(ref input, _repeated_opponentCard_codec);
            break;
          }
          case 48: {
            FetchTime = input.ReadInt64();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NewJackPotReward : pb::IMessage<NewJackPotReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewJackPotReward> _parser = new pb::MessageParser<NewJackPotReward>(() => new NewJackPotReward());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NewJackPotReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewJackPotReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewJackPotReward(NewJackPotReward other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      type_ = other.type_;
      reward_ = other.reward_;
      name_ = other.name_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewJackPotReward Clone() {
      return new NewJackPotReward(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private readonly static long RewardDefaultValue = 0L;

    private long reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Reward {
      get { if ((_hasBits0 & 2) != 0) { return reward_; } else { return RewardDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reward_ = value;
      }
    }
    /// <summary>Gets whether the "reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReward {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReward() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 5;
    private readonly static string IconDefaultValue = "";

    private string icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Icon {
      get { return icon_ ?? IconDefaultValue; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIcon {
      get { return icon_ != null; }
    }
    /// <summary>Clears the value of the "icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIcon() {
      icon_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NewJackPotReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NewJackPotReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Reward != other.Reward) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasReward) hash ^= Reward.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIcon) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasReward) {
        output.WriteRawTag(24);
        output.WriteInt64(Reward);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasReward) {
        output.WriteRawTag(24);
        output.WriteInt64(Reward);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NewJackPotReward other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasReward) {
        Reward = other.Reward;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NewJackPotRecord : pb::IMessage<NewJackPotRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewJackPotRecord> _parser = new pb::MessageParser<NewJackPotRecord>(() => new NewJackPotRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NewJackPotRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewJackPotRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewJackPotRecord(NewJackPotRecord other) : this() {
      _hasBits0 = other._hasBits0;
      gameid_ = other.gameid_;
      fetchTime_ = other.fetchTime_;
      jackpotType_ = other.jackpotType_;
      winCards_ = other.winCards_.Clone();
      loseCards_ = other.loseCards_.Clone();
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NewJackPotRecord Clone() {
      return new NewJackPotRecord(this);
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 1;
    private readonly static string GameidDefaultValue = "";

    private string gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gameid {
      get { return gameid_ ?? GameidDefaultValue; }
      set {
        gameid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gameid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameid {
      get { return gameid_ != null; }
    }
    /// <summary>Clears the value of the "gameid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameid() {
      gameid_ = null;
    }

    /// <summary>Field number for the "fetch_time" field.</summary>
    public const int FetchTimeFieldNumber = 2;
    private readonly static long FetchTimeDefaultValue = 0L;

    private long fetchTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FetchTime {
      get { if ((_hasBits0 & 1) != 0) { return fetchTime_; } else { return FetchTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fetchTime_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFetchTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFetchTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "jackpot_type" field.</summary>
    public const int JackpotTypeFieldNumber = 3;
    private readonly static int JackpotTypeDefaultValue = 0;

    private int jackpotType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotType {
      get { if ((_hasBits0 & 2) != 0) { return jackpotType_; } else { return JackpotTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        jackpotType_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "win_cards" field.</summary>
    public const int WinCardsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_winCards_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> winCards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> WinCards {
      get { return winCards_; }
    }

    /// <summary>Field number for the "lose_cards" field.</summary>
    public const int LoseCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_loseCards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> loseCards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> LoseCards {
      get { return loseCards_; }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Texas.Protocol.NewJackPotReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(50, global::Texas.Protocol.NewJackPotReward.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.NewJackPotReward> rewards_ = new pbc::RepeatedField<global::Texas.Protocol.NewJackPotReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.NewJackPotReward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NewJackPotRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NewJackPotRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gameid != other.Gameid) return false;
      if (FetchTime != other.FetchTime) return false;
      if (JackpotType != other.JackpotType) return false;
      if(!winCards_.Equals(other.winCards_)) return false;
      if(!loseCards_.Equals(other.loseCards_)) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameid) hash ^= Gameid.GetHashCode();
      if (HasFetchTime) hash ^= FetchTime.GetHashCode();
      if (HasJackpotType) hash ^= JackpotType.GetHashCode();
      hash ^= winCards_.GetHashCode();
      hash ^= loseCards_.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameid) {
        output.WriteRawTag(10);
        output.WriteString(Gameid);
      }
      if (HasFetchTime) {
        output.WriteRawTag(16);
        output.WriteInt64(FetchTime);
      }
      if (HasJackpotType) {
        output.WriteRawTag(24);
        output.WriteInt32(JackpotType);
      }
      winCards_.WriteTo(output, _repeated_winCards_codec);
      loseCards_.WriteTo(output, _repeated_loseCards_codec);
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameid) {
        output.WriteRawTag(10);
        output.WriteString(Gameid);
      }
      if (HasFetchTime) {
        output.WriteRawTag(16);
        output.WriteInt64(FetchTime);
      }
      if (HasJackpotType) {
        output.WriteRawTag(24);
        output.WriteInt32(JackpotType);
      }
      winCards_.WriteTo(ref output, _repeated_winCards_codec);
      loseCards_.WriteTo(ref output, _repeated_loseCards_codec);
      rewards_.WriteTo(ref output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gameid);
      }
      if (HasFetchTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FetchTime);
      }
      if (HasJackpotType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotType);
      }
      size += winCards_.CalculateSize(_repeated_winCards_codec);
      size += loseCards_.CalculateSize(_repeated_loseCards_codec);
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NewJackPotRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasGameid) {
        Gameid = other.Gameid;
      }
      if (other.HasFetchTime) {
        FetchTime = other.FetchTime;
      }
      if (other.HasJackpotType) {
        JackpotType = other.JackpotType;
      }
      winCards_.Add(other.winCards_);
      loseCards_.Add(other.loseCards_);
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Gameid = input.ReadString();
            break;
          }
          case 16: {
            FetchTime = input.ReadInt64();
            break;
          }
          case 24: {
            JackpotType = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            winCards_.AddEntriesFrom(input, _repeated_winCards_codec);
            break;
          }
          case 42:
          case 40: {
            loseCards_.AddEntriesFrom(input, _repeated_loseCards_codec);
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Gameid = input.ReadString();
            break;
          }
          case 16: {
            FetchTime = input.ReadInt64();
            break;
          }
          case 24: {
            JackpotType = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            winCards_.AddEntriesFrom(ref input, _repeated_winCards_codec);
            break;
          }
          case 42:
          case 40: {
            loseCards_.AddEntriesFrom(ref input, _repeated_loseCards_codec);
            break;
          }
          case 50: {
            rewards_.AddEntriesFrom(ref input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OptJackPotReward : pb::IMessage<OptJackPotReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptJackPotReward> _parser = new pb::MessageParser<OptJackPotReward>(() => new OptJackPotReward());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptJackPotReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptJackPotReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptJackPotReward(OptJackPotReward other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      type_ = other.type_;
      reward_ = other.reward_;
      name_ = other.name_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptJackPotReward Clone() {
      return new OptJackPotReward(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private readonly static long RewardDefaultValue = 0L;

    private long reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Reward {
      get { if ((_hasBits0 & 2) != 0) { return reward_; } else { return RewardDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reward_ = value;
      }
    }
    /// <summary>Gets whether the "reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReward {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReward() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 5;
    private readonly static string IconDefaultValue = "";

    private string icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Icon {
      get { return icon_ ?? IconDefaultValue; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIcon {
      get { return icon_ != null; }
    }
    /// <summary>Clears the value of the "icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIcon() {
      icon_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptJackPotReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptJackPotReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Reward != other.Reward) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasReward) hash ^= Reward.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIcon) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasReward) {
        output.WriteRawTag(24);
        output.WriteInt64(Reward);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HasReward) {
        output.WriteRawTag(24);
        output.WriteInt64(Reward);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptJackPotReward other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasReward) {
        Reward = other.Reward;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OptJackPotRecord : pb::IMessage<OptJackPotRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptJackPotRecord> _parser = new pb::MessageParser<OptJackPotRecord>(() => new OptJackPotRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptJackPotRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptJackPotRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptJackPotRecord(OptJackPotRecord other) : this() {
      _hasBits0 = other._hasBits0;
      gameid_ = other.gameid_;
      fetchTime_ = other.fetchTime_;
      tableType_ = other.tableType_;
      bbAnte_ = other.bbAnte_;
      jackpotType_ = other.jackpotType_;
      winCards_ = other.winCards_.Clone();
      loseCards_ = other.loseCards_.Clone();
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptJackPotRecord Clone() {
      return new OptJackPotRecord(this);
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 1;
    private readonly static string GameidDefaultValue = "";

    private string gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gameid {
      get { return gameid_ ?? GameidDefaultValue; }
      set {
        gameid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gameid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameid {
      get { return gameid_ != null; }
    }
    /// <summary>Clears the value of the "gameid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameid() {
      gameid_ = null;
    }

    /// <summary>Field number for the "fetch_time" field.</summary>
    public const int FetchTimeFieldNumber = 2;
    private readonly static long FetchTimeDefaultValue = 0L;

    private long fetchTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FetchTime {
      get { if ((_hasBits0 & 1) != 0) { return fetchTime_; } else { return FetchTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fetchTime_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFetchTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFetchTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "table_type" field.</summary>
    public const int TableTypeFieldNumber = 3;
    private readonly static int TableTypeDefaultValue = 0;

    private int tableType_;
    /// <summary>
    /// 1. NLH, 2. AOF, 3. 6+, 4. PLO4, 5. PLO5 Lo, 6. PLO6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TableType {
      get { if ((_hasBits0 & 2) != 0) { return tableType_; } else { return TableTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tableType_ = value;
      }
    }
    /// <summary>Gets whether the "table_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTableType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "table_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTableType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bb_ante" field.</summary>
    public const int BbAnteFieldNumber = 4;
    private readonly static long BbAnteDefaultValue = 0L;

    private long bbAnte_;
    /// <summary>
    /// 只有 6+ 使用ante
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BbAnte {
      get { if ((_hasBits0 & 4) != 0) { return bbAnte_; } else { return BbAnteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bbAnte_ = value;
      }
    }
    /// <summary>Gets whether the "bb_ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBbAnte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bb_ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBbAnte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "jackpot_type" field.</summary>
    public const int JackpotTypeFieldNumber = 5;
    private readonly static int JackpotTypeDefaultValue = 0;

    private int jackpotType_;
    /// <summary>
    /// 1:Cooler JP, 2:Cooler JP Plus, 3:Mixed Cooler JP, 4:Mixed High Hand JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotType {
      get { if ((_hasBits0 & 8) != 0) { return jackpotType_; } else { return JackpotTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        jackpotType_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "win_cards" field.</summary>
    public const int WinCardsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_winCards_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> winCards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> WinCards {
      get { return winCards_; }
    }

    /// <summary>Field number for the "lose_cards" field.</summary>
    public const int LoseCardsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_loseCards_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> loseCards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> LoseCards {
      get { return loseCards_; }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Texas.Protocol.OptJackPotReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(66, global::Texas.Protocol.OptJackPotReward.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.OptJackPotReward> rewards_ = new pbc::RepeatedField<global::Texas.Protocol.OptJackPotReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.OptJackPotReward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptJackPotRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptJackPotRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gameid != other.Gameid) return false;
      if (FetchTime != other.FetchTime) return false;
      if (TableType != other.TableType) return false;
      if (BbAnte != other.BbAnte) return false;
      if (JackpotType != other.JackpotType) return false;
      if(!winCards_.Equals(other.winCards_)) return false;
      if(!loseCards_.Equals(other.loseCards_)) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameid) hash ^= Gameid.GetHashCode();
      if (HasFetchTime) hash ^= FetchTime.GetHashCode();
      if (HasTableType) hash ^= TableType.GetHashCode();
      if (HasBbAnte) hash ^= BbAnte.GetHashCode();
      if (HasJackpotType) hash ^= JackpotType.GetHashCode();
      hash ^= winCards_.GetHashCode();
      hash ^= loseCards_.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameid) {
        output.WriteRawTag(10);
        output.WriteString(Gameid);
      }
      if (HasFetchTime) {
        output.WriteRawTag(16);
        output.WriteInt64(FetchTime);
      }
      if (HasTableType) {
        output.WriteRawTag(24);
        output.WriteInt32(TableType);
      }
      if (HasBbAnte) {
        output.WriteRawTag(32);
        output.WriteInt64(BbAnte);
      }
      if (HasJackpotType) {
        output.WriteRawTag(40);
        output.WriteInt32(JackpotType);
      }
      winCards_.WriteTo(output, _repeated_winCards_codec);
      loseCards_.WriteTo(output, _repeated_loseCards_codec);
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameid) {
        output.WriteRawTag(10);
        output.WriteString(Gameid);
      }
      if (HasFetchTime) {
        output.WriteRawTag(16);
        output.WriteInt64(FetchTime);
      }
      if (HasTableType) {
        output.WriteRawTag(24);
        output.WriteInt32(TableType);
      }
      if (HasBbAnte) {
        output.WriteRawTag(32);
        output.WriteInt64(BbAnte);
      }
      if (HasJackpotType) {
        output.WriteRawTag(40);
        output.WriteInt32(JackpotType);
      }
      winCards_.WriteTo(ref output, _repeated_winCards_codec);
      loseCards_.WriteTo(ref output, _repeated_loseCards_codec);
      rewards_.WriteTo(ref output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gameid);
      }
      if (HasFetchTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FetchTime);
      }
      if (HasTableType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableType);
      }
      if (HasBbAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BbAnte);
      }
      if (HasJackpotType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotType);
      }
      size += winCards_.CalculateSize(_repeated_winCards_codec);
      size += loseCards_.CalculateSize(_repeated_loseCards_codec);
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptJackPotRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasGameid) {
        Gameid = other.Gameid;
      }
      if (other.HasFetchTime) {
        FetchTime = other.FetchTime;
      }
      if (other.HasTableType) {
        TableType = other.TableType;
      }
      if (other.HasBbAnte) {
        BbAnte = other.BbAnte;
      }
      if (other.HasJackpotType) {
        JackpotType = other.JackpotType;
      }
      winCards_.Add(other.winCards_);
      loseCards_.Add(other.loseCards_);
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Gameid = input.ReadString();
            break;
          }
          case 16: {
            FetchTime = input.ReadInt64();
            break;
          }
          case 24: {
            TableType = input.ReadInt32();
            break;
          }
          case 32: {
            BbAnte = input.ReadInt64();
            break;
          }
          case 40: {
            JackpotType = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            winCards_.AddEntriesFrom(input, _repeated_winCards_codec);
            break;
          }
          case 58:
          case 56: {
            loseCards_.AddEntriesFrom(input, _repeated_loseCards_codec);
            break;
          }
          case 66: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Gameid = input.ReadString();
            break;
          }
          case 16: {
            FetchTime = input.ReadInt64();
            break;
          }
          case 24: {
            TableType = input.ReadInt32();
            break;
          }
          case 32: {
            BbAnte = input.ReadInt64();
            break;
          }
          case 40: {
            JackpotType = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            winCards_.AddEntriesFrom(ref input, _repeated_winCards_codec);
            break;
          }
          case 58:
          case 56: {
            loseCards_.AddEntriesFrom(ref input, _repeated_loseCards_codec);
            break;
          }
          case 66: {
            rewards_.AddEntriesFrom(ref input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotRecordRSP : pb::IMessage<JackPotRecordRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotRecordRSP> _parser = new pb::MessageParser<JackPotRecordRSP>(() => new JackPotRecordRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotRecordRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecordRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecordRSP(JackPotRecordRSP other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      record_ = other.record_.Clone();
      newRecord_ = other.newRecord_.Clone();
      optRecord_ = other.optRecord_.Clone();
      optRecordTheGreatest_ = other.optRecordTheGreatest_ != null ? other.optRecordTheGreatest_.Clone() : null;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRecordRSP Clone() {
      return new JackPotRecordRSP(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.JackPotRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.JackPotRecord.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.JackPotRecord> record_ = new pbc::RepeatedField<global::Texas.Protocol.JackPotRecord>();
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.JackPotRecord> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "new_record" field.</summary>
    public const int NewRecordFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.NewJackPotRecord> _repeated_newRecord_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.NewJackPotRecord.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.NewJackPotRecord> newRecord_ = new pbc::RepeatedField<global::Texas.Protocol.NewJackPotRecord>();
    /// <summary>
    /// new cooler jackpot 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.NewJackPotRecord> NewRecord {
      get { return newRecord_; }
    }

    /// <summary>Field number for the "opt_record" field.</summary>
    public const int OptRecordFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Texas.Protocol.OptJackPotRecord> _repeated_optRecord_codec
        = pb::FieldCodec.ForMessage(42, global::Texas.Protocol.OptJackPotRecord.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.OptJackPotRecord> optRecord_ = new pbc::RepeatedField<global::Texas.Protocol.OptJackPotRecord>();
    /// <summary>
    /// 優化版 jackpot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.OptJackPotRecord> OptRecord {
      get { return optRecord_; }
    }

    /// <summary>Field number for the "opt_record_the_greatest" field.</summary>
    public const int OptRecordTheGreatestFieldNumber = 6;
    private global::Texas.Protocol.OptJackPotRecord optRecordTheGreatest_;
    /// <summary>
    /// 優化版 jackpot之最高紀錄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.OptJackPotRecord OptRecordTheGreatest {
      get { return optRecordTheGreatest_; }
      set {
        optRecordTheGreatest_ = value;
      }
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 7;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 2) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotRecordRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotRecordRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if(!record_.Equals(other.record_)) return false;
      if(!newRecord_.Equals(other.newRecord_)) return false;
      if(!optRecord_.Equals(other.optRecord_)) return false;
      if (!object.Equals(OptRecordTheGreatest, other.OptRecordTheGreatest)) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      hash ^= record_.GetHashCode();
      hash ^= newRecord_.GetHashCode();
      hash ^= optRecord_.GetHashCode();
      if (optRecordTheGreatest_ != null) hash ^= OptRecordTheGreatest.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      record_.WriteTo(output, _repeated_record_codec);
      newRecord_.WriteTo(output, _repeated_newRecord_codec);
      optRecord_.WriteTo(output, _repeated_optRecord_codec);
      if (optRecordTheGreatest_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OptRecordTheGreatest);
      }
      if (HasPpsrid) {
        output.WriteRawTag(56);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      record_.WriteTo(ref output, _repeated_record_codec);
      newRecord_.WriteTo(ref output, _repeated_newRecord_codec);
      optRecord_.WriteTo(ref output, _repeated_optRecord_codec);
      if (optRecordTheGreatest_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OptRecordTheGreatest);
      }
      if (HasPpsrid) {
        output.WriteRawTag(56);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      size += record_.CalculateSize(_repeated_record_codec);
      size += newRecord_.CalculateSize(_repeated_newRecord_codec);
      size += optRecord_.CalculateSize(_repeated_optRecord_codec);
      if (optRecordTheGreatest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptRecordTheGreatest);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotRecordRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      record_.Add(other.record_);
      newRecord_.Add(other.newRecord_);
      optRecord_.Add(other.optRecord_);
      if (other.optRecordTheGreatest_ != null) {
        if (optRecordTheGreatest_ == null) {
          OptRecordTheGreatest = new global::Texas.Protocol.OptJackPotRecord();
        }
        OptRecordTheGreatest.MergeFrom(other.OptRecordTheGreatest);
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
          case 34: {
            newRecord_.AddEntriesFrom(input, _repeated_newRecord_codec);
            break;
          }
          case 42: {
            optRecord_.AddEntriesFrom(input, _repeated_optRecord_codec);
            break;
          }
          case 50: {
            if (optRecordTheGreatest_ == null) {
              OptRecordTheGreatest = new global::Texas.Protocol.OptJackPotRecord();
            }
            input.ReadMessage(OptRecordTheGreatest);
            break;
          }
          case 56: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
          case 34: {
            newRecord_.AddEntriesFrom(ref input, _repeated_newRecord_codec);
            break;
          }
          case 42: {
            optRecord_.AddEntriesFrom(ref input, _repeated_optRecord_codec);
            break;
          }
          case 50: {
            if (optRecordTheGreatest_ == null) {
              OptRecordTheGreatest = new global::Texas.Protocol.OptJackPotRecord();
            }
            input.ReadMessage(OptRecordTheGreatest);
            break;
          }
          case 56: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RechargeJackPotREQ : pb::IMessage<RechargeJackPotREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RechargeJackPotREQ> _parser = new pb::MessageParser<RechargeJackPotREQ>(() => new RechargeJackPotREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RechargeJackPotREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotREQ(RechargeJackPotREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      chips_ = other.chips_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotREQ Clone() {
      return new RechargeJackPotREQ(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 3;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 4;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 4) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RechargeJackPotREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RechargeJackPotREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Chips != other.Chips) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasPpsrid) {
        output.WriteRawTag(32);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasPpsrid) {
        output.WriteRawTag(32);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RechargeJackPotREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 32: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 32: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RechargeJackPotRSP : pb::IMessage<RechargeJackPotRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RechargeJackPotRSP> _parser = new pb::MessageParser<RechargeJackPotRSP>(() => new RechargeJackPotRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RechargeJackPotRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRSP(RechargeJackPotRSP other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      code_ = other.code_;
      chips_ = other.chips_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRSP Clone() {
      return new RechargeJackPotRSP(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0成功 | -1 失敗 | -2 jackpot 未开启 | -3 单次充值至少需要3000 | -4 chips不足 | -5 服务器错误 | -6 超过存量上线 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 4;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 4) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 5;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 8) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RechargeJackPotRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RechargeJackPotRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Code != other.Code) return false;
      if (Chips != other.Chips) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasCode) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (HasChips) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasCode) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (HasChips) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RechargeJackPotRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SetJackPotREQ : pb::IMessage<SetJackPotREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetJackPotREQ> _parser = new pb::MessageParser<SetJackPotREQ>(() => new SetJackPotREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SetJackPotREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetJackPotREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetJackPotREQ(SetJackPotREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      status_ = other.status_;
      recharge_ = other.recharge_;
      ppsrid_ = other.ppsrid_;
      feeType_ = other.feeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetJackPotREQ Clone() {
      return new SetJackPotREQ(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    /// 0:關閉, 1:Coller JP, 2:Coller JP Puls, 3:Mixed JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "recharge" field.</summary>
    public const int RechargeFieldNumber = 4;
    private readonly static long RechargeDefaultValue = 0L;

    private long recharge_;
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Recharge {
      get { if ((_hasBits0 & 4) != 0) { return recharge_; } else { return RechargeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        recharge_ = value;
      }
    }
    /// <summary>Gets whether the "recharge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRecharge {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "recharge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRecharge() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 5;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 8) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "fee_type" field.</summary>
    public const int FeeTypeFieldNumber = 6;
    private readonly static int FeeTypeDefaultValue = 0;

    private int feeType_;
    /// <summary>
    /// 0:每手牌抽, 1:抽20BB以上的池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FeeType {
      get { if ((_hasBits0 & 16) != 0) { return feeType_; } else { return FeeTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        feeType_ = value;
      }
    }
    /// <summary>Gets whether the "fee_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeeType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fee_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeeType() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SetJackPotREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SetJackPotREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Status != other.Status) return false;
      if (Recharge != other.Recharge) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (FeeType != other.FeeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasRecharge) hash ^= Recharge.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasFeeType) hash ^= FeeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (HasRecharge) {
        output.WriteRawTag(32);
        output.WriteInt64(Recharge);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (HasFeeType) {
        output.WriteRawTag(48);
        output.WriteInt32(FeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasStatus) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (HasRecharge) {
        output.WriteRawTag(32);
        output.WriteInt64(Recharge);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (HasFeeType) {
        output.WriteRawTag(48);
        output.WriteInt32(FeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (HasRecharge) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Recharge);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasFeeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SetJackPotREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasRecharge) {
        Recharge = other.Recharge;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasFeeType) {
        FeeType = other.FeeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            Recharge = input.ReadInt64();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 48: {
            FeeType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            Recharge = input.ReadInt64();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 48: {
            FeeType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SetJackPotRSP : pb::IMessage<SetJackPotRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetJackPotRSP> _parser = new pb::MessageParser<SetJackPotRSP>(() => new SetJackPotRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SetJackPotRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetJackPotRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetJackPotRSP(SetJackPotRSP other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      code_ = other.code_;
      status_ = other.status_;
      ppsrid_ = other.ppsrid_;
      feeType_ = other.feeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetJackPotRSP Clone() {
      return new SetJackPotRSP(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 0成功|-1失败|-2首次开启需充值3000以上|-3充值失败|-4設定相同JP type|-5非可修改時段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    /// 0:關閉, 1:Coller JP, 2:Coller JP Puls, 3:Mixed JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 4) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 5;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 8) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "fee_type" field.</summary>
    public const int FeeTypeFieldNumber = 6;
    private readonly static int FeeTypeDefaultValue = 0;

    private int feeType_;
    /// <summary>
    /// 0:每手牌抽, 1:抽20BB以上的池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FeeType {
      get { if ((_hasBits0 & 16) != 0) { return feeType_; } else { return FeeTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        feeType_ = value;
      }
    }
    /// <summary>Gets whether the "fee_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeeType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fee_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeeType() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SetJackPotRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SetJackPotRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Code != other.Code) return false;
      if (Status != other.Status) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (FeeType != other.FeeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasFeeType) hash ^= FeeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasCode) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (HasStatus) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (HasFeeType) {
        output.WriteRawTag(48);
        output.WriteInt32(FeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasCode) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (HasStatus) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (HasFeeType) {
        output.WriteRawTag(48);
        output.WriteInt32(FeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasFeeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SetJackPotRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasFeeType) {
        FeeType = other.FeeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 48: {
            FeeType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 48: {
            FeeType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotConfig : pb::IMessage<JackPotConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotConfig> _parser = new pb::MessageParser<JackPotConfig>(() => new JackPotConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfig(JackPotConfig other) : this() {
      _hasBits0 = other._hasBits0;
      roomType_ = other.roomType_;
      cardType_ = other.cardType_;
      bigBlind_ = other.bigBlind_;
      rate_ = other.rate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfig Clone() {
      return new JackPotConfig(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private readonly static int RoomTypeDefaultValue = 0;

    private int roomType_;
    /// <summary>
    /// 1NLO|2PLO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomType {
      get { if ((_hasBits0 & 1) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private readonly static int CardTypeDefaultValue = 0;

    private int cardType_;
    /// <summary>
    /// (cooler JackPot)1四条vs葫芦|2葫芦vs同花顺|3葫芦vs皇同|4四条vs四条|5四条vs同花顺|6四条vs皇同|7同花顺vs同花顺|8同花顺vs皇同 --- (大牌JackPot)9四条|10同花顺|11皇同
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CardType {
      get { if ((_hasBits0 & 2) != 0) { return cardType_; } else { return CardTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cardType_ = value;
      }
    }
    /// <summary>Gets whether the "card_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCardType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "card_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCardType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 3;
    private readonly static int BigBlindDefaultValue = 0;

    private int bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BigBlind {
      get { if ((_hasBits0 & 4) != 0) { return bigBlind_; } else { return BigBlindDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigBlind {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBigBlind() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 4;
    private readonly static int RateDefaultValue = 0;

    private int rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rate {
      get { if ((_hasBits0 & 8) != 0) { return rate_; } else { return RateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rate_ = value;
      }
    }
    /// <summary>Gets whether the "rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRate() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (CardType != other.CardType) return false;
      if (BigBlind != other.BigBlind) return false;
      if (Rate != other.Rate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasCardType) hash ^= CardType.GetHashCode();
      if (HasBigBlind) hash ^= BigBlind.GetHashCode();
      if (HasRate) hash ^= Rate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomType) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasBigBlind) {
        output.WriteRawTag(24);
        output.WriteInt32(BigBlind);
      }
      if (HasRate) {
        output.WriteRawTag(32);
        output.WriteInt32(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomType) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasBigBlind) {
        output.WriteRawTag(24);
        output.WriteInt32(BigBlind);
      }
      if (HasRate) {
        output.WriteRawTag(32);
        output.WriteInt32(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (HasCardType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (HasBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigBlind);
      }
      if (HasRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasCardType) {
        CardType = other.CardType;
      }
      if (other.HasBigBlind) {
        BigBlind = other.BigBlind;
      }
      if (other.HasRate) {
        Rate = other.Rate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            BigBlind = input.ReadInt32();
            break;
          }
          case 32: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            BigBlind = input.ReadInt32();
            break;
          }
          case 32: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotBrcConfigREQ : pb::IMessage<JackPotBrcConfigREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotBrcConfigREQ> _parser = new pb::MessageParser<JackPotBrcConfigREQ>(() => new JackPotBrcConfigREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotBrcConfigREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBrcConfigREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBrcConfigREQ(JackPotBrcConfigREQ other) : this() {
      _hasBits0 = other._hasBits0;
      clubid_ = other.clubid_;
      isJackpotBroadcastEnable_ = other.isJackpotBroadcastEnable_;
      jackpotBroadcastThreshold_ = other.jackpotBroadcastThreshold_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBrcConfigREQ Clone() {
      return new JackPotBrcConfigREQ(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "is_jackpot_broadcast_enable" field.</summary>
    public const int IsJackpotBroadcastEnableFieldNumber = 2;
    private readonly static bool IsJackpotBroadcastEnableDefaultValue = false;

    private bool isJackpotBroadcastEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsJackpotBroadcastEnable {
      get { if ((_hasBits0 & 1) != 0) { return isJackpotBroadcastEnable_; } else { return IsJackpotBroadcastEnableDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isJackpotBroadcastEnable_ = value;
      }
    }
    /// <summary>Gets whether the "is_jackpot_broadcast_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsJackpotBroadcastEnable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_jackpot_broadcast_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsJackpotBroadcastEnable() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "jackpot_broadcast_threshold" field.</summary>
    public const int JackpotBroadcastThresholdFieldNumber = 3;
    private readonly static long JackpotBroadcastThresholdDefaultValue = 0L;

    private long jackpotBroadcastThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotBroadcastThreshold {
      get { if ((_hasBits0 & 2) != 0) { return jackpotBroadcastThreshold_; } else { return JackpotBroadcastThresholdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        jackpotBroadcastThreshold_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_broadcast_threshold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotBroadcastThreshold {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_broadcast_threshold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotBroadcastThreshold() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 4;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 4) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotBrcConfigREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotBrcConfigREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      if (IsJackpotBroadcastEnable != other.IsJackpotBroadcastEnable) return false;
      if (JackpotBroadcastThreshold != other.JackpotBroadcastThreshold) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasIsJackpotBroadcastEnable) hash ^= IsJackpotBroadcastEnable.GetHashCode();
      if (HasJackpotBroadcastThreshold) hash ^= JackpotBroadcastThreshold.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(10);
        output.WriteString(Clubid);
      }
      if (HasIsJackpotBroadcastEnable) {
        output.WriteRawTag(16);
        output.WriteBool(IsJackpotBroadcastEnable);
      }
      if (HasJackpotBroadcastThreshold) {
        output.WriteRawTag(24);
        output.WriteInt64(JackpotBroadcastThreshold);
      }
      if (HasPpsrid) {
        output.WriteRawTag(32);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(10);
        output.WriteString(Clubid);
      }
      if (HasIsJackpotBroadcastEnable) {
        output.WriteRawTag(16);
        output.WriteBool(IsJackpotBroadcastEnable);
      }
      if (HasJackpotBroadcastThreshold) {
        output.WriteRawTag(24);
        output.WriteInt64(JackpotBroadcastThreshold);
      }
      if (HasPpsrid) {
        output.WriteRawTag(32);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasIsJackpotBroadcastEnable) {
        size += 1 + 1;
      }
      if (HasJackpotBroadcastThreshold) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotBroadcastThreshold);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotBrcConfigREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasIsJackpotBroadcastEnable) {
        IsJackpotBroadcastEnable = other.IsJackpotBroadcastEnable;
      }
      if (other.HasJackpotBroadcastThreshold) {
        JackpotBroadcastThreshold = other.JackpotBroadcastThreshold;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Clubid = input.ReadString();
            break;
          }
          case 16: {
            IsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 24: {
            JackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 32: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Clubid = input.ReadString();
            break;
          }
          case 16: {
            IsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 24: {
            JackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 32: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotBrcConfigRSP : pb::IMessage<JackPotBrcConfigRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotBrcConfigRSP> _parser = new pb::MessageParser<JackPotBrcConfigRSP>(() => new JackPotBrcConfigRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotBrcConfigRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBrcConfigRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBrcConfigRSP(JackPotBrcConfigRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      clubid_ = other.clubid_;
      isJackpotBroadcastEnable_ = other.isJackpotBroadcastEnable_;
      jackpotBroadcastThreshold_ = other.jackpotBroadcastThreshold_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBrcConfigRSP Clone() {
      return new JackPotBrcConfigRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// -1 fail, 0 success
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "is_jackpot_broadcast_enable" field.</summary>
    public const int IsJackpotBroadcastEnableFieldNumber = 3;
    private readonly static bool IsJackpotBroadcastEnableDefaultValue = false;

    private bool isJackpotBroadcastEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsJackpotBroadcastEnable {
      get { if ((_hasBits0 & 2) != 0) { return isJackpotBroadcastEnable_; } else { return IsJackpotBroadcastEnableDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isJackpotBroadcastEnable_ = value;
      }
    }
    /// <summary>Gets whether the "is_jackpot_broadcast_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsJackpotBroadcastEnable {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_jackpot_broadcast_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsJackpotBroadcastEnable() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "jackpot_broadcast_threshold" field.</summary>
    public const int JackpotBroadcastThresholdFieldNumber = 4;
    private readonly static long JackpotBroadcastThresholdDefaultValue = 0L;

    private long jackpotBroadcastThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotBroadcastThreshold {
      get { if ((_hasBits0 & 4) != 0) { return jackpotBroadcastThreshold_; } else { return JackpotBroadcastThresholdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        jackpotBroadcastThreshold_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_broadcast_threshold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotBroadcastThreshold {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_broadcast_threshold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotBroadcastThreshold() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 5;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 8) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotBrcConfigRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotBrcConfigRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Clubid != other.Clubid) return false;
      if (IsJackpotBroadcastEnable != other.IsJackpotBroadcastEnable) return false;
      if (JackpotBroadcastThreshold != other.JackpotBroadcastThreshold) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasIsJackpotBroadcastEnable) hash ^= IsJackpotBroadcastEnable.GetHashCode();
      if (HasJackpotBroadcastThreshold) hash ^= JackpotBroadcastThreshold.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasIsJackpotBroadcastEnable) {
        output.WriteRawTag(24);
        output.WriteBool(IsJackpotBroadcastEnable);
      }
      if (HasJackpotBroadcastThreshold) {
        output.WriteRawTag(32);
        output.WriteInt64(JackpotBroadcastThreshold);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasIsJackpotBroadcastEnable) {
        output.WriteRawTag(24);
        output.WriteBool(IsJackpotBroadcastEnable);
      }
      if (HasJackpotBroadcastThreshold) {
        output.WriteRawTag(32);
        output.WriteInt64(JackpotBroadcastThreshold);
      }
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasIsJackpotBroadcastEnable) {
        size += 1 + 1;
      }
      if (HasJackpotBroadcastThreshold) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotBroadcastThreshold);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotBrcConfigRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasIsJackpotBroadcastEnable) {
        IsJackpotBroadcastEnable = other.IsJackpotBroadcastEnable;
      }
      if (other.HasJackpotBroadcastThreshold) {
        JackpotBroadcastThreshold = other.JackpotBroadcastThreshold;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            IsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 32: {
            JackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            IsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 32: {
            JackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class newJackPotConfig : pb::IMessage<newJackPotConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<newJackPotConfig> _parser = new pb::MessageParser<newJackPotConfig>(() => new newJackPotConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<newJackPotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public newJackPotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public newJackPotConfig(newJackPotConfig other) : this() {
      _hasBits0 = other._hasBits0;
      gameType_ = other.gameType_;
      cardType_ = other.cardType_;
      minBigBlind_ = other.minBigBlind_;
      maxBigBlind_ = other.maxBigBlind_;
      totalRate_ = other.totalRate_;
      winRate_ = other.winRate_;
      loseRate_ = other.loseRate_;
      shareRate_ = other.shareRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public newJackPotConfig Clone() {
      return new newJackPotConfig(this);
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 1;
    private readonly static int GameTypeDefaultValue = 0;

    private int gameType_;
    /// <summary>
    /// enum TableGameType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { if ((_hasBits0 & 1) != 0) { return gameType_; } else { return GameTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameType_ = value;
      }
    }
    /// <summary>Gets whether the "game_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private readonly static int CardTypeDefaultValue = 0;

    private int cardType_;
    /// <summary>
    /// (cooler JackPot)1四条vs葫芦|2葫芦vs同花顺|3葫芦vs皇同|4四条vs四条|5四条vs同花顺|6四条vs皇同|7同花顺vs同花顺|8同花顺vs皇同
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CardType {
      get { if ((_hasBits0 & 2) != 0) { return cardType_; } else { return CardTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cardType_ = value;
      }
    }
    /// <summary>Gets whether the "card_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCardType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "card_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCardType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "min_big_blind" field.</summary>
    public const int MinBigBlindFieldNumber = 3;
    private readonly static int MinBigBlindDefaultValue = 0;

    private int minBigBlind_;
    /// <summary>
    /// -1 代表以下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBigBlind {
      get { if ((_hasBits0 & 4) != 0) { return minBigBlind_; } else { return MinBigBlindDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minBigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "min_big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBigBlind {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBigBlind() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_big_blind" field.</summary>
    public const int MaxBigBlindFieldNumber = 4;
    private readonly static int MaxBigBlindDefaultValue = 0;

    private int maxBigBlind_;
    /// <summary>
    /// -1 代表以上
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxBigBlind {
      get { if ((_hasBits0 & 8) != 0) { return maxBigBlind_; } else { return MaxBigBlindDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxBigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "max_big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBigBlind {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBigBlind() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "total_rate" field.</summary>
    public const int TotalRateFieldNumber = 5;
    private readonly static int TotalRateDefaultValue = 0;

    private int totalRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalRate {
      get { if ((_hasBits0 & 16) != 0) { return totalRate_; } else { return TotalRateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        totalRate_ = value;
      }
    }
    /// <summary>Gets whether the "total_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalRate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "total_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalRate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "win_rate" field.</summary>
    public const int WinRateFieldNumber = 6;
    private readonly static int WinRateDefaultValue = 0;

    private int winRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinRate {
      get { if ((_hasBits0 & 32) != 0) { return winRate_; } else { return WinRateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        winRate_ = value;
      }
    }
    /// <summary>Gets whether the "win_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinRate {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "win_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinRate() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "lose_rate" field.</summary>
    public const int LoseRateFieldNumber = 7;
    private readonly static int LoseRateDefaultValue = 0;

    private int loseRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LoseRate {
      get { if ((_hasBits0 & 64) != 0) { return loseRate_; } else { return LoseRateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        loseRate_ = value;
      }
    }
    /// <summary>Gets whether the "lose_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoseRate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "lose_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoseRate() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "share_rate" field.</summary>
    public const int ShareRateFieldNumber = 8;
    private readonly static int ShareRateDefaultValue = 0;

    private int shareRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShareRate {
      get { if ((_hasBits0 & 128) != 0) { return shareRate_; } else { return ShareRateDefaultValue; } }
      set {
        _hasBits0 |= 128;
        shareRate_ = value;
      }
    }
    /// <summary>Gets whether the "share_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShareRate {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "share_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShareRate() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as newJackPotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(newJackPotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameType != other.GameType) return false;
      if (CardType != other.CardType) return false;
      if (MinBigBlind != other.MinBigBlind) return false;
      if (MaxBigBlind != other.MaxBigBlind) return false;
      if (TotalRate != other.TotalRate) return false;
      if (WinRate != other.WinRate) return false;
      if (LoseRate != other.LoseRate) return false;
      if (ShareRate != other.ShareRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameType) hash ^= GameType.GetHashCode();
      if (HasCardType) hash ^= CardType.GetHashCode();
      if (HasMinBigBlind) hash ^= MinBigBlind.GetHashCode();
      if (HasMaxBigBlind) hash ^= MaxBigBlind.GetHashCode();
      if (HasTotalRate) hash ^= TotalRate.GetHashCode();
      if (HasWinRate) hash ^= WinRate.GetHashCode();
      if (HasLoseRate) hash ^= LoseRate.GetHashCode();
      if (HasShareRate) hash ^= ShareRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameType) {
        output.WriteRawTag(8);
        output.WriteInt32(GameType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasMinBigBlind) {
        output.WriteRawTag(24);
        output.WriteInt32(MinBigBlind);
      }
      if (HasMaxBigBlind) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxBigBlind);
      }
      if (HasTotalRate) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalRate);
      }
      if (HasWinRate) {
        output.WriteRawTag(48);
        output.WriteInt32(WinRate);
      }
      if (HasLoseRate) {
        output.WriteRawTag(56);
        output.WriteInt32(LoseRate);
      }
      if (HasShareRate) {
        output.WriteRawTag(64);
        output.WriteInt32(ShareRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameType) {
        output.WriteRawTag(8);
        output.WriteInt32(GameType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasMinBigBlind) {
        output.WriteRawTag(24);
        output.WriteInt32(MinBigBlind);
      }
      if (HasMaxBigBlind) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxBigBlind);
      }
      if (HasTotalRate) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalRate);
      }
      if (HasWinRate) {
        output.WriteRawTag(48);
        output.WriteInt32(WinRate);
      }
      if (HasLoseRate) {
        output.WriteRawTag(56);
        output.WriteInt32(LoseRate);
      }
      if (HasShareRate) {
        output.WriteRawTag(64);
        output.WriteInt32(ShareRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (HasCardType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (HasMinBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinBigBlind);
      }
      if (HasMaxBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBigBlind);
      }
      if (HasTotalRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRate);
      }
      if (HasWinRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinRate);
      }
      if (HasLoseRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoseRate);
      }
      if (HasShareRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(newJackPotConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasCardType) {
        CardType = other.CardType;
      }
      if (other.HasMinBigBlind) {
        MinBigBlind = other.MinBigBlind;
      }
      if (other.HasMaxBigBlind) {
        MaxBigBlind = other.MaxBigBlind;
      }
      if (other.HasTotalRate) {
        TotalRate = other.TotalRate;
      }
      if (other.HasWinRate) {
        WinRate = other.WinRate;
      }
      if (other.HasLoseRate) {
        LoseRate = other.LoseRate;
      }
      if (other.HasShareRate) {
        ShareRate = other.ShareRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            MinBigBlind = input.ReadInt32();
            break;
          }
          case 32: {
            MaxBigBlind = input.ReadInt32();
            break;
          }
          case 40: {
            TotalRate = input.ReadInt32();
            break;
          }
          case 48: {
            WinRate = input.ReadInt32();
            break;
          }
          case 56: {
            LoseRate = input.ReadInt32();
            break;
          }
          case 64: {
            ShareRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            MinBigBlind = input.ReadInt32();
            break;
          }
          case 32: {
            MaxBigBlind = input.ReadInt32();
            break;
          }
          case 40: {
            TotalRate = input.ReadInt32();
            break;
          }
          case 48: {
            WinRate = input.ReadInt32();
            break;
          }
          case 56: {
            LoseRate = input.ReadInt32();
            break;
          }
          case 64: {
            ShareRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CoolerJackPotConfig : pb::IMessage<CoolerJackPotConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CoolerJackPotConfig> _parser = new pb::MessageParser<CoolerJackPotConfig>(() => new CoolerJackPotConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CoolerJackPotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoolerJackPotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoolerJackPotConfig(CoolerJackPotConfig other) : this() {
      _hasBits0 = other._hasBits0;
      gameType_ = other.gameType_;
      cardType_ = other.cardType_;
      totalRate_ = other.totalRate_;
      winRate_ = other.winRate_;
      loseRate_ = other.loseRate_;
      shareRate_ = other.shareRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoolerJackPotConfig Clone() {
      return new CoolerJackPotConfig(this);
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 1;
    private readonly static int GameTypeDefaultValue = 0;

    private int gameType_;
    /// <summary>
    /// enum OptTableGameType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { if ((_hasBits0 & 1) != 0) { return gameType_; } else { return GameTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameType_ = value;
      }
    }
    /// <summary>Gets whether the "game_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private readonly static int CardTypeDefaultValue = 0;

    private int cardType_;
    /// <summary>
    /// Cooler: 1.J葫蘆輸(plus無葫蘆), 2.四條輸, 3.同花順輸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CardType {
      get { if ((_hasBits0 & 2) != 0) { return cardType_; } else { return CardTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cardType_ = value;
      }
    }
    /// <summary>Gets whether the "card_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCardType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "card_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCardType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_rate" field.</summary>
    public const int TotalRateFieldNumber = 3;
    private readonly static int TotalRateDefaultValue = 0;

    private int totalRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalRate {
      get { if ((_hasBits0 & 4) != 0) { return totalRate_; } else { return TotalRateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalRate_ = value;
      }
    }
    /// <summary>Gets whether the "total_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalRate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalRate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "win_rate" field.</summary>
    public const int WinRateFieldNumber = 4;
    private readonly static int WinRateDefaultValue = 0;

    private int winRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinRate {
      get { if ((_hasBits0 & 8) != 0) { return winRate_; } else { return WinRateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        winRate_ = value;
      }
    }
    /// <summary>Gets whether the "win_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinRate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "win_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinRate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lose_rate" field.</summary>
    public const int LoseRateFieldNumber = 5;
    private readonly static int LoseRateDefaultValue = 0;

    private int loseRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LoseRate {
      get { if ((_hasBits0 & 16) != 0) { return loseRate_; } else { return LoseRateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        loseRate_ = value;
      }
    }
    /// <summary>Gets whether the "lose_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoseRate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "lose_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoseRate() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "share_rate" field.</summary>
    public const int ShareRateFieldNumber = 6;
    private readonly static int ShareRateDefaultValue = 0;

    private int shareRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShareRate {
      get { if ((_hasBits0 & 32) != 0) { return shareRate_; } else { return ShareRateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        shareRate_ = value;
      }
    }
    /// <summary>Gets whether the "share_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShareRate {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "share_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShareRate() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CoolerJackPotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CoolerJackPotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameType != other.GameType) return false;
      if (CardType != other.CardType) return false;
      if (TotalRate != other.TotalRate) return false;
      if (WinRate != other.WinRate) return false;
      if (LoseRate != other.LoseRate) return false;
      if (ShareRate != other.ShareRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameType) hash ^= GameType.GetHashCode();
      if (HasCardType) hash ^= CardType.GetHashCode();
      if (HasTotalRate) hash ^= TotalRate.GetHashCode();
      if (HasWinRate) hash ^= WinRate.GetHashCode();
      if (HasLoseRate) hash ^= LoseRate.GetHashCode();
      if (HasShareRate) hash ^= ShareRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameType) {
        output.WriteRawTag(8);
        output.WriteInt32(GameType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasTotalRate) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRate);
      }
      if (HasWinRate) {
        output.WriteRawTag(32);
        output.WriteInt32(WinRate);
      }
      if (HasLoseRate) {
        output.WriteRawTag(40);
        output.WriteInt32(LoseRate);
      }
      if (HasShareRate) {
        output.WriteRawTag(48);
        output.WriteInt32(ShareRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameType) {
        output.WriteRawTag(8);
        output.WriteInt32(GameType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasTotalRate) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRate);
      }
      if (HasWinRate) {
        output.WriteRawTag(32);
        output.WriteInt32(WinRate);
      }
      if (HasLoseRate) {
        output.WriteRawTag(40);
        output.WriteInt32(LoseRate);
      }
      if (HasShareRate) {
        output.WriteRawTag(48);
        output.WriteInt32(ShareRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (HasCardType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (HasTotalRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRate);
      }
      if (HasWinRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinRate);
      }
      if (HasLoseRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoseRate);
      }
      if (HasShareRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CoolerJackPotConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasCardType) {
        CardType = other.CardType;
      }
      if (other.HasTotalRate) {
        TotalRate = other.TotalRate;
      }
      if (other.HasWinRate) {
        WinRate = other.WinRate;
      }
      if (other.HasLoseRate) {
        LoseRate = other.LoseRate;
      }
      if (other.HasShareRate) {
        ShareRate = other.ShareRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRate = input.ReadInt32();
            break;
          }
          case 32: {
            WinRate = input.ReadInt32();
            break;
          }
          case 40: {
            LoseRate = input.ReadInt32();
            break;
          }
          case 48: {
            ShareRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRate = input.ReadInt32();
            break;
          }
          case 32: {
            WinRate = input.ReadInt32();
            break;
          }
          case 40: {
            LoseRate = input.ReadInt32();
            break;
          }
          case 48: {
            ShareRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HighHandJackPotConfig : pb::IMessage<HighHandJackPotConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HighHandJackPotConfig> _parser = new pb::MessageParser<HighHandJackPotConfig>(() => new HighHandJackPotConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HighHandJackPotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HighHandJackPotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HighHandJackPotConfig(HighHandJackPotConfig other) : this() {
      _hasBits0 = other._hasBits0;
      gameType_ = other.gameType_;
      cardType_ = other.cardType_;
      totalRate_ = other.totalRate_;
      winRate_ = other.winRate_;
      shareRate_ = other.shareRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HighHandJackPotConfig Clone() {
      return new HighHandJackPotConfig(this);
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 1;
    private readonly static int GameTypeDefaultValue = 0;

    private int gameType_;
    /// <summary>
    /// enum OptTableGameType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { if ((_hasBits0 & 1) != 0) { return gameType_; } else { return GameTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameType_ = value;
      }
    }
    /// <summary>Gets whether the "game_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private readonly static int CardTypeDefaultValue = 0;

    private int cardType_;
    /// <summary>
    /// High Hand: 1.拿到四條, 2.拿到同花順, 3.拿到皇家同花順
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CardType {
      get { if ((_hasBits0 & 2) != 0) { return cardType_; } else { return CardTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cardType_ = value;
      }
    }
    /// <summary>Gets whether the "card_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCardType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "card_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCardType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_rate" field.</summary>
    public const int TotalRateFieldNumber = 3;
    private readonly static int TotalRateDefaultValue = 0;

    private int totalRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalRate {
      get { if ((_hasBits0 & 4) != 0) { return totalRate_; } else { return TotalRateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalRate_ = value;
      }
    }
    /// <summary>Gets whether the "total_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalRate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalRate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "win_rate" field.</summary>
    public const int WinRateFieldNumber = 4;
    private readonly static int WinRateDefaultValue = 0;

    private int winRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinRate {
      get { if ((_hasBits0 & 8) != 0) { return winRate_; } else { return WinRateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        winRate_ = value;
      }
    }
    /// <summary>Gets whether the "win_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinRate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "win_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinRate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "share_rate" field.</summary>
    public const int ShareRateFieldNumber = 5;
    private readonly static int ShareRateDefaultValue = 0;

    private int shareRate_;
    /// <summary>
    /// High Hand 只有贏家和其他玩家，沒有輸家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShareRate {
      get { if ((_hasBits0 & 16) != 0) { return shareRate_; } else { return ShareRateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        shareRate_ = value;
      }
    }
    /// <summary>Gets whether the "share_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShareRate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "share_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShareRate() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HighHandJackPotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HighHandJackPotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameType != other.GameType) return false;
      if (CardType != other.CardType) return false;
      if (TotalRate != other.TotalRate) return false;
      if (WinRate != other.WinRate) return false;
      if (ShareRate != other.ShareRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameType) hash ^= GameType.GetHashCode();
      if (HasCardType) hash ^= CardType.GetHashCode();
      if (HasTotalRate) hash ^= TotalRate.GetHashCode();
      if (HasWinRate) hash ^= WinRate.GetHashCode();
      if (HasShareRate) hash ^= ShareRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameType) {
        output.WriteRawTag(8);
        output.WriteInt32(GameType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasTotalRate) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRate);
      }
      if (HasWinRate) {
        output.WriteRawTag(32);
        output.WriteInt32(WinRate);
      }
      if (HasShareRate) {
        output.WriteRawTag(40);
        output.WriteInt32(ShareRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameType) {
        output.WriteRawTag(8);
        output.WriteInt32(GameType);
      }
      if (HasCardType) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (HasTotalRate) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalRate);
      }
      if (HasWinRate) {
        output.WriteRawTag(32);
        output.WriteInt32(WinRate);
      }
      if (HasShareRate) {
        output.WriteRawTag(40);
        output.WriteInt32(ShareRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (HasCardType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (HasTotalRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRate);
      }
      if (HasWinRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinRate);
      }
      if (HasShareRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShareRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HighHandJackPotConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasCardType) {
        CardType = other.CardType;
      }
      if (other.HasTotalRate) {
        TotalRate = other.TotalRate;
      }
      if (other.HasWinRate) {
        WinRate = other.WinRate;
      }
      if (other.HasShareRate) {
        ShareRate = other.ShareRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRate = input.ReadInt32();
            break;
          }
          case 32: {
            WinRate = input.ReadInt32();
            break;
          }
          case 40: {
            ShareRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameType = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalRate = input.ReadInt32();
            break;
          }
          case 32: {
            WinRate = input.ReadInt32();
            break;
          }
          case 40: {
            ShareRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class optJackPotConfig : pb::IMessage<optJackPotConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<optJackPotConfig> _parser = new pb::MessageParser<optJackPotConfig>(() => new optJackPotConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<optJackPotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotConfig(optJackPotConfig other) : this() {
      coolerJackpot_ = other.coolerJackpot_.Clone();
      coolerPlusJackpot_ = other.coolerPlusJackpot_.Clone();
      coolerMixedJackpot_ = other.coolerMixedJackpot_.Clone();
      highHandMixedJackpot_ = other.highHandMixedJackpot_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotConfig Clone() {
      return new optJackPotConfig(this);
    }

    /// <summary>Field number for the "cooler_jackpot" field.</summary>
    public const int CoolerJackpotFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.CoolerJackPotConfig> _repeated_coolerJackpot_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.CoolerJackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig> coolerJackpot_ = new pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig> CoolerJackpot {
      get { return coolerJackpot_; }
    }

    /// <summary>Field number for the "cooler_plus_jackpot" field.</summary>
    public const int CoolerPlusJackpotFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.CoolerJackPotConfig> _repeated_coolerPlusJackpot_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.CoolerJackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig> coolerPlusJackpot_ = new pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig> CoolerPlusJackpot {
      get { return coolerPlusJackpot_; }
    }

    /// <summary>Field number for the "cooler_mixed_jackpot" field.</summary>
    public const int CoolerMixedJackpotFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.CoolerJackPotConfig> _repeated_coolerMixedJackpot_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.CoolerJackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig> coolerMixedJackpot_ = new pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.CoolerJackPotConfig> CoolerMixedJackpot {
      get { return coolerMixedJackpot_; }
    }

    /// <summary>Field number for the "high_hand_mixed_jackpot" field.</summary>
    public const int HighHandMixedJackpotFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.HighHandJackPotConfig> _repeated_highHandMixedJackpot_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.HighHandJackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.HighHandJackPotConfig> highHandMixedJackpot_ = new pbc::RepeatedField<global::Texas.Protocol.HighHandJackPotConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.HighHandJackPotConfig> HighHandMixedJackpot {
      get { return highHandMixedJackpot_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as optJackPotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(optJackPotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coolerJackpot_.Equals(other.coolerJackpot_)) return false;
      if(!coolerPlusJackpot_.Equals(other.coolerPlusJackpot_)) return false;
      if(!coolerMixedJackpot_.Equals(other.coolerMixedJackpot_)) return false;
      if(!highHandMixedJackpot_.Equals(other.highHandMixedJackpot_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coolerJackpot_.GetHashCode();
      hash ^= coolerPlusJackpot_.GetHashCode();
      hash ^= coolerMixedJackpot_.GetHashCode();
      hash ^= highHandMixedJackpot_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      coolerJackpot_.WriteTo(output, _repeated_coolerJackpot_codec);
      coolerPlusJackpot_.WriteTo(output, _repeated_coolerPlusJackpot_codec);
      coolerMixedJackpot_.WriteTo(output, _repeated_coolerMixedJackpot_codec);
      highHandMixedJackpot_.WriteTo(output, _repeated_highHandMixedJackpot_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      coolerJackpot_.WriteTo(ref output, _repeated_coolerJackpot_codec);
      coolerPlusJackpot_.WriteTo(ref output, _repeated_coolerPlusJackpot_codec);
      coolerMixedJackpot_.WriteTo(ref output, _repeated_coolerMixedJackpot_codec);
      highHandMixedJackpot_.WriteTo(ref output, _repeated_highHandMixedJackpot_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += coolerJackpot_.CalculateSize(_repeated_coolerJackpot_codec);
      size += coolerPlusJackpot_.CalculateSize(_repeated_coolerPlusJackpot_codec);
      size += coolerMixedJackpot_.CalculateSize(_repeated_coolerMixedJackpot_codec);
      size += highHandMixedJackpot_.CalculateSize(_repeated_highHandMixedJackpot_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(optJackPotConfig other) {
      if (other == null) {
        return;
      }
      coolerJackpot_.Add(other.coolerJackpot_);
      coolerPlusJackpot_.Add(other.coolerPlusJackpot_);
      coolerMixedJackpot_.Add(other.coolerMixedJackpot_);
      highHandMixedJackpot_.Add(other.highHandMixedJackpot_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            coolerJackpot_.AddEntriesFrom(input, _repeated_coolerJackpot_codec);
            break;
          }
          case 18: {
            coolerPlusJackpot_.AddEntriesFrom(input, _repeated_coolerPlusJackpot_codec);
            break;
          }
          case 26: {
            coolerMixedJackpot_.AddEntriesFrom(input, _repeated_coolerMixedJackpot_codec);
            break;
          }
          case 34: {
            highHandMixedJackpot_.AddEntriesFrom(input, _repeated_highHandMixedJackpot_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            coolerJackpot_.AddEntriesFrom(ref input, _repeated_coolerJackpot_codec);
            break;
          }
          case 18: {
            coolerPlusJackpot_.AddEntriesFrom(ref input, _repeated_coolerPlusJackpot_codec);
            break;
          }
          case 26: {
            coolerMixedJackpot_.AddEntriesFrom(ref input, _repeated_coolerMixedJackpot_codec);
            break;
          }
          case 34: {
            highHandMixedJackpot_.AddEntriesFrom(ref input, _repeated_highHandMixedJackpot_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class optJackPotFeeConfig : pb::IMessage<optJackPotFeeConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<optJackPotFeeConfig> _parser = new pb::MessageParser<optJackPotFeeConfig>(() => new optJackPotFeeConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<optJackPotFeeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotFeeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotFeeConfig(optJackPotFeeConfig other) : this() {
      _hasBits0 = other._hasBits0;
      bbAnte_ = other.bbAnte_;
      pollingHand_ = other.pollingHand_;
      forceHand_ = other.forceHand_;
      fee_ = other.fee_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotFeeConfig Clone() {
      return new optJackPotFeeConfig(this);
    }

    /// <summary>Field number for the "bb_ante" field.</summary>
    public const int BbAnteFieldNumber = 1;
    private readonly static int BbAnteDefaultValue = 0;

    private int bbAnte_;
    /// <summary>
    /// 大盲與前注共用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BbAnte {
      get { if ((_hasBits0 & 1) != 0) { return bbAnte_; } else { return BbAnteDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bbAnte_ = value;
      }
    }
    /// <summary>Gets whether the "bb_ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBbAnte {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bb_ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBbAnte() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "polling_hand" field.</summary>
    public const int PollingHandFieldNumber = 2;
    private readonly static int PollingHandDefaultValue = 0;

    private int pollingHand_;
    /// <summary>
    /// 每幾手抽一次fee(週期)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PollingHand {
      get { if ((_hasBits0 & 2) != 0) { return pollingHand_; } else { return PollingHandDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pollingHand_ = value;
      }
    }
    /// <summary>Gets whether the "polling_hand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPollingHand {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "polling_hand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPollingHand() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "force_hand" field.</summary>
    public const int ForceHandFieldNumber = 3;
    private readonly static int ForceHandDefaultValue = 0;

    private int forceHand_;
    /// <summary>
    /// 第幾手抽fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForceHand {
      get { if ((_hasBits0 & 4) != 0) { return forceHand_; } else { return ForceHandDefaultValue; } }
      set {
        _hasBits0 |= 4;
        forceHand_ = value;
      }
    }
    /// <summary>Gets whether the "force_hand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForceHand {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "force_hand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForceHand() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private readonly static int FeeDefaultValue = 0;

    private int fee_;
    /// <summary>
    /// 抽多少fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Fee {
      get { if ((_hasBits0 & 8) != 0) { return fee_; } else { return FeeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fee_ = value;
      }
    }
    /// <summary>Gets whether the "fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFee {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFee() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as optJackPotFeeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(optJackPotFeeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BbAnte != other.BbAnte) return false;
      if (PollingHand != other.PollingHand) return false;
      if (ForceHand != other.ForceHand) return false;
      if (Fee != other.Fee) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBbAnte) hash ^= BbAnte.GetHashCode();
      if (HasPollingHand) hash ^= PollingHand.GetHashCode();
      if (HasForceHand) hash ^= ForceHand.GetHashCode();
      if (HasFee) hash ^= Fee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBbAnte) {
        output.WriteRawTag(8);
        output.WriteInt32(BbAnte);
      }
      if (HasPollingHand) {
        output.WriteRawTag(16);
        output.WriteInt32(PollingHand);
      }
      if (HasForceHand) {
        output.WriteRawTag(24);
        output.WriteInt32(ForceHand);
      }
      if (HasFee) {
        output.WriteRawTag(32);
        output.WriteInt32(Fee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBbAnte) {
        output.WriteRawTag(8);
        output.WriteInt32(BbAnte);
      }
      if (HasPollingHand) {
        output.WriteRawTag(16);
        output.WriteInt32(PollingHand);
      }
      if (HasForceHand) {
        output.WriteRawTag(24);
        output.WriteInt32(ForceHand);
      }
      if (HasFee) {
        output.WriteRawTag(32);
        output.WriteInt32(Fee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBbAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BbAnte);
      }
      if (HasPollingHand) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PollingHand);
      }
      if (HasForceHand) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForceHand);
      }
      if (HasFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(optJackPotFeeConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasBbAnte) {
        BbAnte = other.BbAnte;
      }
      if (other.HasPollingHand) {
        PollingHand = other.PollingHand;
      }
      if (other.HasForceHand) {
        ForceHand = other.ForceHand;
      }
      if (other.HasFee) {
        Fee = other.Fee;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BbAnte = input.ReadInt32();
            break;
          }
          case 16: {
            PollingHand = input.ReadInt32();
            break;
          }
          case 24: {
            ForceHand = input.ReadInt32();
            break;
          }
          case 32: {
            Fee = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BbAnte = input.ReadInt32();
            break;
          }
          case 16: {
            PollingHand = input.ReadInt32();
            break;
          }
          case 24: {
            ForceHand = input.ReadInt32();
            break;
          }
          case 32: {
            Fee = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class optJackPotFee : pb::IMessage<optJackPotFee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<optJackPotFee> _parser = new pb::MessageParser<optJackPotFee>(() => new optJackPotFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<optJackPotFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotFee(optJackPotFee other) : this() {
      jackpotFeeConfig_ = other.jackpotFeeConfig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public optJackPotFee Clone() {
      return new optJackPotFee(this);
    }

    /// <summary>Field number for the "jackpot_fee_config" field.</summary>
    public const int JackpotFeeConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.optJackPotFeeConfig> _repeated_jackpotFeeConfig_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.optJackPotFeeConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.optJackPotFeeConfig> jackpotFeeConfig_ = new pbc::RepeatedField<global::Texas.Protocol.optJackPotFeeConfig>();
    /// <summary>
    /// 分為一般國家和菲律賓
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.optJackPotFeeConfig> JackpotFeeConfig {
      get { return jackpotFeeConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as optJackPotFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(optJackPotFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jackpotFeeConfig_.Equals(other.jackpotFeeConfig_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jackpotFeeConfig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      jackpotFeeConfig_.WriteTo(output, _repeated_jackpotFeeConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      jackpotFeeConfig_.WriteTo(ref output, _repeated_jackpotFeeConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += jackpotFeeConfig_.CalculateSize(_repeated_jackpotFeeConfig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(optJackPotFee other) {
      if (other == null) {
        return;
      }
      jackpotFeeConfig_.Add(other.jackpotFeeConfig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            jackpotFeeConfig_.AddEntriesFrom(input, _repeated_jackpotFeeConfig_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            jackpotFeeConfig_.AddEntriesFrom(ref input, _repeated_jackpotFeeConfig_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotConfigREQ : pb::IMessage<JackPotConfigREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotConfigREQ> _parser = new pb::MessageParser<JackPotConfigREQ>(() => new JackPotConfigREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotConfigREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfigREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfigREQ(JackPotConfigREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfigREQ Clone() {
      return new JackPotConfigREQ(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 3;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 2) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotConfigREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotConfigREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotConfigREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotConfigRSP : pb::IMessage<JackPotConfigRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotConfigRSP> _parser = new pb::MessageParser<JackPotConfigRSP>(() => new JackPotConfigRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotConfigRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfigRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfigRSP(JackPotConfigRSP other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      bigJackpot_ = other.bigJackpot_.Clone();
      coolerJackpot_ = other.coolerJackpot_.Clone();
      jackpot_ = other.jackpot_.Clone();
      isNewJackpot_ = other.isNewJackpot_;
      optJackpot_ = other.optJackpot_ != null ? other.optJackpot_.Clone() : null;
      isOptJackpot_ = other.isOptJackpot_;
      optJackpotFee_ = other.optJackpotFee_ != null ? other.optJackpotFee_.Clone() : null;
      isCanSetJackpot_ = other.isCanSetJackpot_;
      setJackpotStartTime_ = other.setJackpotStartTime_;
      setJackpotEndTime_ = other.setJackpotEndTime_;
      isJackpotBroadcastEnable_ = other.isJackpotBroadcastEnable_;
      jackpotBroadcastThreshold_ = other.jackpotBroadcastThreshold_;
      jackpotPayoutPot_ = other.jackpotPayoutPot_ != null ? other.jackpotPayoutPot_.Clone() : null;
      jackpotFeePot_ = other.jackpotFeePot_ != null ? other.jackpotFeePot_.Clone() : null;
      ppsrid_ = other.ppsrid_;
      ppsrExchangeRate_ = other.ppsrExchangeRate_;
      ppsrIsCanSetJackpot_ = other.ppsrIsCanSetJackpot_;
      ppsrSetJackpotStartTime_ = other.ppsrSetJackpotStartTime_;
      ppsrSetJackpotEndTime_ = other.ppsrSetJackpotEndTime_;
      ppsrIsJackpotBroadcastEnable_ = other.ppsrIsJackpotBroadcastEnable_;
      ppsrJackpotBroadcastThreshold_ = other.ppsrJackpotBroadcastThreshold_;
      ppsrJackpotFeeHand_ = other.ppsrJackpotFeeHand_ != null ? other.ppsrJackpotFeeHand_.Clone() : null;
      ppsrJackpotFeePot_ = other.ppsrJackpotFeePot_ != null ? other.ppsrJackpotFeePot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotConfigRSP Clone() {
      return new JackPotConfigRSP(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "big_jackpot" field.</summary>
    public const int BigJackpotFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.JackPotConfig> _repeated_bigJackpot_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.JackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.JackPotConfig> bigJackpot_ = new pbc::RepeatedField<global::Texas.Protocol.JackPotConfig>();
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.JackPotConfig> BigJackpot {
      get { return bigJackpot_; }
    }

    /// <summary>Field number for the "cooler_jackpot" field.</summary>
    public const int CoolerJackpotFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.JackPotConfig> _repeated_coolerJackpot_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.JackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.JackPotConfig> coolerJackpot_ = new pbc::RepeatedField<global::Texas.Protocol.JackPotConfig>();
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.JackPotConfig> CoolerJackpot {
      get { return coolerJackpot_; }
    }

    /// <summary>Field number for the "jackpot" field.</summary>
    public const int JackpotFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Texas.Protocol.newJackPotConfig> _repeated_jackpot_codec
        = pb::FieldCodec.ForMessage(42, global::Texas.Protocol.newJackPotConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.newJackPotConfig> jackpot_ = new pbc::RepeatedField<global::Texas.Protocol.newJackPotConfig>();
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.newJackPotConfig> Jackpot {
      get { return jackpot_; }
    }

    /// <summary>Field number for the "is_new_jackpot" field.</summary>
    public const int IsNewJackpotFieldNumber = 6;
    private readonly static bool IsNewJackpotDefaultValue = false;

    private bool isNewJackpot_;
    /// <summary>
    /// 已廢棄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsNewJackpot {
      get { if ((_hasBits0 & 2) != 0) { return isNewJackpot_; } else { return IsNewJackpotDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isNewJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_new_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsNewJackpot {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_new_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsNewJackpot() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "opt_jackpot" field.</summary>
    public const int OptJackpotFieldNumber = 7;
    private global::Texas.Protocol.optJackPotConfig optJackpot_;
    /// <summary>
    /// 優化版JP payout
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.optJackPotConfig OptJackpot {
      get { return optJackpot_; }
      set {
        optJackpot_ = value;
      }
    }

    /// <summary>Field number for the "is_opt_jackpot" field.</summary>
    public const int IsOptJackpotFieldNumber = 8;
    private readonly static bool IsOptJackpotDefaultValue = false;

    private bool isOptJackpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOptJackpot {
      get { if ((_hasBits0 & 4) != 0) { return isOptJackpot_; } else { return IsOptJackpotDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isOptJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_opt_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOptJackpot {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_opt_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOptJackpot() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "opt_jackpot_fee" field.</summary>
    public const int OptJackpotFeeFieldNumber = 9;
    private global::Texas.Protocol.optJackPotFee optJackpotFee_;
    /// <summary>
    /// 優化版JP fee 相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.optJackPotFee OptJackpotFee {
      get { return optJackpotFee_; }
      set {
        optJackpotFee_ = value;
      }
    }

    /// <summary>Field number for the "is_can_set_jackpot" field.</summary>
    public const int IsCanSetJackpotFieldNumber = 10;
    private readonly static bool IsCanSetJackpotDefaultValue = false;

    private bool isCanSetJackpot_;
    /// <summary>
    /// 目前是否可以設定JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCanSetJackpot {
      get { if ((_hasBits0 & 8) != 0) { return isCanSetJackpot_; } else { return IsCanSetJackpotDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isCanSetJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "is_can_set_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCanSetJackpot {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_can_set_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCanSetJackpot() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "set_jackpot_start_time" field.</summary>
    public const int SetJackpotStartTimeFieldNumber = 11;
    private readonly static long SetJackpotStartTimeDefaultValue = 0L;

    private long setJackpotStartTime_;
    /// <summary>
    /// JP可設定之下次開始時間　單位為時間戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SetJackpotStartTime {
      get { if ((_hasBits0 & 16) != 0) { return setJackpotStartTime_; } else { return SetJackpotStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        setJackpotStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "set_jackpot_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetJackpotStartTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "set_jackpot_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetJackpotStartTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "set_jackpot_end_time" field.</summary>
    public const int SetJackpotEndTimeFieldNumber = 12;
    private readonly static long SetJackpotEndTimeDefaultValue = 0L;

    private long setJackpotEndTime_;
    /// <summary>
    /// JP可設定之本次結束期限，見下方註解　單位為時間戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SetJackpotEndTime {
      get { if ((_hasBits0 & 32) != 0) { return setJackpotEndTime_; } else { return SetJackpotEndTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        setJackpotEndTime_ = value;
      }
    }
    /// <summary>Gets whether the "set_jackpot_end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetJackpotEndTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "set_jackpot_end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetJackpotEndTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_jackpot_broadcast_enable" field.</summary>
    public const int IsJackpotBroadcastEnableFieldNumber = 13;
    private readonly static bool IsJackpotBroadcastEnableDefaultValue = false;

    private bool isJackpotBroadcastEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsJackpotBroadcastEnable {
      get { if ((_hasBits0 & 64) != 0) { return isJackpotBroadcastEnable_; } else { return IsJackpotBroadcastEnableDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isJackpotBroadcastEnable_ = value;
      }
    }
    /// <summary>Gets whether the "is_jackpot_broadcast_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsJackpotBroadcastEnable {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_jackpot_broadcast_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsJackpotBroadcastEnable() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "jackpot_broadcast_threshold" field.</summary>
    public const int JackpotBroadcastThresholdFieldNumber = 14;
    private readonly static long JackpotBroadcastThresholdDefaultValue = 0L;

    private long jackpotBroadcastThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotBroadcastThreshold {
      get { if ((_hasBits0 & 128) != 0) { return jackpotBroadcastThreshold_; } else { return JackpotBroadcastThresholdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        jackpotBroadcastThreshold_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_broadcast_threshold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotBroadcastThreshold {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_broadcast_threshold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotBroadcastThreshold() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "jackpot_payout_pot" field.</summary>
    public const int JackpotPayoutPotFieldNumber = 15;
    private global::Texas.Protocol.optJackPotConfig jackpotPayoutPot_;
    /// <summary>
    /// 獎池抽 fee 模式有自己的 payout 表跟 fee 表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.optJackPotConfig JackpotPayoutPot {
      get { return jackpotPayoutPot_; }
      set {
        jackpotPayoutPot_ = value;
      }
    }

    /// <summary>Field number for the "jackpot_fee_pot" field.</summary>
    public const int JackpotFeePotFieldNumber = 16;
    private global::Texas.Protocol.optJackPotFee jackpotFeePot_;
    /// <summary>
    /// JP fee (獎池抽 fee)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.optJackPotFee JackpotFeePot {
      get { return jackpotFeePot_; }
      set {
        jackpotFeePot_ = value;
      }
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 17;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// ppsr JP 相關設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 256) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 256;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "ppsr_exchange_rate" field.</summary>
    public const int PpsrExchangeRateFieldNumber = 18;
    private readonly static int PpsrExchangeRateDefaultValue = 0;

    private int ppsrExchangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PpsrExchangeRate {
      get { if ((_hasBits0 & 512) != 0) { return ppsrExchangeRate_; } else { return PpsrExchangeRateDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ppsrExchangeRate_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_exchange_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrExchangeRate {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_exchange_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrExchangeRate() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ppsr_is_can_set_jackpot" field.</summary>
    public const int PpsrIsCanSetJackpotFieldNumber = 19;
    private readonly static bool PpsrIsCanSetJackpotDefaultValue = false;

    private bool ppsrIsCanSetJackpot_;
    /// <summary>
    /// 目前是否可以設定JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PpsrIsCanSetJackpot {
      get { if ((_hasBits0 & 1024) != 0) { return ppsrIsCanSetJackpot_; } else { return PpsrIsCanSetJackpotDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ppsrIsCanSetJackpot_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_is_can_set_jackpot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrIsCanSetJackpot {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_is_can_set_jackpot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrIsCanSetJackpot() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ppsr_set_jackpot_start_time" field.</summary>
    public const int PpsrSetJackpotStartTimeFieldNumber = 20;
    private readonly static long PpsrSetJackpotStartTimeDefaultValue = 0L;

    private long ppsrSetJackpotStartTime_;
    /// <summary>
    /// JP可設定之下次開始時間　單位為時間戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpsrSetJackpotStartTime {
      get { if ((_hasBits0 & 2048) != 0) { return ppsrSetJackpotStartTime_; } else { return PpsrSetJackpotStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        ppsrSetJackpotStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_set_jackpot_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrSetJackpotStartTime {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_set_jackpot_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrSetJackpotStartTime() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "ppsr_set_jackpot_end_time" field.</summary>
    public const int PpsrSetJackpotEndTimeFieldNumber = 21;
    private readonly static long PpsrSetJackpotEndTimeDefaultValue = 0L;

    private long ppsrSetJackpotEndTime_;
    /// <summary>
    /// JP可設定之本次結束期限，見下方註解　單位為時間戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpsrSetJackpotEndTime {
      get { if ((_hasBits0 & 4096) != 0) { return ppsrSetJackpotEndTime_; } else { return PpsrSetJackpotEndTimeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        ppsrSetJackpotEndTime_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_set_jackpot_end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrSetJackpotEndTime {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_set_jackpot_end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrSetJackpotEndTime() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ppsr_is_jackpot_broadcast_enable" field.</summary>
    public const int PpsrIsJackpotBroadcastEnableFieldNumber = 22;
    private readonly static bool PpsrIsJackpotBroadcastEnableDefaultValue = false;

    private bool ppsrIsJackpotBroadcastEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PpsrIsJackpotBroadcastEnable {
      get { if ((_hasBits0 & 8192) != 0) { return ppsrIsJackpotBroadcastEnable_; } else { return PpsrIsJackpotBroadcastEnableDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        ppsrIsJackpotBroadcastEnable_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_is_jackpot_broadcast_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrIsJackpotBroadcastEnable {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_is_jackpot_broadcast_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrIsJackpotBroadcastEnable() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "ppsr_jackpot_broadcast_threshold" field.</summary>
    public const int PpsrJackpotBroadcastThresholdFieldNumber = 23;
    private readonly static long PpsrJackpotBroadcastThresholdDefaultValue = 0L;

    private long ppsrJackpotBroadcastThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpsrJackpotBroadcastThreshold {
      get { if ((_hasBits0 & 16384) != 0) { return ppsrJackpotBroadcastThreshold_; } else { return PpsrJackpotBroadcastThresholdDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        ppsrJackpotBroadcastThreshold_ = value;
      }
    }
    /// <summary>Gets whether the "ppsr_jackpot_broadcast_threshold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrJackpotBroadcastThreshold {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "ppsr_jackpot_broadcast_threshold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrJackpotBroadcastThreshold() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "ppsr_jackpot_fee_hand" field.</summary>
    public const int PpsrJackpotFeeHandFieldNumber = 24;
    private global::Texas.Protocol.optJackPotFee ppsrJackpotFeeHand_;
    /// <summary>
    /// ppsr 級別可能與俱樂部不同 需有不同的顯示 且須乘上匯率展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.optJackPotFee PpsrJackpotFeeHand {
      get { return ppsrJackpotFeeHand_; }
      set {
        ppsrJackpotFeeHand_ = value;
      }
    }

    /// <summary>Field number for the "ppsr_jackpot_fee_pot" field.</summary>
    public const int PpsrJackpotFeePotFieldNumber = 25;
    private global::Texas.Protocol.optJackPotFee ppsrJackpotFeePot_;
    /// <summary>
    /// JP fee (獎池抽 fee)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.optJackPotFee PpsrJackpotFeePot {
      get { return ppsrJackpotFeePot_; }
      set {
        ppsrJackpotFeePot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotConfigRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotConfigRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if(!bigJackpot_.Equals(other.bigJackpot_)) return false;
      if(!coolerJackpot_.Equals(other.coolerJackpot_)) return false;
      if(!jackpot_.Equals(other.jackpot_)) return false;
      if (IsNewJackpot != other.IsNewJackpot) return false;
      if (!object.Equals(OptJackpot, other.OptJackpot)) return false;
      if (IsOptJackpot != other.IsOptJackpot) return false;
      if (!object.Equals(OptJackpotFee, other.OptJackpotFee)) return false;
      if (IsCanSetJackpot != other.IsCanSetJackpot) return false;
      if (SetJackpotStartTime != other.SetJackpotStartTime) return false;
      if (SetJackpotEndTime != other.SetJackpotEndTime) return false;
      if (IsJackpotBroadcastEnable != other.IsJackpotBroadcastEnable) return false;
      if (JackpotBroadcastThreshold != other.JackpotBroadcastThreshold) return false;
      if (!object.Equals(JackpotPayoutPot, other.JackpotPayoutPot)) return false;
      if (!object.Equals(JackpotFeePot, other.JackpotFeePot)) return false;
      if (Ppsrid != other.Ppsrid) return false;
      if (PpsrExchangeRate != other.PpsrExchangeRate) return false;
      if (PpsrIsCanSetJackpot != other.PpsrIsCanSetJackpot) return false;
      if (PpsrSetJackpotStartTime != other.PpsrSetJackpotStartTime) return false;
      if (PpsrSetJackpotEndTime != other.PpsrSetJackpotEndTime) return false;
      if (PpsrIsJackpotBroadcastEnable != other.PpsrIsJackpotBroadcastEnable) return false;
      if (PpsrJackpotBroadcastThreshold != other.PpsrJackpotBroadcastThreshold) return false;
      if (!object.Equals(PpsrJackpotFeeHand, other.PpsrJackpotFeeHand)) return false;
      if (!object.Equals(PpsrJackpotFeePot, other.PpsrJackpotFeePot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      hash ^= bigJackpot_.GetHashCode();
      hash ^= coolerJackpot_.GetHashCode();
      hash ^= jackpot_.GetHashCode();
      if (HasIsNewJackpot) hash ^= IsNewJackpot.GetHashCode();
      if (optJackpot_ != null) hash ^= OptJackpot.GetHashCode();
      if (HasIsOptJackpot) hash ^= IsOptJackpot.GetHashCode();
      if (optJackpotFee_ != null) hash ^= OptJackpotFee.GetHashCode();
      if (HasIsCanSetJackpot) hash ^= IsCanSetJackpot.GetHashCode();
      if (HasSetJackpotStartTime) hash ^= SetJackpotStartTime.GetHashCode();
      if (HasSetJackpotEndTime) hash ^= SetJackpotEndTime.GetHashCode();
      if (HasIsJackpotBroadcastEnable) hash ^= IsJackpotBroadcastEnable.GetHashCode();
      if (HasJackpotBroadcastThreshold) hash ^= JackpotBroadcastThreshold.GetHashCode();
      if (jackpotPayoutPot_ != null) hash ^= JackpotPayoutPot.GetHashCode();
      if (jackpotFeePot_ != null) hash ^= JackpotFeePot.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (HasPpsrExchangeRate) hash ^= PpsrExchangeRate.GetHashCode();
      if (HasPpsrIsCanSetJackpot) hash ^= PpsrIsCanSetJackpot.GetHashCode();
      if (HasPpsrSetJackpotStartTime) hash ^= PpsrSetJackpotStartTime.GetHashCode();
      if (HasPpsrSetJackpotEndTime) hash ^= PpsrSetJackpotEndTime.GetHashCode();
      if (HasPpsrIsJackpotBroadcastEnable) hash ^= PpsrIsJackpotBroadcastEnable.GetHashCode();
      if (HasPpsrJackpotBroadcastThreshold) hash ^= PpsrJackpotBroadcastThreshold.GetHashCode();
      if (ppsrJackpotFeeHand_ != null) hash ^= PpsrJackpotFeeHand.GetHashCode();
      if (ppsrJackpotFeePot_ != null) hash ^= PpsrJackpotFeePot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      bigJackpot_.WriteTo(output, _repeated_bigJackpot_codec);
      coolerJackpot_.WriteTo(output, _repeated_coolerJackpot_codec);
      jackpot_.WriteTo(output, _repeated_jackpot_codec);
      if (HasIsNewJackpot) {
        output.WriteRawTag(48);
        output.WriteBool(IsNewJackpot);
      }
      if (optJackpot_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OptJackpot);
      }
      if (HasIsOptJackpot) {
        output.WriteRawTag(64);
        output.WriteBool(IsOptJackpot);
      }
      if (optJackpotFee_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OptJackpotFee);
      }
      if (HasIsCanSetJackpot) {
        output.WriteRawTag(80);
        output.WriteBool(IsCanSetJackpot);
      }
      if (HasSetJackpotStartTime) {
        output.WriteRawTag(88);
        output.WriteInt64(SetJackpotStartTime);
      }
      if (HasSetJackpotEndTime) {
        output.WriteRawTag(96);
        output.WriteInt64(SetJackpotEndTime);
      }
      if (HasIsJackpotBroadcastEnable) {
        output.WriteRawTag(104);
        output.WriteBool(IsJackpotBroadcastEnable);
      }
      if (HasJackpotBroadcastThreshold) {
        output.WriteRawTag(112);
        output.WriteInt64(JackpotBroadcastThreshold);
      }
      if (jackpotPayoutPot_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(JackpotPayoutPot);
      }
      if (jackpotFeePot_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(JackpotFeePot);
      }
      if (HasPpsrid) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Ppsrid);
      }
      if (HasPpsrExchangeRate) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(PpsrExchangeRate);
      }
      if (HasPpsrIsCanSetJackpot) {
        output.WriteRawTag(152, 1);
        output.WriteBool(PpsrIsCanSetJackpot);
      }
      if (HasPpsrSetJackpotStartTime) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(PpsrSetJackpotStartTime);
      }
      if (HasPpsrSetJackpotEndTime) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(PpsrSetJackpotEndTime);
      }
      if (HasPpsrIsJackpotBroadcastEnable) {
        output.WriteRawTag(176, 1);
        output.WriteBool(PpsrIsJackpotBroadcastEnable);
      }
      if (HasPpsrJackpotBroadcastThreshold) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(PpsrJackpotBroadcastThreshold);
      }
      if (ppsrJackpotFeeHand_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(PpsrJackpotFeeHand);
      }
      if (ppsrJackpotFeePot_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PpsrJackpotFeePot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      bigJackpot_.WriteTo(ref output, _repeated_bigJackpot_codec);
      coolerJackpot_.WriteTo(ref output, _repeated_coolerJackpot_codec);
      jackpot_.WriteTo(ref output, _repeated_jackpot_codec);
      if (HasIsNewJackpot) {
        output.WriteRawTag(48);
        output.WriteBool(IsNewJackpot);
      }
      if (optJackpot_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OptJackpot);
      }
      if (HasIsOptJackpot) {
        output.WriteRawTag(64);
        output.WriteBool(IsOptJackpot);
      }
      if (optJackpotFee_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(OptJackpotFee);
      }
      if (HasIsCanSetJackpot) {
        output.WriteRawTag(80);
        output.WriteBool(IsCanSetJackpot);
      }
      if (HasSetJackpotStartTime) {
        output.WriteRawTag(88);
        output.WriteInt64(SetJackpotStartTime);
      }
      if (HasSetJackpotEndTime) {
        output.WriteRawTag(96);
        output.WriteInt64(SetJackpotEndTime);
      }
      if (HasIsJackpotBroadcastEnable) {
        output.WriteRawTag(104);
        output.WriteBool(IsJackpotBroadcastEnable);
      }
      if (HasJackpotBroadcastThreshold) {
        output.WriteRawTag(112);
        output.WriteInt64(JackpotBroadcastThreshold);
      }
      if (jackpotPayoutPot_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(JackpotPayoutPot);
      }
      if (jackpotFeePot_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(JackpotFeePot);
      }
      if (HasPpsrid) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Ppsrid);
      }
      if (HasPpsrExchangeRate) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(PpsrExchangeRate);
      }
      if (HasPpsrIsCanSetJackpot) {
        output.WriteRawTag(152, 1);
        output.WriteBool(PpsrIsCanSetJackpot);
      }
      if (HasPpsrSetJackpotStartTime) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(PpsrSetJackpotStartTime);
      }
      if (HasPpsrSetJackpotEndTime) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(PpsrSetJackpotEndTime);
      }
      if (HasPpsrIsJackpotBroadcastEnable) {
        output.WriteRawTag(176, 1);
        output.WriteBool(PpsrIsJackpotBroadcastEnable);
      }
      if (HasPpsrJackpotBroadcastThreshold) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(PpsrJackpotBroadcastThreshold);
      }
      if (ppsrJackpotFeeHand_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(PpsrJackpotFeeHand);
      }
      if (ppsrJackpotFeePot_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PpsrJackpotFeePot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      size += bigJackpot_.CalculateSize(_repeated_bigJackpot_codec);
      size += coolerJackpot_.CalculateSize(_repeated_coolerJackpot_codec);
      size += jackpot_.CalculateSize(_repeated_jackpot_codec);
      if (HasIsNewJackpot) {
        size += 1 + 1;
      }
      if (optJackpot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptJackpot);
      }
      if (HasIsOptJackpot) {
        size += 1 + 1;
      }
      if (optJackpotFee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptJackpotFee);
      }
      if (HasIsCanSetJackpot) {
        size += 1 + 1;
      }
      if (HasSetJackpotStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SetJackpotStartTime);
      }
      if (HasSetJackpotEndTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SetJackpotEndTime);
      }
      if (HasIsJackpotBroadcastEnable) {
        size += 1 + 1;
      }
      if (HasJackpotBroadcastThreshold) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotBroadcastThreshold);
      }
      if (jackpotPayoutPot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JackpotPayoutPot);
      }
      if (jackpotFeePot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JackpotFeePot);
      }
      if (HasPpsrid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (HasPpsrExchangeRate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PpsrExchangeRate);
      }
      if (HasPpsrIsCanSetJackpot) {
        size += 2 + 1;
      }
      if (HasPpsrSetJackpotStartTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PpsrSetJackpotStartTime);
      }
      if (HasPpsrSetJackpotEndTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PpsrSetJackpotEndTime);
      }
      if (HasPpsrIsJackpotBroadcastEnable) {
        size += 2 + 1;
      }
      if (HasPpsrJackpotBroadcastThreshold) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PpsrJackpotBroadcastThreshold);
      }
      if (ppsrJackpotFeeHand_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PpsrJackpotFeeHand);
      }
      if (ppsrJackpotFeePot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PpsrJackpotFeePot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotConfigRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      bigJackpot_.Add(other.bigJackpot_);
      coolerJackpot_.Add(other.coolerJackpot_);
      jackpot_.Add(other.jackpot_);
      if (other.HasIsNewJackpot) {
        IsNewJackpot = other.IsNewJackpot;
      }
      if (other.optJackpot_ != null) {
        if (optJackpot_ == null) {
          OptJackpot = new global::Texas.Protocol.optJackPotConfig();
        }
        OptJackpot.MergeFrom(other.OptJackpot);
      }
      if (other.HasIsOptJackpot) {
        IsOptJackpot = other.IsOptJackpot;
      }
      if (other.optJackpotFee_ != null) {
        if (optJackpotFee_ == null) {
          OptJackpotFee = new global::Texas.Protocol.optJackPotFee();
        }
        OptJackpotFee.MergeFrom(other.OptJackpotFee);
      }
      if (other.HasIsCanSetJackpot) {
        IsCanSetJackpot = other.IsCanSetJackpot;
      }
      if (other.HasSetJackpotStartTime) {
        SetJackpotStartTime = other.SetJackpotStartTime;
      }
      if (other.HasSetJackpotEndTime) {
        SetJackpotEndTime = other.SetJackpotEndTime;
      }
      if (other.HasIsJackpotBroadcastEnable) {
        IsJackpotBroadcastEnable = other.IsJackpotBroadcastEnable;
      }
      if (other.HasJackpotBroadcastThreshold) {
        JackpotBroadcastThreshold = other.JackpotBroadcastThreshold;
      }
      if (other.jackpotPayoutPot_ != null) {
        if (jackpotPayoutPot_ == null) {
          JackpotPayoutPot = new global::Texas.Protocol.optJackPotConfig();
        }
        JackpotPayoutPot.MergeFrom(other.JackpotPayoutPot);
      }
      if (other.jackpotFeePot_ != null) {
        if (jackpotFeePot_ == null) {
          JackpotFeePot = new global::Texas.Protocol.optJackPotFee();
        }
        JackpotFeePot.MergeFrom(other.JackpotFeePot);
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      if (other.HasPpsrExchangeRate) {
        PpsrExchangeRate = other.PpsrExchangeRate;
      }
      if (other.HasPpsrIsCanSetJackpot) {
        PpsrIsCanSetJackpot = other.PpsrIsCanSetJackpot;
      }
      if (other.HasPpsrSetJackpotStartTime) {
        PpsrSetJackpotStartTime = other.PpsrSetJackpotStartTime;
      }
      if (other.HasPpsrSetJackpotEndTime) {
        PpsrSetJackpotEndTime = other.PpsrSetJackpotEndTime;
      }
      if (other.HasPpsrIsJackpotBroadcastEnable) {
        PpsrIsJackpotBroadcastEnable = other.PpsrIsJackpotBroadcastEnable;
      }
      if (other.HasPpsrJackpotBroadcastThreshold) {
        PpsrJackpotBroadcastThreshold = other.PpsrJackpotBroadcastThreshold;
      }
      if (other.ppsrJackpotFeeHand_ != null) {
        if (ppsrJackpotFeeHand_ == null) {
          PpsrJackpotFeeHand = new global::Texas.Protocol.optJackPotFee();
        }
        PpsrJackpotFeeHand.MergeFrom(other.PpsrJackpotFeeHand);
      }
      if (other.ppsrJackpotFeePot_ != null) {
        if (ppsrJackpotFeePot_ == null) {
          PpsrJackpotFeePot = new global::Texas.Protocol.optJackPotFee();
        }
        PpsrJackpotFeePot.MergeFrom(other.PpsrJackpotFeePot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            bigJackpot_.AddEntriesFrom(input, _repeated_bigJackpot_codec);
            break;
          }
          case 34: {
            coolerJackpot_.AddEntriesFrom(input, _repeated_coolerJackpot_codec);
            break;
          }
          case 42: {
            jackpot_.AddEntriesFrom(input, _repeated_jackpot_codec);
            break;
          }
          case 48: {
            IsNewJackpot = input.ReadBool();
            break;
          }
          case 58: {
            if (optJackpot_ == null) {
              OptJackpot = new global::Texas.Protocol.optJackPotConfig();
            }
            input.ReadMessage(OptJackpot);
            break;
          }
          case 64: {
            IsOptJackpot = input.ReadBool();
            break;
          }
          case 74: {
            if (optJackpotFee_ == null) {
              OptJackpotFee = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(OptJackpotFee);
            break;
          }
          case 80: {
            IsCanSetJackpot = input.ReadBool();
            break;
          }
          case 88: {
            SetJackpotStartTime = input.ReadInt64();
            break;
          }
          case 96: {
            SetJackpotEndTime = input.ReadInt64();
            break;
          }
          case 104: {
            IsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 112: {
            JackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 122: {
            if (jackpotPayoutPot_ == null) {
              JackpotPayoutPot = new global::Texas.Protocol.optJackPotConfig();
            }
            input.ReadMessage(JackpotPayoutPot);
            break;
          }
          case 130: {
            if (jackpotFeePot_ == null) {
              JackpotFeePot = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(JackpotFeePot);
            break;
          }
          case 136: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 144: {
            PpsrExchangeRate = input.ReadInt32();
            break;
          }
          case 152: {
            PpsrIsCanSetJackpot = input.ReadBool();
            break;
          }
          case 160: {
            PpsrSetJackpotStartTime = input.ReadInt64();
            break;
          }
          case 168: {
            PpsrSetJackpotEndTime = input.ReadInt64();
            break;
          }
          case 176: {
            PpsrIsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 184: {
            PpsrJackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 194: {
            if (ppsrJackpotFeeHand_ == null) {
              PpsrJackpotFeeHand = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(PpsrJackpotFeeHand);
            break;
          }
          case 202: {
            if (ppsrJackpotFeePot_ == null) {
              PpsrJackpotFeePot = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(PpsrJackpotFeePot);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            bigJackpot_.AddEntriesFrom(ref input, _repeated_bigJackpot_codec);
            break;
          }
          case 34: {
            coolerJackpot_.AddEntriesFrom(ref input, _repeated_coolerJackpot_codec);
            break;
          }
          case 42: {
            jackpot_.AddEntriesFrom(ref input, _repeated_jackpot_codec);
            break;
          }
          case 48: {
            IsNewJackpot = input.ReadBool();
            break;
          }
          case 58: {
            if (optJackpot_ == null) {
              OptJackpot = new global::Texas.Protocol.optJackPotConfig();
            }
            input.ReadMessage(OptJackpot);
            break;
          }
          case 64: {
            IsOptJackpot = input.ReadBool();
            break;
          }
          case 74: {
            if (optJackpotFee_ == null) {
              OptJackpotFee = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(OptJackpotFee);
            break;
          }
          case 80: {
            IsCanSetJackpot = input.ReadBool();
            break;
          }
          case 88: {
            SetJackpotStartTime = input.ReadInt64();
            break;
          }
          case 96: {
            SetJackpotEndTime = input.ReadInt64();
            break;
          }
          case 104: {
            IsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 112: {
            JackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 122: {
            if (jackpotPayoutPot_ == null) {
              JackpotPayoutPot = new global::Texas.Protocol.optJackPotConfig();
            }
            input.ReadMessage(JackpotPayoutPot);
            break;
          }
          case 130: {
            if (jackpotFeePot_ == null) {
              JackpotFeePot = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(JackpotFeePot);
            break;
          }
          case 136: {
            Ppsrid = input.ReadInt32();
            break;
          }
          case 144: {
            PpsrExchangeRate = input.ReadInt32();
            break;
          }
          case 152: {
            PpsrIsCanSetJackpot = input.ReadBool();
            break;
          }
          case 160: {
            PpsrSetJackpotStartTime = input.ReadInt64();
            break;
          }
          case 168: {
            PpsrSetJackpotEndTime = input.ReadInt64();
            break;
          }
          case 176: {
            PpsrIsJackpotBroadcastEnable = input.ReadBool();
            break;
          }
          case 184: {
            PpsrJackpotBroadcastThreshold = input.ReadInt64();
            break;
          }
          case 194: {
            if (ppsrJackpotFeeHand_ == null) {
              PpsrJackpotFeeHand = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(PpsrJackpotFeeHand);
            break;
          }
          case 202: {
            if (ppsrJackpotFeePot_ == null) {
              PpsrJackpotFeePot = new global::Texas.Protocol.optJackPotFee();
            }
            input.ReadMessage(PpsrJackpotFeePot);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPot : pb::IMessage<JackPot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPot> _parser = new pb::MessageParser<JackPot>(() => new JackPot());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPot(JackPot other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      clubid_ = other.clubid_;
      uid_ = other.uid_;
      chips_ = other.chips_;
      name_ = other.name_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPot Clone() {
      return new JackPot(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 4;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private readonly static string IconDefaultValue = "";

    private string icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Icon {
      get { return icon_ ?? IconDefaultValue; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIcon {
      get { return icon_ != null; }
    }
    /// <summary>Clears the value of the "icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIcon() {
      icon_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Clubid != other.Clubid) return false;
      if (Uid != other.Uid) return false;
      if (Chips != other.Chips) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIcon) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasUid) {
        output.WriteRawTag(26);
        output.WriteString(Uid);
      }
      if (HasChips) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasUid) {
        output.WriteRawTag(26);
        output.WriteString(Uid);
      }
      if (HasChips) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPot other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            Uid = input.ReadString();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            Uid = input.ReadString();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotBRC : pb::IMessage<JackPotBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotBRC> _parser = new pb::MessageParser<JackPotBRC>(() => new JackPotBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBRC(JackPotBRC other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      jackpots_ = other.jackpots_.Clone();
      jackpotType_ = other.jackpotType_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotBRC Clone() {
      return new JackPotBRC(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "jackpots" field.</summary>
    public const int JackpotsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.JackPot> _repeated_jackpots_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.JackPot.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.JackPot> jackpots_ = new pbc::RepeatedField<global::Texas.Protocol.JackPot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.JackPot> Jackpots {
      get { return jackpots_; }
    }

    /// <summary>Field number for the "jackpot_type" field.</summary>
    public const int JackpotTypeFieldNumber = 3;
    private readonly static int JackpotTypeDefaultValue = 0;

    private int jackpotType_;
    /// <summary>
    ///  1:Cooler, 2:Cooler+, 3:Mixed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotType {
      get { if ((_hasBits0 & 2) != 0) { return jackpotType_; } else { return JackpotTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        jackpotType_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    /// <summary>
    /// 依照派發量分成1:弱, 2:中, 3:強 JP表現
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { if ((_hasBits0 & 4) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if(!jackpots_.Equals(other.jackpots_)) return false;
      if (JackpotType != other.JackpotType) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      hash ^= jackpots_.GetHashCode();
      if (HasJackpotType) hash ^= JackpotType.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      jackpots_.WriteTo(output, _repeated_jackpots_codec);
      if (HasJackpotType) {
        output.WriteRawTag(24);
        output.WriteInt32(JackpotType);
      }
      if (HasLevel) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      jackpots_.WriteTo(ref output, _repeated_jackpots_codec);
      if (HasJackpotType) {
        output.WriteRawTag(24);
        output.WriteInt32(JackpotType);
      }
      if (HasLevel) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      size += jackpots_.CalculateSize(_repeated_jackpots_codec);
      if (HasJackpotType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotType);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      jackpots_.Add(other.jackpots_);
      if (other.HasJackpotType) {
        JackpotType = other.JackpotType;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            jackpots_.AddEntriesFrom(input, _repeated_jackpots_codec);
            break;
          }
          case 24: {
            JackpotType = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            jackpots_.AddEntriesFrom(ref input, _repeated_jackpots_codec);
            break;
          }
          case 24: {
            JackpotType = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotMultiBoardBRC : pb::IMessage<JackPotMultiBoardBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotMultiBoardBRC> _parser = new pb::MessageParser<JackPotMultiBoardBRC>(() => new JackPotMultiBoardBRC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotMultiBoardBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotMultiBoardBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotMultiBoardBRC(JackPotMultiBoardBRC other) : this() {
      jackpotBrc_ = other.jackpotBrc_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotMultiBoardBRC Clone() {
      return new JackPotMultiBoardBRC(this);
    }

    /// <summary>Field number for the "jackpot_brc" field.</summary>
    public const int JackpotBrcFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.JackPotBRC> _repeated_jackpotBrc_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.JackPotBRC.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.JackPotBRC> jackpotBrc_ = new pbc::RepeatedField<global::Texas.Protocol.JackPotBRC>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.JackPotBRC> JackpotBrc {
      get { return jackpotBrc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotMultiBoardBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotMultiBoardBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jackpotBrc_.Equals(other.jackpotBrc_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jackpotBrc_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      jackpotBrc_.WriteTo(output, _repeated_jackpotBrc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      jackpotBrc_.WriteTo(ref output, _repeated_jackpotBrc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += jackpotBrc_.CalculateSize(_repeated_jackpotBrc_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotMultiBoardBRC other) {
      if (other == null) {
        return;
      }
      jackpotBrc_.Add(other.jackpotBrc_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            jackpotBrc_.AddEntriesFrom(input, _repeated_jackpotBrc_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            jackpotBrc_.AddEntriesFrom(ref input, _repeated_jackpotBrc_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackPotRoomStatusBRC : pb::IMessage<JackPotRoomStatusBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackPotRoomStatusBRC> _parser = new pb::MessageParser<JackPotRoomStatusBRC>(() => new JackPotRoomStatusBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackPotRoomStatusBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRoomStatusBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRoomStatusBRC(JackPotRoomStatusBRC other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      roomid_ = other.roomid_;
      jackpotStatus_ = other.jackpotStatus_;
      jackpotFeeType_ = other.jackpotFeeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackPotRoomStatusBRC Clone() {
      return new JackPotRoomStatusBRC(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 3;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "jackpot_status" field.</summary>
    public const int JackpotStatusFieldNumber = 4;
    private readonly static int JackpotStatusDefaultValue = 0;

    private int jackpotStatus_;
    /// <summary>
    /// 0:關閉, 1:Coller JP, 2:Coller JP Puls, 3:Mixed JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotStatus {
      get { if ((_hasBits0 & 2) != 0) { return jackpotStatus_; } else { return JackpotStatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        jackpotStatus_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "jackpot_fee_type" field.</summary>
    public const int JackpotFeeTypeFieldNumber = 5;
    private readonly static int JackpotFeeTypeDefaultValue = 0;

    private int jackpotFeeType_;
    /// <summary>
    /// 0:hand, 1:pot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JackpotFeeType {
      get { if ((_hasBits0 & 4) != 0) { return jackpotFeeType_; } else { return JackpotFeeTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        jackpotFeeType_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_fee_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotFeeType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_fee_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotFeeType() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackPotRoomStatusBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackPotRoomStatusBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Roomid != other.Roomid) return false;
      if (JackpotStatus != other.JackpotStatus) return false;
      if (JackpotFeeType != other.JackpotFeeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasJackpotStatus) hash ^= JackpotStatus.GetHashCode();
      if (HasJackpotFeeType) hash ^= JackpotFeeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasRoomid) {
        output.WriteRawTag(26);
        output.WriteString(Roomid);
      }
      if (HasJackpotStatus) {
        output.WriteRawTag(32);
        output.WriteInt32(JackpotStatus);
      }
      if (HasJackpotFeeType) {
        output.WriteRawTag(40);
        output.WriteInt32(JackpotFeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasRoomid) {
        output.WriteRawTag(26);
        output.WriteString(Roomid);
      }
      if (HasJackpotStatus) {
        output.WriteRawTag(32);
        output.WriteInt32(JackpotStatus);
      }
      if (HasJackpotFeeType) {
        output.WriteRawTag(40);
        output.WriteInt32(JackpotFeeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasJackpotStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotStatus);
      }
      if (HasJackpotFeeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotFeeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackPotRoomStatusBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasJackpotStatus) {
        JackpotStatus = other.JackpotStatus;
      }
      if (other.HasJackpotFeeType) {
        JackpotFeeType = other.JackpotFeeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            Roomid = input.ReadString();
            break;
          }
          case 32: {
            JackpotStatus = input.ReadInt32();
            break;
          }
          case 40: {
            JackpotFeeType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            Roomid = input.ReadString();
            break;
          }
          case 32: {
            JackpotStatus = input.ReadInt32();
            break;
          }
          case 40: {
            JackpotFeeType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RechargeJackPotRecordREQ : pb::IMessage<RechargeJackPotRecordREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RechargeJackPotRecordREQ> _parser = new pb::MessageParser<RechargeJackPotRecordREQ>(() => new RechargeJackPotRecordREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RechargeJackPotRecordREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecordREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecordREQ(RechargeJackPotRecordREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecordREQ Clone() {
      return new RechargeJackPotRecordREQ(this);
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 1;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 3;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 2) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RechargeJackPotRecordREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RechargeJackPotRecordREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeagueid) {
        output.WriteRawTag(8);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(24);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RechargeJackPotRecordREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 24: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RechargeJackPotRecord : pb::IMessage<RechargeJackPotRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RechargeJackPotRecord> _parser = new pb::MessageParser<RechargeJackPotRecord>(() => new RechargeJackPotRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RechargeJackPotRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecord(RechargeJackPotRecord other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      chips_ = other.chips_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecord Clone() {
      return new RechargeJackPotRecord(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 1) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private readonly static long TimeDefaultValue = 0L;

    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Time {
      get { if ((_hasBits0 & 2) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RechargeJackPotRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RechargeJackPotRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Chips != other.Chips) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (HasTime) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (HasTime) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RechargeJackPotRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RechargeJackPotRecordRSP : pb::IMessage<RechargeJackPotRecordRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RechargeJackPotRecordRSP> _parser = new pb::MessageParser<RechargeJackPotRecordRSP>(() => new RechargeJackPotRecordRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RechargeJackPotRecordRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecordRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecordRSP(RechargeJackPotRecordRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      leagueid_ = other.leagueid_;
      clubid_ = other.clubid_;
      record_ = other.record_.Clone();
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RechargeJackPotRecordRSP Clone() {
      return new RechargeJackPotRecordRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// -1 没有权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 2;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.RechargeJackPotRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.RechargeJackPotRecord.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.RechargeJackPotRecord> record_ = new pbc::RepeatedField<global::Texas.Protocol.RechargeJackPotRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.RechargeJackPotRecord> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 5;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    /// <summary>
    /// 0:超聯/聯盟/俱樂部JP, 有值:PPSR_JP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 4) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RechargeJackPotRecordRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RechargeJackPotRecordRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Leagueid != other.Leagueid) return false;
      if (Clubid != other.Clubid) return false;
      if(!record_.Equals(other.record_)) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      hash ^= record_.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasLeagueid) {
        output.WriteRawTag(16);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(26);
        output.WriteString(Clubid);
      }
      record_.WriteTo(output, _repeated_record_codec);
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasLeagueid) {
        output.WriteRawTag(16);
        output.WriteInt32(Leagueid);
      }
      if (HasClubid) {
        output.WriteRawTag(26);
        output.WriteString(Clubid);
      }
      record_.WriteTo(ref output, _repeated_record_codec);
      if (HasPpsrid) {
        output.WriteRawTag(40);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      size += record_.CalculateSize(_repeated_record_codec);
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RechargeJackPotRecordRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      record_.Add(other.record_);
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 26: {
            Clubid = input.ReadString();
            break;
          }
          case 34: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 26: {
            Clubid = input.ReadString();
            break;
          }
          case 34: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
          case 40: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// flash 模式下換桌不會顯示動畫 需要跳toast提示玩家
  /// </summary>
  public sealed partial class GetJackPotRewardRSP : pb::IMessage<GetJackPotRewardRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetJackPotRewardRSP> _parser = new pb::MessageParser<GetJackPotRewardRSP>(() => new GetJackPotRewardRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetJackPotRewardRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.JackpotReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetJackPotRewardRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetJackPotRewardRSP(GetJackPotRewardRSP other) : this() {
      _hasBits0 = other._hasBits0;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetJackPotRewardRSP Clone() {
      return new GetJackPotRewardRSP(this);
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private readonly static long RewardDefaultValue = 0L;

    private long reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Reward {
      get { if ((_hasBits0 & 1) != 0) { return reward_; } else { return RewardDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reward_ = value;
      }
    }
    /// <summary>Gets whether the "reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReward {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReward() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetJackPotRewardRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetJackPotRewardRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReward) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReward) {
        output.WriteRawTag(8);
        output.WriteInt64(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReward) {
        output.WriteRawTag(8);
        output.WriteInt64(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetJackPotRewardRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasReward) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reward = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Reward = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
