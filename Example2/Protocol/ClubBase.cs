// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: club_base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from club_base.proto</summary>
  public static partial class ClubBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for club_base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jbHViX2Jhc2UucHJvdG8aCmJhc2UucHJvdG8aDnByZV9iYXNlLnByb3Rv",
            "In8KC0xlYWd1ZUJyaWVmEhUKCHJvb21fbnVtGAEgASgFSACIAQESFQoIbGVh",
            "Z3VlaWQYAiABKAVIAYgBARIYCgtyb29tX251bV9oNRgDIAEoBUgCiAEBQgsK",
            "CV9yb29tX251bUILCglfbGVhZ3VlaWRCDgoMX3Jvb21fbnVtX2g1IrQDCglD",
            "bHViQnJpZWYSEwoGY2x1YmlkGAEgASgFSACIAQESEQoEbmFtZRgCIAEoCUgB",
            "iAEBEhEKBGljb24YAyABKAlIAogBARISCgVsZXZlbBgEIAEoBUgDiAEBEhEK",
            "BHJvbGUYBSABKAVIBIgBARIVCghyb29tX251bRgGIAEoBUgFiAEBEiEKC2xl",
            "YWd1ZV9saXN0GAcgAygLMgwuTGVhZ3VlQnJpZWYSGAoLcm9vbV9udW1faDUY",
            "CCABKAVIBogBARIbCg5zdXBlcl9sZWFndWVpZBgJIAEoBUgHiAEBEh4KEXN1",
            "cGVyX2xlYWd1ZV90eXBlGAogASgFSAiIAQESEwoGcHBzdGlkGAsgASgFSAmI",
            "AQESEwoGcHBzcmlkGAwgASgFSAqIAQFCCQoHX2NsdWJpZEIHCgVfbmFtZUIH",
            "CgVfaWNvbkIICgZfbGV2ZWxCBwoFX3JvbGVCCwoJX3Jvb21fbnVtQg4KDF9y",
            "b29tX251bV9oNUIRCg9fc3VwZXJfbGVhZ3VlaWRCFAoSX3N1cGVyX2xlYWd1",
            "ZV90eXBlQgkKB19wcHN0aWRCCQoHX3Bwc3JpZCJTCg9JbnN1cmFuY2VDb25m",
            "aWcSFgoJYmlnX2JsaW5kGAEgASgDSACIAQESEQoEY29zdBgCIAEoBUgBiAEB",
            "QgwKCl9iaWdfYmxpbmRCBwoFX2Nvc3QiUAoMTGVhZ3VlQ29uZmlnEhYKCWJp",
            "Z19ibGluZBgBIAEoA0gAiAEBEhEKBGNvc3QYAiABKAVIAYgBAUIMCgpfYmln",
            "X2JsaW5kQgcKBV9jb3N0Ik4KCFBpbmVDb3N0EhcKCmJhc2Vfc2NvcmUYASAB",
            "KANIAIgBARIRCgRjb3N0GAIgASgFSAGIAQFCDQoLX2Jhc2Vfc2NvcmVCBwoF",
            "X2Nvc3QiUQoLVG9uZ2l0c0Nvc3QSFwoKYmFzZV9zY29yZRgBIAEoA0gAiAEB",
            "EhEKBGNvc3QYAiABKANIAYgBAUINCgtfYmFzZV9zY29yZUIHCgVfY29zdCJO",
            "Cgpab29tQ29uZmlnEhYKCWJpZ19ibGluZBgBIAEoA0gAiAEBEhEKBGNvc3QY",
            "AiABKAVIAYgBAUIMCgpfYmlnX2JsaW5kQgcKBV9jb3N0IkgKDk5MSDZQbHVz",
            "Q29uZmlnEhEKBGFudGUYASABKANIAIgBARIRCgRjb3N0GAIgASgDSAGIAQFC",
            "BwoFX2FudGVCBwoFX2Nvc3QiUAoMRXZjaG9wQ29uZmlnEhYKCWJpZ19ibGlu",
            "ZBgBIAEoA0gAiAEBEhEKBGNvc3QYAiABKAVIAYgBAUIMCgpfYmlnX2JsaW5k",
            "QgcKBV9jb3N0IksKEUV2Y2hvcDZQbHVzQ29uZmlnEhEKBGFudGUYASABKANI",
            "AIgBARIRCgRjb3N0GAIgASgDSAGIAQFCBwoFX2FudGVCBwoFX2Nvc3QimgEK",
            "CUNhcENvbmZpZxIpCglyb29tX3R5cGUYASABKA4yES5DbHViQ2FzaFJvb21U",
            "eXBlSACIAQESEgoFbGV2ZWwYAiABKANIAYgBARIQCgNjYXAYAyABKAVIAogB",
            "ARISCgV2YWxpZBgEIAEoCEgDiAEBQgwKCl9yb29tX3R5cGVCCAoGX2xldmVs",
            "QgYKBF9jYXBCCAoGX3ZhbGlkIkwKEENvbW1vbkNvc3RDb25maWcSEgoFYmxp",
            "bmQYASABKANIAIgBARIRCgRjb3N0GAIgASgFSAGIAQFCCAoGX2JsaW5kQgcK",
            "BV9jb3N0IoABCgpQUFNSQ29uZmlnEiQKDWxlYWd1ZV9jb25maWcYASADKAsy",
            "DS5MZWFndWVDb25maWcSIAoLem9vbV9jb25maWcYAiADKAsyCy5ab29tQ29u",
            "ZmlnEioKEW5saF82X3BsdXNfY29uZmlnGAMgAygLMg8uTkxINlBsdXNDb25m",
            "aWci4QkKCkNsdWJDb25maWcSGQoMcHBjaGlwc19yYXRlGAEgASgDSACIAQES",
            "FQoIY2FwX3R5cGUYAiABKAVIAYgBARIkCg1sZWFndWVfY29uZmlnGAMgAygL",
            "Mg0uTGVhZ3VlQ29uZmlnEioKEGluc3VyYW5jZV9jb25maWcYBCADKAsyEC5J",
            "bnN1cmFuY2VDb25maWcSGAoLbWljcm9fYmxpbmQYBSABKAhIAogBARIaCg1t",
            "dHRfbWluX2J1eWluGAYgASgISAOIAQESHAoJcGluZV9jb3N0GAcgAygLMgku",
            "UGluZUNvc3QSIAoLem9vbV9jb25maWcYCCADKAsyCy5ab29tQ29uZmlnEhwK",
            "D29mY19taWNyb19ibGluZBgJIAEoCEgEiAEBEioKEW5saF82X3BsdXNfY29u",
            "ZmlnGAogAygLMg8uTkxINlBsdXNDb25maWcSIAoTamFja3BvdF91cHBlcl9s",
            "aW1pdBgLIAEoA0gFiAEBEhoKDWlzX21peGVkX2ZyZWUYDCABKAhIBogBARIk",
            "Cg1ldmNob3BfY29uZmlnGA0gAygLMg0uRXZjaG9wQ29uZmlnEi8KE2V2Y2hv",
            "cF82cGx1c19jb25maWcYDiADKAsyEi5FdmNob3A2UGx1c0NvbmZpZxIaCg1p",
            "c19jYW5fZXZjaG9wGA8gASgISAeIAQESGQoMaXNfaGlsb19mcmVlGBAgASgI",
            "SAiIAQESHgoKY2FwX2NvbmZpZxgRIAMoCzIKLkNhcENvbmZpZxIWCgltaW5f",
            "YmxpbmQYEiABKANICYgBARIdChBzcGludXBfbWF4X2J1eWluGBMgASgFSAqI",
            "AQESGgoNaXNfY2FuX3NwaW51cBgUIAEoCEgLiAEBEhwKD2lzXzNfMV9ubGhf",
            "ZnJlZRgVIAEoCEgMiAEBEiAKE2lzX3NldmVuX2RldWNlX2ZyZWUYFiABKAhI",
            "DYgBARIpCg50cF9jb3N0X2NvbmZpZxgXIAMoCzIRLkNvbW1vbkNvc3RDb25m",
            "aWcSGgoNaXNfcHVzb3lfZnJlZRgYIAEoCEgOiAEBEiUKC3Bwc3JfY29uZmln",
            "GBkgASgLMgsuUFBTUkNvbmZpZ0gPiAEBEh0KEG10dF9taW5fYnV5aW5fdjIY",
            "GiABKAVIEIgBARIXCgpjb2xvcl9jb3N0GBsgASgDSBGIAQESIgoMdG9uZ2l0",
            "c19jb3N0GBwgAygLMgwuVG9uZ2l0c0Nvc3RCDwoNX3BwY2hpcHNfcmF0ZUIL",
            "CglfY2FwX3R5cGVCDgoMX21pY3JvX2JsaW5kQhAKDl9tdHRfbWluX2J1eWlu",
            "QhIKEF9vZmNfbWljcm9fYmxpbmRCFgoUX2phY2twb3RfdXBwZXJfbGltaXRC",
            "EAoOX2lzX21peGVkX2ZyZWVCEAoOX2lzX2Nhbl9ldmNob3BCDwoNX2lzX2hp",
            "bG9fZnJlZUIMCgpfbWluX2JsaW5kQhMKEV9zcGludXBfbWF4X2J1eWluQhAK",
            "Dl9pc19jYW5fc3BpbnVwQhIKEF9pc18zXzFfbmxoX2ZyZWVCFgoUX2lzX3Nl",
            "dmVuX2RldWNlX2ZyZWVCEAoOX2lzX3B1c295X2ZyZWVCDgoMX3Bwc3JfY29u",
            "ZmlnQhMKEV9tdHRfbWluX2J1eWluX3YyQg0KC19jb2xvcl9jb3N0IrEECg1D",
            "bHViU3RhdHNEYXRhEhAKA2ZlZRgBIAEoA0gAiAEBEhIKBWJ1eWluGAIgASgD",
            "SAGIAQESGAoLdXNlcl9wcm9maXQYAyABKANIAogBARIdChBpbnN1cmFuY2Vf",
            "cHJvZml0GAQgASgDSAOIAQESGAoLamFja3BvdF9mZWUYBSABKANIBIgBARIb",
            "Cg5qYWNrcG90X3Jld2FyZBgGIAEoA0gFiAEBEhYKCWhhbmRzX2NudBgHIAEo",
            "BUgGiAEBEhUKCHNldHNfY250GAggASgFSAeIAQESEwoGY2x1YmlkGAkgASgF",
            "SAiIAQESFgoJY2x1Yl9uYW1lGAogASgJSAmIAQESFgoJY2x1Yl9pY29uGAsg",
            "ASgJSAqIAQESEwoGdGlja2V0GAwgASgDSAuIAQESGgoNZXZjaG9wX3Byb2Zp",
            "dBgNIAEoA0gMiAEBEhoKDXNwaW51cF9wcm9maXQYDiABKANIDYgBAUIGCgRf",
            "ZmVlQggKBl9idXlpbkIOCgxfdXNlcl9wcm9maXRCEwoRX2luc3VyYW5jZV9w",
            "cm9maXRCDgoMX2phY2twb3RfZmVlQhEKD19qYWNrcG90X3Jld2FyZEIMCgpf",
            "aGFuZHNfY250QgsKCV9zZXRzX2NudEIJCgdfY2x1YmlkQgwKCl9jbHViX25h",
            "bWVCDAoKX2NsdWJfaWNvbkIJCgdfdGlja2V0QhAKDl9ldmNob3BfcHJvZml0",
            "QhAKDl9zcGludXBfcHJvZml0QhpaBy9wYnBwZ2+qAg5UZXhhcy5Qcm90b2Nv",
            "bGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.PreBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.LeagueBrief), global::Texas.Protocol.LeagueBrief.Parser, new[]{ "RoomNum", "Leagueid", "RoomNumH5" }, new[]{ "RoomNum", "Leagueid", "RoomNumH5" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ClubBrief), global::Texas.Protocol.ClubBrief.Parser, new[]{ "Clubid", "Name", "Icon", "Level", "Role", "RoomNum", "LeagueList", "RoomNumH5", "SuperLeagueid", "SuperLeagueType", "Ppstid", "Ppsrid" }, new[]{ "Clubid", "Name", "Icon", "Level", "Role", "RoomNum", "RoomNumH5", "SuperLeagueid", "SuperLeagueType", "Ppstid", "Ppsrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.InsuranceConfig), global::Texas.Protocol.InsuranceConfig.Parser, new[]{ "BigBlind", "Cost" }, new[]{ "BigBlind", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.LeagueConfig), global::Texas.Protocol.LeagueConfig.Parser, new[]{ "BigBlind", "Cost" }, new[]{ "BigBlind", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.PineCost), global::Texas.Protocol.PineCost.Parser, new[]{ "BaseScore", "Cost" }, new[]{ "BaseScore", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TongitsCost), global::Texas.Protocol.TongitsCost.Parser, new[]{ "BaseScore", "Cost" }, new[]{ "BaseScore", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ZoomConfig), global::Texas.Protocol.ZoomConfig.Parser, new[]{ "BigBlind", "Cost" }, new[]{ "BigBlind", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.NLH6PlusConfig), global::Texas.Protocol.NLH6PlusConfig.Parser, new[]{ "Ante", "Cost" }, new[]{ "Ante", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.EvchopConfig), global::Texas.Protocol.EvchopConfig.Parser, new[]{ "BigBlind", "Cost" }, new[]{ "BigBlind", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.Evchop6PlusConfig), global::Texas.Protocol.Evchop6PlusConfig.Parser, new[]{ "Ante", "Cost" }, new[]{ "Ante", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CapConfig), global::Texas.Protocol.CapConfig.Parser, new[]{ "RoomType", "Level", "Cap", "Valid" }, new[]{ "RoomType", "Level", "Cap", "Valid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CommonCostConfig), global::Texas.Protocol.CommonCostConfig.Parser, new[]{ "Blind", "Cost" }, new[]{ "Blind", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.PPSRConfig), global::Texas.Protocol.PPSRConfig.Parser, new[]{ "LeagueConfig", "ZoomConfig", "Nlh6PlusConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ClubConfig), global::Texas.Protocol.ClubConfig.Parser, new[]{ "PpchipsRate", "CapType", "LeagueConfig", "InsuranceConfig", "MicroBlind", "MttMinBuyin", "PineCost", "ZoomConfig", "OfcMicroBlind", "Nlh6PlusConfig", "JackpotUpperLimit", "IsMixedFree", "EvchopConfig", "Evchop6PlusConfig", "IsCanEvchop", "IsHiloFree", "CapConfig", "MinBlind", "SpinupMaxBuyin", "IsCanSpinup", "Is31NlhFree", "IsSevenDeuceFree", "TpCostConfig", "IsPusoyFree", "PpsrConfig", "MttMinBuyinV2", "ColorCost", "TongitsCost" }, new[]{ "PpchipsRate", "CapType", "MicroBlind", "MttMinBuyin", "OfcMicroBlind", "JackpotUpperLimit", "IsMixedFree", "IsCanEvchop", "IsHiloFree", "MinBlind", "SpinupMaxBuyin", "IsCanSpinup", "Is31NlhFree", "IsSevenDeuceFree", "IsPusoyFree", "PpsrConfig", "MttMinBuyinV2", "ColorCost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ClubStatsData), global::Texas.Protocol.ClubStatsData.Parser, new[]{ "Fee", "Buyin", "UserProfit", "InsuranceProfit", "JackpotFee", "JackpotReward", "HandsCnt", "SetsCnt", "Clubid", "ClubName", "ClubIcon", "Ticket", "EvchopProfit", "SpinupProfit" }, new[]{ "Fee", "Buyin", "UserProfit", "InsuranceProfit", "JackpotFee", "JackpotReward", "HandsCnt", "SetsCnt", "Clubid", "ClubName", "ClubIcon", "Ticket", "EvchopProfit", "SpinupProfit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LeagueBrief : pb::IMessage<LeagueBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeagueBrief> _parser = new pb::MessageParser<LeagueBrief>(() => new LeagueBrief());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LeagueBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LeagueBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LeagueBrief(LeagueBrief other) : this() {
      _hasBits0 = other._hasBits0;
      roomNum_ = other.roomNum_;
      leagueid_ = other.leagueid_;
      roomNumH5_ = other.roomNumH5_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LeagueBrief Clone() {
      return new LeagueBrief(this);
    }

    /// <summary>Field number for the "room_num" field.</summary>
    public const int RoomNumFieldNumber = 1;
    private readonly static int RoomNumDefaultValue = 0;

    private int roomNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomNum {
      get { if ((_hasBits0 & 1) != 0) { return roomNum_; } else { return RoomNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roomNum_ = value;
      }
    }
    /// <summary>Gets whether the "room_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "room_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 2;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 2) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "room_num_h5" field.</summary>
    public const int RoomNumH5FieldNumber = 3;
    private readonly static int RoomNumH5DefaultValue = 0;

    private int roomNumH5_;
    /// <summary>
    ///h5展示的房间数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomNumH5 {
      get { if ((_hasBits0 & 4) != 0) { return roomNumH5_; } else { return RoomNumH5DefaultValue; } }
      set {
        _hasBits0 |= 4;
        roomNumH5_ = value;
      }
    }
    /// <summary>Gets whether the "room_num_h5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomNumH5 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "room_num_h5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomNumH5() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LeagueBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LeagueBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomNum != other.RoomNum) return false;
      if (Leagueid != other.Leagueid) return false;
      if (RoomNumH5 != other.RoomNumH5) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomNum) hash ^= RoomNum.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasRoomNumH5) hash ^= RoomNumH5.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomNum) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomNum);
      }
      if (HasLeagueid) {
        output.WriteRawTag(16);
        output.WriteInt32(Leagueid);
      }
      if (HasRoomNumH5) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomNumH5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomNum) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomNum);
      }
      if (HasLeagueid) {
        output.WriteRawTag(16);
        output.WriteInt32(Leagueid);
      }
      if (HasRoomNumH5) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomNumH5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNum);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasRoomNumH5) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNumH5);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LeagueBrief other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomNum) {
        RoomNum = other.RoomNum;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasRoomNumH5) {
        RoomNumH5 = other.RoomNumH5;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomNum = input.ReadInt32();
            break;
          }
          case 16: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 24: {
            RoomNumH5 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomNum = input.ReadInt32();
            break;
          }
          case 16: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 24: {
            RoomNumH5 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///俱乐部简要信息
  /// </summary>
  public sealed partial class ClubBrief : pb::IMessage<ClubBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClubBrief> _parser = new pb::MessageParser<ClubBrief>(() => new ClubBrief());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClubBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubBrief(ClubBrief other) : this() {
      _hasBits0 = other._hasBits0;
      clubid_ = other.clubid_;
      name_ = other.name_;
      icon_ = other.icon_;
      level_ = other.level_;
      role_ = other.role_;
      roomNum_ = other.roomNum_;
      leagueList_ = other.leagueList_.Clone();
      roomNumH5_ = other.roomNumH5_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      ppstid_ = other.ppstid_;
      ppsrid_ = other.ppsrid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubBrief Clone() {
      return new ClubBrief(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 1) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private readonly static string IconDefaultValue = "";

    private string icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Icon {
      get { return icon_ ?? IconDefaultValue; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIcon {
      get { return icon_ != null; }
    }
    /// <summary>Clears the value of the "icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIcon() {
      icon_ = null;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 5;
    private readonly static int RoleDefaultValue = 0;

    private int role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Role {
      get { if ((_hasBits0 & 4) != 0) { return role_; } else { return RoleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        role_ = value;
      }
    }
    /// <summary>Gets whether the "role" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRole {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "role" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRole() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "room_num" field.</summary>
    public const int RoomNumFieldNumber = 6;
    private readonly static int RoomNumDefaultValue = 0;

    private int roomNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomNum {
      get { if ((_hasBits0 & 8) != 0) { return roomNum_; } else { return RoomNumDefaultValue; } }
      set {
        _hasBits0 |= 8;
        roomNum_ = value;
      }
    }
    /// <summary>Gets whether the "room_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomNum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "room_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomNum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "league_list" field.</summary>
    public const int LeagueListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Texas.Protocol.LeagueBrief> _repeated_leagueList_codec
        = pb::FieldCodec.ForMessage(58, global::Texas.Protocol.LeagueBrief.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.LeagueBrief> leagueList_ = new pbc::RepeatedField<global::Texas.Protocol.LeagueBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.LeagueBrief> LeagueList {
      get { return leagueList_; }
    }

    /// <summary>Field number for the "room_num_h5" field.</summary>
    public const int RoomNumH5FieldNumber = 8;
    private readonly static int RoomNumH5DefaultValue = 0;

    private int roomNumH5_;
    /// <summary>
    ///h5展示的房间数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomNumH5 {
      get { if ((_hasBits0 & 16) != 0) { return roomNumH5_; } else { return RoomNumH5DefaultValue; } }
      set {
        _hasBits0 |= 16;
        roomNumH5_ = value;
      }
    }
    /// <summary>Gets whether the "room_num_h5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomNumH5 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "room_num_h5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomNumH5() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 9;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 32) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 32;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 10;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    ///1 not ppst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits0 & 64) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ppstid" field.</summary>
    public const int PpstidFieldNumber = 11;
    private readonly static int PpstidDefaultValue = 0;

    private int ppstid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppstid {
      get { if ((_hasBits0 & 128) != 0) { return ppstid_; } else { return PpstidDefaultValue; } }
      set {
        _hasBits0 |= 128;
        ppstid_ = value;
      }
    }
    /// <summary>Gets whether the "ppstid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpstid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "ppstid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpstid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "ppsrid" field.</summary>
    public const int PpsridFieldNumber = 12;
    private readonly static int PpsridDefaultValue = 0;

    private int ppsrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ppsrid {
      get { if ((_hasBits0 & 256) != 0) { return ppsrid_; } else { return PpsridDefaultValue; } }
      set {
        _hasBits0 |= 256;
        ppsrid_ = value;
      }
    }
    /// <summary>Gets whether the "ppsrid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpsrid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "ppsrid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpsrid() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClubBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClubBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (Level != other.Level) return false;
      if (Role != other.Role) return false;
      if (RoomNum != other.RoomNum) return false;
      if(!leagueList_.Equals(other.leagueList_)) return false;
      if (RoomNumH5 != other.RoomNumH5) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (Ppstid != other.Ppstid) return false;
      if (Ppsrid != other.Ppsrid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIcon) hash ^= Icon.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasRole) hash ^= Role.GetHashCode();
      if (HasRoomNum) hash ^= RoomNum.GetHashCode();
      hash ^= leagueList_.GetHashCode();
      if (HasRoomNumH5) hash ^= RoomNumH5.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasPpstid) hash ^= Ppstid.GetHashCode();
      if (HasPpsrid) hash ^= Ppsrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (HasLevel) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (HasRole) {
        output.WriteRawTag(40);
        output.WriteInt32(Role);
      }
      if (HasRoomNum) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomNum);
      }
      leagueList_.WriteTo(output, _repeated_leagueList_codec);
      if (HasRoomNumH5) {
        output.WriteRawTag(64);
        output.WriteInt32(RoomNumH5);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(72);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(80);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasPpstid) {
        output.WriteRawTag(88);
        output.WriteInt32(Ppstid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(96);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(8);
        output.WriteInt32(Clubid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasIcon) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (HasLevel) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (HasRole) {
        output.WriteRawTag(40);
        output.WriteInt32(Role);
      }
      if (HasRoomNum) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomNum);
      }
      leagueList_.WriteTo(ref output, _repeated_leagueList_codec);
      if (HasRoomNumH5) {
        output.WriteRawTag(64);
        output.WriteInt32(RoomNumH5);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(72);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(80);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasPpstid) {
        output.WriteRawTag(88);
        output.WriteInt32(Ppstid);
      }
      if (HasPpsrid) {
        output.WriteRawTag(96);
        output.WriteInt32(Ppsrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HasRole) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      if (HasRoomNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNum);
      }
      size += leagueList_.CalculateSize(_repeated_leagueList_codec);
      if (HasRoomNumH5) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomNumH5);
      }
      if (HasSuperLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasPpstid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppstid);
      }
      if (HasPpsrid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ppsrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClubBrief other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasRole) {
        Role = other.Role;
      }
      if (other.HasRoomNum) {
        RoomNum = other.RoomNum;
      }
      leagueList_.Add(other.leagueList_);
      if (other.HasRoomNumH5) {
        RoomNumH5 = other.RoomNumH5;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasPpstid) {
        Ppstid = other.Ppstid;
      }
      if (other.HasPpsrid) {
        Ppsrid = other.Ppsrid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Role = input.ReadInt32();
            break;
          }
          case 48: {
            RoomNum = input.ReadInt32();
            break;
          }
          case 58: {
            leagueList_.AddEntriesFrom(input, _repeated_leagueList_codec);
            break;
          }
          case 64: {
            RoomNumH5 = input.ReadInt32();
            break;
          }
          case 72: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 80: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 88: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 96: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Clubid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Role = input.ReadInt32();
            break;
          }
          case 48: {
            RoomNum = input.ReadInt32();
            break;
          }
          case 58: {
            leagueList_.AddEntriesFrom(ref input, _repeated_leagueList_codec);
            break;
          }
          case 64: {
            RoomNumH5 = input.ReadInt32();
            break;
          }
          case 72: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 80: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 88: {
            Ppstid = input.ReadInt32();
            break;
          }
          case 96: {
            Ppsrid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InsuranceConfig : pb::IMessage<InsuranceConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InsuranceConfig> _parser = new pb::MessageParser<InsuranceConfig>(() => new InsuranceConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InsuranceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InsuranceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InsuranceConfig(InsuranceConfig other) : this() {
      _hasBits0 = other._hasBits0;
      bigBlind_ = other.bigBlind_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InsuranceConfig Clone() {
      return new InsuranceConfig(this);
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 1;
    private readonly static long BigBlindDefaultValue = 0L;

    private long bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BigBlind {
      get { if ((_hasBits0 & 1) != 0) { return bigBlind_; } else { return BigBlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBigBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InsuranceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InsuranceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigBlind != other.BigBlind) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBigBlind) hash ^= BigBlind.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigBlind);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InsuranceConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasBigBlind) {
        BigBlind = other.BigBlind;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LeagueConfig : pb::IMessage<LeagueConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeagueConfig> _parser = new pb::MessageParser<LeagueConfig>(() => new LeagueConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LeagueConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LeagueConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LeagueConfig(LeagueConfig other) : this() {
      _hasBits0 = other._hasBits0;
      bigBlind_ = other.bigBlind_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LeagueConfig Clone() {
      return new LeagueConfig(this);
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 1;
    private readonly static long BigBlindDefaultValue = 0L;

    private long bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BigBlind {
      get { if ((_hasBits0 & 1) != 0) { return bigBlind_; } else { return BigBlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBigBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LeagueConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LeagueConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigBlind != other.BigBlind) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBigBlind) hash ^= BigBlind.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigBlind);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LeagueConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasBigBlind) {
        BigBlind = other.BigBlind;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PineCost : pb::IMessage<PineCost>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PineCost> _parser = new pb::MessageParser<PineCost>(() => new PineCost());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PineCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PineCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PineCost(PineCost other) : this() {
      _hasBits0 = other._hasBits0;
      baseScore_ = other.baseScore_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PineCost Clone() {
      return new PineCost(this);
    }

    /// <summary>Field number for the "base_score" field.</summary>
    public const int BaseScoreFieldNumber = 1;
    private readonly static long BaseScoreDefaultValue = 0L;

    private long baseScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseScore {
      get { if ((_hasBits0 & 1) != 0) { return baseScore_; } else { return BaseScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        baseScore_ = value;
      }
    }
    /// <summary>Gets whether the "base_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBaseScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "base_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBaseScore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PineCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PineCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseScore != other.BaseScore) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBaseScore) hash ^= BaseScore.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBaseScore) {
        output.WriteRawTag(8);
        output.WriteInt64(BaseScore);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBaseScore) {
        output.WriteRawTag(8);
        output.WriteInt64(BaseScore);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBaseScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseScore);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PineCost other) {
      if (other == null) {
        return;
      }
      if (other.HasBaseScore) {
        BaseScore = other.BaseScore;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BaseScore = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BaseScore = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TongitsCost : pb::IMessage<TongitsCost>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TongitsCost> _parser = new pb::MessageParser<TongitsCost>(() => new TongitsCost());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TongitsCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TongitsCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TongitsCost(TongitsCost other) : this() {
      _hasBits0 = other._hasBits0;
      baseScore_ = other.baseScore_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TongitsCost Clone() {
      return new TongitsCost(this);
    }

    /// <summary>Field number for the "base_score" field.</summary>
    public const int BaseScoreFieldNumber = 1;
    private readonly static long BaseScoreDefaultValue = 0L;

    private long baseScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseScore {
      get { if ((_hasBits0 & 1) != 0) { return baseScore_; } else { return BaseScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        baseScore_ = value;
      }
    }
    /// <summary>Gets whether the "base_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBaseScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "base_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBaseScore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static long CostDefaultValue = 0L;

    private long cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TongitsCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TongitsCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseScore != other.BaseScore) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBaseScore) hash ^= BaseScore.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBaseScore) {
        output.WriteRawTag(8);
        output.WriteInt64(BaseScore);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBaseScore) {
        output.WriteRawTag(8);
        output.WriteInt64(BaseScore);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBaseScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseScore);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TongitsCost other) {
      if (other == null) {
        return;
      }
      if (other.HasBaseScore) {
        BaseScore = other.BaseScore;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BaseScore = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BaseScore = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ZoomConfig : pb::IMessage<ZoomConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ZoomConfig> _parser = new pb::MessageParser<ZoomConfig>(() => new ZoomConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ZoomConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomConfig(ZoomConfig other) : this() {
      _hasBits0 = other._hasBits0;
      bigBlind_ = other.bigBlind_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ZoomConfig Clone() {
      return new ZoomConfig(this);
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 1;
    private readonly static long BigBlindDefaultValue = 0L;

    private long bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BigBlind {
      get { if ((_hasBits0 & 1) != 0) { return bigBlind_; } else { return BigBlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBigBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ZoomConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ZoomConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigBlind != other.BigBlind) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBigBlind) hash ^= BigBlind.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigBlind);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ZoomConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasBigBlind) {
        BigBlind = other.BigBlind;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NLH6PlusConfig : pb::IMessage<NLH6PlusConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NLH6PlusConfig> _parser = new pb::MessageParser<NLH6PlusConfig>(() => new NLH6PlusConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NLH6PlusConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NLH6PlusConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NLH6PlusConfig(NLH6PlusConfig other) : this() {
      _hasBits0 = other._hasBits0;
      ante_ = other.ante_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NLH6PlusConfig Clone() {
      return new NLH6PlusConfig(this);
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 1;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 1) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static long CostDefaultValue = 0L;

    private long cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NLH6PlusConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NLH6PlusConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ante != other.Ante) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAnte) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAnte) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NLH6PlusConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EvchopConfig : pb::IMessage<EvchopConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EvchopConfig> _parser = new pb::MessageParser<EvchopConfig>(() => new EvchopConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EvchopConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvchopConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvchopConfig(EvchopConfig other) : this() {
      _hasBits0 = other._hasBits0;
      bigBlind_ = other.bigBlind_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvchopConfig Clone() {
      return new EvchopConfig(this);
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 1;
    private readonly static long BigBlindDefaultValue = 0L;

    private long bigBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BigBlind {
      get { if ((_hasBits0 & 1) != 0) { return bigBlind_; } else { return BigBlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bigBlind_ = value;
      }
    }
    /// <summary>Gets whether the "big_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "big_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBigBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EvchopConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EvchopConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigBlind != other.BigBlind) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBigBlind) hash ^= BigBlind.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBigBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(BigBlind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBigBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigBlind);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EvchopConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasBigBlind) {
        BigBlind = other.BigBlind;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BigBlind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Evchop6PlusConfig : pb::IMessage<Evchop6PlusConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Evchop6PlusConfig> _parser = new pb::MessageParser<Evchop6PlusConfig>(() => new Evchop6PlusConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Evchop6PlusConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Evchop6PlusConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Evchop6PlusConfig(Evchop6PlusConfig other) : this() {
      _hasBits0 = other._hasBits0;
      ante_ = other.ante_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Evchop6PlusConfig Clone() {
      return new Evchop6PlusConfig(this);
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 1;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 1) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static long CostDefaultValue = 0L;

    private long cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Evchop6PlusConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Evchop6PlusConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ante != other.Ante) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAnte) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAnte) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Evchop6PlusConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CapConfig : pb::IMessage<CapConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CapConfig> _parser = new pb::MessageParser<CapConfig>(() => new CapConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CapConfig(CapConfig other) : this() {
      _hasBits0 = other._hasBits0;
      roomType_ = other.roomType_;
      level_ = other.level_;
      cap_ = other.cap_;
      valid_ = other.valid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CapConfig Clone() {
      return new CapConfig(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private readonly static global::Texas.Protocol.ClubCashRoomType RoomTypeDefaultValue = global::Texas.Protocol.ClubCashRoomType.Invalid;

    private global::Texas.Protocol.ClubCashRoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ClubCashRoomType RoomType {
      get { if ((_hasBits0 & 1) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private readonly static long LevelDefaultValue = 0L;

    private long level_;
    /// <summary>
    /// 小盲/前注/底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 3;
    private readonly static int CapDefaultValue = 0;

    private int cap_;
    /// <summary>
    /// 配置封顶上限 0.5BB: 5, 1BB:10, 2BB:20, 3BB:30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cap {
      get { if ((_hasBits0 & 4) != 0) { return cap_; } else { return CapDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cap_ = value;
      }
    }
    /// <summary>Gets whether the "cap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCap {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCap() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 4;
    private readonly static bool ValidDefaultValue = false;

    private bool valid_;
    /// <summary>
    /// 是否有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Valid {
      get { if ((_hasBits0 & 8) != 0) { return valid_; } else { return ValidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        valid_ = value;
      }
    }
    /// <summary>Gets whether the "valid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "valid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValid() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (Level != other.Level) return false;
      if (Cap != other.Cap) return false;
      if (Valid != other.Valid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasCap) hash ^= Cap.GetHashCode();
      if (HasValid) hash ^= Valid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomType);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteInt64(Level);
      }
      if (HasCap) {
        output.WriteRawTag(24);
        output.WriteInt32(Cap);
      }
      if (HasValid) {
        output.WriteRawTag(32);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RoomType);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteInt64(Level);
      }
      if (HasCap) {
        output.WriteRawTag(24);
        output.WriteInt32(Cap);
      }
      if (HasValid) {
        output.WriteRawTag(32);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
      }
      if (HasCap) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cap);
      }
      if (HasValid) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CapConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasCap) {
        Cap = other.Cap;
      }
      if (other.HasValid) {
        Valid = other.Valid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomType = (global::Texas.Protocol.ClubCashRoomType) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadInt64();
            break;
          }
          case 24: {
            Cap = input.ReadInt32();
            break;
          }
          case 32: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomType = (global::Texas.Protocol.ClubCashRoomType) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadInt64();
            break;
          }
          case 24: {
            Cap = input.ReadInt32();
            break;
          }
          case 32: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommonCostConfig : pb::IMessage<CommonCostConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonCostConfig> _parser = new pb::MessageParser<CommonCostConfig>(() => new CommonCostConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CommonCostConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonCostConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonCostConfig(CommonCostConfig other) : this() {
      _hasBits0 = other._hasBits0;
      blind_ = other.blind_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonCostConfig Clone() {
      return new CommonCostConfig(this);
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 1;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    /// <summary>
    ///to teenpatti means boot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 1) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    /// <summary>
    ///diamond cost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CommonCostConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CommonCostConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Blind != other.Blind) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(Blind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBlind) {
        output.WriteRawTag(8);
        output.WriteInt64(Blind);
      }
      if (HasCost) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CommonCostConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Blind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Blind = input.ReadInt64();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PPSRConfig : pb::IMessage<PPSRConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PPSRConfig> _parser = new pb::MessageParser<PPSRConfig>(() => new PPSRConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PPSRConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PPSRConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PPSRConfig(PPSRConfig other) : this() {
      leagueConfig_ = other.leagueConfig_.Clone();
      zoomConfig_ = other.zoomConfig_.Clone();
      nlh6PlusConfig_ = other.nlh6PlusConfig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PPSRConfig Clone() {
      return new PPSRConfig(this);
    }

    /// <summary>Field number for the "league_config" field.</summary>
    public const int LeagueConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.LeagueConfig> _repeated_leagueConfig_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.LeagueConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.LeagueConfig> leagueConfig_ = new pbc::RepeatedField<global::Texas.Protocol.LeagueConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.LeagueConfig> LeagueConfig {
      get { return leagueConfig_; }
    }

    /// <summary>Field number for the "zoom_config" field.</summary>
    public const int ZoomConfigFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ZoomConfig> _repeated_zoomConfig_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.ZoomConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ZoomConfig> zoomConfig_ = new pbc::RepeatedField<global::Texas.Protocol.ZoomConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ZoomConfig> ZoomConfig {
      get { return zoomConfig_; }
    }

    /// <summary>Field number for the "nlh_6_plus_config" field.</summary>
    public const int Nlh6PlusConfigFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.NLH6PlusConfig> _repeated_nlh6PlusConfig_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.NLH6PlusConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.NLH6PlusConfig> nlh6PlusConfig_ = new pbc::RepeatedField<global::Texas.Protocol.NLH6PlusConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.NLH6PlusConfig> Nlh6PlusConfig {
      get { return nlh6PlusConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PPSRConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PPSRConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leagueConfig_.Equals(other.leagueConfig_)) return false;
      if(!zoomConfig_.Equals(other.zoomConfig_)) return false;
      if(!nlh6PlusConfig_.Equals(other.nlh6PlusConfig_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leagueConfig_.GetHashCode();
      hash ^= zoomConfig_.GetHashCode();
      hash ^= nlh6PlusConfig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      leagueConfig_.WriteTo(output, _repeated_leagueConfig_codec);
      zoomConfig_.WriteTo(output, _repeated_zoomConfig_codec);
      nlh6PlusConfig_.WriteTo(output, _repeated_nlh6PlusConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      leagueConfig_.WriteTo(ref output, _repeated_leagueConfig_codec);
      zoomConfig_.WriteTo(ref output, _repeated_zoomConfig_codec);
      nlh6PlusConfig_.WriteTo(ref output, _repeated_nlh6PlusConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += leagueConfig_.CalculateSize(_repeated_leagueConfig_codec);
      size += zoomConfig_.CalculateSize(_repeated_zoomConfig_codec);
      size += nlh6PlusConfig_.CalculateSize(_repeated_nlh6PlusConfig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PPSRConfig other) {
      if (other == null) {
        return;
      }
      leagueConfig_.Add(other.leagueConfig_);
      zoomConfig_.Add(other.zoomConfig_);
      nlh6PlusConfig_.Add(other.nlh6PlusConfig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            leagueConfig_.AddEntriesFrom(input, _repeated_leagueConfig_codec);
            break;
          }
          case 18: {
            zoomConfig_.AddEntriesFrom(input, _repeated_zoomConfig_codec);
            break;
          }
          case 26: {
            nlh6PlusConfig_.AddEntriesFrom(input, _repeated_nlh6PlusConfig_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            leagueConfig_.AddEntriesFrom(ref input, _repeated_leagueConfig_codec);
            break;
          }
          case 18: {
            zoomConfig_.AddEntriesFrom(ref input, _repeated_zoomConfig_codec);
            break;
          }
          case 26: {
            nlh6PlusConfig_.AddEntriesFrom(ref input, _repeated_nlh6PlusConfig_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClubConfig : pb::IMessage<ClubConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClubConfig> _parser = new pb::MessageParser<ClubConfig>(() => new ClubConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClubConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubConfig(ClubConfig other) : this() {
      _hasBits0 = other._hasBits0;
      ppchipsRate_ = other.ppchipsRate_;
      capType_ = other.capType_;
      leagueConfig_ = other.leagueConfig_.Clone();
      insuranceConfig_ = other.insuranceConfig_.Clone();
      microBlind_ = other.microBlind_;
      mttMinBuyin_ = other.mttMinBuyin_;
      pineCost_ = other.pineCost_.Clone();
      zoomConfig_ = other.zoomConfig_.Clone();
      ofcMicroBlind_ = other.ofcMicroBlind_;
      nlh6PlusConfig_ = other.nlh6PlusConfig_.Clone();
      jackpotUpperLimit_ = other.jackpotUpperLimit_;
      isMixedFree_ = other.isMixedFree_;
      evchopConfig_ = other.evchopConfig_.Clone();
      evchop6PlusConfig_ = other.evchop6PlusConfig_.Clone();
      isCanEvchop_ = other.isCanEvchop_;
      isHiloFree_ = other.isHiloFree_;
      capConfig_ = other.capConfig_.Clone();
      minBlind_ = other.minBlind_;
      spinupMaxBuyin_ = other.spinupMaxBuyin_;
      isCanSpinup_ = other.isCanSpinup_;
      is31NlhFree_ = other.is31NlhFree_;
      isSevenDeuceFree_ = other.isSevenDeuceFree_;
      tpCostConfig_ = other.tpCostConfig_.Clone();
      isPusoyFree_ = other.isPusoyFree_;
      ppsrConfig_ = other.ppsrConfig_ != null ? other.ppsrConfig_.Clone() : null;
      mttMinBuyinV2_ = other.mttMinBuyinV2_;
      colorCost_ = other.colorCost_;
      tongitsCost_ = other.tongitsCost_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubConfig Clone() {
      return new ClubConfig(this);
    }

    /// <summary>Field number for the "ppchips_rate" field.</summary>
    public const int PpchipsRateFieldNumber = 1;
    private readonly static long PpchipsRateDefaultValue = 0L;

    private long ppchipsRate_;
    /// <summary>
    /// 100个钻石换几个pp币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PpchipsRate {
      get { if ((_hasBits0 & 1) != 0) { return ppchipsRate_; } else { return PpchipsRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ppchipsRate_ = value;
      }
    }
    /// <summary>Gets whether the "ppchips_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPpchipsRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ppchips_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPpchipsRate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cap_type" field.</summary>
    public const int CapTypeFieldNumber = 2;
    private readonly static int CapTypeDefaultValue = 0;

    private int capType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CapType {
      get { if ((_hasBits0 & 2) != 0) { return capType_; } else { return CapTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        capType_ = value;
      }
    }
    /// <summary>Gets whether the "cap_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCapType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cap_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCapType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "league_config" field.</summary>
    public const int LeagueConfigFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.LeagueConfig> _repeated_leagueConfig_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.LeagueConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.LeagueConfig> leagueConfig_ = new pbc::RepeatedField<global::Texas.Protocol.LeagueConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.LeagueConfig> LeagueConfig {
      get { return leagueConfig_; }
    }

    /// <summary>Field number for the "insurance_config" field.</summary>
    public const int InsuranceConfigFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.InsuranceConfig> _repeated_insuranceConfig_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.InsuranceConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.InsuranceConfig> insuranceConfig_ = new pbc::RepeatedField<global::Texas.Protocol.InsuranceConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.InsuranceConfig> InsuranceConfig {
      get { return insuranceConfig_; }
    }

    /// <summary>Field number for the "micro_blind" field.</summary>
    public const int MicroBlindFieldNumber = 5;
    private readonly static bool MicroBlindDefaultValue = false;

    private bool microBlind_;
    /// <summary>
    /// 是否能开微级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MicroBlind {
      get { if ((_hasBits0 & 4) != 0) { return microBlind_; } else { return MicroBlindDefaultValue; } }
      set {
        _hasBits0 |= 4;
        microBlind_ = value;
      }
    }
    /// <summary>Gets whether the "micro_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMicroBlind {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "micro_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMicroBlind() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "mtt_min_buyin" field.</summary>
    public const int MttMinBuyinFieldNumber = 6;
    private readonly static bool MttMinBuyinDefaultValue = false;

    private bool mttMinBuyin_;
    /// <summary>
    /// mtt是否可以最小买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MttMinBuyin {
      get { if ((_hasBits0 & 8) != 0) { return mttMinBuyin_; } else { return MttMinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        mttMinBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttMinBuyin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "mtt_min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttMinBuyin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pine_cost" field.</summary>
    public const int PineCostFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Texas.Protocol.PineCost> _repeated_pineCost_codec
        = pb::FieldCodec.ForMessage(58, global::Texas.Protocol.PineCost.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.PineCost> pineCost_ = new pbc::RepeatedField<global::Texas.Protocol.PineCost>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.PineCost> PineCost {
      get { return pineCost_; }
    }

    /// <summary>Field number for the "zoom_config" field.</summary>
    public const int ZoomConfigFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ZoomConfig> _repeated_zoomConfig_codec
        = pb::FieldCodec.ForMessage(66, global::Texas.Protocol.ZoomConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ZoomConfig> zoomConfig_ = new pbc::RepeatedField<global::Texas.Protocol.ZoomConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ZoomConfig> ZoomConfig {
      get { return zoomConfig_; }
    }

    /// <summary>Field number for the "ofc_micro_blind" field.</summary>
    public const int OfcMicroBlindFieldNumber = 9;
    private readonly static bool OfcMicroBlindDefaultValue = false;

    private bool ofcMicroBlind_;
    /// <summary>
    /// 是否能开大菠萝微级别	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OfcMicroBlind {
      get { if ((_hasBits0 & 16) != 0) { return ofcMicroBlind_; } else { return OfcMicroBlindDefaultValue; } }
      set {
        _hasBits0 |= 16;
        ofcMicroBlind_ = value;
      }
    }
    /// <summary>Gets whether the "ofc_micro_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfcMicroBlind {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ofc_micro_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfcMicroBlind() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "nlh_6_plus_config" field.</summary>
    public const int Nlh6PlusConfigFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Texas.Protocol.NLH6PlusConfig> _repeated_nlh6PlusConfig_codec
        = pb::FieldCodec.ForMessage(82, global::Texas.Protocol.NLH6PlusConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.NLH6PlusConfig> nlh6PlusConfig_ = new pbc::RepeatedField<global::Texas.Protocol.NLH6PlusConfig>();
    /// <summary>
    /// 6+配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.NLH6PlusConfig> Nlh6PlusConfig {
      get { return nlh6PlusConfig_; }
    }

    /// <summary>Field number for the "jackpot_upper_limit" field.</summary>
    public const int JackpotUpperLimitFieldNumber = 11;
    private readonly static long JackpotUpperLimitDefaultValue = 0L;

    private long jackpotUpperLimit_;
    /// <summary>
    /// 充值jackpot总量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotUpperLimit {
      get { if ((_hasBits0 & 32) != 0) { return jackpotUpperLimit_; } else { return JackpotUpperLimitDefaultValue; } }
      set {
        _hasBits0 |= 32;
        jackpotUpperLimit_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_upper_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotUpperLimit {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_upper_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotUpperLimit() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_mixed_free" field.</summary>
    public const int IsMixedFreeFieldNumber = 12;
    private readonly static bool IsMixedFreeDefaultValue = false;

    private bool isMixedFree_;
    /// <summary>
    ///混合游戏开桌是否免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMixedFree {
      get { if ((_hasBits0 & 64) != 0) { return isMixedFree_; } else { return IsMixedFreeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isMixedFree_ = value;
      }
    }
    /// <summary>Gets whether the "is_mixed_free" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMixedFree {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_mixed_free" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMixedFree() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "evchop_config" field.</summary>
    public const int EvchopConfigFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Texas.Protocol.EvchopConfig> _repeated_evchopConfig_codec
        = pb::FieldCodec.ForMessage(106, global::Texas.Protocol.EvchopConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.EvchopConfig> evchopConfig_ = new pbc::RepeatedField<global::Texas.Protocol.EvchopConfig>();
    /// <summary>
    /// evchop 钻石消耗配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.EvchopConfig> EvchopConfig {
      get { return evchopConfig_; }
    }

    /// <summary>Field number for the "evchop_6plus_config" field.</summary>
    public const int Evchop6PlusConfigFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Texas.Protocol.Evchop6PlusConfig> _repeated_evchop6PlusConfig_codec
        = pb::FieldCodec.ForMessage(114, global::Texas.Protocol.Evchop6PlusConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.Evchop6PlusConfig> evchop6PlusConfig_ = new pbc::RepeatedField<global::Texas.Protocol.Evchop6PlusConfig>();
    /// <summary>
    /// 6plus evchop 钻石消耗配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.Evchop6PlusConfig> Evchop6PlusConfig {
      get { return evchop6PlusConfig_; }
    }

    /// <summary>Field number for the "is_can_evchop" field.</summary>
    public const int IsCanEvchopFieldNumber = 15;
    private readonly static bool IsCanEvchopDefaultValue = false;

    private bool isCanEvchop_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCanEvchop {
      get { if ((_hasBits0 & 128) != 0) { return isCanEvchop_; } else { return IsCanEvchopDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isCanEvchop_ = value;
      }
    }
    /// <summary>Gets whether the "is_can_evchop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCanEvchop {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_can_evchop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCanEvchop() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_hilo_free" field.</summary>
    public const int IsHiloFreeFieldNumber = 16;
    private readonly static bool IsHiloFreeDefaultValue = false;

    private bool isHiloFree_;
    /// <summary>
    /// PLO Hi/Lo游戏开桌是否免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHiloFree {
      get { if ((_hasBits0 & 256) != 0) { return isHiloFree_; } else { return IsHiloFreeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isHiloFree_ = value;
      }
    }
    /// <summary>Gets whether the "is_hilo_free" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHiloFree {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_hilo_free" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHiloFree() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "cap_config" field.</summary>
    public const int CapConfigFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Texas.Protocol.CapConfig> _repeated_capConfig_codec
        = pb::FieldCodec.ForMessage(138, global::Texas.Protocol.CapConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.CapConfig> capConfig_ = new pbc::RepeatedField<global::Texas.Protocol.CapConfig>();
    /// <summary>
    /// 后台配置的封顶上限, 只传非默认上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.CapConfig> CapConfig {
      get { return capConfig_; }
    }

    /// <summary>Field number for the "min_blind" field.</summary>
    public const int MinBlindFieldNumber = 18;
    private readonly static long MinBlindDefaultValue = 0L;

    private long minBlind_;
    /// <summary>
    /// 作为micro_blind的补充,原按1/2区分微级别,直接表示可开启最小级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBlind {
      get { if ((_hasBits0 & 512) != 0) { return minBlind_; } else { return MinBlindDefaultValue; } }
      set {
        _hasBits0 |= 512;
        minBlind_ = value;
      }
    }
    /// <summary>Gets whether the "min_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBlind {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "min_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBlind() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "spinup_max_buyin" field.</summary>
    public const int SpinupMaxBuyinFieldNumber = 19;
    private readonly static int SpinupMaxBuyinDefaultValue = 0;

    private int spinupMaxBuyin_;
    /// <summary>
    /// spinup  可输入的最大买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpinupMaxBuyin {
      get { if ((_hasBits0 & 1024) != 0) { return spinupMaxBuyin_; } else { return SpinupMaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        spinupMaxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "spinup_max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpinupMaxBuyin {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "spinup_max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpinupMaxBuyin() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "is_can_spinup" field.</summary>
    public const int IsCanSpinupFieldNumber = 20;
    private readonly static bool IsCanSpinupDefaultValue = false;

    private bool isCanSpinup_;
    /// <summary>
    /// 是否能开spinup房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCanSpinup {
      get { if ((_hasBits0 & 2048) != 0) { return isCanSpinup_; } else { return IsCanSpinupDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isCanSpinup_ = value;
      }
    }
    /// <summary>Gets whether the "is_can_spinup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCanSpinup {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_can_spinup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCanSpinup() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "is_3_1_nlh_free" field.</summary>
    public const int Is31NlhFreeFieldNumber = 21;
    private readonly static bool Is31NlhFreeDefaultValue = false;

    private bool is31NlhFree_;
    /// <summary>
    /// 是否3-1nlh免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Is31NlhFree {
      get { if ((_hasBits0 & 4096) != 0) { return is31NlhFree_; } else { return Is31NlhFreeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        is31NlhFree_ = value;
      }
    }
    /// <summary>Gets whether the "is_3_1_nlh_free" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIs31NlhFree {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "is_3_1_nlh_free" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIs31NlhFree() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "is_seven_deuce_free" field.</summary>
    public const int IsSevenDeuceFreeFieldNumber = 22;
    private readonly static bool IsSevenDeuceFreeDefaultValue = false;

    private bool isSevenDeuceFree_;
    /// <summary>
    /// 是否72o免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSevenDeuceFree {
      get { if ((_hasBits0 & 8192) != 0) { return isSevenDeuceFree_; } else { return IsSevenDeuceFreeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        isSevenDeuceFree_ = value;
      }
    }
    /// <summary>Gets whether the "is_seven_deuce_free" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSevenDeuceFree {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "is_seven_deuce_free" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSevenDeuceFree() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "tp_cost_config" field.</summary>
    public const int TpCostConfigFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Texas.Protocol.CommonCostConfig> _repeated_tpCostConfig_codec
        = pb::FieldCodec.ForMessage(186, global::Texas.Protocol.CommonCostConfig.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.CommonCostConfig> tpCostConfig_ = new pbc::RepeatedField<global::Texas.Protocol.CommonCostConfig>();
    /// <summary>
    /// teenpatti 钻石消耗配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.CommonCostConfig> TpCostConfig {
      get { return tpCostConfig_; }
    }

    /// <summary>Field number for the "is_pusoy_free" field.</summary>
    public const int IsPusoyFreeFieldNumber = 24;
    private readonly static bool IsPusoyFreeDefaultValue = false;

    private bool isPusoyFree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPusoyFree {
      get { if ((_hasBits0 & 16384) != 0) { return isPusoyFree_; } else { return IsPusoyFreeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        isPusoyFree_ = value;
      }
    }
    /// <summary>Gets whether the "is_pusoy_free" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPusoyFree {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_pusoy_free" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPusoyFree() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "ppsr_config" field.</summary>
    public const int PpsrConfigFieldNumber = 25;
    private global::Texas.Protocol.PPSRConfig ppsrConfig_;
    /// <summary>
    /// PPSR cost 設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.PPSRConfig PpsrConfig {
      get { return ppsrConfig_; }
      set {
        ppsrConfig_ = value;
      }
    }

    /// <summary>Field number for the "mtt_min_buyin_v2" field.</summary>
    public const int MttMinBuyinV2FieldNumber = 26;
    private readonly static int MttMinBuyinV2DefaultValue = 0;

    private int mttMinBuyinV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MttMinBuyinV2 {
      get { if ((_hasBits0 & 32768) != 0) { return mttMinBuyinV2_; } else { return MttMinBuyinV2DefaultValue; } }
      set {
        _hasBits0 |= 32768;
        mttMinBuyinV2_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_min_buyin_v2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttMinBuyinV2 {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "mtt_min_buyin_v2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttMinBuyinV2() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "color_cost" field.</summary>
    public const int ColorCostFieldNumber = 27;
    private readonly static long ColorCostDefaultValue = 0L;

    private long colorCost_;
    /// <summary>
    /// color game 開房消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ColorCost {
      get { if ((_hasBits0 & 65536) != 0) { return colorCost_; } else { return ColorCostDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        colorCost_ = value;
      }
    }
    /// <summary>Gets whether the "color_cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasColorCost {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "color_cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearColorCost() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "tongits_cost" field.</summary>
    public const int TongitsCostFieldNumber = 28;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TongitsCost> _repeated_tongitsCost_codec
        = pb::FieldCodec.ForMessage(226, global::Texas.Protocol.TongitsCost.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TongitsCost> tongitsCost_ = new pbc::RepeatedField<global::Texas.Protocol.TongitsCost>();
    /// <summary>
    ///new_game_proto
    ///repeated NewGameCost newgame_cost              = 1000;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TongitsCost> TongitsCost {
      get { return tongitsCost_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClubConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClubConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PpchipsRate != other.PpchipsRate) return false;
      if (CapType != other.CapType) return false;
      if(!leagueConfig_.Equals(other.leagueConfig_)) return false;
      if(!insuranceConfig_.Equals(other.insuranceConfig_)) return false;
      if (MicroBlind != other.MicroBlind) return false;
      if (MttMinBuyin != other.MttMinBuyin) return false;
      if(!pineCost_.Equals(other.pineCost_)) return false;
      if(!zoomConfig_.Equals(other.zoomConfig_)) return false;
      if (OfcMicroBlind != other.OfcMicroBlind) return false;
      if(!nlh6PlusConfig_.Equals(other.nlh6PlusConfig_)) return false;
      if (JackpotUpperLimit != other.JackpotUpperLimit) return false;
      if (IsMixedFree != other.IsMixedFree) return false;
      if(!evchopConfig_.Equals(other.evchopConfig_)) return false;
      if(!evchop6PlusConfig_.Equals(other.evchop6PlusConfig_)) return false;
      if (IsCanEvchop != other.IsCanEvchop) return false;
      if (IsHiloFree != other.IsHiloFree) return false;
      if(!capConfig_.Equals(other.capConfig_)) return false;
      if (MinBlind != other.MinBlind) return false;
      if (SpinupMaxBuyin != other.SpinupMaxBuyin) return false;
      if (IsCanSpinup != other.IsCanSpinup) return false;
      if (Is31NlhFree != other.Is31NlhFree) return false;
      if (IsSevenDeuceFree != other.IsSevenDeuceFree) return false;
      if(!tpCostConfig_.Equals(other.tpCostConfig_)) return false;
      if (IsPusoyFree != other.IsPusoyFree) return false;
      if (!object.Equals(PpsrConfig, other.PpsrConfig)) return false;
      if (MttMinBuyinV2 != other.MttMinBuyinV2) return false;
      if (ColorCost != other.ColorCost) return false;
      if(!tongitsCost_.Equals(other.tongitsCost_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPpchipsRate) hash ^= PpchipsRate.GetHashCode();
      if (HasCapType) hash ^= CapType.GetHashCode();
      hash ^= leagueConfig_.GetHashCode();
      hash ^= insuranceConfig_.GetHashCode();
      if (HasMicroBlind) hash ^= MicroBlind.GetHashCode();
      if (HasMttMinBuyin) hash ^= MttMinBuyin.GetHashCode();
      hash ^= pineCost_.GetHashCode();
      hash ^= zoomConfig_.GetHashCode();
      if (HasOfcMicroBlind) hash ^= OfcMicroBlind.GetHashCode();
      hash ^= nlh6PlusConfig_.GetHashCode();
      if (HasJackpotUpperLimit) hash ^= JackpotUpperLimit.GetHashCode();
      if (HasIsMixedFree) hash ^= IsMixedFree.GetHashCode();
      hash ^= evchopConfig_.GetHashCode();
      hash ^= evchop6PlusConfig_.GetHashCode();
      if (HasIsCanEvchop) hash ^= IsCanEvchop.GetHashCode();
      if (HasIsHiloFree) hash ^= IsHiloFree.GetHashCode();
      hash ^= capConfig_.GetHashCode();
      if (HasMinBlind) hash ^= MinBlind.GetHashCode();
      if (HasSpinupMaxBuyin) hash ^= SpinupMaxBuyin.GetHashCode();
      if (HasIsCanSpinup) hash ^= IsCanSpinup.GetHashCode();
      if (HasIs31NlhFree) hash ^= Is31NlhFree.GetHashCode();
      if (HasIsSevenDeuceFree) hash ^= IsSevenDeuceFree.GetHashCode();
      hash ^= tpCostConfig_.GetHashCode();
      if (HasIsPusoyFree) hash ^= IsPusoyFree.GetHashCode();
      if (ppsrConfig_ != null) hash ^= PpsrConfig.GetHashCode();
      if (HasMttMinBuyinV2) hash ^= MttMinBuyinV2.GetHashCode();
      if (HasColorCost) hash ^= ColorCost.GetHashCode();
      hash ^= tongitsCost_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPpchipsRate) {
        output.WriteRawTag(8);
        output.WriteInt64(PpchipsRate);
      }
      if (HasCapType) {
        output.WriteRawTag(16);
        output.WriteInt32(CapType);
      }
      leagueConfig_.WriteTo(output, _repeated_leagueConfig_codec);
      insuranceConfig_.WriteTo(output, _repeated_insuranceConfig_codec);
      if (HasMicroBlind) {
        output.WriteRawTag(40);
        output.WriteBool(MicroBlind);
      }
      if (HasMttMinBuyin) {
        output.WriteRawTag(48);
        output.WriteBool(MttMinBuyin);
      }
      pineCost_.WriteTo(output, _repeated_pineCost_codec);
      zoomConfig_.WriteTo(output, _repeated_zoomConfig_codec);
      if (HasOfcMicroBlind) {
        output.WriteRawTag(72);
        output.WriteBool(OfcMicroBlind);
      }
      nlh6PlusConfig_.WriteTo(output, _repeated_nlh6PlusConfig_codec);
      if (HasJackpotUpperLimit) {
        output.WriteRawTag(88);
        output.WriteInt64(JackpotUpperLimit);
      }
      if (HasIsMixedFree) {
        output.WriteRawTag(96);
        output.WriteBool(IsMixedFree);
      }
      evchopConfig_.WriteTo(output, _repeated_evchopConfig_codec);
      evchop6PlusConfig_.WriteTo(output, _repeated_evchop6PlusConfig_codec);
      if (HasIsCanEvchop) {
        output.WriteRawTag(120);
        output.WriteBool(IsCanEvchop);
      }
      if (HasIsHiloFree) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsHiloFree);
      }
      capConfig_.WriteTo(output, _repeated_capConfig_codec);
      if (HasMinBlind) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(MinBlind);
      }
      if (HasSpinupMaxBuyin) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SpinupMaxBuyin);
      }
      if (HasIsCanSpinup) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsCanSpinup);
      }
      if (HasIs31NlhFree) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Is31NlhFree);
      }
      if (HasIsSevenDeuceFree) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsSevenDeuceFree);
      }
      tpCostConfig_.WriteTo(output, _repeated_tpCostConfig_codec);
      if (HasIsPusoyFree) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsPusoyFree);
      }
      if (ppsrConfig_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PpsrConfig);
      }
      if (HasMttMinBuyinV2) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MttMinBuyinV2);
      }
      if (HasColorCost) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ColorCost);
      }
      tongitsCost_.WriteTo(output, _repeated_tongitsCost_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPpchipsRate) {
        output.WriteRawTag(8);
        output.WriteInt64(PpchipsRate);
      }
      if (HasCapType) {
        output.WriteRawTag(16);
        output.WriteInt32(CapType);
      }
      leagueConfig_.WriteTo(ref output, _repeated_leagueConfig_codec);
      insuranceConfig_.WriteTo(ref output, _repeated_insuranceConfig_codec);
      if (HasMicroBlind) {
        output.WriteRawTag(40);
        output.WriteBool(MicroBlind);
      }
      if (HasMttMinBuyin) {
        output.WriteRawTag(48);
        output.WriteBool(MttMinBuyin);
      }
      pineCost_.WriteTo(ref output, _repeated_pineCost_codec);
      zoomConfig_.WriteTo(ref output, _repeated_zoomConfig_codec);
      if (HasOfcMicroBlind) {
        output.WriteRawTag(72);
        output.WriteBool(OfcMicroBlind);
      }
      nlh6PlusConfig_.WriteTo(ref output, _repeated_nlh6PlusConfig_codec);
      if (HasJackpotUpperLimit) {
        output.WriteRawTag(88);
        output.WriteInt64(JackpotUpperLimit);
      }
      if (HasIsMixedFree) {
        output.WriteRawTag(96);
        output.WriteBool(IsMixedFree);
      }
      evchopConfig_.WriteTo(ref output, _repeated_evchopConfig_codec);
      evchop6PlusConfig_.WriteTo(ref output, _repeated_evchop6PlusConfig_codec);
      if (HasIsCanEvchop) {
        output.WriteRawTag(120);
        output.WriteBool(IsCanEvchop);
      }
      if (HasIsHiloFree) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsHiloFree);
      }
      capConfig_.WriteTo(ref output, _repeated_capConfig_codec);
      if (HasMinBlind) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(MinBlind);
      }
      if (HasSpinupMaxBuyin) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SpinupMaxBuyin);
      }
      if (HasIsCanSpinup) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsCanSpinup);
      }
      if (HasIs31NlhFree) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Is31NlhFree);
      }
      if (HasIsSevenDeuceFree) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsSevenDeuceFree);
      }
      tpCostConfig_.WriteTo(ref output, _repeated_tpCostConfig_codec);
      if (HasIsPusoyFree) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsPusoyFree);
      }
      if (ppsrConfig_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PpsrConfig);
      }
      if (HasMttMinBuyinV2) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MttMinBuyinV2);
      }
      if (HasColorCost) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ColorCost);
      }
      tongitsCost_.WriteTo(ref output, _repeated_tongitsCost_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPpchipsRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PpchipsRate);
      }
      if (HasCapType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CapType);
      }
      size += leagueConfig_.CalculateSize(_repeated_leagueConfig_codec);
      size += insuranceConfig_.CalculateSize(_repeated_insuranceConfig_codec);
      if (HasMicroBlind) {
        size += 1 + 1;
      }
      if (HasMttMinBuyin) {
        size += 1 + 1;
      }
      size += pineCost_.CalculateSize(_repeated_pineCost_codec);
      size += zoomConfig_.CalculateSize(_repeated_zoomConfig_codec);
      if (HasOfcMicroBlind) {
        size += 1 + 1;
      }
      size += nlh6PlusConfig_.CalculateSize(_repeated_nlh6PlusConfig_codec);
      if (HasJackpotUpperLimit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotUpperLimit);
      }
      if (HasIsMixedFree) {
        size += 1 + 1;
      }
      size += evchopConfig_.CalculateSize(_repeated_evchopConfig_codec);
      size += evchop6PlusConfig_.CalculateSize(_repeated_evchop6PlusConfig_codec);
      if (HasIsCanEvchop) {
        size += 1 + 1;
      }
      if (HasIsHiloFree) {
        size += 2 + 1;
      }
      size += capConfig_.CalculateSize(_repeated_capConfig_codec);
      if (HasMinBlind) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinBlind);
      }
      if (HasSpinupMaxBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpinupMaxBuyin);
      }
      if (HasIsCanSpinup) {
        size += 2 + 1;
      }
      if (HasIs31NlhFree) {
        size += 2 + 1;
      }
      if (HasIsSevenDeuceFree) {
        size += 2 + 1;
      }
      size += tpCostConfig_.CalculateSize(_repeated_tpCostConfig_codec);
      if (HasIsPusoyFree) {
        size += 2 + 1;
      }
      if (ppsrConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PpsrConfig);
      }
      if (HasMttMinBuyinV2) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MttMinBuyinV2);
      }
      if (HasColorCost) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ColorCost);
      }
      size += tongitsCost_.CalculateSize(_repeated_tongitsCost_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClubConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasPpchipsRate) {
        PpchipsRate = other.PpchipsRate;
      }
      if (other.HasCapType) {
        CapType = other.CapType;
      }
      leagueConfig_.Add(other.leagueConfig_);
      insuranceConfig_.Add(other.insuranceConfig_);
      if (other.HasMicroBlind) {
        MicroBlind = other.MicroBlind;
      }
      if (other.HasMttMinBuyin) {
        MttMinBuyin = other.MttMinBuyin;
      }
      pineCost_.Add(other.pineCost_);
      zoomConfig_.Add(other.zoomConfig_);
      if (other.HasOfcMicroBlind) {
        OfcMicroBlind = other.OfcMicroBlind;
      }
      nlh6PlusConfig_.Add(other.nlh6PlusConfig_);
      if (other.HasJackpotUpperLimit) {
        JackpotUpperLimit = other.JackpotUpperLimit;
      }
      if (other.HasIsMixedFree) {
        IsMixedFree = other.IsMixedFree;
      }
      evchopConfig_.Add(other.evchopConfig_);
      evchop6PlusConfig_.Add(other.evchop6PlusConfig_);
      if (other.HasIsCanEvchop) {
        IsCanEvchop = other.IsCanEvchop;
      }
      if (other.HasIsHiloFree) {
        IsHiloFree = other.IsHiloFree;
      }
      capConfig_.Add(other.capConfig_);
      if (other.HasMinBlind) {
        MinBlind = other.MinBlind;
      }
      if (other.HasSpinupMaxBuyin) {
        SpinupMaxBuyin = other.SpinupMaxBuyin;
      }
      if (other.HasIsCanSpinup) {
        IsCanSpinup = other.IsCanSpinup;
      }
      if (other.HasIs31NlhFree) {
        Is31NlhFree = other.Is31NlhFree;
      }
      if (other.HasIsSevenDeuceFree) {
        IsSevenDeuceFree = other.IsSevenDeuceFree;
      }
      tpCostConfig_.Add(other.tpCostConfig_);
      if (other.HasIsPusoyFree) {
        IsPusoyFree = other.IsPusoyFree;
      }
      if (other.ppsrConfig_ != null) {
        if (ppsrConfig_ == null) {
          PpsrConfig = new global::Texas.Protocol.PPSRConfig();
        }
        PpsrConfig.MergeFrom(other.PpsrConfig);
      }
      if (other.HasMttMinBuyinV2) {
        MttMinBuyinV2 = other.MttMinBuyinV2;
      }
      if (other.HasColorCost) {
        ColorCost = other.ColorCost;
      }
      tongitsCost_.Add(other.tongitsCost_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PpchipsRate = input.ReadInt64();
            break;
          }
          case 16: {
            CapType = input.ReadInt32();
            break;
          }
          case 26: {
            leagueConfig_.AddEntriesFrom(input, _repeated_leagueConfig_codec);
            break;
          }
          case 34: {
            insuranceConfig_.AddEntriesFrom(input, _repeated_insuranceConfig_codec);
            break;
          }
          case 40: {
            MicroBlind = input.ReadBool();
            break;
          }
          case 48: {
            MttMinBuyin = input.ReadBool();
            break;
          }
          case 58: {
            pineCost_.AddEntriesFrom(input, _repeated_pineCost_codec);
            break;
          }
          case 66: {
            zoomConfig_.AddEntriesFrom(input, _repeated_zoomConfig_codec);
            break;
          }
          case 72: {
            OfcMicroBlind = input.ReadBool();
            break;
          }
          case 82: {
            nlh6PlusConfig_.AddEntriesFrom(input, _repeated_nlh6PlusConfig_codec);
            break;
          }
          case 88: {
            JackpotUpperLimit = input.ReadInt64();
            break;
          }
          case 96: {
            IsMixedFree = input.ReadBool();
            break;
          }
          case 106: {
            evchopConfig_.AddEntriesFrom(input, _repeated_evchopConfig_codec);
            break;
          }
          case 114: {
            evchop6PlusConfig_.AddEntriesFrom(input, _repeated_evchop6PlusConfig_codec);
            break;
          }
          case 120: {
            IsCanEvchop = input.ReadBool();
            break;
          }
          case 128: {
            IsHiloFree = input.ReadBool();
            break;
          }
          case 138: {
            capConfig_.AddEntriesFrom(input, _repeated_capConfig_codec);
            break;
          }
          case 144: {
            MinBlind = input.ReadInt64();
            break;
          }
          case 152: {
            SpinupMaxBuyin = input.ReadInt32();
            break;
          }
          case 160: {
            IsCanSpinup = input.ReadBool();
            break;
          }
          case 168: {
            Is31NlhFree = input.ReadBool();
            break;
          }
          case 176: {
            IsSevenDeuceFree = input.ReadBool();
            break;
          }
          case 186: {
            tpCostConfig_.AddEntriesFrom(input, _repeated_tpCostConfig_codec);
            break;
          }
          case 192: {
            IsPusoyFree = input.ReadBool();
            break;
          }
          case 202: {
            if (ppsrConfig_ == null) {
              PpsrConfig = new global::Texas.Protocol.PPSRConfig();
            }
            input.ReadMessage(PpsrConfig);
            break;
          }
          case 208: {
            MttMinBuyinV2 = input.ReadInt32();
            break;
          }
          case 216: {
            ColorCost = input.ReadInt64();
            break;
          }
          case 226: {
            tongitsCost_.AddEntriesFrom(input, _repeated_tongitsCost_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PpchipsRate = input.ReadInt64();
            break;
          }
          case 16: {
            CapType = input.ReadInt32();
            break;
          }
          case 26: {
            leagueConfig_.AddEntriesFrom(ref input, _repeated_leagueConfig_codec);
            break;
          }
          case 34: {
            insuranceConfig_.AddEntriesFrom(ref input, _repeated_insuranceConfig_codec);
            break;
          }
          case 40: {
            MicroBlind = input.ReadBool();
            break;
          }
          case 48: {
            MttMinBuyin = input.ReadBool();
            break;
          }
          case 58: {
            pineCost_.AddEntriesFrom(ref input, _repeated_pineCost_codec);
            break;
          }
          case 66: {
            zoomConfig_.AddEntriesFrom(ref input, _repeated_zoomConfig_codec);
            break;
          }
          case 72: {
            OfcMicroBlind = input.ReadBool();
            break;
          }
          case 82: {
            nlh6PlusConfig_.AddEntriesFrom(ref input, _repeated_nlh6PlusConfig_codec);
            break;
          }
          case 88: {
            JackpotUpperLimit = input.ReadInt64();
            break;
          }
          case 96: {
            IsMixedFree = input.ReadBool();
            break;
          }
          case 106: {
            evchopConfig_.AddEntriesFrom(ref input, _repeated_evchopConfig_codec);
            break;
          }
          case 114: {
            evchop6PlusConfig_.AddEntriesFrom(ref input, _repeated_evchop6PlusConfig_codec);
            break;
          }
          case 120: {
            IsCanEvchop = input.ReadBool();
            break;
          }
          case 128: {
            IsHiloFree = input.ReadBool();
            break;
          }
          case 138: {
            capConfig_.AddEntriesFrom(ref input, _repeated_capConfig_codec);
            break;
          }
          case 144: {
            MinBlind = input.ReadInt64();
            break;
          }
          case 152: {
            SpinupMaxBuyin = input.ReadInt32();
            break;
          }
          case 160: {
            IsCanSpinup = input.ReadBool();
            break;
          }
          case 168: {
            Is31NlhFree = input.ReadBool();
            break;
          }
          case 176: {
            IsSevenDeuceFree = input.ReadBool();
            break;
          }
          case 186: {
            tpCostConfig_.AddEntriesFrom(ref input, _repeated_tpCostConfig_codec);
            break;
          }
          case 192: {
            IsPusoyFree = input.ReadBool();
            break;
          }
          case 202: {
            if (ppsrConfig_ == null) {
              PpsrConfig = new global::Texas.Protocol.PPSRConfig();
            }
            input.ReadMessage(PpsrConfig);
            break;
          }
          case 208: {
            MttMinBuyinV2 = input.ReadInt32();
            break;
          }
          case 216: {
            ColorCost = input.ReadInt64();
            break;
          }
          case 226: {
            tongitsCost_.AddEntriesFrom(ref input, _repeated_tongitsCost_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClubStatsData : pb::IMessage<ClubStatsData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClubStatsData> _parser = new pb::MessageParser<ClubStatsData>(() => new ClubStatsData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClubStatsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ClubBaseReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubStatsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubStatsData(ClubStatsData other) : this() {
      _hasBits0 = other._hasBits0;
      fee_ = other.fee_;
      buyin_ = other.buyin_;
      userProfit_ = other.userProfit_;
      insuranceProfit_ = other.insuranceProfit_;
      jackpotFee_ = other.jackpotFee_;
      jackpotReward_ = other.jackpotReward_;
      handsCnt_ = other.handsCnt_;
      setsCnt_ = other.setsCnt_;
      clubid_ = other.clubid_;
      clubName_ = other.clubName_;
      clubIcon_ = other.clubIcon_;
      ticket_ = other.ticket_;
      evchopProfit_ = other.evchopProfit_;
      spinupProfit_ = other.spinupProfit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClubStatsData Clone() {
      return new ClubStatsData(this);
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 1;
    private readonly static long FeeDefaultValue = 0L;

    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Fee {
      get { if ((_hasBits0 & 1) != 0) { return fee_; } else { return FeeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fee_ = value;
      }
    }
    /// <summary>Gets whether the "fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFee {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFee() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "buyin" field.</summary>
    public const int BuyinFieldNumber = 2;
    private readonly static long BuyinDefaultValue = 0L;

    private long buyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Buyin {
      get { if ((_hasBits0 & 2) != 0) { return buyin_; } else { return BuyinDefaultValue; } }
      set {
        _hasBits0 |= 2;
        buyin_ = value;
      }
    }
    /// <summary>Gets whether the "buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBuyin {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBuyin() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "user_profit" field.</summary>
    public const int UserProfitFieldNumber = 3;
    private readonly static long UserProfitDefaultValue = 0L;

    private long userProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UserProfit {
      get { if ((_hasBits0 & 4) != 0) { return userProfit_; } else { return UserProfitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        userProfit_ = value;
      }
    }
    /// <summary>Gets whether the "user_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserProfit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "user_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserProfit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "insurance_profit" field.</summary>
    public const int InsuranceProfitFieldNumber = 4;
    private readonly static long InsuranceProfitDefaultValue = 0L;

    private long insuranceProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long InsuranceProfit {
      get { if ((_hasBits0 & 8) != 0) { return insuranceProfit_; } else { return InsuranceProfitDefaultValue; } }
      set {
        _hasBits0 |= 8;
        insuranceProfit_ = value;
      }
    }
    /// <summary>Gets whether the "insurance_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInsuranceProfit {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "insurance_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInsuranceProfit() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "jackpot_fee" field.</summary>
    public const int JackpotFeeFieldNumber = 5;
    private readonly static long JackpotFeeDefaultValue = 0L;

    private long jackpotFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotFee {
      get { if ((_hasBits0 & 16) != 0) { return jackpotFee_; } else { return JackpotFeeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        jackpotFee_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotFee {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotFee() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "jackpot_reward" field.</summary>
    public const int JackpotRewardFieldNumber = 6;
    private readonly static long JackpotRewardDefaultValue = 0L;

    private long jackpotReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotReward {
      get { if ((_hasBits0 & 32) != 0) { return jackpotReward_; } else { return JackpotRewardDefaultValue; } }
      set {
        _hasBits0 |= 32;
        jackpotReward_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotReward {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotReward() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "hands_cnt" field.</summary>
    public const int HandsCntFieldNumber = 7;
    private readonly static int HandsCntDefaultValue = 0;

    private int handsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HandsCnt {
      get { if ((_hasBits0 & 64) != 0) { return handsCnt_; } else { return HandsCntDefaultValue; } }
      set {
        _hasBits0 |= 64;
        handsCnt_ = value;
      }
    }
    /// <summary>Gets whether the "hands_cnt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsCnt {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "hands_cnt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsCnt() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "sets_cnt" field.</summary>
    public const int SetsCntFieldNumber = 8;
    private readonly static int SetsCntDefaultValue = 0;

    private int setsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SetsCnt {
      get { if ((_hasBits0 & 128) != 0) { return setsCnt_; } else { return SetsCntDefaultValue; } }
      set {
        _hasBits0 |= 128;
        setsCnt_ = value;
      }
    }
    /// <summary>Gets whether the "sets_cnt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetsCnt {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "sets_cnt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetsCnt() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 9;
    private readonly static int ClubidDefaultValue = 0;

    private int clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clubid {
      get { if ((_hasBits0 & 256) != 0) { return clubid_; } else { return ClubidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        clubid_ = value;
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 10;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "club_icon" field.</summary>
    public const int ClubIconFieldNumber = 11;
    private readonly static string ClubIconDefaultValue = "";

    private string clubIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubIcon {
      get { return clubIcon_ ?? ClubIconDefaultValue; }
      set {
        clubIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubIcon {
      get { return clubIcon_ != null; }
    }
    /// <summary>Clears the value of the "club_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubIcon() {
      clubIcon_ = null;
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 12;
    private readonly static long TicketDefaultValue = 0L;

    private long ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ticket {
      get { if ((_hasBits0 & 512) != 0) { return ticket_; } else { return TicketDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ticket_ = value;
      }
    }
    /// <summary>Gets whether the "ticket" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTicket {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ticket" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicket() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "evchop_profit" field.</summary>
    public const int EvchopProfitFieldNumber = 13;
    private readonly static long EvchopProfitDefaultValue = 0L;

    private long evchopProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EvchopProfit {
      get { if ((_hasBits0 & 1024) != 0) { return evchopProfit_; } else { return EvchopProfitDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        evchopProfit_ = value;
      }
    }
    /// <summary>Gets whether the "evchop_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEvchopProfit {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "evchop_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvchopProfit() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "spinup_profit" field.</summary>
    public const int SpinupProfitFieldNumber = 14;
    private readonly static long SpinupProfitDefaultValue = 0L;

    private long spinupProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SpinupProfit {
      get { if ((_hasBits0 & 2048) != 0) { return spinupProfit_; } else { return SpinupProfitDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        spinupProfit_ = value;
      }
    }
    /// <summary>Gets whether the "spinup_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpinupProfit {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "spinup_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpinupProfit() {
      _hasBits0 &= ~2048;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClubStatsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClubStatsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fee != other.Fee) return false;
      if (Buyin != other.Buyin) return false;
      if (UserProfit != other.UserProfit) return false;
      if (InsuranceProfit != other.InsuranceProfit) return false;
      if (JackpotFee != other.JackpotFee) return false;
      if (JackpotReward != other.JackpotReward) return false;
      if (HandsCnt != other.HandsCnt) return false;
      if (SetsCnt != other.SetsCnt) return false;
      if (Clubid != other.Clubid) return false;
      if (ClubName != other.ClubName) return false;
      if (ClubIcon != other.ClubIcon) return false;
      if (Ticket != other.Ticket) return false;
      if (EvchopProfit != other.EvchopProfit) return false;
      if (SpinupProfit != other.SpinupProfit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFee) hash ^= Fee.GetHashCode();
      if (HasBuyin) hash ^= Buyin.GetHashCode();
      if (HasUserProfit) hash ^= UserProfit.GetHashCode();
      if (HasInsuranceProfit) hash ^= InsuranceProfit.GetHashCode();
      if (HasJackpotFee) hash ^= JackpotFee.GetHashCode();
      if (HasJackpotReward) hash ^= JackpotReward.GetHashCode();
      if (HasHandsCnt) hash ^= HandsCnt.GetHashCode();
      if (HasSetsCnt) hash ^= SetsCnt.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasClubIcon) hash ^= ClubIcon.GetHashCode();
      if (HasTicket) hash ^= Ticket.GetHashCode();
      if (HasEvchopProfit) hash ^= EvchopProfit.GetHashCode();
      if (HasSpinupProfit) hash ^= SpinupProfit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFee) {
        output.WriteRawTag(8);
        output.WriteInt64(Fee);
      }
      if (HasBuyin) {
        output.WriteRawTag(16);
        output.WriteInt64(Buyin);
      }
      if (HasUserProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(UserProfit);
      }
      if (HasInsuranceProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(InsuranceProfit);
      }
      if (HasJackpotFee) {
        output.WriteRawTag(40);
        output.WriteInt64(JackpotFee);
      }
      if (HasJackpotReward) {
        output.WriteRawTag(48);
        output.WriteInt64(JackpotReward);
      }
      if (HasHandsCnt) {
        output.WriteRawTag(56);
        output.WriteInt32(HandsCnt);
      }
      if (HasSetsCnt) {
        output.WriteRawTag(64);
        output.WriteInt32(SetsCnt);
      }
      if (HasClubid) {
        output.WriteRawTag(72);
        output.WriteInt32(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(82);
        output.WriteString(ClubName);
      }
      if (HasClubIcon) {
        output.WriteRawTag(90);
        output.WriteString(ClubIcon);
      }
      if (HasTicket) {
        output.WriteRawTag(96);
        output.WriteInt64(Ticket);
      }
      if (HasEvchopProfit) {
        output.WriteRawTag(104);
        output.WriteInt64(EvchopProfit);
      }
      if (HasSpinupProfit) {
        output.WriteRawTag(112);
        output.WriteInt64(SpinupProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFee) {
        output.WriteRawTag(8);
        output.WriteInt64(Fee);
      }
      if (HasBuyin) {
        output.WriteRawTag(16);
        output.WriteInt64(Buyin);
      }
      if (HasUserProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(UserProfit);
      }
      if (HasInsuranceProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(InsuranceProfit);
      }
      if (HasJackpotFee) {
        output.WriteRawTag(40);
        output.WriteInt64(JackpotFee);
      }
      if (HasJackpotReward) {
        output.WriteRawTag(48);
        output.WriteInt64(JackpotReward);
      }
      if (HasHandsCnt) {
        output.WriteRawTag(56);
        output.WriteInt32(HandsCnt);
      }
      if (HasSetsCnt) {
        output.WriteRawTag(64);
        output.WriteInt32(SetsCnt);
      }
      if (HasClubid) {
        output.WriteRawTag(72);
        output.WriteInt32(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(82);
        output.WriteString(ClubName);
      }
      if (HasClubIcon) {
        output.WriteRawTag(90);
        output.WriteString(ClubIcon);
      }
      if (HasTicket) {
        output.WriteRawTag(96);
        output.WriteInt64(Ticket);
      }
      if (HasEvchopProfit) {
        output.WriteRawTag(104);
        output.WriteInt64(EvchopProfit);
      }
      if (HasSpinupProfit) {
        output.WriteRawTag(112);
        output.WriteInt64(SpinupProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (HasBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Buyin);
      }
      if (HasUserProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserProfit);
      }
      if (HasInsuranceProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InsuranceProfit);
      }
      if (HasJackpotFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotFee);
      }
      if (HasJackpotReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JackpotReward);
      }
      if (HasHandsCnt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandsCnt);
      }
      if (HasSetsCnt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SetsCnt);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clubid);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasClubIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubIcon);
      }
      if (HasTicket) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ticket);
      }
      if (HasEvchopProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EvchopProfit);
      }
      if (HasSpinupProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpinupProfit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClubStatsData other) {
      if (other == null) {
        return;
      }
      if (other.HasFee) {
        Fee = other.Fee;
      }
      if (other.HasBuyin) {
        Buyin = other.Buyin;
      }
      if (other.HasUserProfit) {
        UserProfit = other.UserProfit;
      }
      if (other.HasInsuranceProfit) {
        InsuranceProfit = other.InsuranceProfit;
      }
      if (other.HasJackpotFee) {
        JackpotFee = other.JackpotFee;
      }
      if (other.HasJackpotReward) {
        JackpotReward = other.JackpotReward;
      }
      if (other.HasHandsCnt) {
        HandsCnt = other.HandsCnt;
      }
      if (other.HasSetsCnt) {
        SetsCnt = other.SetsCnt;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasClubIcon) {
        ClubIcon = other.ClubIcon;
      }
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      if (other.HasEvchopProfit) {
        EvchopProfit = other.EvchopProfit;
      }
      if (other.HasSpinupProfit) {
        SpinupProfit = other.SpinupProfit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fee = input.ReadInt64();
            break;
          }
          case 16: {
            Buyin = input.ReadInt64();
            break;
          }
          case 24: {
            UserProfit = input.ReadInt64();
            break;
          }
          case 32: {
            InsuranceProfit = input.ReadInt64();
            break;
          }
          case 40: {
            JackpotFee = input.ReadInt64();
            break;
          }
          case 48: {
            JackpotReward = input.ReadInt64();
            break;
          }
          case 56: {
            HandsCnt = input.ReadInt32();
            break;
          }
          case 64: {
            SetsCnt = input.ReadInt32();
            break;
          }
          case 72: {
            Clubid = input.ReadInt32();
            break;
          }
          case 82: {
            ClubName = input.ReadString();
            break;
          }
          case 90: {
            ClubIcon = input.ReadString();
            break;
          }
          case 96: {
            Ticket = input.ReadInt64();
            break;
          }
          case 104: {
            EvchopProfit = input.ReadInt64();
            break;
          }
          case 112: {
            SpinupProfit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Fee = input.ReadInt64();
            break;
          }
          case 16: {
            Buyin = input.ReadInt64();
            break;
          }
          case 24: {
            UserProfit = input.ReadInt64();
            break;
          }
          case 32: {
            InsuranceProfit = input.ReadInt64();
            break;
          }
          case 40: {
            JackpotFee = input.ReadInt64();
            break;
          }
          case 48: {
            JackpotReward = input.ReadInt64();
            break;
          }
          case 56: {
            HandsCnt = input.ReadInt32();
            break;
          }
          case 64: {
            SetsCnt = input.ReadInt32();
            break;
          }
          case 72: {
            Clubid = input.ReadInt32();
            break;
          }
          case 82: {
            ClubName = input.ReadString();
            break;
          }
          case 90: {
            ClubIcon = input.ReadString();
            break;
          }
          case 96: {
            Ticket = input.ReadInt64();
            break;
          }
          case 104: {
            EvchopProfit = input.ReadInt64();
            break;
          }
          case 112: {
            SpinupProfit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
