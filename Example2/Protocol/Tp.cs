// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from tp.proto</summary>
  public static partial class TpReflection {

    #region Descriptor
    /// <summary>File descriptor for tp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgh0cC5wcm90bxoJcGIyLnByb3RvGgpiYXNlLnByb3RvGg5wcmVfYmFzZS5w",
            "cm90byL1DwoKVHBSb29tSW5mbxITCgZyb29taWQYASABKAVIAIgBARIUCgdv",
            "d25lcmlkGAIgASgDSAGIAQESEwoGY2x1YmlkGAMgASgJSAKIAQESFQoIbGVh",
            "Z3VlaWQYBCABKAVIA4gBARIVCghzZWF0X251bRgFIAEoBUgEiAEBEhYKCXJv",
            "b21fbmFtZRgGIAEoCUgFiAEBEhgKC2FjdGlvbl90aW1lGAcgASgFSAaIAQES",
            "GgoNZGVmYXVsdF9idXlpbhgIIAEoA0gHiAEBEhYKCW1pbl9idXlpbhgJIAEo",
            "A0gIiAEBEhUKCGZlZXBvaW50GAogASgFSAmIAQESEAoDY2FwGAsgASgFSAqI",
            "AQESFgoJZ2FtZV90aW1lGAwgASgFSAuIAQESFgoJZ3BzX2xpbWl0GA0gASgI",
            "SAyIAQESFQoIaXBfbGltaXQYDiABKAhIDYgBARIfChJncHNfZGlzdGFuY2Vf",
            "bGltaXQYDyABKAVIDogBARIXCgpvd25lcl9uYW1lGBAgASgJSA+IAQESFwoK",
            "b3duZXJfaWNvbhgRIAEoCUgQiAEBEhYKCWNsdWJfbmFtZRgSIAEoCUgRiAEB",
            "EhYKCWNsdWJfaWNvbhgTIAEoCUgSiAEBEhkKDGNsdWJfb3duZXJpZBgUIAEo",
            "A0gTiAEBEhUKCHBsYXRmb3JtGBUgASgJSBSIAQESEwoGcmVnaW9uGBYgASgF",
            "SBWIAQESFgoJbWF4X2J1eWluGBcgASgDSBaIAQESIQoJcm9vbV90eXBlGBgg",
            "ASgOMgkuUm9vbVR5cGVIF4gBARIhCglyb29tX21vZGUYGSABKA4yCS5Sb29t",
            "TW9kZUgYiAEBEhoKDWNyZWF0ZV9jbHViaWQYGiABKAVIGYgBARIhCglnYW1l",
            "X21vZGUYGyABKA4yCS5HYW1lTW9kZUgaiAEBEhcKCmF1dG9fc3RhcnQYHCAB",
            "KAVIG4gBARIYCgtjYXJlZXJfZGF0YRgdIAEoCEgciAEBEiQKF2lzX2F1dG9f",
            "ZGVsYXlfcm9vbV9vdmVyGB4gASgISB2IAQESJwoaYXV0b19kZWxheV9yb29t",
            "X292ZXJfdGltZXMYHyABKAVIHogBARIgChNpc19hdXRvX2NyZWF0ZV9yb29t",
            "GCAgASgISB+IAQESFQoIbW9kdWxlaWQYISABKANIIIgBARIbCg5mb3JiaWRk",
            "ZW5fY2hhdBgiIAEoCEghiAEBEhkKDHBhc3N3ZF9saW1pdBgjIAEoCEgiiAEB",
            "EhMKBnBhc3N3ZBgkIAEoCUgjiAEBEhsKDnN1cGVyX2xlYWd1ZWlkGCUgASgF",
            "SCSIAQESHgoRc3VwZXJfbGVhZ3VlX3R5cGUYJiABKAVIJYgBARIWCglpc19i",
            "YW5fcGMYJyABKAhIJogBARIaCg1pc19jaGVja19tYWlsGCggASgISCeIAQES",
            "EQoEYW50ZRgpIAEoA0goiAEBEhoKDW1heF9iZXRfdGltZXMYKiABKAVIKYgB",
            "ARIWCglwb3RfbGltaXQYKyABKANIKogBARIiChVtYXhfYmxpbmRfY3ljbGVf",
            "dGltZXMYLCABKAVIK4gBARIXCgppc19jYXB0Y2hhGC0gASgISCyIAQESEwoG",
            "Y2l0eWlkGC4gASgFSC2IAQESFAoHZmVldHlwZRgvIAEoBUguiAEBEiAKE2Zv",
            "cmJpZGRlbl9jaGF0X21vZGUYMCABKAVIL4gBAUIJCgdfcm9vbWlkQgoKCF9v",
            "d25lcmlkQgkKB19jbHViaWRCCwoJX2xlYWd1ZWlkQgsKCV9zZWF0X251bUIM",
            "Cgpfcm9vbV9uYW1lQg4KDF9hY3Rpb25fdGltZUIQCg5fZGVmYXVsdF9idXlp",
            "bkIMCgpfbWluX2J1eWluQgsKCV9mZWVwb2ludEIGCgRfY2FwQgwKCl9nYW1l",
            "X3RpbWVCDAoKX2dwc19saW1pdEILCglfaXBfbGltaXRCFQoTX2dwc19kaXN0",
            "YW5jZV9saW1pdEINCgtfb3duZXJfbmFtZUINCgtfb3duZXJfaWNvbkIMCgpf",
            "Y2x1Yl9uYW1lQgwKCl9jbHViX2ljb25CDwoNX2NsdWJfb3duZXJpZEILCglf",
            "cGxhdGZvcm1CCQoHX3JlZ2lvbkIMCgpfbWF4X2J1eWluQgwKCl9yb29tX3R5",
            "cGVCDAoKX3Jvb21fbW9kZUIQCg5fY3JlYXRlX2NsdWJpZEIMCgpfZ2FtZV9t",
            "b2RlQg0KC19hdXRvX3N0YXJ0Qg4KDF9jYXJlZXJfZGF0YUIaChhfaXNfYXV0",
            "b19kZWxheV9yb29tX292ZXJCHQobX2F1dG9fZGVsYXlfcm9vbV9vdmVyX3Rp",
            "bWVzQhYKFF9pc19hdXRvX2NyZWF0ZV9yb29tQgsKCV9tb2R1bGVpZEIRCg9f",
            "Zm9yYmlkZGVuX2NoYXRCDwoNX3Bhc3N3ZF9saW1pdEIJCgdfcGFzc3dkQhEK",
            "D19zdXBlcl9sZWFndWVpZEIUChJfc3VwZXJfbGVhZ3VlX3R5cGVCDAoKX2lz",
            "X2Jhbl9wY0IQCg5faXNfY2hlY2tfbWFpbEIHCgVfYW50ZUIQCg5fbWF4X2Jl",
            "dF90aW1lc0IMCgpfcG90X2xpbWl0QhgKFl9tYXhfYmxpbmRfY3ljbGVfdGlt",
            "ZXNCDQoLX2lzX2NhcHRjaGFCCQoHX2NpdHlpZEIKCghfZmVldHlwZUIWChRf",
            "Zm9yYmlkZGVuX2NoYXRfbW9kZSKuDAoPQ3JlYXRlVHBSb29tUkVREhMKBmNs",
            "dWJpZBgBIAEoCUgAiAEBEhUKCGxlYWd1ZWlkGAIgASgFSAGIAQESFQoIc2Vh",
            "dF9udW0YAyABKAVIAogBARIWCglyb29tX25hbWUYBCABKAlIA4gBARIYCgth",
            "Y3Rpb25fdGltZRgFIAEoBUgEiAEBEhoKDWRlZmF1bHRfYnV5aW4YBiABKANI",
            "BYgBARIWCgltaW5fYnV5aW4YByABKANIBogBARIVCghmZWVwb2ludBgIIAEo",
            "BUgHiAEBEhAKA2NhcBgJIAEoBUgIiAEBEhYKCWdhbWVfdGltZRgKIAEoBUgJ",
            "iAEBEhYKCWdwc19saW1pdBgLIAEoCEgKiAEBEhUKCGlwX2xpbWl0GAwgASgI",
            "SAuIAQESFQoIdGltZXpvbmUYDSABKAVIDIgBARIWCgltYXhfYnV5aW4YDiAB",
            "KANIDYgBARIhCglyb29tX3R5cGUYDyABKA4yCS5Sb29tVHlwZUgOiAEBEiEK",
            "CWdhbWVfbW9kZRgQIAEoDjIJLkdhbWVNb2RlSA+IAQESFwoKYXV0b19zdGFy",
            "dBgRIAEoBUgQiAEBEiQKF2lzX2F1dG9fZGVsYXlfcm9vbV9vdmVyGBIgASgI",
            "SBGIAQESJwoaYXV0b19kZWxheV9yb29tX292ZXJfdGltZXMYEyABKAVIEogB",
            "ARIgChNpc19hdXRvX2NyZWF0ZV9yb29tGBQgASgISBOIAQESHAoPY3JlYXRv",
            "cl91c2VyX2lkGBUgASgDSBSIAQESFQoIbW9kdWxlaWQYFiABKANIFYgBARIX",
            "CgptdWx0aV9vcGlkGBcgASgJSBaIAQESFAoHY2FuX3VzZRgYIAEoCEgXiAEB",
            "EhsKDmZvcmJpZGRlbl9jaGF0GBkgASgISBiIAQESGQoMcGFzc3dkX2xpbWl0",
            "GBogASgISBmIAQESGwoOc3VwZXJfbGVhZ3VlaWQYGyABKAVIGogBARIeChFz",
            "dXBlcl9sZWFndWVfdHlwZRgcIAEoBUgbiAEBEhoKDWRlcml2ZV9yb29taWQY",
            "HSABKAVIHIgBARIWCglpc19iYW5fcGMYHiABKAhIHYgBARIaCg1pc19jaGVj",
            "a19tYWlsGB8gASgISB6IAQESEQoEYW50ZRggIAEoA0gfiAEBEhcKCmlzX2Nh",
            "cHRjaGEYISABKAhIIIgBARITCgZjaXR5aWQYIiABKAVIIYgBARIUCgdmZWV0",
            "eXBlGCMgASgFSCKIAQESIAoTZm9yYmlkZGVuX2NoYXRfbW9kZRgkIAEoBUgj",
            "iAEBEhAKCGJhbl9jbHViGCUgAygFEhMKC2Jhbl9jb3VudHJ5GCYgAygJQgkK",
            "B19jbHViaWRCCwoJX2xlYWd1ZWlkQgsKCV9zZWF0X251bUIMCgpfcm9vbV9u",
            "YW1lQg4KDF9hY3Rpb25fdGltZUIQCg5fZGVmYXVsdF9idXlpbkIMCgpfbWlu",
            "X2J1eWluQgsKCV9mZWVwb2ludEIGCgRfY2FwQgwKCl9nYW1lX3RpbWVCDAoK",
            "X2dwc19saW1pdEILCglfaXBfbGltaXRCCwoJX3RpbWV6b25lQgwKCl9tYXhf",
            "YnV5aW5CDAoKX3Jvb21fdHlwZUIMCgpfZ2FtZV9tb2RlQg0KC19hdXRvX3N0",
            "YXJ0QhoKGF9pc19hdXRvX2RlbGF5X3Jvb21fb3ZlckIdChtfYXV0b19kZWxh",
            "eV9yb29tX292ZXJfdGltZXNCFgoUX2lzX2F1dG9fY3JlYXRlX3Jvb21CEgoQ",
            "X2NyZWF0b3JfdXNlcl9pZEILCglfbW9kdWxlaWRCDQoLX211bHRpX29waWRC",
            "CgoIX2Nhbl91c2VCEQoPX2ZvcmJpZGRlbl9jaGF0Qg8KDV9wYXNzd2RfbGlt",
            "aXRCEQoPX3N1cGVyX2xlYWd1ZWlkQhQKEl9zdXBlcl9sZWFndWVfdHlwZUIQ",
            "Cg5fZGVyaXZlX3Jvb21pZEIMCgpfaXNfYmFuX3BjQhAKDl9pc19jaGVja19t",
            "YWlsQgcKBV9hbnRlQg0KC19pc19jYXB0Y2hhQgkKB19jaXR5aWRCCgoIX2Zl",
            "ZXR5cGVCFgoUX2ZvcmJpZGRlbl9jaGF0X21vZGUiYAoPQ3JlYXRlVHBSb29t",
            "UlNQEhEKBGNvZGUYASABKAVIAIgBARIjCglyb29tX2luZm8YAiABKAsyCy5U",
            "cFJvb21JbmZvSAGIAQFCBwoFX2NvZGVCDAoKX3Jvb21faW5mbyJkCgtUcEFj",
            "dGlvblJFURInCgthY3Rpb25fdHlwZRgBIAEoDjINLlRwQWN0aW9uVHlwZUgA",
            "iAEBEhIKBWNoaXBzGAIgASgDSAGIAQFCDgoMX2FjdGlvbl90eXBlQggKBl9j",
            "aGlwcyKsAQoLVHBBY3Rpb25CUkMSEwoGc2VhdGlkGAEgASgFSACIAQESJwoL",
            "YWN0aW9uX3R5cGUYAiABKA4yDS5UcEFjdGlvblR5cGVIAYgBARISCgVjaGlw",
            "cxgDIAEoA0gCiAEBEhcKCmhhbmRfY2hpcHMYBCABKANIA4gBAUIJCgdfc2Vh",
            "dGlkQg4KDF9hY3Rpb25fdHlwZUIICgZfY2hpcHNCDQoLX2hhbmRfY2hpcHMi",
            "rgkKDFRwU2VhdFN0YXR1cxITCgZzZWF0aWQYASABKAVIAIgBARInCgthY3Rp",
            "b25fdHlwZRgCIAEoDjINLlRwQWN0aW9uVHlwZUgBiAEBEh8KBnBsYXllchgD",
            "IAEoCzIKLlVzZXJCcmllZkgCiAEBEhcKCmhhbmRfY2hpcHMYBCABKANIA4gB",
            "ARIZCgxkZXN0b3BfY2hpcHMYBSABKANIBIgBARIVCghoYXNfY2FyZBgGIAEo",
            "CEgFiAEBEhkKDHNlYXRfcmVzZXJ2ZRgHIAEoCEgGiAEBEhQKB2NvdW50cnkY",
            "CCABKAlIB4gBARIWCgl2aXBfbGV2ZWwYCSABKA1ICIgBARIcCg9yZWJ1eV9s",
            "ZWZ0X3RpbWUYCiABKAVICYgBARITCgZjbHViaWQYCyABKAlICogBARIUCgdn",
            "cHNfbG9uGAwgASgFSAuIAQESFAoHZ3BzX2xhdBgNIAEoBUgMiAEBEhYKCWNs",
            "dWJfbmFtZRgOIAEoCUgNiAEBEhMKBnN0YXR1cxgPIAEoBUgOiAEBEhUKCGlz",
            "X2VtcHR5GBAgASgISA+IAQESFgoJaXNfYm9va2VkGBEgASgISBCIAQESKwoe",
            "Ym9va19jb25maXJtX3JlbWFpbmluZ19zZWNvbmRzGBIgASgFSBGIAQESEgoF",
            "Y2FyZDEYEyABKAVIEogBARISCgVjYXJkMhgUIAEoBUgTiAEBEhIKBWNhcmQz",
            "GBUgASgFSBSIAQESEgoFbGV2ZWwYFiABKAVIFYgBARIVCghmcmFtZV9pZBgX",
            "IAEoCUgWiAEBEhgKC2lzX3NlZV9jYXJkGBggASgISBeIAQESGwoOY29tcGFy",
            "ZV9zZWF0aWQYGSABKAVIGIgBARIbCg5jb21wYXJlX3Jlc3VsdBgaIAEoCEgZ",
            "iAEBEiUKGGxhc3Rfcm91bmRfZGVza3RvcF9jaGlwcxgbIAEoA0gaiAEBEjIK",
            "Fmxhc3Rfcm91bmRfYWN0aW9uX3R5cGUYHCABKA4yDS5UcEFjdGlvblR5cGVI",
            "G4gBAUIJCgdfc2VhdGlkQg4KDF9hY3Rpb25fdHlwZUIJCgdfcGxheWVyQg0K",
            "C19oYW5kX2NoaXBzQg8KDV9kZXN0b3BfY2hpcHNCCwoJX2hhc19jYXJkQg8K",
            "DV9zZWF0X3Jlc2VydmVCCgoIX2NvdW50cnlCDAoKX3ZpcF9sZXZlbEISChBf",
            "cmVidXlfbGVmdF90aW1lQgkKB19jbHViaWRCCgoIX2dwc19sb25CCgoIX2dw",
            "c19sYXRCDAoKX2NsdWJfbmFtZUIJCgdfc3RhdHVzQgsKCV9pc19lbXB0eUIM",
            "CgpfaXNfYm9va2VkQiEKH19ib29rX2NvbmZpcm1fcmVtYWluaW5nX3NlY29u",
            "ZHNCCAoGX2NhcmQxQggKBl9jYXJkMkIICgZfY2FyZDNCCAoGX2xldmVsQgsK",
            "CV9mcmFtZV9pZEIOCgxfaXNfc2VlX2NhcmRCEQoPX2NvbXBhcmVfc2VhdGlk",
            "QhEKD19jb21wYXJlX3Jlc3VsdEIbChlfbGFzdF9yb3VuZF9kZXNrdG9wX2No",
            "aXBzQhkKF19sYXN0X3JvdW5kX2FjdGlvbl90eXBlIq4ECg1UcFRhYmxlU3Rh",
            "dHVzEhcKCmlzX3BsYXlpbmcYASABKAhIAIgBARIXCgphY3Rpb25faWR4GAIg",
            "ASgFSAGIAQESEgoFZF9pZHgYAyABKAVIAogBARIbCgRzZWF0GAQgAygLMg0u",
            "VHBTZWF0U3RhdHVzEgwKBHBvb2wYBSADKAMSEgoFc3RhZ2UYBiABKAVIA4gB",
            "ARIQCgN0aWQYByABKAVIBIgBARITCgZnYW1laWQYCCABKAlIBYgBARIcCg9p",
            "c19pbl9zaWRlX3Nob3cYCSABKAhIBogBARIWCgljdXJfYmxpbmQYCiABKANI",
            "B4gBARIhChRzaWRlX3Nob3dfcmVxX3NlYXRpZBgLIAEoBUgIiAEBEiEKFHNp",
            "ZGVfc2hvd19hY2tfc2VhdGlkGAwgASgFSAmIAQESFQoIY2FuX3Nob3cYDSAB",
            "KAhICogBARIgChNzaWRlX3Nob3dfbGVmdF90aW1lGA4gASgFSAuIAQFCDQoL",
            "X2lzX3BsYXlpbmdCDQoLX2FjdGlvbl9pZHhCCAoGX2RfaWR4QggKBl9zdGFn",
            "ZUIGCgRfdGlkQgkKB19nYW1laWRCEgoQX2lzX2luX3NpZGVfc2hvd0IMCgpf",
            "Y3VyX2JsaW5kQhcKFV9zaWRlX3Nob3dfcmVxX3NlYXRpZEIXChVfc2lkZV9z",
            "aG93X2Fja19zZWF0aWRCCwoJX2Nhbl9zaG93QhYKFF9zaWRlX3Nob3dfbGVm",
            "dF90aW1lIkQKFlRwVGFibGVTdGF0dXNCcm9hZGNhc3QSIQoEaW5mbxgBIAEo",
            "CzIOLlRwVGFibGVTdGF0dXNIAIgBAUIHCgVfaW5mbyIoCgpUcFN0YXJ0QlJD",
            "EhEKBGFudGUYASABKANIAIgBAUIHCgVfYW50ZSIOCgxUcFNlZUNhcmRSRVEi",
            "ywEKDFRwU2VlQ2FyZFJTUBITCgZzZWF0aWQYASABKAVIAIgBARISCgVjYXJk",
            "MRgCIAEoBUgBiAEBEhIKBWNhcmQyGAMgASgFSAKIAQESEgoFY2FyZDMYBCAB",
            "KAVIA4gBARIcCgR0eXBlGAUgASgOMgkuSGFuZFR5cGVIBIgBARIRCgRjb2Rl",
            "GAYgASgFSAWIAQFCCQoHX3NlYXRpZEIICgZfY2FyZDFCCAoGX2NhcmQyQggK",
            "Bl9jYXJkM0IHCgVfdHlwZUIHCgVfY29kZSJICgxUcFNlZUNhcmRCUkMSEwoG",
            "c2VhdGlkGAEgASgFSACIAQESEAoDdWlkGAIgASgDSAGIAQFCCQoHX3NlYXRp",
            "ZEIGCgRfdWlkIu8BCgpUcEFjdGlvblJEEhMKBnNlYXRpZBgBIAEoBUgAiAEB",
            "EhEKBHRpbWUYAiABKA1IAYgBARIgCgR0eXBlGAMgASgOMg0uVHBBY3Rpb25U",
            "eXBlSAKIAQESEgoFY2hpcHMYBCABKANIA4gBARIQCgN1aWQYBSABKANIBIgB",
            "ARITCgZtc3RpbWUYBiABKARIBYgBARIVCghpc19hbGxpbhgHIAEoCEgGiAEB",
            "QgkKB19zZWF0aWRCBwoFX3RpbWVCBwoFX3R5cGVCCAoGX2NoaXBzQgYKBF91",
            "aWRCCQoHX21zdGltZUILCglfaXNfYWxsaW4irgEKDVRwV2lubmluZ0luZm8S",
            "EwoGc2VhdGlkGAEgASgFSACIAQESEwoGcG9vbGlkGAIgASgFSAGIAQESEgoF",
            "Y2hpcHMYAyABKANIAogBARIcCgR0eXBlGAQgASgOMgkuSGFuZFR5cGVIA4gB",
            "ARIQCgN1aWQYBSABKANIBIgBAUIJCgdfc2VhdGlkQgkKB19wb29saWRCCAoG",
            "X2NoaXBzQgcKBV90eXBlQgYKBF91aWQiTwoPVHBXaW5uaW5nUHJvZml0EhMK",
            "BnNlYXRpZBgBIAEoBUgAiAEBEhIKBWNoaXBzGAIgASgDSAGIAQFCCQoHX3Nl",
            "YXRpZEIICgZfY2hpcHMiTwoLVHBXaW5uZXJSU1ASHgoGd2lubmVyGAEgAygL",
            "Mg4uVHBXaW5uaW5nSW5mbxIgCgZwcm9maXQYAiADKAsyEC5UcFdpbm5pbmdQ",
            "cm9maXQisQEKDlRwU2hvd0hhbmRJbmZvEhMKBnNlYXRpZBgBIAEoBUgAiAEB",
            "EhIKBWNhcmQxGAIgASgFSAGIAQESEgoFY2FyZDIYAyABKAVIAogBARISCgVj",
            "YXJkMxgEIAEoBUgDiAEBEhwKBHR5cGUYBSABKA4yCS5IYW5kVHlwZUgEiAEB",
            "QgkKB19zZWF0aWRCCAoGX2NhcmQxQggKBl9jYXJkMkIICgZfY2FyZDNCBwoF",
            "X3R5cGUiRQoNVHBTaG93SGFuZFJTUBIdCgRpbmZvGAEgAygLMg8uVHBTaG93",
            "SGFuZEluZm8SFQoNd2lubmVyX3NlYXRpZBgCIAMoBSKRAQoTVHBDb21wYXJl",
            "SGFuZE5vdGlmeRIXCgpyZXFfc2VhdGlkGAEgASgFSACIAQESFwoKYWNrX3Nl",
            "YXRpZBgCIAEoBUgBiAEBEhkKDGNvbXBhcmVfdGltZRgDIAEoBUgCiAEBQg0K",
            "C19yZXFfc2VhdGlkQg0KC19hY2tfc2VhdGlkQg8KDV9jb21wYXJlX3RpbWUi",
            "OAoWVHBDb21wYXJlSGFuZEFjdGlvblJFURITCgZzdGF0dXMYASABKAVIAIgB",
            "AUIJCgdfc3RhdHVzIogBChZUcENvbXBhcmVIYW5kQWN0aW9uQlJDEhMKBnN0",
            "YXR1cxgBIAEoBUgAiAEBEhcKCnJlcV9zZWF0aWQYAiABKAVIAYgBARIXCgph",
            "Y2tfc2VhdGlkGAMgASgFSAKIAQFCCQoHX3N0YXR1c0INCgtfcmVxX3NlYXRp",
            "ZEINCgtfYWNrX3NlYXRpZCI0ChZUcENvbXBhcmVIYW5kQWN0aW9uUlNQEhEK",
            "BGNvZGUYASABKAVIAIgBAUIHCgVfY29kZSKDAgoZVHBDb21wYXJlSGFuZFJl",
            "c3VsdE5vdGlmeRIXCgpyZXFfc2VhdGlkGAEgASgFSACIAQESFwoKYWNrX3Nl",
            "YXRpZBgCIAEoBUgBiAEBEhoKDXdpbm5lcl9zZWF0aWQYAyABKAVIAogBARIm",
            "CghyZXFfaGFuZBgEIAEoCzIPLlRwU2hvd0hhbmRJbmZvSAOIAQESJgoIYWNr",
            "X2hhbmQYBSABKAsyDy5UcFNob3dIYW5kSW5mb0gEiAEBQg0KC19yZXFfc2Vh",
            "dGlkQg0KC19hY2tfc2VhdGlkQhAKDl93aW5uZXJfc2VhdGlkQgsKCV9yZXFf",
            "aGFuZEILCglfYWNrX2hhbmQiawoZVHBDb21wYXJlSGFuZENhbmNlbE5vdGlm",
            "eRIXCgpyZXFfc2VhdGlkGAEgASgFSACIAQESFwoKYWNrX3NlYXRpZBgCIAEo",
            "BUgBiAEBQg0KC19yZXFfc2VhdGlkQg0KC19hY2tfc2VhdGlkIp0CCg1UcFBs",
            "YXllckhhbmRzEhAKA3VpZBgBIAEoA0gAiAEBEhEKBG5hbWUYAiABKAlIAYgB",
            "ARINCgVjYXJkcxgDIAMoCRITCgZwcm9maXQYBCABKANIAogBARIVCghwb3Np",
            "dGlvbhgFIAEoBUgDiAEBEhQKB2JJc1Nob3cYBiABKAhIBIgBARIXCgppQmVn",
            "aW5DaGlwGAcgASgDSAWIAQESKQoLcGxheV9zdGF0dXMYCCABKA4yDy5Vc2Vy",
            "UGxheVN0YXR1c0gGiAEBQgYKBF91aWRCBwoFX25hbWVCCQoHX3Byb2ZpdEIL",
            "CglfcG9zaXRpb25CCgoIX2JJc1Nob3dCDQoLX2lCZWdpbkNoaXBCDgoMX3Bs",
            "YXlfc3RhdHVzIooBCgtUcEhhbmRzSW5mbxIPCgJpZBgBIAEoCUgAiAEBEh0K",
            "BWhhbmRzGAIgAygLMg4uVHBQbGF5ZXJIYW5kcxIXCgppU3RhcnRUaW1lGAMg",
            "ASgDSAGIAQESEgoFaUFudGUYBCABKANIAogBAUIFCgNfaWRCDQoLX2lTdGFy",
            "dFRpbWVCCAoGX2lBbnRlIiIKDlRwSGFuZHNJbmZvUkVREhAKCGdhbWVfaWRz",
            "GAEgAygJIiwKDlRwSGFuZHNJbmZvUlNQEhoKBGluZm8YAiADKAsyDC5UcEhh",
            "bmRzSW5mbyKxAQoRVHBBY3Rpb25Ob3RpZnlCUkMSEwoGc2VhdGlkGAEgASgF",
            "SACIAQESHAoPY2FsbF9uZWVkX2NoaXBzGAIgASgDSAGIAQESFwoKbWF4X2No",
            "aXBpbhgDIAEoA0gCiAEBEhUKCGNhbl9zaG93GAQgASgISAOIAQFCCQoHX3Nl",
            "YXRpZEISChBfY2FsbF9uZWVkX2NoaXBzQg0KC19tYXhfY2hpcGluQgsKCV9j",
            "YW5fc2hvdyKlAQoMVHBTaXREb3duQlJDEhMKBnNlYXRpZBgBIAEoBUgAiAEB",
            "EhIKBWNoaXBzGAIgASgDSAGIAQESHgoFYnJpZWYYAyABKAsyCi5Vc2VyQnJp",
            "ZWZIAogBARIiCgZzdGF0dXMYBCABKAsyDS5UcFNlYXRTdGF0dXNIA4gBAUIJ",
            "Cgdfc2VhdGlkQggKBl9jaGlwc0IICgZfYnJpZWZCCQoHX3N0YXR1cyIUChJU",
            "cFVzZXJMZWF2ZUluZm9SRVEibgoSVHBVc2VyTGVhdmVJbmZvUlNQEhcKCmxl",
            "YXZlX3RpbWUYASABKAVIAIgBARIcCg91c2VyX2xhc3RfY2hpcHMYAiABKANI",
            "AYgBAUINCgtfbGVhdmVfdGltZUISChBfdXNlcl9sYXN0X2NoaXBzQhhaBS9n",
            "b3BiqgIOVGV4YXMuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.Pb2Reflection.Descriptor, global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.PreBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpRoomInfo), global::Texas.Protocol.TpRoomInfo.Parser, new[]{ "Roomid", "Ownerid", "Clubid", "Leagueid", "SeatNum", "RoomName", "ActionTime", "DefaultBuyin", "MinBuyin", "Feepoint", "Cap", "GameTime", "GpsLimit", "IpLimit", "GpsDistanceLimit", "OwnerName", "OwnerIcon", "ClubName", "ClubIcon", "ClubOwnerid", "Platform", "Region", "MaxBuyin", "RoomType", "RoomMode", "CreateClubid", "GameMode", "AutoStart", "CareerData", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "Moduleid", "ForbiddenChat", "PasswdLimit", "Passwd", "SuperLeagueid", "SuperLeagueType", "IsBanPc", "IsCheckMail", "Ante", "MaxBetTimes", "PotLimit", "MaxBlindCycleTimes", "IsCaptcha", "Cityid", "Feetype", "ForbiddenChatMode" }, new[]{ "Roomid", "Ownerid", "Clubid", "Leagueid", "SeatNum", "RoomName", "ActionTime", "DefaultBuyin", "MinBuyin", "Feepoint", "Cap", "GameTime", "GpsLimit", "IpLimit", "GpsDistanceLimit", "OwnerName", "OwnerIcon", "ClubName", "ClubIcon", "ClubOwnerid", "Platform", "Region", "MaxBuyin", "RoomType", "RoomMode", "CreateClubid", "GameMode", "AutoStart", "CareerData", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "Moduleid", "ForbiddenChat", "PasswdLimit", "Passwd", "SuperLeagueid", "SuperLeagueType", "IsBanPc", "IsCheckMail", "Ante", "MaxBetTimes", "PotLimit", "MaxBlindCycleTimes", "IsCaptcha", "Cityid", "Feetype", "ForbiddenChatMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CreateTpRoomREQ), global::Texas.Protocol.CreateTpRoomREQ.Parser, new[]{ "Clubid", "Leagueid", "SeatNum", "RoomName", "ActionTime", "DefaultBuyin", "MinBuyin", "Feepoint", "Cap", "GameTime", "GpsLimit", "IpLimit", "Timezone", "MaxBuyin", "RoomType", "GameMode", "AutoStart", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "CreatorUserId", "Moduleid", "MultiOpid", "CanUse", "ForbiddenChat", "PasswdLimit", "SuperLeagueid", "SuperLeagueType", "DeriveRoomid", "IsBanPc", "IsCheckMail", "Ante", "IsCaptcha", "Cityid", "Feetype", "ForbiddenChatMode", "BanClub", "BanCountry" }, new[]{ "Clubid", "Leagueid", "SeatNum", "RoomName", "ActionTime", "DefaultBuyin", "MinBuyin", "Feepoint", "Cap", "GameTime", "GpsLimit", "IpLimit", "Timezone", "MaxBuyin", "RoomType", "GameMode", "AutoStart", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "CreatorUserId", "Moduleid", "MultiOpid", "CanUse", "ForbiddenChat", "PasswdLimit", "SuperLeagueid", "SuperLeagueType", "DeriveRoomid", "IsBanPc", "IsCheckMail", "Ante", "IsCaptcha", "Cityid", "Feetype", "ForbiddenChatMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CreateTpRoomRSP), global::Texas.Protocol.CreateTpRoomRSP.Parser, new[]{ "Code", "RoomInfo" }, new[]{ "Code", "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpActionREQ), global::Texas.Protocol.TpActionREQ.Parser, new[]{ "ActionType", "Chips" }, new[]{ "ActionType", "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpActionBRC), global::Texas.Protocol.TpActionBRC.Parser, new[]{ "Seatid", "ActionType", "Chips", "HandChips" }, new[]{ "Seatid", "ActionType", "Chips", "HandChips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpSeatStatus), global::Texas.Protocol.TpSeatStatus.Parser, new[]{ "Seatid", "ActionType", "Player", "HandChips", "DestopChips", "HasCard", "SeatReserve", "Country", "VipLevel", "RebuyLeftTime", "Clubid", "GpsLon", "GpsLat", "ClubName", "Status", "IsEmpty", "IsBooked", "BookConfirmRemainingSeconds", "Card1", "Card2", "Card3", "Level", "FrameId", "IsSeeCard", "CompareSeatid", "CompareResult", "LastRoundDesktopChips", "LastRoundActionType" }, new[]{ "Seatid", "ActionType", "Player", "HandChips", "DestopChips", "HasCard", "SeatReserve", "Country", "VipLevel", "RebuyLeftTime", "Clubid", "GpsLon", "GpsLat", "ClubName", "Status", "IsEmpty", "IsBooked", "BookConfirmRemainingSeconds", "Card1", "Card2", "Card3", "Level", "FrameId", "IsSeeCard", "CompareSeatid", "CompareResult", "LastRoundDesktopChips", "LastRoundActionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpTableStatus), global::Texas.Protocol.TpTableStatus.Parser, new[]{ "IsPlaying", "ActionIdx", "DIdx", "Seat", "Pool", "Stage", "Tid", "Gameid", "IsInSideShow", "CurBlind", "SideShowReqSeatid", "SideShowAckSeatid", "CanShow", "SideShowLeftTime" }, new[]{ "IsPlaying", "ActionIdx", "DIdx", "Stage", "Tid", "Gameid", "IsInSideShow", "CurBlind", "SideShowReqSeatid", "SideShowAckSeatid", "CanShow", "SideShowLeftTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpTableStatusBroadcast), global::Texas.Protocol.TpTableStatusBroadcast.Parser, new[]{ "Info" }, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpStartBRC), global::Texas.Protocol.TpStartBRC.Parser, new[]{ "Ante" }, new[]{ "Ante" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpSeeCardREQ), global::Texas.Protocol.TpSeeCardREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpSeeCardRSP), global::Texas.Protocol.TpSeeCardRSP.Parser, new[]{ "Seatid", "Card1", "Card2", "Card3", "Type", "Code" }, new[]{ "Seatid", "Card1", "Card2", "Card3", "Type", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpSeeCardBRC), global::Texas.Protocol.TpSeeCardBRC.Parser, new[]{ "Seatid", "Uid" }, new[]{ "Seatid", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpActionRD), global::Texas.Protocol.TpActionRD.Parser, new[]{ "Seatid", "Time", "Type", "Chips", "Uid", "Mstime", "IsAllin" }, new[]{ "Seatid", "Time", "Type", "Chips", "Uid", "Mstime", "IsAllin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpWinningInfo), global::Texas.Protocol.TpWinningInfo.Parser, new[]{ "Seatid", "Poolid", "Chips", "Type", "Uid" }, new[]{ "Seatid", "Poolid", "Chips", "Type", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpWinningProfit), global::Texas.Protocol.TpWinningProfit.Parser, new[]{ "Seatid", "Chips" }, new[]{ "Seatid", "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpWinnerRSP), global::Texas.Protocol.TpWinnerRSP.Parser, new[]{ "Winner", "Profit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpShowHandInfo), global::Texas.Protocol.TpShowHandInfo.Parser, new[]{ "Seatid", "Card1", "Card2", "Card3", "Type" }, new[]{ "Seatid", "Card1", "Card2", "Card3", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpShowHandRSP), global::Texas.Protocol.TpShowHandRSP.Parser, new[]{ "Info", "WinnerSeatid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpCompareHandNotify), global::Texas.Protocol.TpCompareHandNotify.Parser, new[]{ "ReqSeatid", "AckSeatid", "CompareTime" }, new[]{ "ReqSeatid", "AckSeatid", "CompareTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpCompareHandActionREQ), global::Texas.Protocol.TpCompareHandActionREQ.Parser, new[]{ "Status" }, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpCompareHandActionBRC), global::Texas.Protocol.TpCompareHandActionBRC.Parser, new[]{ "Status", "ReqSeatid", "AckSeatid" }, new[]{ "Status", "ReqSeatid", "AckSeatid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpCompareHandActionRSP), global::Texas.Protocol.TpCompareHandActionRSP.Parser, new[]{ "Code" }, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpCompareHandResultNotify), global::Texas.Protocol.TpCompareHandResultNotify.Parser, new[]{ "ReqSeatid", "AckSeatid", "WinnerSeatid", "ReqHand", "AckHand" }, new[]{ "ReqSeatid", "AckSeatid", "WinnerSeatid", "ReqHand", "AckHand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpCompareHandCancelNotify), global::Texas.Protocol.TpCompareHandCancelNotify.Parser, new[]{ "ReqSeatid", "AckSeatid" }, new[]{ "ReqSeatid", "AckSeatid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpPlayerHands), global::Texas.Protocol.TpPlayerHands.Parser, new[]{ "Uid", "Name", "Cards", "Profit", "Position", "BIsShow", "IBeginChip", "PlayStatus" }, new[]{ "Uid", "Name", "Profit", "Position", "BIsShow", "IBeginChip", "PlayStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpHandsInfo), global::Texas.Protocol.TpHandsInfo.Parser, new[]{ "Id", "Hands", "IStartTime", "IAnte" }, new[]{ "Id", "IStartTime", "IAnte" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpHandsInfoREQ), global::Texas.Protocol.TpHandsInfoREQ.Parser, new[]{ "GameIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpHandsInfoRSP), global::Texas.Protocol.TpHandsInfoRSP.Parser, new[]{ "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpActionNotifyBRC), global::Texas.Protocol.TpActionNotifyBRC.Parser, new[]{ "Seatid", "CallNeedChips", "MaxChipin", "CanShow" }, new[]{ "Seatid", "CallNeedChips", "MaxChipin", "CanShow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpSitDownBRC), global::Texas.Protocol.TpSitDownBRC.Parser, new[]{ "Seatid", "Chips", "Brief", "Status" }, new[]{ "Seatid", "Chips", "Brief", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpUserLeaveInfoREQ), global::Texas.Protocol.TpUserLeaveInfoREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.TpUserLeaveInfoRSP), global::Texas.Protocol.TpUserLeaveInfoRSP.Parser, new[]{ "LeaveTime", "UserLastChips" }, new[]{ "LeaveTime", "UserLastChips" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///teenpatti房间信息
  /// </summary>
  public sealed partial class TpRoomInfo : pb::IMessage<TpRoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpRoomInfo> _parser = new pb::MessageParser<TpRoomInfo>(() => new TpRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpRoomInfo(TpRoomInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      roomid_ = other.roomid_;
      ownerid_ = other.ownerid_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      seatNum_ = other.seatNum_;
      roomName_ = other.roomName_;
      actionTime_ = other.actionTime_;
      defaultBuyin_ = other.defaultBuyin_;
      minBuyin_ = other.minBuyin_;
      feepoint_ = other.feepoint_;
      cap_ = other.cap_;
      gameTime_ = other.gameTime_;
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      gpsDistanceLimit_ = other.gpsDistanceLimit_;
      ownerName_ = other.ownerName_;
      ownerIcon_ = other.ownerIcon_;
      clubName_ = other.clubName_;
      clubIcon_ = other.clubIcon_;
      clubOwnerid_ = other.clubOwnerid_;
      platform_ = other.platform_;
      region_ = other.region_;
      maxBuyin_ = other.maxBuyin_;
      roomType_ = other.roomType_;
      roomMode_ = other.roomMode_;
      createClubid_ = other.createClubid_;
      gameMode_ = other.gameMode_;
      autoStart_ = other.autoStart_;
      careerData_ = other.careerData_;
      isAutoDelayRoomOver_ = other.isAutoDelayRoomOver_;
      autoDelayRoomOverTimes_ = other.autoDelayRoomOverTimes_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      moduleid_ = other.moduleid_;
      forbiddenChat_ = other.forbiddenChat_;
      passwdLimit_ = other.passwdLimit_;
      passwd_ = other.passwd_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      ante_ = other.ante_;
      maxBetTimes_ = other.maxBetTimes_;
      potLimit_ = other.potLimit_;
      maxBlindCycleTimes_ = other.maxBlindCycleTimes_;
      isCaptcha_ = other.isCaptcha_;
      cityid_ = other.cityid_;
      feetype_ = other.feetype_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpRoomInfo Clone() {
      return new TpRoomInfo(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private readonly static int RoomidDefaultValue = 0;

    private int roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Roomid {
      get { if ((_hasBits0 & 1) != 0) { return roomid_; } else { return RoomidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roomid_ = value;
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ownerid" field.</summary>
    public const int OwneridFieldNumber = 2;
    private readonly static long OwneridDefaultValue = 0L;

    private long ownerid_;
    /// <summary>
    ///房主uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ownerid {
      get { if ((_hasBits0 & 2) != 0) { return ownerid_; } else { return OwneridDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ownerid_ = value;
      }
    }
    /// <summary>Gets whether the "ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 3;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///俱乐部id，0代表普通房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 4;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 4) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 5;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 8) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 8;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 6;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 7;
    private readonly static int ActionTimeDefaultValue = 0;

    private int actionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionTime {
      get { if ((_hasBits0 & 16) != 0) { return actionTime_; } else { return ActionTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        actionTime_ = value;
      }
    }
    /// <summary>Gets whether the "action_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "action_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "default_buyin" field.</summary>
    public const int DefaultBuyinFieldNumber = 8;
    private readonly static long DefaultBuyinDefaultValue = 0L;

    private long defaultBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DefaultBuyin {
      get { if ((_hasBits0 & 32) != 0) { return defaultBuyin_; } else { return DefaultBuyinDefaultValue; } }
      set {
        _hasBits0 |= 32;
        defaultBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "default_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefaultBuyin {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "default_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefaultBuyin() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "min_buyin" field.</summary>
    public const int MinBuyinFieldNumber = 9;
    private readonly static long MinBuyinDefaultValue = 0L;

    private long minBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBuyin {
      get { if ((_hasBits0 & 64) != 0) { return minBuyin_; } else { return MinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 64;
        minBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBuyin {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBuyin() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 10;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    /// <summary>
    ///fee比例，2代表%2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 128) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 128;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 11;
    private readonly static int CapDefaultValue = 0;

    private int cap_;
    /// <summary>
    ///fee封頂
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cap {
      get { if ((_hasBits0 & 256) != 0) { return cap_; } else { return CapDefaultValue; } }
      set {
        _hasBits0 |= 256;
        cap_ = value;
      }
    }
    /// <summary>Gets whether the "cap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCap {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "cap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCap() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 12;
    private readonly static int GameTimeDefaultValue = 0;

    private int gameTime_;
    /// <summary>
    ///游戏时间,0表示无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameTime {
      get { if ((_hasBits0 & 512) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameTime {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameTime() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 13;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 1024) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 14;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 2048) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "gps_distance_limit" field.</summary>
    public const int GpsDistanceLimitFieldNumber = 15;
    private readonly static int GpsDistanceLimitDefaultValue = 0;

    private int gpsDistanceLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsDistanceLimit {
      get { if ((_hasBits0 & 4096) != 0) { return gpsDistanceLimit_; } else { return GpsDistanceLimitDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        gpsDistanceLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_distance_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsDistanceLimit {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "gps_distance_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsDistanceLimit() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 16;
    private readonly static string OwnerNameDefaultValue = "";

    private string ownerName_;
    /// <summary>
    ///房主名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerName {
      get { return ownerName_ ?? OwnerNameDefaultValue; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerName {
      get { return ownerName_ != null; }
    }
    /// <summary>Clears the value of the "owner_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerName() {
      ownerName_ = null;
    }

    /// <summary>Field number for the "owner_icon" field.</summary>
    public const int OwnerIconFieldNumber = 17;
    private readonly static string OwnerIconDefaultValue = "";

    private string ownerIcon_;
    /// <summary>
    ///房主头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerIcon {
      get { return ownerIcon_ ?? OwnerIconDefaultValue; }
      set {
        ownerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerIcon {
      get { return ownerIcon_ != null; }
    }
    /// <summary>Clears the value of the "owner_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerIcon() {
      ownerIcon_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 18;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "club_icon" field.</summary>
    public const int ClubIconFieldNumber = 19;
    private readonly static string ClubIconDefaultValue = "";

    private string clubIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubIcon {
      get { return clubIcon_ ?? ClubIconDefaultValue; }
      set {
        clubIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubIcon {
      get { return clubIcon_ != null; }
    }
    /// <summary>Clears the value of the "club_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubIcon() {
      clubIcon_ = null;
    }

    /// <summary>Field number for the "club_ownerid" field.</summary>
    public const int ClubOwneridFieldNumber = 20;
    private readonly static long ClubOwneridDefaultValue = 0L;

    private long clubOwnerid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClubOwnerid {
      get { if ((_hasBits0 & 8192) != 0) { return clubOwnerid_; } else { return ClubOwneridDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        clubOwnerid_ = value;
      }
    }
    /// <summary>Gets whether the "club_ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubOwnerid {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "club_ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubOwnerid() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 21;
    private readonly static string PlatformDefaultValue = "";

    private string platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Platform {
      get { return platform_ ?? PlatformDefaultValue; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlatform {
      get { return platform_ != null; }
    }
    /// <summary>Clears the value of the "platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlatform() {
      platform_ = null;
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 22;
    private readonly static int RegionDefaultValue = 0;

    private int region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Region {
      get { if ((_hasBits0 & 16384) != 0) { return region_; } else { return RegionDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        region_ = value;
      }
    }
    /// <summary>Gets whether the "region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegion {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegion() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "max_buyin" field.</summary>
    public const int MaxBuyinFieldNumber = 23;
    private readonly static long MaxBuyinDefaultValue = 0L;

    private long maxBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxBuyin {
      get { if ((_hasBits0 & 32768) != 0) { return maxBuyin_; } else { return MaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        maxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBuyin {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBuyin() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 24;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 65536) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "room_mode" field.</summary>
    public const int RoomModeFieldNumber = 25;
    private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

    private global::Texas.Protocol.RoomMode roomMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomMode RoomMode {
      get { if ((_hasBits0 & 131072) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        roomMode_ = value;
      }
    }
    /// <summary>Gets whether the "room_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomMode {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "room_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomMode() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "create_clubid" field.</summary>
    public const int CreateClubidFieldNumber = 26;
    private readonly static int CreateClubidDefaultValue = 0;

    private int createClubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CreateClubid {
      get { if ((_hasBits0 & 262144) != 0) { return createClubid_; } else { return CreateClubidDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        createClubid_ = value;
      }
    }
    /// <summary>Gets whether the "create_clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreateClubid {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "create_clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreateClubid() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 27;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 524288) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "auto_start" field.</summary>
    public const int AutoStartFieldNumber = 28;
    private readonly static int AutoStartDefaultValue = 0;

    private int autoStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoStart {
      get { if ((_hasBits0 & 1048576) != 0) { return autoStart_; } else { return AutoStartDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        autoStart_ = value;
      }
    }
    /// <summary>Gets whether the "auto_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoStart {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "auto_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoStart() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "career_data" field.</summary>
    public const int CareerDataFieldNumber = 29;
    private readonly static bool CareerDataDefaultValue = false;

    private bool careerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CareerData {
      get { if ((_hasBits0 & 2097152) != 0) { return careerData_; } else { return CareerDataDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        careerData_ = value;
      }
    }
    /// <summary>Gets whether the "career_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCareerData {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "career_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCareerData() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "is_auto_delay_room_over" field.</summary>
    public const int IsAutoDelayRoomOverFieldNumber = 30;
    private readonly static bool IsAutoDelayRoomOverDefaultValue = false;

    private bool isAutoDelayRoomOver_;
    /// <summary>
    ///是否自动延时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoDelayRoomOver {
      get { if ((_hasBits0 & 4194304) != 0) { return isAutoDelayRoomOver_; } else { return IsAutoDelayRoomOverDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        isAutoDelayRoomOver_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_delay_room_over" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoDelayRoomOver {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_delay_room_over" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoDelayRoomOver() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "auto_delay_room_over_times" field.</summary>
    public const int AutoDelayRoomOverTimesFieldNumber = 31;
    private readonly static int AutoDelayRoomOverTimesDefaultValue = 0;

    private int autoDelayRoomOverTimes_;
    /// <summary>
    ///自动延时次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoDelayRoomOverTimes {
      get { if ((_hasBits0 & 8388608) != 0) { return autoDelayRoomOverTimes_; } else { return AutoDelayRoomOverTimesDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        autoDelayRoomOverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "auto_delay_room_over_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoDelayRoomOverTimes {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "auto_delay_room_over_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoDelayRoomOverTimes() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 32;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    /// <summary>
    ///是否自动开桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits0 & 16777216) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 33;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    /// when module create room use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits0 & 33554432) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 34;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits0 & 67108864) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 35;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    /// passwd room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits0 & 134217728) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 36;
    private readonly static string PasswdDefaultValue = "";

    private string passwd_;
    /// <summary>
    /// password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Passwd {
      get { return passwd_ ?? PasswdDefaultValue; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "passwd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswd {
      get { return passwd_ != null; }
    }
    /// <summary>Clears the value of the "passwd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswd() {
      passwd_ = null;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 37;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 268435456) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 38;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    /// 1 not ppst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits0 & 536870912) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 39;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits0 & 1073741824) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 40;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits0 & -2147483648) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 41;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    /// <summary>
    ///前注大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits1 & 1) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits1 |= 1;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "max_bet_times" field.</summary>
    public const int MaxBetTimesFieldNumber = 42;
    private readonly static int MaxBetTimesDefaultValue = 0;

    private int maxBetTimes_;
    /// <summary>
    ///0无限制, 最大下注是ante的倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxBetTimes {
      get { if ((_hasBits1 & 2) != 0) { return maxBetTimes_; } else { return MaxBetTimesDefaultValue; } }
      set {
        _hasBits1 |= 2;
        maxBetTimes_ = value;
      }
    }
    /// <summary>Gets whether the "max_bet_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBetTimes {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_bet_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBetTimes() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "pot_limit" field.</summary>
    public const int PotLimitFieldNumber = 43;
    private readonly static long PotLimitDefaultValue = 0L;

    private long potLimit_;
    /// <summary>
    ///0无限制, 最大底池限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PotLimit {
      get { if ((_hasBits1 & 4) != 0) { return potLimit_; } else { return PotLimitDefaultValue; } }
      set {
        _hasBits1 |= 4;
        potLimit_ = value;
      }
    }
    /// <summary>Gets whether the "pot_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPotLimit {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pot_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPotLimit() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "max_blind_cycle_times" field.</summary>
    public const int MaxBlindCycleTimesFieldNumber = 44;
    private readonly static int MaxBlindCycleTimesDefaultValue = 0;

    private int maxBlindCycleTimes_;
    /// <summary>
    ///0无限制, 最多几轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxBlindCycleTimes {
      get { if ((_hasBits1 & 8) != 0) { return maxBlindCycleTimes_; } else { return MaxBlindCycleTimesDefaultValue; } }
      set {
        _hasBits1 |= 8;
        maxBlindCycleTimes_ = value;
      }
    }
    /// <summary>Gets whether the "max_blind_cycle_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBlindCycleTimes {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_blind_cycle_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBlindCycleTimes() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "is_captcha" field.</summary>
    public const int IsCaptchaFieldNumber = 45;
    private readonly static bool IsCaptchaDefaultValue = false;

    private bool isCaptcha_;
    /// <summary>
    ///是否人机校验  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCaptcha {
      get { if ((_hasBits1 & 16) != 0) { return isCaptcha_; } else { return IsCaptchaDefaultValue; } }
      set {
        _hasBits1 |= 16;
        isCaptcha_ = value;
      }
    }
    /// <summary>Gets whether the "is_captcha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCaptcha {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_captcha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCaptcha() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "cityid" field.</summary>
    public const int CityidFieldNumber = 46;
    private readonly static int CityidDefaultValue = 0;

    private int cityid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cityid {
      get { if ((_hasBits1 & 32) != 0) { return cityid_; } else { return CityidDefaultValue; } }
      set {
        _hasBits1 |= 32;
        cityid_ = value;
      }
    }
    /// <summary>Gets whether the "cityid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCityid {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "cityid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCityid() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "feetype" field.</summary>
    public const int FeetypeFieldNumber = 47;
    private readonly static int FeetypeDefaultValue = 0;

    private int feetype_;
    /// <summary>
    ///fee类型， 1 买入收取服务费  2 每局fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feetype {
      get { if ((_hasBits1 & 64) != 0) { return feetype_; } else { return FeetypeDefaultValue; } }
      set {
        _hasBits1 |= 64;
        feetype_ = value;
      }
    }
    /// <summary>Gets whether the "feetype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeetype {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "feetype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeetype() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 48;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits1 & 128) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits1 |= 128;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits1 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (Ownerid != other.Ownerid) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SeatNum != other.SeatNum) return false;
      if (RoomName != other.RoomName) return false;
      if (ActionTime != other.ActionTime) return false;
      if (DefaultBuyin != other.DefaultBuyin) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (Feepoint != other.Feepoint) return false;
      if (Cap != other.Cap) return false;
      if (GameTime != other.GameTime) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (GpsDistanceLimit != other.GpsDistanceLimit) return false;
      if (OwnerName != other.OwnerName) return false;
      if (OwnerIcon != other.OwnerIcon) return false;
      if (ClubName != other.ClubName) return false;
      if (ClubIcon != other.ClubIcon) return false;
      if (ClubOwnerid != other.ClubOwnerid) return false;
      if (Platform != other.Platform) return false;
      if (Region != other.Region) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (RoomType != other.RoomType) return false;
      if (RoomMode != other.RoomMode) return false;
      if (CreateClubid != other.CreateClubid) return false;
      if (GameMode != other.GameMode) return false;
      if (AutoStart != other.AutoStart) return false;
      if (CareerData != other.CareerData) return false;
      if (IsAutoDelayRoomOver != other.IsAutoDelayRoomOver) return false;
      if (AutoDelayRoomOverTimes != other.AutoDelayRoomOverTimes) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (Moduleid != other.Moduleid) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (Passwd != other.Passwd) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (Ante != other.Ante) return false;
      if (MaxBetTimes != other.MaxBetTimes) return false;
      if (PotLimit != other.PotLimit) return false;
      if (MaxBlindCycleTimes != other.MaxBlindCycleTimes) return false;
      if (IsCaptcha != other.IsCaptcha) return false;
      if (Cityid != other.Cityid) return false;
      if (Feetype != other.Feetype) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasOwnerid) hash ^= Ownerid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasActionTime) hash ^= ActionTime.GetHashCode();
      if (HasDefaultBuyin) hash ^= DefaultBuyin.GetHashCode();
      if (HasMinBuyin) hash ^= MinBuyin.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasCap) hash ^= Cap.GetHashCode();
      if (HasGameTime) hash ^= GameTime.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasGpsDistanceLimit) hash ^= GpsDistanceLimit.GetHashCode();
      if (HasOwnerName) hash ^= OwnerName.GetHashCode();
      if (HasOwnerIcon) hash ^= OwnerIcon.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasClubIcon) hash ^= ClubIcon.GetHashCode();
      if (HasClubOwnerid) hash ^= ClubOwnerid.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasMaxBuyin) hash ^= MaxBuyin.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasRoomMode) hash ^= RoomMode.GetHashCode();
      if (HasCreateClubid) hash ^= CreateClubid.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasAutoStart) hash ^= AutoStart.GetHashCode();
      if (HasCareerData) hash ^= CareerData.GetHashCode();
      if (HasIsAutoDelayRoomOver) hash ^= IsAutoDelayRoomOver.GetHashCode();
      if (HasAutoDelayRoomOverTimes) hash ^= AutoDelayRoomOverTimes.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasPasswd) hash ^= Passwd.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasMaxBetTimes) hash ^= MaxBetTimes.GetHashCode();
      if (HasPotLimit) hash ^= PotLimit.GetHashCode();
      if (HasMaxBlindCycleTimes) hash ^= MaxBlindCycleTimes.GetHashCode();
      if (HasIsCaptcha) hash ^= IsCaptcha.GetHashCode();
      if (HasCityid) hash ^= Cityid.GetHashCode();
      if (HasFeetype) hash ^= Feetype.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomid) {
        output.WriteRawTag(8);
        output.WriteInt32(Roomid);
      }
      if (HasOwnerid) {
        output.WriteRawTag(16);
        output.WriteInt64(Ownerid);
      }
      if (HasClubid) {
        output.WriteRawTag(26);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasSeatNum) {
        output.WriteRawTag(40);
        output.WriteInt32(SeatNum);
      }
      if (HasRoomName) {
        output.WriteRawTag(50);
        output.WriteString(RoomName);
      }
      if (HasActionTime) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionTime);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(64);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(72);
        output.WriteInt64(MinBuyin);
      }
      if (HasFeepoint) {
        output.WriteRawTag(80);
        output.WriteInt32(Feepoint);
      }
      if (HasCap) {
        output.WriteRawTag(88);
        output.WriteInt32(Cap);
      }
      if (HasGameTime) {
        output.WriteRawTag(96);
        output.WriteInt32(GameTime);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(104);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(112);
        output.WriteBool(IpLimit);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(120);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasOwnerName) {
        output.WriteRawTag(130, 1);
        output.WriteString(OwnerName);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(138, 1);
        output.WriteString(OwnerIcon);
      }
      if (HasClubName) {
        output.WriteRawTag(146, 1);
        output.WriteString(ClubName);
      }
      if (HasClubIcon) {
        output.WriteRawTag(154, 1);
        output.WriteString(ClubIcon);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasPlatform) {
        output.WriteRawTag(170, 1);
        output.WriteString(Platform);
      }
      if (HasRegion) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Region);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(MaxBuyin);
      }
      if (HasRoomType) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) RoomType);
      }
      if (HasRoomMode) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) RoomMode);
      }
      if (HasCreateClubid) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CreateClubid);
      }
      if (HasGameMode) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasAutoStart) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasCareerData) {
        output.WriteRawTag(232, 1);
        output.WriteBool(CareerData);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasModuleid) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(144, 2);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(152, 2);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(162, 2);
        output.WriteString(Passwd);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasAnte) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(Ante);
      }
      if (HasMaxBetTimes) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(MaxBetTimes);
      }
      if (HasPotLimit) {
        output.WriteRawTag(216, 2);
        output.WriteInt64(PotLimit);
      }
      if (HasMaxBlindCycleTimes) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MaxBlindCycleTimes);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasCityid) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(Cityid);
      }
      if (HasFeetype) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(Feetype);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomid) {
        output.WriteRawTag(8);
        output.WriteInt32(Roomid);
      }
      if (HasOwnerid) {
        output.WriteRawTag(16);
        output.WriteInt64(Ownerid);
      }
      if (HasClubid) {
        output.WriteRawTag(26);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(32);
        output.WriteInt32(Leagueid);
      }
      if (HasSeatNum) {
        output.WriteRawTag(40);
        output.WriteInt32(SeatNum);
      }
      if (HasRoomName) {
        output.WriteRawTag(50);
        output.WriteString(RoomName);
      }
      if (HasActionTime) {
        output.WriteRawTag(56);
        output.WriteInt32(ActionTime);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(64);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(72);
        output.WriteInt64(MinBuyin);
      }
      if (HasFeepoint) {
        output.WriteRawTag(80);
        output.WriteInt32(Feepoint);
      }
      if (HasCap) {
        output.WriteRawTag(88);
        output.WriteInt32(Cap);
      }
      if (HasGameTime) {
        output.WriteRawTag(96);
        output.WriteInt32(GameTime);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(104);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(112);
        output.WriteBool(IpLimit);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(120);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasOwnerName) {
        output.WriteRawTag(130, 1);
        output.WriteString(OwnerName);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(138, 1);
        output.WriteString(OwnerIcon);
      }
      if (HasClubName) {
        output.WriteRawTag(146, 1);
        output.WriteString(ClubName);
      }
      if (HasClubIcon) {
        output.WriteRawTag(154, 1);
        output.WriteString(ClubIcon);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasPlatform) {
        output.WriteRawTag(170, 1);
        output.WriteString(Platform);
      }
      if (HasRegion) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Region);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(MaxBuyin);
      }
      if (HasRoomType) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) RoomType);
      }
      if (HasRoomMode) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) RoomMode);
      }
      if (HasCreateClubid) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CreateClubid);
      }
      if (HasGameMode) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasAutoStart) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasCareerData) {
        output.WriteRawTag(232, 1);
        output.WriteBool(CareerData);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasModuleid) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(144, 2);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(152, 2);
        output.WriteBool(PasswdLimit);
      }
      if (HasPasswd) {
        output.WriteRawTag(162, 2);
        output.WriteString(Passwd);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasAnte) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(Ante);
      }
      if (HasMaxBetTimes) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(MaxBetTimes);
      }
      if (HasPotLimit) {
        output.WriteRawTag(216, 2);
        output.WriteInt64(PotLimit);
      }
      if (HasMaxBlindCycleTimes) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MaxBlindCycleTimes);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasCityid) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(Cityid);
      }
      if (HasFeetype) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(Feetype);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
      }
      if (HasOwnerid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ownerid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasActionTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTime);
      }
      if (HasDefaultBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefaultBuyin);
      }
      if (HasMinBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinBuyin);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasCap) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cap);
      }
      if (HasGameTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (HasGpsLimit) {
        size += 1 + 1;
      }
      if (HasIpLimit) {
        size += 1 + 1;
      }
      if (HasGpsDistanceLimit) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsDistanceLimit);
      }
      if (HasOwnerName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (HasOwnerIcon) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OwnerIcon);
      }
      if (HasClubName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasClubIcon) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubIcon);
      }
      if (HasClubOwnerid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClubOwnerid);
      }
      if (HasPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (HasRegion) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (HasMaxBuyin) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxBuyin);
      }
      if (HasRoomType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasRoomMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
      }
      if (HasCreateClubid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CreateClubid);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasAutoStart) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoStart);
      }
      if (HasCareerData) {
        size += 2 + 1;
      }
      if (HasIsAutoDelayRoomOver) {
        size += 2 + 1;
      }
      if (HasAutoDelayRoomOverTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasPasswd) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasAnte) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasMaxBetTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBetTimes);
      }
      if (HasPotLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PotLimit);
      }
      if (HasMaxBlindCycleTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBlindCycleTimes);
      }
      if (HasIsCaptcha) {
        size += 2 + 1;
      }
      if (HasCityid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cityid);
      }
      if (HasFeetype) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Feetype);
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasOwnerid) {
        Ownerid = other.Ownerid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasActionTime) {
        ActionTime = other.ActionTime;
      }
      if (other.HasDefaultBuyin) {
        DefaultBuyin = other.DefaultBuyin;
      }
      if (other.HasMinBuyin) {
        MinBuyin = other.MinBuyin;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasCap) {
        Cap = other.Cap;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasGpsDistanceLimit) {
        GpsDistanceLimit = other.GpsDistanceLimit;
      }
      if (other.HasOwnerName) {
        OwnerName = other.OwnerName;
      }
      if (other.HasOwnerIcon) {
        OwnerIcon = other.OwnerIcon;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasClubIcon) {
        ClubIcon = other.ClubIcon;
      }
      if (other.HasClubOwnerid) {
        ClubOwnerid = other.ClubOwnerid;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasMaxBuyin) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasRoomMode) {
        RoomMode = other.RoomMode;
      }
      if (other.HasCreateClubid) {
        CreateClubid = other.CreateClubid;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasAutoStart) {
        AutoStart = other.AutoStart;
      }
      if (other.HasCareerData) {
        CareerData = other.CareerData;
      }
      if (other.HasIsAutoDelayRoomOver) {
        IsAutoDelayRoomOver = other.IsAutoDelayRoomOver;
      }
      if (other.HasAutoDelayRoomOverTimes) {
        AutoDelayRoomOverTimes = other.AutoDelayRoomOverTimes;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasPasswd) {
        Passwd = other.Passwd;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasMaxBetTimes) {
        MaxBetTimes = other.MaxBetTimes;
      }
      if (other.HasPotLimit) {
        PotLimit = other.PotLimit;
      }
      if (other.HasMaxBlindCycleTimes) {
        MaxBlindCycleTimes = other.MaxBlindCycleTimes;
      }
      if (other.HasIsCaptcha) {
        IsCaptcha = other.IsCaptcha;
      }
      if (other.HasCityid) {
        Cityid = other.Cityid;
      }
      if (other.HasFeetype) {
        Feetype = other.Feetype;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Roomid = input.ReadInt32();
            break;
          }
          case 16: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 26: {
            Clubid = input.ReadString();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 50: {
            RoomName = input.ReadString();
            break;
          }
          case 56: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 64: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 72: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 80: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 88: {
            Cap = input.ReadInt32();
            break;
          }
          case 96: {
            GameTime = input.ReadInt32();
            break;
          }
          case 104: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 112: {
            IpLimit = input.ReadBool();
            break;
          }
          case 120: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 130: {
            OwnerName = input.ReadString();
            break;
          }
          case 138: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 146: {
            ClubName = input.ReadString();
            break;
          }
          case 154: {
            ClubIcon = input.ReadString();
            break;
          }
          case 160: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 170: {
            Platform = input.ReadString();
            break;
          }
          case 176: {
            Region = input.ReadInt32();
            break;
          }
          case 184: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 192: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 200: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 208: {
            CreateClubid = input.ReadInt32();
            break;
          }
          case 216: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 224: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 232: {
            CareerData = input.ReadBool();
            break;
          }
          case 240: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 248: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 256: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 264: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 272: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 280: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 290: {
            Passwd = input.ReadString();
            break;
          }
          case 296: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 304: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 312: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 320: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 328: {
            Ante = input.ReadInt64();
            break;
          }
          case 336: {
            MaxBetTimes = input.ReadInt32();
            break;
          }
          case 344: {
            PotLimit = input.ReadInt64();
            break;
          }
          case 352: {
            MaxBlindCycleTimes = input.ReadInt32();
            break;
          }
          case 360: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 368: {
            Cityid = input.ReadInt32();
            break;
          }
          case 376: {
            Feetype = input.ReadInt32();
            break;
          }
          case 384: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Roomid = input.ReadInt32();
            break;
          }
          case 16: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 26: {
            Clubid = input.ReadString();
            break;
          }
          case 32: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 40: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 50: {
            RoomName = input.ReadString();
            break;
          }
          case 56: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 64: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 72: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 80: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 88: {
            Cap = input.ReadInt32();
            break;
          }
          case 96: {
            GameTime = input.ReadInt32();
            break;
          }
          case 104: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 112: {
            IpLimit = input.ReadBool();
            break;
          }
          case 120: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 130: {
            OwnerName = input.ReadString();
            break;
          }
          case 138: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 146: {
            ClubName = input.ReadString();
            break;
          }
          case 154: {
            ClubIcon = input.ReadString();
            break;
          }
          case 160: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 170: {
            Platform = input.ReadString();
            break;
          }
          case 176: {
            Region = input.ReadInt32();
            break;
          }
          case 184: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 192: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 200: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 208: {
            CreateClubid = input.ReadInt32();
            break;
          }
          case 216: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 224: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 232: {
            CareerData = input.ReadBool();
            break;
          }
          case 240: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 248: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 256: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 264: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 272: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 280: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 290: {
            Passwd = input.ReadString();
            break;
          }
          case 296: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 304: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 312: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 320: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 328: {
            Ante = input.ReadInt64();
            break;
          }
          case 336: {
            MaxBetTimes = input.ReadInt32();
            break;
          }
          case 344: {
            PotLimit = input.ReadInt64();
            break;
          }
          case 352: {
            MaxBlindCycleTimes = input.ReadInt32();
            break;
          }
          case 360: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 368: {
            Cityid = input.ReadInt32();
            break;
          }
          case 376: {
            Feetype = input.ReadInt32();
            break;
          }
          case 384: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///创建teenpatti房间请求
  /// </summary>
  public sealed partial class CreateTpRoomREQ : pb::IMessage<CreateTpRoomREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateTpRoomREQ> _parser = new pb::MessageParser<CreateTpRoomREQ>(() => new CreateTpRoomREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateTpRoomREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTpRoomREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTpRoomREQ(CreateTpRoomREQ other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      seatNum_ = other.seatNum_;
      roomName_ = other.roomName_;
      actionTime_ = other.actionTime_;
      defaultBuyin_ = other.defaultBuyin_;
      minBuyin_ = other.minBuyin_;
      feepoint_ = other.feepoint_;
      cap_ = other.cap_;
      gameTime_ = other.gameTime_;
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      timezone_ = other.timezone_;
      maxBuyin_ = other.maxBuyin_;
      roomType_ = other.roomType_;
      gameMode_ = other.gameMode_;
      autoStart_ = other.autoStart_;
      isAutoDelayRoomOver_ = other.isAutoDelayRoomOver_;
      autoDelayRoomOverTimes_ = other.autoDelayRoomOverTimes_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      creatorUserId_ = other.creatorUserId_;
      moduleid_ = other.moduleid_;
      multiOpid_ = other.multiOpid_;
      canUse_ = other.canUse_;
      forbiddenChat_ = other.forbiddenChat_;
      passwdLimit_ = other.passwdLimit_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      deriveRoomid_ = other.deriveRoomid_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      ante_ = other.ante_;
      isCaptcha_ = other.isCaptcha_;
      cityid_ = other.cityid_;
      feetype_ = other.feetype_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      banClub_ = other.banClub_.Clone();
      banCountry_ = other.banCountry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTpRoomREQ Clone() {
      return new CreateTpRoomREQ(this);
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 1;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 2;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 1) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 3;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 2) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 4;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 5;
    private readonly static int ActionTimeDefaultValue = 0;

    private int actionTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionTime {
      get { if ((_hasBits0 & 4) != 0) { return actionTime_; } else { return ActionTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        actionTime_ = value;
      }
    }
    /// <summary>Gets whether the "action_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "action_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "default_buyin" field.</summary>
    public const int DefaultBuyinFieldNumber = 6;
    private readonly static long DefaultBuyinDefaultValue = 0L;

    private long defaultBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DefaultBuyin {
      get { if ((_hasBits0 & 8) != 0) { return defaultBuyin_; } else { return DefaultBuyinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        defaultBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "default_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefaultBuyin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "default_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefaultBuyin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "min_buyin" field.</summary>
    public const int MinBuyinFieldNumber = 7;
    private readonly static long MinBuyinDefaultValue = 0L;

    private long minBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBuyin {
      get { if ((_hasBits0 & 16) != 0) { return minBuyin_; } else { return MinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 16;
        minBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBuyin {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBuyin() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 8;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    /// <summary>
    ///fee比例，2代表%2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 32) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 32;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 9;
    private readonly static int CapDefaultValue = 0;

    private int cap_;
    /// <summary>
    ///fee封頂
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cap {
      get { if ((_hasBits0 & 64) != 0) { return cap_; } else { return CapDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cap_ = value;
      }
    }
    /// <summary>Gets whether the "cap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCap {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCap() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 10;
    private readonly static int GameTimeDefaultValue = 0;

    private int gameTime_;
    /// <summary>
    ///游戏时间,0表示无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameTime {
      get { if ((_hasBits0 & 128) != 0) { return gameTime_; } else { return GameTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        gameTime_ = value;
      }
    }
    /// <summary>Gets whether the "game_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "game_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 11;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 256) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 256;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 12;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 512) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 13;
    private readonly static int TimezoneDefaultValue = 0;

    private int timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Timezone {
      get { if ((_hasBits0 & 1024) != 0) { return timezone_; } else { return TimezoneDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        timezone_ = value;
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimezone {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimezone() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "max_buyin" field.</summary>
    public const int MaxBuyinFieldNumber = 14;
    private readonly static long MaxBuyinDefaultValue = 0L;

    private long maxBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxBuyin {
      get { if ((_hasBits0 & 2048) != 0) { return maxBuyin_; } else { return MaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        maxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBuyin {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBuyin() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 15;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 4096) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 16;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 8192) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "auto_start" field.</summary>
    public const int AutoStartFieldNumber = 17;
    private readonly static int AutoStartDefaultValue = 0;

    private int autoStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoStart {
      get { if ((_hasBits0 & 16384) != 0) { return autoStart_; } else { return AutoStartDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        autoStart_ = value;
      }
    }
    /// <summary>Gets whether the "auto_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoStart {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "auto_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoStart() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "is_auto_delay_room_over" field.</summary>
    public const int IsAutoDelayRoomOverFieldNumber = 18;
    private readonly static bool IsAutoDelayRoomOverDefaultValue = false;

    private bool isAutoDelayRoomOver_;
    /// <summary>
    ///是否自动延时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoDelayRoomOver {
      get { if ((_hasBits0 & 32768) != 0) { return isAutoDelayRoomOver_; } else { return IsAutoDelayRoomOverDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        isAutoDelayRoomOver_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_delay_room_over" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoDelayRoomOver {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_delay_room_over" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoDelayRoomOver() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "auto_delay_room_over_times" field.</summary>
    public const int AutoDelayRoomOverTimesFieldNumber = 19;
    private readonly static int AutoDelayRoomOverTimesDefaultValue = 0;

    private int autoDelayRoomOverTimes_;
    /// <summary>
    ///自动延时次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoDelayRoomOverTimes {
      get { if ((_hasBits0 & 65536) != 0) { return autoDelayRoomOverTimes_; } else { return AutoDelayRoomOverTimesDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        autoDelayRoomOverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "auto_delay_room_over_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoDelayRoomOverTimes {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "auto_delay_room_over_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoDelayRoomOverTimes() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 20;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    /// <summary>
    ///是否自动开桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits0 & 131072) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "creator_user_id" field.</summary>
    public const int CreatorUserIdFieldNumber = 21;
    private readonly static long CreatorUserIdDefaultValue = 0L;

    private long creatorUserId_;
    /// <summary>
    ///创建者用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CreatorUserId {
      get { if ((_hasBits0 & 262144) != 0) { return creatorUserId_; } else { return CreatorUserIdDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        creatorUserId_ = value;
      }
    }
    /// <summary>Gets whether the "creator_user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreatorUserId {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "creator_user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreatorUserId() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 22;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits0 & 524288) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "multi_opid" field.</summary>
    public const int MultiOpidFieldNumber = 23;
    private readonly static string MultiOpidDefaultValue = "";

    private string multiOpid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MultiOpid {
      get { return multiOpid_ ?? MultiOpidDefaultValue; }
      set {
        multiOpid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "multi_opid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMultiOpid {
      get { return multiOpid_ != null; }
    }
    /// <summary>Clears the value of the "multi_opid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMultiOpid() {
      multiOpid_ = null;
    }

    /// <summary>Field number for the "can_use" field.</summary>
    public const int CanUseFieldNumber = 24;
    private readonly static bool CanUseDefaultValue = false;

    private bool canUse_;
    /// <summary>
    /// is module can use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanUse {
      get { if ((_hasBits0 & 1048576) != 0) { return canUse_; } else { return CanUseDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        canUse_ = value;
      }
    }
    /// <summary>Gets whether the "can_use" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanUse {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "can_use" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanUse() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 25;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits0 & 2097152) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 26;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    /// passwd room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits0 & 4194304) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 27;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 8388608) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 28;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    ///1表示非ppst的超级联盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits0 & 16777216) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "derive_roomid" field.</summary>
    public const int DeriveRoomidFieldNumber = 29;
    private readonly static int DeriveRoomidDefaultValue = 0;

    private int deriveRoomid_;
    /// <summary>
    ///该房间的自动创桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeriveRoomid {
      get { if ((_hasBits0 & 33554432) != 0) { return deriveRoomid_; } else { return DeriveRoomidDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        deriveRoomid_ = value;
      }
    }
    /// <summary>Gets whether the "derive_roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeriveRoomid {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "derive_roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeriveRoomid() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 30;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits0 & 67108864) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 31;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits0 & 134217728) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 32;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    /// <summary>
    ///前注大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 268435456) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "is_captcha" field.</summary>
    public const int IsCaptchaFieldNumber = 33;
    private readonly static bool IsCaptchaDefaultValue = false;

    private bool isCaptcha_;
    /// <summary>
    ///是否人机校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCaptcha {
      get { if ((_hasBits0 & 536870912) != 0) { return isCaptcha_; } else { return IsCaptchaDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        isCaptcha_ = value;
      }
    }
    /// <summary>Gets whether the "is_captcha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCaptcha {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "is_captcha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCaptcha() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "cityid" field.</summary>
    public const int CityidFieldNumber = 34;
    private readonly static int CityidDefaultValue = 0;

    private int cityid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cityid {
      get { if ((_hasBits0 & 1073741824) != 0) { return cityid_; } else { return CityidDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        cityid_ = value;
      }
    }
    /// <summary>Gets whether the "cityid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCityid {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "cityid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCityid() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "feetype" field.</summary>
    public const int FeetypeFieldNumber = 35;
    private readonly static int FeetypeDefaultValue = 0;

    private int feetype_;
    /// <summary>
    ///fee类型， 1 买入收取服务费  2 每局fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feetype {
      get { if ((_hasBits0 & -2147483648) != 0) { return feetype_; } else { return FeetypeDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        feetype_ = value;
      }
    }
    /// <summary>Gets whether the "feetype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeetype {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "feetype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeetype() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 36;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits1 & 1) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "ban_club" field.</summary>
    public const int BanClubFieldNumber = 37;
    private static readonly pb::FieldCodec<int> _repeated_banClub_codec
        = pb::FieldCodec.ForInt32(298);
    private readonly pbc::RepeatedField<int> banClub_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// restriction for clubs and regions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BanClub {
      get { return banClub_; }
    }

    /// <summary>Field number for the "ban_country" field.</summary>
    public const int BanCountryFieldNumber = 38;
    private static readonly pb::FieldCodec<string> _repeated_banCountry_codec
        = pb::FieldCodec.ForString(306);
    private readonly pbc::RepeatedField<string> banCountry_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 限制注册地为某些国家的用户不能看到和加入牌桌，缩写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> BanCountry {
      get { return banCountry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateTpRoomREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateTpRoomREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SeatNum != other.SeatNum) return false;
      if (RoomName != other.RoomName) return false;
      if (ActionTime != other.ActionTime) return false;
      if (DefaultBuyin != other.DefaultBuyin) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (Feepoint != other.Feepoint) return false;
      if (Cap != other.Cap) return false;
      if (GameTime != other.GameTime) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (Timezone != other.Timezone) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (RoomType != other.RoomType) return false;
      if (GameMode != other.GameMode) return false;
      if (AutoStart != other.AutoStart) return false;
      if (IsAutoDelayRoomOver != other.IsAutoDelayRoomOver) return false;
      if (AutoDelayRoomOverTimes != other.AutoDelayRoomOverTimes) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (CreatorUserId != other.CreatorUserId) return false;
      if (Moduleid != other.Moduleid) return false;
      if (MultiOpid != other.MultiOpid) return false;
      if (CanUse != other.CanUse) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (DeriveRoomid != other.DeriveRoomid) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (Ante != other.Ante) return false;
      if (IsCaptcha != other.IsCaptcha) return false;
      if (Cityid != other.Cityid) return false;
      if (Feetype != other.Feetype) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      if(!banClub_.Equals(other.banClub_)) return false;
      if(!banCountry_.Equals(other.banCountry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasActionTime) hash ^= ActionTime.GetHashCode();
      if (HasDefaultBuyin) hash ^= DefaultBuyin.GetHashCode();
      if (HasMinBuyin) hash ^= MinBuyin.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasCap) hash ^= Cap.GetHashCode();
      if (HasGameTime) hash ^= GameTime.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasMaxBuyin) hash ^= MaxBuyin.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasAutoStart) hash ^= AutoStart.GetHashCode();
      if (HasIsAutoDelayRoomOver) hash ^= IsAutoDelayRoomOver.GetHashCode();
      if (HasAutoDelayRoomOverTimes) hash ^= AutoDelayRoomOverTimes.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasCreatorUserId) hash ^= CreatorUserId.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasMultiOpid) hash ^= MultiOpid.GetHashCode();
      if (HasCanUse) hash ^= CanUse.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasDeriveRoomid) hash ^= DeriveRoomid.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (HasIsCaptcha) hash ^= IsCaptcha.GetHashCode();
      if (HasCityid) hash ^= Cityid.GetHashCode();
      if (HasFeetype) hash ^= Feetype.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      hash ^= banClub_.GetHashCode();
      hash ^= banCountry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClubid) {
        output.WriteRawTag(10);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(16);
        output.WriteInt32(Leagueid);
      }
      if (HasSeatNum) {
        output.WriteRawTag(24);
        output.WriteInt32(SeatNum);
      }
      if (HasRoomName) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (HasActionTime) {
        output.WriteRawTag(40);
        output.WriteInt32(ActionTime);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(48);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(56);
        output.WriteInt64(MinBuyin);
      }
      if (HasFeepoint) {
        output.WriteRawTag(64);
        output.WriteInt32(Feepoint);
      }
      if (HasCap) {
        output.WriteRawTag(72);
        output.WriteInt32(Cap);
      }
      if (HasGameTime) {
        output.WriteRawTag(80);
        output.WriteInt32(GameTime);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(88);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(96);
        output.WriteBool(IpLimit);
      }
      if (HasTimezone) {
        output.WriteRawTag(104);
        output.WriteInt32(Timezone);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(112);
        output.WriteInt64(MaxBuyin);
      }
      if (HasRoomType) {
        output.WriteRawTag(120);
        output.WriteEnum((int) RoomType);
      }
      if (HasGameMode) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasAutoStart) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(CreatorUserId);
      }
      if (HasModuleid) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(186, 1);
        output.WriteString(MultiOpid);
      }
      if (HasCanUse) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CanUse);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(200, 1);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(208, 1);
        output.WriteBool(PasswdLimit);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasDeriveRoomid) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DeriveRoomid);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsCheckMail);
      }
      if (HasAnte) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(Ante);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasCityid) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Cityid);
      }
      if (HasFeetype) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Feetype);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ForbiddenChatMode);
      }
      banClub_.WriteTo(output, _repeated_banClub_codec);
      banCountry_.WriteTo(output, _repeated_banCountry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClubid) {
        output.WriteRawTag(10);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(16);
        output.WriteInt32(Leagueid);
      }
      if (HasSeatNum) {
        output.WriteRawTag(24);
        output.WriteInt32(SeatNum);
      }
      if (HasRoomName) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (HasActionTime) {
        output.WriteRawTag(40);
        output.WriteInt32(ActionTime);
      }
      if (HasDefaultBuyin) {
        output.WriteRawTag(48);
        output.WriteInt64(DefaultBuyin);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(56);
        output.WriteInt64(MinBuyin);
      }
      if (HasFeepoint) {
        output.WriteRawTag(64);
        output.WriteInt32(Feepoint);
      }
      if (HasCap) {
        output.WriteRawTag(72);
        output.WriteInt32(Cap);
      }
      if (HasGameTime) {
        output.WriteRawTag(80);
        output.WriteInt32(GameTime);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(88);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(96);
        output.WriteBool(IpLimit);
      }
      if (HasTimezone) {
        output.WriteRawTag(104);
        output.WriteInt32(Timezone);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(112);
        output.WriteInt64(MaxBuyin);
      }
      if (HasRoomType) {
        output.WriteRawTag(120);
        output.WriteEnum((int) RoomType);
      }
      if (HasGameMode) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasAutoStart) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(CreatorUserId);
      }
      if (HasModuleid) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(186, 1);
        output.WriteString(MultiOpid);
      }
      if (HasCanUse) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CanUse);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(200, 1);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(208, 1);
        output.WriteBool(PasswdLimit);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasDeriveRoomid) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DeriveRoomid);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsCheckMail);
      }
      if (HasAnte) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(Ante);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasCityid) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Cityid);
      }
      if (HasFeetype) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Feetype);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ForbiddenChatMode);
      }
      banClub_.WriteTo(ref output, _repeated_banClub_codec);
      banCountry_.WriteTo(ref output, _repeated_banCountry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasActionTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTime);
      }
      if (HasDefaultBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefaultBuyin);
      }
      if (HasMinBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinBuyin);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasCap) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cap);
      }
      if (HasGameTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (HasGpsLimit) {
        size += 1 + 1;
      }
      if (HasIpLimit) {
        size += 1 + 1;
      }
      if (HasTimezone) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
      }
      if (HasMaxBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBuyin);
      }
      if (HasRoomType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasAutoStart) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoStart);
      }
      if (HasIsAutoDelayRoomOver) {
        size += 2 + 1;
      }
      if (HasAutoDelayRoomOverTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasCreatorUserId) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreatorUserId);
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasMultiOpid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultiOpid);
      }
      if (HasCanUse) {
        size += 2 + 1;
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasSuperLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasDeriveRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeriveRoomid);
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasAnte) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (HasIsCaptcha) {
        size += 2 + 1;
      }
      if (HasCityid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cityid);
      }
      if (HasFeetype) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Feetype);
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      size += banClub_.CalculateSize(_repeated_banClub_codec);
      size += banCountry_.CalculateSize(_repeated_banCountry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateTpRoomREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasActionTime) {
        ActionTime = other.ActionTime;
      }
      if (other.HasDefaultBuyin) {
        DefaultBuyin = other.DefaultBuyin;
      }
      if (other.HasMinBuyin) {
        MinBuyin = other.MinBuyin;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasCap) {
        Cap = other.Cap;
      }
      if (other.HasGameTime) {
        GameTime = other.GameTime;
      }
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasMaxBuyin) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasAutoStart) {
        AutoStart = other.AutoStart;
      }
      if (other.HasIsAutoDelayRoomOver) {
        IsAutoDelayRoomOver = other.IsAutoDelayRoomOver;
      }
      if (other.HasAutoDelayRoomOverTimes) {
        AutoDelayRoomOverTimes = other.AutoDelayRoomOverTimes;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasCreatorUserId) {
        CreatorUserId = other.CreatorUserId;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasMultiOpid) {
        MultiOpid = other.MultiOpid;
      }
      if (other.HasCanUse) {
        CanUse = other.CanUse;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasDeriveRoomid) {
        DeriveRoomid = other.DeriveRoomid;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      if (other.HasIsCaptcha) {
        IsCaptcha = other.IsCaptcha;
      }
      if (other.HasCityid) {
        Cityid = other.Cityid;
      }
      if (other.HasFeetype) {
        Feetype = other.Feetype;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      banClub_.Add(other.banClub_);
      banCountry_.Add(other.banCountry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Clubid = input.ReadString();
            break;
          }
          case 16: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 24: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 40: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 48: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 56: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 64: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 72: {
            Cap = input.ReadInt32();
            break;
          }
          case 80: {
            GameTime = input.ReadInt32();
            break;
          }
          case 88: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 96: {
            IpLimit = input.ReadBool();
            break;
          }
          case 104: {
            Timezone = input.ReadInt32();
            break;
          }
          case 112: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 120: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 128: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 136: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 144: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 152: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 160: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 168: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 176: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 186: {
            MultiOpid = input.ReadString();
            break;
          }
          case 192: {
            CanUse = input.ReadBool();
            break;
          }
          case 200: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 208: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 216: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 224: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 232: {
            DeriveRoomid = input.ReadInt32();
            break;
          }
          case 240: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 248: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 256: {
            Ante = input.ReadInt64();
            break;
          }
          case 264: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 272: {
            Cityid = input.ReadInt32();
            break;
          }
          case 280: {
            Feetype = input.ReadInt32();
            break;
          }
          case 288: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 298:
          case 296: {
            banClub_.AddEntriesFrom(input, _repeated_banClub_codec);
            break;
          }
          case 306: {
            banCountry_.AddEntriesFrom(input, _repeated_banCountry_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Clubid = input.ReadString();
            break;
          }
          case 16: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 24: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 40: {
            ActionTime = input.ReadInt32();
            break;
          }
          case 48: {
            DefaultBuyin = input.ReadInt64();
            break;
          }
          case 56: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 64: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 72: {
            Cap = input.ReadInt32();
            break;
          }
          case 80: {
            GameTime = input.ReadInt32();
            break;
          }
          case 88: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 96: {
            IpLimit = input.ReadBool();
            break;
          }
          case 104: {
            Timezone = input.ReadInt32();
            break;
          }
          case 112: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 120: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 128: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 136: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 144: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 152: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 160: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 168: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 176: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 186: {
            MultiOpid = input.ReadString();
            break;
          }
          case 192: {
            CanUse = input.ReadBool();
            break;
          }
          case 200: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 208: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 216: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 224: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 232: {
            DeriveRoomid = input.ReadInt32();
            break;
          }
          case 240: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 248: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 256: {
            Ante = input.ReadInt64();
            break;
          }
          case 264: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 272: {
            Cityid = input.ReadInt32();
            break;
          }
          case 280: {
            Feetype = input.ReadInt32();
            break;
          }
          case 288: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 298:
          case 296: {
            banClub_.AddEntriesFrom(ref input, _repeated_banClub_codec);
            break;
          }
          case 306: {
            banCountry_.AddEntriesFrom(ref input, _repeated_banCountry_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///创建tennpatti房间返回
  /// </summary>
  public sealed partial class CreateTpRoomRSP : pb::IMessage<CreateTpRoomRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateTpRoomRSP> _parser = new pb::MessageParser<CreateTpRoomRSP>(() => new CreateTpRoomRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateTpRoomRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTpRoomRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTpRoomRSP(CreateTpRoomRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTpRoomRSP Clone() {
      return new CreateTpRoomRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///-1 参数错误(或不够砖石)    -2 最低买入大于默认买入    -3 不在灰度测试白名单中    -4 停服不能创建房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private global::Texas.Protocol.TpRoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpRoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateTpRoomRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateTpRoomRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateTpRoomRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Texas.Protocol.TpRoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Texas.Protocol.TpRoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Texas.Protocol.TpRoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpActionREQ : pb::IMessage<TpActionREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpActionREQ> _parser = new pb::MessageParser<TpActionREQ>(() => new TpActionREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpActionREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionREQ(TpActionREQ other) : this() {
      _hasBits0 = other._hasBits0;
      actionType_ = other.actionType_;
      chips_ = other.chips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionREQ Clone() {
      return new TpActionREQ(this);
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 1;
    private readonly static global::Texas.Protocol.TpActionType ActionTypeDefaultValue = global::Texas.Protocol.TpActionType.TpActionNone;

    private global::Texas.Protocol.TpActionType actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpActionType ActionType {
      get { if ((_hasBits0 & 1) != 0) { return actionType_; } else { return ActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        actionType_ = value;
      }
    }
    /// <summary>Gets whether the "action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpActionREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpActionREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      if (Chips != other.Chips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasActionType) hash ^= ActionType.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasActionType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActionType);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasActionType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActionType);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasActionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpActionREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasActionType) {
        ActionType = other.ActionType;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpActionBRC : pb::IMessage<TpActionBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpActionBRC> _parser = new pb::MessageParser<TpActionBRC>(() => new TpActionBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpActionBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionBRC(TpActionBRC other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      actionType_ = other.actionType_;
      chips_ = other.chips_;
      handChips_ = other.handChips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionBRC Clone() {
      return new TpActionBRC(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private readonly static global::Texas.Protocol.TpActionType ActionTypeDefaultValue = global::Texas.Protocol.TpActionType.TpActionNone;

    private global::Texas.Protocol.TpActionType actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpActionType ActionType {
      get { if ((_hasBits0 & 2) != 0) { return actionType_; } else { return ActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionType_ = value;
      }
    }
    /// <summary>Gets whether the "action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 3;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 4) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hand_chips" field.</summary>
    public const int HandChipsFieldNumber = 4;
    private readonly static long HandChipsDefaultValue = 0L;

    private long handChips_;
    /// <summary>
    ///下注后剩余筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandChips {
      get { if ((_hasBits0 & 8) != 0) { return handChips_; } else { return HandChipsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        handChips_ = value;
      }
    }
    /// <summary>Gets whether the "hand_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandChips {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hand_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandChips() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpActionBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpActionBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (ActionType != other.ActionType) return false;
      if (Chips != other.Chips) return false;
      if (HandChips != other.HandChips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasActionType) hash ^= ActionType.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasHandChips) hash ^= HandChips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasActionType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasHandChips) {
        output.WriteRawTag(32);
        output.WriteInt64(HandChips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasActionType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasHandChips) {
        output.WriteRawTag(32);
        output.WriteInt64(HandChips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasActionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasHandChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandChips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpActionBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasActionType) {
        ActionType = other.ActionType;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasHandChips) {
        HandChips = other.HandChips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 32: {
            HandChips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 32: {
            HandChips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpSeatStatus : pb::IMessage<TpSeatStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpSeatStatus> _parser = new pb::MessageParser<TpSeatStatus>(() => new TpSeatStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpSeatStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeatStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeatStatus(TpSeatStatus other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      actionType_ = other.actionType_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      handChips_ = other.handChips_;
      destopChips_ = other.destopChips_;
      hasCard_ = other.hasCard_;
      seatReserve_ = other.seatReserve_;
      country_ = other.country_;
      vipLevel_ = other.vipLevel_;
      rebuyLeftTime_ = other.rebuyLeftTime_;
      clubid_ = other.clubid_;
      gpsLon_ = other.gpsLon_;
      gpsLat_ = other.gpsLat_;
      clubName_ = other.clubName_;
      status_ = other.status_;
      isEmpty_ = other.isEmpty_;
      isBooked_ = other.isBooked_;
      bookConfirmRemainingSeconds_ = other.bookConfirmRemainingSeconds_;
      card1_ = other.card1_;
      card2_ = other.card2_;
      card3_ = other.card3_;
      level_ = other.level_;
      frameId_ = other.frameId_;
      isSeeCard_ = other.isSeeCard_;
      compareSeatid_ = other.compareSeatid_;
      compareResult_ = other.compareResult_;
      lastRoundDesktopChips_ = other.lastRoundDesktopChips_;
      lastRoundActionType_ = other.lastRoundActionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeatStatus Clone() {
      return new TpSeatStatus(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private readonly static global::Texas.Protocol.TpActionType ActionTypeDefaultValue = global::Texas.Protocol.TpActionType.TpActionNone;

    private global::Texas.Protocol.TpActionType actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpActionType ActionType {
      get { if ((_hasBits0 & 2) != 0) { return actionType_; } else { return ActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionType_ = value;
      }
    }
    /// <summary>Gets whether the "action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Texas.Protocol.UserBrief player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserBrief Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "hand_chips" field.</summary>
    public const int HandChipsFieldNumber = 4;
    private readonly static long HandChipsDefaultValue = 0L;

    private long handChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandChips {
      get { if ((_hasBits0 & 4) != 0) { return handChips_; } else { return HandChipsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        handChips_ = value;
      }
    }
    /// <summary>Gets whether the "hand_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandChips {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hand_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandChips() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "destop_chips" field.</summary>
    public const int DestopChipsFieldNumber = 5;
    private readonly static long DestopChipsDefaultValue = 0L;

    private long destopChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DestopChips {
      get { if ((_hasBits0 & 8) != 0) { return destopChips_; } else { return DestopChipsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        destopChips_ = value;
      }
    }
    /// <summary>Gets whether the "destop_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDestopChips {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "destop_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDestopChips() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "has_card" field.</summary>
    public const int HasCardFieldNumber = 6;
    private readonly static bool HasCardDefaultValue = false;

    private bool hasCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard {
      get { if ((_hasBits0 & 16) != 0) { return hasCard_; } else { return HasCardDefaultValue; } }
      set {
        _hasBits0 |= 16;
        hasCard_ = value;
      }
    }
    /// <summary>Gets whether the "has_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasCard {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "has_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasCard() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "seat_reserve" field.</summary>
    public const int SeatReserveFieldNumber = 7;
    private readonly static bool SeatReserveDefaultValue = false;

    private bool seatReserve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SeatReserve {
      get { if ((_hasBits0 & 32) != 0) { return seatReserve_; } else { return SeatReserveDefaultValue; } }
      set {
        _hasBits0 |= 32;
        seatReserve_ = value;
      }
    }
    /// <summary>Gets whether the "seat_reserve" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatReserve {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "seat_reserve" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatReserve() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 8;
    private readonly static string CountryDefaultValue = "";

    private string country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Country {
      get { return country_ ?? CountryDefaultValue; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCountry {
      get { return country_ != null; }
    }
    /// <summary>Clears the value of the "country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCountry() {
      country_ = null;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 9;
    private readonly static uint VipLevelDefaultValue = 0;

    private uint vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VipLevel {
      get { if ((_hasBits0 & 64) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 64;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "rebuy_left_time" field.</summary>
    public const int RebuyLeftTimeFieldNumber = 10;
    private readonly static int RebuyLeftTimeDefaultValue = 0;

    private int rebuyLeftTime_;
    /// <summary>
    ///等待rebuy剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyLeftTime {
      get { if ((_hasBits0 & 128) != 0) { return rebuyLeftTime_; } else { return RebuyLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rebuyLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyLeftTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyLeftTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 11;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///俱乐部id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "gps_lon" field.</summary>
    public const int GpsLonFieldNumber = 12;
    private readonly static int GpsLonDefaultValue = 0;

    private int gpsLon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsLon {
      get { if ((_hasBits0 & 256) != 0) { return gpsLon_; } else { return GpsLonDefaultValue; } }
      set {
        _hasBits0 |= 256;
        gpsLon_ = value;
      }
    }
    /// <summary>Gets whether the "gps_lon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLon {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "gps_lon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLon() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "gps_lat" field.</summary>
    public const int GpsLatFieldNumber = 13;
    private readonly static int GpsLatDefaultValue = 0;

    private int gpsLat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsLat {
      get { if ((_hasBits0 & 512) != 0) { return gpsLat_; } else { return GpsLatDefaultValue; } }
      set {
        _hasBits0 |= 512;
        gpsLat_ = value;
      }
    }
    /// <summary>Gets whether the "gps_lat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLat {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "gps_lat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLat() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 14;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 15;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    ///0、正常    1、等待买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 1024) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "is_empty" field.</summary>
    public const int IsEmptyFieldNumber = 16;
    private readonly static bool IsEmptyDefaultValue = false;

    private bool isEmpty_;
    /// <summary>
    /// 座位是否为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmpty {
      get { if ((_hasBits0 & 2048) != 0) { return isEmpty_; } else { return IsEmptyDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "is_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEmpty {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEmpty() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "is_booked" field.</summary>
    public const int IsBookedFieldNumber = 17;
    private readonly static bool IsBookedDefaultValue = false;

    private bool isBooked_;
    /// <summary>
    /// 是否被预订
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBooked {
      get { if ((_hasBits0 & 4096) != 0) { return isBooked_; } else { return IsBookedDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        isBooked_ = value;
      }
    }
    /// <summary>Gets whether the "is_booked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBooked {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "is_booked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBooked() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "book_confirm_remaining_seconds" field.</summary>
    public const int BookConfirmRemainingSecondsFieldNumber = 18;
    private readonly static int BookConfirmRemainingSecondsDefaultValue = 0;

    private int bookConfirmRemainingSeconds_;
    /// <summary>
    /// 订座确认剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BookConfirmRemainingSeconds {
      get { if ((_hasBits0 & 8192) != 0) { return bookConfirmRemainingSeconds_; } else { return BookConfirmRemainingSecondsDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        bookConfirmRemainingSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "book_confirm_remaining_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBookConfirmRemainingSeconds {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "book_confirm_remaining_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBookConfirmRemainingSeconds() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "card1" field.</summary>
    public const int Card1FieldNumber = 19;
    private readonly static int Card1DefaultValue = 0;

    private int card1_;
    /// <summary>
    ///比牌时才填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card1 {
      get { if ((_hasBits0 & 16384) != 0) { return card1_; } else { return Card1DefaultValue; } }
      set {
        _hasBits0 |= 16384;
        card1_ = value;
      }
    }
    /// <summary>Gets whether the "card1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard1 {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "card1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard1() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "card2" field.</summary>
    public const int Card2FieldNumber = 20;
    private readonly static int Card2DefaultValue = 0;

    private int card2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card2 {
      get { if ((_hasBits0 & 32768) != 0) { return card2_; } else { return Card2DefaultValue; } }
      set {
        _hasBits0 |= 32768;
        card2_ = value;
      }
    }
    /// <summary>Gets whether the "card2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard2 {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "card2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard2() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "card3" field.</summary>
    public const int Card3FieldNumber = 21;
    private readonly static int Card3DefaultValue = 0;

    private int card3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card3 {
      get { if ((_hasBits0 & 65536) != 0) { return card3_; } else { return Card3DefaultValue; } }
      set {
        _hasBits0 |= 65536;
        card3_ = value;
      }
    }
    /// <summary>Gets whether the "card3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard3 {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "card3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard3() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 22;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    /// <summary>
    ///用户等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { if ((_hasBits0 & 131072) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 23;
    private readonly static string FrameIdDefaultValue = "";

    private string frameId_;
    /// <summary>
    ///用户头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FrameId {
      get { return frameId_ ?? FrameIdDefaultValue; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameId {
      get { return frameId_ != null; }
    }
    /// <summary>Clears the value of the "frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameId() {
      frameId_ = null;
    }

    /// <summary>Field number for the "is_see_card" field.</summary>
    public const int IsSeeCardFieldNumber = 24;
    private readonly static bool IsSeeCardDefaultValue = false;

    private bool isSeeCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSeeCard {
      get { if ((_hasBits0 & 262144) != 0) { return isSeeCard_; } else { return IsSeeCardDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        isSeeCard_ = value;
      }
    }
    /// <summary>Gets whether the "is_see_card" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsSeeCard {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_see_card" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsSeeCard() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "compare_seatid" field.</summary>
    public const int CompareSeatidFieldNumber = 25;
    private readonly static int CompareSeatidDefaultValue = 0;

    private int compareSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CompareSeatid {
      get { if ((_hasBits0 & 524288) != 0) { return compareSeatid_; } else { return CompareSeatidDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        compareSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "compare_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompareSeatid {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "compare_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompareSeatid() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "compare_result" field.</summary>
    public const int CompareResultFieldNumber = 26;
    private readonly static bool CompareResultDefaultValue = false;

    private bool compareResult_;
    /// <summary>
    ///compare_seatid>=0 的时候才需要判断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CompareResult {
      get { if ((_hasBits0 & 1048576) != 0) { return compareResult_; } else { return CompareResultDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        compareResult_ = value;
      }
    }
    /// <summary>Gets whether the "compare_result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompareResult {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "compare_result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompareResult() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "last_round_desktop_chips" field.</summary>
    public const int LastRoundDesktopChipsFieldNumber = 27;
    private readonly static long LastRoundDesktopChipsDefaultValue = 0L;

    private long lastRoundDesktopChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastRoundDesktopChips {
      get { if ((_hasBits0 & 2097152) != 0) { return lastRoundDesktopChips_; } else { return LastRoundDesktopChipsDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        lastRoundDesktopChips_ = value;
      }
    }
    /// <summary>Gets whether the "last_round_desktop_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastRoundDesktopChips {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "last_round_desktop_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastRoundDesktopChips() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "last_round_action_type" field.</summary>
    public const int LastRoundActionTypeFieldNumber = 28;
    private readonly static global::Texas.Protocol.TpActionType LastRoundActionTypeDefaultValue = global::Texas.Protocol.TpActionType.TpActionNone;

    private global::Texas.Protocol.TpActionType lastRoundActionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpActionType LastRoundActionType {
      get { if ((_hasBits0 & 4194304) != 0) { return lastRoundActionType_; } else { return LastRoundActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        lastRoundActionType_ = value;
      }
    }
    /// <summary>Gets whether the "last_round_action_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastRoundActionType {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "last_round_action_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastRoundActionType() {
      _hasBits0 &= ~4194304;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpSeatStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpSeatStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (ActionType != other.ActionType) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (HandChips != other.HandChips) return false;
      if (DestopChips != other.DestopChips) return false;
      if (HasCard != other.HasCard) return false;
      if (SeatReserve != other.SeatReserve) return false;
      if (Country != other.Country) return false;
      if (VipLevel != other.VipLevel) return false;
      if (RebuyLeftTime != other.RebuyLeftTime) return false;
      if (Clubid != other.Clubid) return false;
      if (GpsLon != other.GpsLon) return false;
      if (GpsLat != other.GpsLat) return false;
      if (ClubName != other.ClubName) return false;
      if (Status != other.Status) return false;
      if (IsEmpty != other.IsEmpty) return false;
      if (IsBooked != other.IsBooked) return false;
      if (BookConfirmRemainingSeconds != other.BookConfirmRemainingSeconds) return false;
      if (Card1 != other.Card1) return false;
      if (Card2 != other.Card2) return false;
      if (Card3 != other.Card3) return false;
      if (Level != other.Level) return false;
      if (FrameId != other.FrameId) return false;
      if (IsSeeCard != other.IsSeeCard) return false;
      if (CompareSeatid != other.CompareSeatid) return false;
      if (CompareResult != other.CompareResult) return false;
      if (LastRoundDesktopChips != other.LastRoundDesktopChips) return false;
      if (LastRoundActionType != other.LastRoundActionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasActionType) hash ^= ActionType.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (HasHandChips) hash ^= HandChips.GetHashCode();
      if (HasDestopChips) hash ^= DestopChips.GetHashCode();
      if (HasHasCard) hash ^= HasCard.GetHashCode();
      if (HasSeatReserve) hash ^= SeatReserve.GetHashCode();
      if (HasCountry) hash ^= Country.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasRebuyLeftTime) hash ^= RebuyLeftTime.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasGpsLon) hash ^= GpsLon.GetHashCode();
      if (HasGpsLat) hash ^= GpsLat.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasIsEmpty) hash ^= IsEmpty.GetHashCode();
      if (HasIsBooked) hash ^= IsBooked.GetHashCode();
      if (HasBookConfirmRemainingSeconds) hash ^= BookConfirmRemainingSeconds.GetHashCode();
      if (HasCard1) hash ^= Card1.GetHashCode();
      if (HasCard2) hash ^= Card2.GetHashCode();
      if (HasCard3) hash ^= Card3.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasFrameId) hash ^= FrameId.GetHashCode();
      if (HasIsSeeCard) hash ^= IsSeeCard.GetHashCode();
      if (HasCompareSeatid) hash ^= CompareSeatid.GetHashCode();
      if (HasCompareResult) hash ^= CompareResult.GetHashCode();
      if (HasLastRoundDesktopChips) hash ^= LastRoundDesktopChips.GetHashCode();
      if (HasLastRoundActionType) hash ^= LastRoundActionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasActionType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (HasHandChips) {
        output.WriteRawTag(32);
        output.WriteInt64(HandChips);
      }
      if (HasDestopChips) {
        output.WriteRawTag(40);
        output.WriteInt64(DestopChips);
      }
      if (HasHasCard) {
        output.WriteRawTag(48);
        output.WriteBool(HasCard);
      }
      if (HasSeatReserve) {
        output.WriteRawTag(56);
        output.WriteBool(SeatReserve);
      }
      if (HasCountry) {
        output.WriteRawTag(66);
        output.WriteString(Country);
      }
      if (HasVipLevel) {
        output.WriteRawTag(72);
        output.WriteUInt32(VipLevel);
      }
      if (HasRebuyLeftTime) {
        output.WriteRawTag(80);
        output.WriteInt32(RebuyLeftTime);
      }
      if (HasClubid) {
        output.WriteRawTag(90);
        output.WriteString(Clubid);
      }
      if (HasGpsLon) {
        output.WriteRawTag(96);
        output.WriteInt32(GpsLon);
      }
      if (HasGpsLat) {
        output.WriteRawTag(104);
        output.WriteInt32(GpsLat);
      }
      if (HasClubName) {
        output.WriteRawTag(114);
        output.WriteString(ClubName);
      }
      if (HasStatus) {
        output.WriteRawTag(120);
        output.WriteInt32(Status);
      }
      if (HasIsEmpty) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsEmpty);
      }
      if (HasIsBooked) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsBooked);
      }
      if (HasBookConfirmRemainingSeconds) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BookConfirmRemainingSeconds);
      }
      if (HasCard1) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Card3);
      }
      if (HasLevel) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Level);
      }
      if (HasFrameId) {
        output.WriteRawTag(186, 1);
        output.WriteString(FrameId);
      }
      if (HasIsSeeCard) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsSeeCard);
      }
      if (HasCompareSeatid) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CompareSeatid);
      }
      if (HasCompareResult) {
        output.WriteRawTag(208, 1);
        output.WriteBool(CompareResult);
      }
      if (HasLastRoundDesktopChips) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(LastRoundDesktopChips);
      }
      if (HasLastRoundActionType) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) LastRoundActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasActionType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (HasHandChips) {
        output.WriteRawTag(32);
        output.WriteInt64(HandChips);
      }
      if (HasDestopChips) {
        output.WriteRawTag(40);
        output.WriteInt64(DestopChips);
      }
      if (HasHasCard) {
        output.WriteRawTag(48);
        output.WriteBool(HasCard);
      }
      if (HasSeatReserve) {
        output.WriteRawTag(56);
        output.WriteBool(SeatReserve);
      }
      if (HasCountry) {
        output.WriteRawTag(66);
        output.WriteString(Country);
      }
      if (HasVipLevel) {
        output.WriteRawTag(72);
        output.WriteUInt32(VipLevel);
      }
      if (HasRebuyLeftTime) {
        output.WriteRawTag(80);
        output.WriteInt32(RebuyLeftTime);
      }
      if (HasClubid) {
        output.WriteRawTag(90);
        output.WriteString(Clubid);
      }
      if (HasGpsLon) {
        output.WriteRawTag(96);
        output.WriteInt32(GpsLon);
      }
      if (HasGpsLat) {
        output.WriteRawTag(104);
        output.WriteInt32(GpsLat);
      }
      if (HasClubName) {
        output.WriteRawTag(114);
        output.WriteString(ClubName);
      }
      if (HasStatus) {
        output.WriteRawTag(120);
        output.WriteInt32(Status);
      }
      if (HasIsEmpty) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsEmpty);
      }
      if (HasIsBooked) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsBooked);
      }
      if (HasBookConfirmRemainingSeconds) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BookConfirmRemainingSeconds);
      }
      if (HasCard1) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Card3);
      }
      if (HasLevel) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Level);
      }
      if (HasFrameId) {
        output.WriteRawTag(186, 1);
        output.WriteString(FrameId);
      }
      if (HasIsSeeCard) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsSeeCard);
      }
      if (HasCompareSeatid) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CompareSeatid);
      }
      if (HasCompareResult) {
        output.WriteRawTag(208, 1);
        output.WriteBool(CompareResult);
      }
      if (HasLastRoundDesktopChips) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(LastRoundDesktopChips);
      }
      if (HasLastRoundActionType) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) LastRoundActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasActionType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (HasHandChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandChips);
      }
      if (HasDestopChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DestopChips);
      }
      if (HasHasCard) {
        size += 1 + 1;
      }
      if (HasSeatReserve) {
        size += 1 + 1;
      }
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (HasRebuyLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebuyLeftTime);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasGpsLon) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsLon);
      }
      if (HasGpsLat) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsLat);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (HasIsEmpty) {
        size += 2 + 1;
      }
      if (HasIsBooked) {
        size += 2 + 1;
      }
      if (HasBookConfirmRemainingSeconds) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BookConfirmRemainingSeconds);
      }
      if (HasCard1) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card1);
      }
      if (HasCard2) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card2);
      }
      if (HasCard3) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Card3);
      }
      if (HasLevel) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HasFrameId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (HasIsSeeCard) {
        size += 2 + 1;
      }
      if (HasCompareSeatid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompareSeatid);
      }
      if (HasCompareResult) {
        size += 2 + 1;
      }
      if (HasLastRoundDesktopChips) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastRoundDesktopChips);
      }
      if (HasLastRoundActionType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LastRoundActionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpSeatStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasActionType) {
        ActionType = other.ActionType;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Texas.Protocol.UserBrief();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.HasHandChips) {
        HandChips = other.HandChips;
      }
      if (other.HasDestopChips) {
        DestopChips = other.DestopChips;
      }
      if (other.HasHasCard) {
        HasCard = other.HasCard;
      }
      if (other.HasSeatReserve) {
        SeatReserve = other.SeatReserve;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasRebuyLeftTime) {
        RebuyLeftTime = other.RebuyLeftTime;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasGpsLon) {
        GpsLon = other.GpsLon;
      }
      if (other.HasGpsLat) {
        GpsLat = other.GpsLat;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasIsEmpty) {
        IsEmpty = other.IsEmpty;
      }
      if (other.HasIsBooked) {
        IsBooked = other.IsBooked;
      }
      if (other.HasBookConfirmRemainingSeconds) {
        BookConfirmRemainingSeconds = other.BookConfirmRemainingSeconds;
      }
      if (other.HasCard1) {
        Card1 = other.Card1;
      }
      if (other.HasCard2) {
        Card2 = other.Card2;
      }
      if (other.HasCard3) {
        Card3 = other.Card3;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasFrameId) {
        FrameId = other.FrameId;
      }
      if (other.HasIsSeeCard) {
        IsSeeCard = other.IsSeeCard;
      }
      if (other.HasCompareSeatid) {
        CompareSeatid = other.CompareSeatid;
      }
      if (other.HasCompareResult) {
        CompareResult = other.CompareResult;
      }
      if (other.HasLastRoundDesktopChips) {
        LastRoundDesktopChips = other.LastRoundDesktopChips;
      }
      if (other.HasLastRoundActionType) {
        LastRoundActionType = other.LastRoundActionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Player);
            break;
          }
          case 32: {
            HandChips = input.ReadInt64();
            break;
          }
          case 40: {
            DestopChips = input.ReadInt64();
            break;
          }
          case 48: {
            HasCard = input.ReadBool();
            break;
          }
          case 56: {
            SeatReserve = input.ReadBool();
            break;
          }
          case 66: {
            Country = input.ReadString();
            break;
          }
          case 72: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 80: {
            RebuyLeftTime = input.ReadInt32();
            break;
          }
          case 90: {
            Clubid = input.ReadString();
            break;
          }
          case 96: {
            GpsLon = input.ReadInt32();
            break;
          }
          case 104: {
            GpsLat = input.ReadInt32();
            break;
          }
          case 114: {
            ClubName = input.ReadString();
            break;
          }
          case 120: {
            Status = input.ReadInt32();
            break;
          }
          case 128: {
            IsEmpty = input.ReadBool();
            break;
          }
          case 136: {
            IsBooked = input.ReadBool();
            break;
          }
          case 144: {
            BookConfirmRemainingSeconds = input.ReadInt32();
            break;
          }
          case 152: {
            Card1 = input.ReadInt32();
            break;
          }
          case 160: {
            Card2 = input.ReadInt32();
            break;
          }
          case 168: {
            Card3 = input.ReadInt32();
            break;
          }
          case 176: {
            Level = input.ReadInt32();
            break;
          }
          case 186: {
            FrameId = input.ReadString();
            break;
          }
          case 192: {
            IsSeeCard = input.ReadBool();
            break;
          }
          case 200: {
            CompareSeatid = input.ReadInt32();
            break;
          }
          case 208: {
            CompareResult = input.ReadBool();
            break;
          }
          case 216: {
            LastRoundDesktopChips = input.ReadInt64();
            break;
          }
          case 224: {
            LastRoundActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 26: {
            if (player_ == null) {
              Player = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Player);
            break;
          }
          case 32: {
            HandChips = input.ReadInt64();
            break;
          }
          case 40: {
            DestopChips = input.ReadInt64();
            break;
          }
          case 48: {
            HasCard = input.ReadBool();
            break;
          }
          case 56: {
            SeatReserve = input.ReadBool();
            break;
          }
          case 66: {
            Country = input.ReadString();
            break;
          }
          case 72: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 80: {
            RebuyLeftTime = input.ReadInt32();
            break;
          }
          case 90: {
            Clubid = input.ReadString();
            break;
          }
          case 96: {
            GpsLon = input.ReadInt32();
            break;
          }
          case 104: {
            GpsLat = input.ReadInt32();
            break;
          }
          case 114: {
            ClubName = input.ReadString();
            break;
          }
          case 120: {
            Status = input.ReadInt32();
            break;
          }
          case 128: {
            IsEmpty = input.ReadBool();
            break;
          }
          case 136: {
            IsBooked = input.ReadBool();
            break;
          }
          case 144: {
            BookConfirmRemainingSeconds = input.ReadInt32();
            break;
          }
          case 152: {
            Card1 = input.ReadInt32();
            break;
          }
          case 160: {
            Card2 = input.ReadInt32();
            break;
          }
          case 168: {
            Card3 = input.ReadInt32();
            break;
          }
          case 176: {
            Level = input.ReadInt32();
            break;
          }
          case 186: {
            FrameId = input.ReadString();
            break;
          }
          case 192: {
            IsSeeCard = input.ReadBool();
            break;
          }
          case 200: {
            CompareSeatid = input.ReadInt32();
            break;
          }
          case 208: {
            CompareResult = input.ReadBool();
            break;
          }
          case 216: {
            LastRoundDesktopChips = input.ReadInt64();
            break;
          }
          case 224: {
            LastRoundActionType = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpTableStatus : pb::IMessage<TpTableStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpTableStatus> _parser = new pb::MessageParser<TpTableStatus>(() => new TpTableStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpTableStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpTableStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpTableStatus(TpTableStatus other) : this() {
      _hasBits0 = other._hasBits0;
      isPlaying_ = other.isPlaying_;
      actionIdx_ = other.actionIdx_;
      dIdx_ = other.dIdx_;
      seat_ = other.seat_.Clone();
      pool_ = other.pool_.Clone();
      stage_ = other.stage_;
      tid_ = other.tid_;
      gameid_ = other.gameid_;
      isInSideShow_ = other.isInSideShow_;
      curBlind_ = other.curBlind_;
      sideShowReqSeatid_ = other.sideShowReqSeatid_;
      sideShowAckSeatid_ = other.sideShowAckSeatid_;
      canShow_ = other.canShow_;
      sideShowLeftTime_ = other.sideShowLeftTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpTableStatus Clone() {
      return new TpTableStatus(this);
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 1;
    private readonly static bool IsPlayingDefaultValue = false;

    private bool isPlaying_;
    /// <summary>
    ///桌子是否在玩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlaying {
      get { if ((_hasBits0 & 1) != 0) { return isPlaying_; } else { return IsPlayingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPlaying_ = value;
      }
    }
    /// <summary>Gets whether the "is_playing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPlaying {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_playing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPlaying() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action_idx" field.</summary>
    public const int ActionIdxFieldNumber = 2;
    private readonly static int ActionIdxDefaultValue = 0;

    private int actionIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActionIdx {
      get { if ((_hasBits0 & 2) != 0) { return actionIdx_; } else { return ActionIdxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        actionIdx_ = value;
      }
    }
    /// <summary>Gets whether the "action_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActionIdx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActionIdx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "d_idx" field.</summary>
    public const int DIdxFieldNumber = 3;
    private readonly static int DIdxDefaultValue = 0;

    private int dIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DIdx {
      get { if ((_hasBits0 & 4) != 0) { return dIdx_; } else { return DIdxDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dIdx_ = value;
      }
    }
    /// <summary>Gets whether the "d_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDIdx {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "d_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDIdx() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TpSeatStatus> _repeated_seat_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.TpSeatStatus.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TpSeatStatus> seat_ = new pbc::RepeatedField<global::Texas.Protocol.TpSeatStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TpSeatStatus> Seat {
      get { return seat_; }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_pool_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> pool_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> Pool {
      get { return pool_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 6;
    private readonly static int StageDefaultValue = 0;

    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stage {
      get { if ((_hasBits0 & 8) != 0) { return stage_; } else { return StageDefaultValue; } }
      set {
        _hasBits0 |= 8;
        stage_ = value;
      }
    }
    /// <summary>Gets whether the "stage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStage {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStage() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 7;
    private readonly static int TidDefaultValue = 0;

    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tid {
      get { if ((_hasBits0 & 16) != 0) { return tid_; } else { return TidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tid_ = value;
      }
    }
    /// <summary>Gets whether the "tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTid() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 8;
    private readonly static string GameidDefaultValue = "";

    private string gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gameid {
      get { return gameid_ ?? GameidDefaultValue; }
      set {
        gameid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gameid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameid {
      get { return gameid_ != null; }
    }
    /// <summary>Clears the value of the "gameid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameid() {
      gameid_ = null;
    }

    /// <summary>Field number for the "is_in_side_show" field.</summary>
    public const int IsInSideShowFieldNumber = 9;
    private readonly static bool IsInSideShowDefaultValue = false;

    private bool isInSideShow_;
    /// <summary>
    ///是否在比牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInSideShow {
      get { if ((_hasBits0 & 32) != 0) { return isInSideShow_; } else { return IsInSideShowDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isInSideShow_ = value;
      }
    }
    /// <summary>Gets whether the "is_in_side_show" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInSideShow {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_in_side_show" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInSideShow() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cur_blind" field.</summary>
    public const int CurBlindFieldNumber = 10;
    private readonly static long CurBlindDefaultValue = 0L;

    private long curBlind_;
    /// <summary>
    /// 当前牌桌bb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurBlind {
      get { if ((_hasBits0 & 64) != 0) { return curBlind_; } else { return CurBlindDefaultValue; } }
      set {
        _hasBits0 |= 64;
        curBlind_ = value;
      }
    }
    /// <summary>Gets whether the "cur_blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurBlind {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cur_blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurBlind() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "side_show_req_seatid" field.</summary>
    public const int SideShowReqSeatidFieldNumber = 11;
    private readonly static int SideShowReqSeatidDefaultValue = 0;

    private int sideShowReqSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SideShowReqSeatid {
      get { if ((_hasBits0 & 128) != 0) { return sideShowReqSeatid_; } else { return SideShowReqSeatidDefaultValue; } }
      set {
        _hasBits0 |= 128;
        sideShowReqSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "side_show_req_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSideShowReqSeatid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "side_show_req_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSideShowReqSeatid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "side_show_ack_seatid" field.</summary>
    public const int SideShowAckSeatidFieldNumber = 12;
    private readonly static int SideShowAckSeatidDefaultValue = 0;

    private int sideShowAckSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SideShowAckSeatid {
      get { if ((_hasBits0 & 256) != 0) { return sideShowAckSeatid_; } else { return SideShowAckSeatidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        sideShowAckSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "side_show_ack_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSideShowAckSeatid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "side_show_ack_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSideShowAckSeatid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "can_show" field.</summary>
    public const int CanShowFieldNumber = 13;
    private readonly static bool CanShowDefaultValue = false;

    private bool canShow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanShow {
      get { if ((_hasBits0 & 512) != 0) { return canShow_; } else { return CanShowDefaultValue; } }
      set {
        _hasBits0 |= 512;
        canShow_ = value;
      }
    }
    /// <summary>Gets whether the "can_show" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanShow {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "can_show" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanShow() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "side_show_left_time" field.</summary>
    public const int SideShowLeftTimeFieldNumber = 14;
    private readonly static int SideShowLeftTimeDefaultValue = 0;

    private int sideShowLeftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SideShowLeftTime {
      get { if ((_hasBits0 & 1024) != 0) { return sideShowLeftTime_; } else { return SideShowLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        sideShowLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "side_show_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSideShowLeftTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "side_show_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSideShowLeftTime() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpTableStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpTableStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPlaying != other.IsPlaying) return false;
      if (ActionIdx != other.ActionIdx) return false;
      if (DIdx != other.DIdx) return false;
      if(!seat_.Equals(other.seat_)) return false;
      if(!pool_.Equals(other.pool_)) return false;
      if (Stage != other.Stage) return false;
      if (Tid != other.Tid) return false;
      if (Gameid != other.Gameid) return false;
      if (IsInSideShow != other.IsInSideShow) return false;
      if (CurBlind != other.CurBlind) return false;
      if (SideShowReqSeatid != other.SideShowReqSeatid) return false;
      if (SideShowAckSeatid != other.SideShowAckSeatid) return false;
      if (CanShow != other.CanShow) return false;
      if (SideShowLeftTime != other.SideShowLeftTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsPlaying) hash ^= IsPlaying.GetHashCode();
      if (HasActionIdx) hash ^= ActionIdx.GetHashCode();
      if (HasDIdx) hash ^= DIdx.GetHashCode();
      hash ^= seat_.GetHashCode();
      hash ^= pool_.GetHashCode();
      if (HasStage) hash ^= Stage.GetHashCode();
      if (HasTid) hash ^= Tid.GetHashCode();
      if (HasGameid) hash ^= Gameid.GetHashCode();
      if (HasIsInSideShow) hash ^= IsInSideShow.GetHashCode();
      if (HasCurBlind) hash ^= CurBlind.GetHashCode();
      if (HasSideShowReqSeatid) hash ^= SideShowReqSeatid.GetHashCode();
      if (HasSideShowAckSeatid) hash ^= SideShowAckSeatid.GetHashCode();
      if (HasCanShow) hash ^= CanShow.GetHashCode();
      if (HasSideShowLeftTime) hash ^= SideShowLeftTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsPlaying) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlaying);
      }
      if (HasActionIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionIdx);
      }
      if (HasDIdx) {
        output.WriteRawTag(24);
        output.WriteInt32(DIdx);
      }
      seat_.WriteTo(output, _repeated_seat_codec);
      pool_.WriteTo(output, _repeated_pool_codec);
      if (HasStage) {
        output.WriteRawTag(48);
        output.WriteInt32(Stage);
      }
      if (HasTid) {
        output.WriteRawTag(56);
        output.WriteInt32(Tid);
      }
      if (HasGameid) {
        output.WriteRawTag(66);
        output.WriteString(Gameid);
      }
      if (HasIsInSideShow) {
        output.WriteRawTag(72);
        output.WriteBool(IsInSideShow);
      }
      if (HasCurBlind) {
        output.WriteRawTag(80);
        output.WriteInt64(CurBlind);
      }
      if (HasSideShowReqSeatid) {
        output.WriteRawTag(88);
        output.WriteInt32(SideShowReqSeatid);
      }
      if (HasSideShowAckSeatid) {
        output.WriteRawTag(96);
        output.WriteInt32(SideShowAckSeatid);
      }
      if (HasCanShow) {
        output.WriteRawTag(104);
        output.WriteBool(CanShow);
      }
      if (HasSideShowLeftTime) {
        output.WriteRawTag(112);
        output.WriteInt32(SideShowLeftTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsPlaying) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlaying);
      }
      if (HasActionIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionIdx);
      }
      if (HasDIdx) {
        output.WriteRawTag(24);
        output.WriteInt32(DIdx);
      }
      seat_.WriteTo(ref output, _repeated_seat_codec);
      pool_.WriteTo(ref output, _repeated_pool_codec);
      if (HasStage) {
        output.WriteRawTag(48);
        output.WriteInt32(Stage);
      }
      if (HasTid) {
        output.WriteRawTag(56);
        output.WriteInt32(Tid);
      }
      if (HasGameid) {
        output.WriteRawTag(66);
        output.WriteString(Gameid);
      }
      if (HasIsInSideShow) {
        output.WriteRawTag(72);
        output.WriteBool(IsInSideShow);
      }
      if (HasCurBlind) {
        output.WriteRawTag(80);
        output.WriteInt64(CurBlind);
      }
      if (HasSideShowReqSeatid) {
        output.WriteRawTag(88);
        output.WriteInt32(SideShowReqSeatid);
      }
      if (HasSideShowAckSeatid) {
        output.WriteRawTag(96);
        output.WriteInt32(SideShowAckSeatid);
      }
      if (HasCanShow) {
        output.WriteRawTag(104);
        output.WriteBool(CanShow);
      }
      if (HasSideShowLeftTime) {
        output.WriteRawTag(112);
        output.WriteInt32(SideShowLeftTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsPlaying) {
        size += 1 + 1;
      }
      if (HasActionIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionIdx);
      }
      if (HasDIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DIdx);
      }
      size += seat_.CalculateSize(_repeated_seat_codec);
      size += pool_.CalculateSize(_repeated_pool_codec);
      if (HasStage) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (HasTid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (HasGameid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gameid);
      }
      if (HasIsInSideShow) {
        size += 1 + 1;
      }
      if (HasCurBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurBlind);
      }
      if (HasSideShowReqSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SideShowReqSeatid);
      }
      if (HasSideShowAckSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SideShowAckSeatid);
      }
      if (HasCanShow) {
        size += 1 + 1;
      }
      if (HasSideShowLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SideShowLeftTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpTableStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasIsPlaying) {
        IsPlaying = other.IsPlaying;
      }
      if (other.HasActionIdx) {
        ActionIdx = other.ActionIdx;
      }
      if (other.HasDIdx) {
        DIdx = other.DIdx;
      }
      seat_.Add(other.seat_);
      pool_.Add(other.pool_);
      if (other.HasStage) {
        Stage = other.Stage;
      }
      if (other.HasTid) {
        Tid = other.Tid;
      }
      if (other.HasGameid) {
        Gameid = other.Gameid;
      }
      if (other.HasIsInSideShow) {
        IsInSideShow = other.IsInSideShow;
      }
      if (other.HasCurBlind) {
        CurBlind = other.CurBlind;
      }
      if (other.HasSideShowReqSeatid) {
        SideShowReqSeatid = other.SideShowReqSeatid;
      }
      if (other.HasSideShowAckSeatid) {
        SideShowAckSeatid = other.SideShowAckSeatid;
      }
      if (other.HasCanShow) {
        CanShow = other.CanShow;
      }
      if (other.HasSideShowLeftTime) {
        SideShowLeftTime = other.SideShowLeftTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 16: {
            ActionIdx = input.ReadInt32();
            break;
          }
          case 24: {
            DIdx = input.ReadInt32();
            break;
          }
          case 34: {
            seat_.AddEntriesFrom(input, _repeated_seat_codec);
            break;
          }
          case 42:
          case 40: {
            pool_.AddEntriesFrom(input, _repeated_pool_codec);
            break;
          }
          case 48: {
            Stage = input.ReadInt32();
            break;
          }
          case 56: {
            Tid = input.ReadInt32();
            break;
          }
          case 66: {
            Gameid = input.ReadString();
            break;
          }
          case 72: {
            IsInSideShow = input.ReadBool();
            break;
          }
          case 80: {
            CurBlind = input.ReadInt64();
            break;
          }
          case 88: {
            SideShowReqSeatid = input.ReadInt32();
            break;
          }
          case 96: {
            SideShowAckSeatid = input.ReadInt32();
            break;
          }
          case 104: {
            CanShow = input.ReadBool();
            break;
          }
          case 112: {
            SideShowLeftTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 16: {
            ActionIdx = input.ReadInt32();
            break;
          }
          case 24: {
            DIdx = input.ReadInt32();
            break;
          }
          case 34: {
            seat_.AddEntriesFrom(ref input, _repeated_seat_codec);
            break;
          }
          case 42:
          case 40: {
            pool_.AddEntriesFrom(ref input, _repeated_pool_codec);
            break;
          }
          case 48: {
            Stage = input.ReadInt32();
            break;
          }
          case 56: {
            Tid = input.ReadInt32();
            break;
          }
          case 66: {
            Gameid = input.ReadString();
            break;
          }
          case 72: {
            IsInSideShow = input.ReadBool();
            break;
          }
          case 80: {
            CurBlind = input.ReadInt64();
            break;
          }
          case 88: {
            SideShowReqSeatid = input.ReadInt32();
            break;
          }
          case 96: {
            SideShowAckSeatid = input.ReadInt32();
            break;
          }
          case 104: {
            CanShow = input.ReadBool();
            break;
          }
          case 112: {
            SideShowLeftTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpTableStatusBroadcast : pb::IMessage<TpTableStatusBroadcast>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpTableStatusBroadcast> _parser = new pb::MessageParser<TpTableStatusBroadcast>(() => new TpTableStatusBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpTableStatusBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpTableStatusBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpTableStatusBroadcast(TpTableStatusBroadcast other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpTableStatusBroadcast Clone() {
      return new TpTableStatusBroadcast(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Texas.Protocol.TpTableStatus info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpTableStatus Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpTableStatusBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpTableStatusBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpTableStatusBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Texas.Protocol.TpTableStatus();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Texas.Protocol.TpTableStatus();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Texas.Protocol.TpTableStatus();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpStartBRC : pb::IMessage<TpStartBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpStartBRC> _parser = new pb::MessageParser<TpStartBRC>(() => new TpStartBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpStartBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpStartBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpStartBRC(TpStartBRC other) : this() {
      _hasBits0 = other._hasBits0;
      ante_ = other.ante_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpStartBRC Clone() {
      return new TpStartBRC(this);
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 1;
    private readonly static long AnteDefaultValue = 0L;

    private long ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ante {
      get { if ((_hasBits0 & 1) != 0) { return ante_; } else { return AnteDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ante_ = value;
      }
    }
    /// <summary>Gets whether the "ante" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAnte {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ante" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAnte() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpStartBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpStartBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ante != other.Ante) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAnte) hash ^= Ante.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAnte) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAnte) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpStartBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasAnte) {
        Ante = other.Ante;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpSeeCardREQ : pb::IMessage<TpSeeCardREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpSeeCardREQ> _parser = new pb::MessageParser<TpSeeCardREQ>(() => new TpSeeCardREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpSeeCardREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardREQ(TpSeeCardREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardREQ Clone() {
      return new TpSeeCardREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpSeeCardREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpSeeCardREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpSeeCardREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class TpSeeCardRSP : pb::IMessage<TpSeeCardRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpSeeCardRSP> _parser = new pb::MessageParser<TpSeeCardRSP>(() => new TpSeeCardRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpSeeCardRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardRSP(TpSeeCardRSP other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      card1_ = other.card1_;
      card2_ = other.card2_;
      card3_ = other.card3_;
      type_ = other.type_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardRSP Clone() {
      return new TpSeeCardRSP(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "card1" field.</summary>
    public const int Card1FieldNumber = 2;
    private readonly static int Card1DefaultValue = 0;

    private int card1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card1 {
      get { if ((_hasBits0 & 2) != 0) { return card1_; } else { return Card1DefaultValue; } }
      set {
        _hasBits0 |= 2;
        card1_ = value;
      }
    }
    /// <summary>Gets whether the "card1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard1 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "card1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard1() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "card2" field.</summary>
    public const int Card2FieldNumber = 3;
    private readonly static int Card2DefaultValue = 0;

    private int card2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card2 {
      get { if ((_hasBits0 & 4) != 0) { return card2_; } else { return Card2DefaultValue; } }
      set {
        _hasBits0 |= 4;
        card2_ = value;
      }
    }
    /// <summary>Gets whether the "card2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard2 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "card2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard2() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "card3" field.</summary>
    public const int Card3FieldNumber = 4;
    private readonly static int Card3DefaultValue = 0;

    private int card3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card3 {
      get { if ((_hasBits0 & 8) != 0) { return card3_; } else { return Card3DefaultValue; } }
      set {
        _hasBits0 |= 8;
        card3_ = value;
      }
    }
    /// <summary>Gets whether the "card3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard3 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "card3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard3() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private readonly static global::Texas.Protocol.HandType TypeDefaultValue = global::Texas.Protocol.HandType.TypeNone;

    private global::Texas.Protocol.HandType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandType Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 6;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0 success -1 状态不可看牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 32) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpSeeCardRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpSeeCardRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Card1 != other.Card1) return false;
      if (Card2 != other.Card2) return false;
      if (Card3 != other.Card3) return false;
      if (Type != other.Type) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasCard1) hash ^= Card1.GetHashCode();
      if (HasCard2) hash ^= Card2.GetHashCode();
      if (HasCard3) hash ^= Card3.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasCard1) {
        output.WriteRawTag(16);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(24);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(32);
        output.WriteInt32(Card3);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (HasCode) {
        output.WriteRawTag(48);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasCard1) {
        output.WriteRawTag(16);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(24);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(32);
        output.WriteInt32(Card3);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (HasCode) {
        output.WriteRawTag(48);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasCard1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card1);
      }
      if (HasCard2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card2);
      }
      if (HasCard3) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card3);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpSeeCardRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasCard1) {
        Card1 = other.Card1;
      }
      if (other.HasCard2) {
        Card2 = other.Card2;
      }
      if (other.HasCard3) {
        Card3 = other.Card3;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Card1 = input.ReadInt32();
            break;
          }
          case 24: {
            Card2 = input.ReadInt32();
            break;
          }
          case 32: {
            Card3 = input.ReadInt32();
            break;
          }
          case 40: {
            Type = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 48: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Card1 = input.ReadInt32();
            break;
          }
          case 24: {
            Card2 = input.ReadInt32();
            break;
          }
          case 32: {
            Card3 = input.ReadInt32();
            break;
          }
          case 40: {
            Type = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 48: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpSeeCardBRC : pb::IMessage<TpSeeCardBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpSeeCardBRC> _parser = new pb::MessageParser<TpSeeCardBRC>(() => new TpSeeCardBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpSeeCardBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardBRC(TpSeeCardBRC other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSeeCardBRC Clone() {
      return new TpSeeCardBRC(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 2) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpSeeCardBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpSeeCardBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpSeeCardBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpActionRD : pb::IMessage<TpActionRD>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpActionRD> _parser = new pb::MessageParser<TpActionRD>(() => new TpActionRD());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpActionRD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionRD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionRD(TpActionRD other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      time_ = other.time_;
      type_ = other.type_;
      chips_ = other.chips_;
      uid_ = other.uid_;
      mstime_ = other.mstime_;
      isAllin_ = other.isAllin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionRD Clone() {
      return new TpActionRD(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private readonly static uint TimeDefaultValue = 0;

    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Time {
      get { if ((_hasBits0 & 2) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static global::Texas.Protocol.TpActionType TypeDefaultValue = global::Texas.Protocol.TpActionType.TpActionNone;

    private global::Texas.Protocol.TpActionType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpActionType Type {
      get { if ((_hasBits0 & 4) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 4;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 8) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 5;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 16) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "mstime" field.</summary>
    public const int MstimeFieldNumber = 6;
    private readonly static ulong MstimeDefaultValue = 0UL;

    private ulong mstime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Mstime {
      get { if ((_hasBits0 & 32) != 0) { return mstime_; } else { return MstimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        mstime_ = value;
      }
    }
    /// <summary>Gets whether the "mstime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMstime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "mstime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMstime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_allin" field.</summary>
    public const int IsAllinFieldNumber = 7;
    private readonly static bool IsAllinDefaultValue = false;

    private bool isAllin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAllin {
      get { if ((_hasBits0 & 64) != 0) { return isAllin_; } else { return IsAllinDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isAllin_ = value;
      }
    }
    /// <summary>Gets whether the "is_allin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAllin {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_allin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAllin() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpActionRD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpActionRD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Time != other.Time) return false;
      if (Type != other.Type) return false;
      if (Chips != other.Chips) return false;
      if (Uid != other.Uid) return false;
      if (Mstime != other.Mstime) return false;
      if (IsAllin != other.IsAllin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasMstime) hash ^= Mstime.GetHashCode();
      if (HasIsAllin) hash ^= IsAllin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasChips) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (HasUid) {
        output.WriteRawTag(40);
        output.WriteInt64(Uid);
      }
      if (HasMstime) {
        output.WriteRawTag(48);
        output.WriteUInt64(Mstime);
      }
      if (HasIsAllin) {
        output.WriteRawTag(56);
        output.WriteBool(IsAllin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasChips) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (HasUid) {
        output.WriteRawTag(40);
        output.WriteInt64(Uid);
      }
      if (HasMstime) {
        output.WriteRawTag(48);
        output.WriteUInt64(Mstime);
      }
      if (HasIsAllin) {
        output.WriteRawTag(56);
        output.WriteBool(IsAllin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasMstime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Mstime);
      }
      if (HasIsAllin) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpActionRD other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasMstime) {
        Mstime = other.Mstime;
      }
      if (other.HasIsAllin) {
        IsAllin = other.IsAllin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 40: {
            Uid = input.ReadInt64();
            break;
          }
          case 48: {
            Mstime = input.ReadUInt64();
            break;
          }
          case 56: {
            IsAllin = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = (global::Texas.Protocol.TpActionType) input.ReadEnum();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 40: {
            Uid = input.ReadInt64();
            break;
          }
          case 48: {
            Mstime = input.ReadUInt64();
            break;
          }
          case 56: {
            IsAllin = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpWinningInfo : pb::IMessage<TpWinningInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpWinningInfo> _parser = new pb::MessageParser<TpWinningInfo>(() => new TpWinningInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpWinningInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinningInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinningInfo(TpWinningInfo other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      poolid_ = other.poolid_;
      chips_ = other.chips_;
      type_ = other.type_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinningInfo Clone() {
      return new TpWinningInfo(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    /// <summary>
    ///座位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "poolid" field.</summary>
    public const int PoolidFieldNumber = 2;
    private readonly static int PoolidDefaultValue = 0;

    private int poolid_;
    /// <summary>
    ///奖池id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Poolid {
      get { if ((_hasBits0 & 2) != 0) { return poolid_; } else { return PoolidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        poolid_ = value;
      }
    }
    /// <summary>Gets whether the "poolid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPoolid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "poolid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPoolid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 3;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    /// <summary>
    ///奖励筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 4) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private readonly static global::Texas.Protocol.HandType TypeDefaultValue = global::Texas.Protocol.HandType.TypeNone;

    private global::Texas.Protocol.HandType type_;
    /// <summary>
    ///赢牌类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandType Type {
      get { if ((_hasBits0 & 8) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 5;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 16) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpWinningInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpWinningInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Poolid != other.Poolid) return false;
      if (Chips != other.Chips) return false;
      if (Type != other.Type) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasPoolid) hash ^= Poolid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasPoolid) {
        output.WriteRawTag(16);
        output.WriteInt32(Poolid);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (HasUid) {
        output.WriteRawTag(40);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasPoolid) {
        output.WriteRawTag(16);
        output.WriteInt32(Poolid);
      }
      if (HasChips) {
        output.WriteRawTag(24);
        output.WriteInt64(Chips);
      }
      if (HasType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (HasUid) {
        output.WriteRawTag(40);
        output.WriteInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasPoolid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Poolid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpWinningInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasPoolid) {
        Poolid = other.Poolid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Poolid = input.ReadInt32();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 32: {
            Type = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 40: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Poolid = input.ReadInt32();
            break;
          }
          case 24: {
            Chips = input.ReadInt64();
            break;
          }
          case 32: {
            Type = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
          case 40: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpWinningProfit : pb::IMessage<TpWinningProfit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpWinningProfit> _parser = new pb::MessageParser<TpWinningProfit>(() => new TpWinningProfit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpWinningProfit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinningProfit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinningProfit(TpWinningProfit other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      chips_ = other.chips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinningProfit Clone() {
      return new TpWinningProfit(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    /// <summary>
    ///盈利额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpWinningProfit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpWinningProfit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Chips != other.Chips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpWinningProfit other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpWinnerRSP : pb::IMessage<TpWinnerRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpWinnerRSP> _parser = new pb::MessageParser<TpWinnerRSP>(() => new TpWinnerRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpWinnerRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinnerRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinnerRSP(TpWinnerRSP other) : this() {
      winner_ = other.winner_.Clone();
      profit_ = other.profit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpWinnerRSP Clone() {
      return new TpWinnerRSP(this);
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TpWinningInfo> _repeated_winner_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.TpWinningInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TpWinningInfo> winner_ = new pbc::RepeatedField<global::Texas.Protocol.TpWinningInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TpWinningInfo> Winner {
      get { return winner_; }
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TpWinningProfit> _repeated_profit_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.TpWinningProfit.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TpWinningProfit> profit_ = new pbc::RepeatedField<global::Texas.Protocol.TpWinningProfit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TpWinningProfit> Profit {
      get { return profit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpWinnerRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpWinnerRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!winner_.Equals(other.winner_)) return false;
      if(!profit_.Equals(other.profit_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= winner_.GetHashCode();
      hash ^= profit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      winner_.WriteTo(output, _repeated_winner_codec);
      profit_.WriteTo(output, _repeated_profit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      winner_.WriteTo(ref output, _repeated_winner_codec);
      profit_.WriteTo(ref output, _repeated_profit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += winner_.CalculateSize(_repeated_winner_codec);
      size += profit_.CalculateSize(_repeated_profit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpWinnerRSP other) {
      if (other == null) {
        return;
      }
      winner_.Add(other.winner_);
      profit_.Add(other.profit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            winner_.AddEntriesFrom(input, _repeated_winner_codec);
            break;
          }
          case 18: {
            profit_.AddEntriesFrom(input, _repeated_profit_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            winner_.AddEntriesFrom(ref input, _repeated_winner_codec);
            break;
          }
          case 18: {
            profit_.AddEntriesFrom(ref input, _repeated_profit_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpShowHandInfo : pb::IMessage<TpShowHandInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpShowHandInfo> _parser = new pb::MessageParser<TpShowHandInfo>(() => new TpShowHandInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpShowHandInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpShowHandInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpShowHandInfo(TpShowHandInfo other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      card1_ = other.card1_;
      card2_ = other.card2_;
      card3_ = other.card3_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpShowHandInfo Clone() {
      return new TpShowHandInfo(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    /// <summary>
    ///座位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "card1" field.</summary>
    public const int Card1FieldNumber = 2;
    private readonly static int Card1DefaultValue = 0;

    private int card1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card1 {
      get { if ((_hasBits0 & 2) != 0) { return card1_; } else { return Card1DefaultValue; } }
      set {
        _hasBits0 |= 2;
        card1_ = value;
      }
    }
    /// <summary>Gets whether the "card1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard1 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "card1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard1() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "card2" field.</summary>
    public const int Card2FieldNumber = 3;
    private readonly static int Card2DefaultValue = 0;

    private int card2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card2 {
      get { if ((_hasBits0 & 4) != 0) { return card2_; } else { return Card2DefaultValue; } }
      set {
        _hasBits0 |= 4;
        card2_ = value;
      }
    }
    /// <summary>Gets whether the "card2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard2 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "card2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard2() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "card3" field.</summary>
    public const int Card3FieldNumber = 4;
    private readonly static int Card3DefaultValue = 0;

    private int card3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Card3 {
      get { if ((_hasBits0 & 8) != 0) { return card3_; } else { return Card3DefaultValue; } }
      set {
        _hasBits0 |= 8;
        card3_ = value;
      }
    }
    /// <summary>Gets whether the "card3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCard3 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "card3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCard3() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private readonly static global::Texas.Protocol.HandType TypeDefaultValue = global::Texas.Protocol.HandType.TypeNone;

    private global::Texas.Protocol.HandType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.HandType Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpShowHandInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpShowHandInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Card1 != other.Card1) return false;
      if (Card2 != other.Card2) return false;
      if (Card3 != other.Card3) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasCard1) hash ^= Card1.GetHashCode();
      if (HasCard2) hash ^= Card2.GetHashCode();
      if (HasCard3) hash ^= Card3.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasCard1) {
        output.WriteRawTag(16);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(24);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(32);
        output.WriteInt32(Card3);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasCard1) {
        output.WriteRawTag(16);
        output.WriteInt32(Card1);
      }
      if (HasCard2) {
        output.WriteRawTag(24);
        output.WriteInt32(Card2);
      }
      if (HasCard3) {
        output.WriteRawTag(32);
        output.WriteInt32(Card3);
      }
      if (HasType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasCard1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card1);
      }
      if (HasCard2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card2);
      }
      if (HasCard3) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card3);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpShowHandInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasCard1) {
        Card1 = other.Card1;
      }
      if (other.HasCard2) {
        Card2 = other.Card2;
      }
      if (other.HasCard3) {
        Card3 = other.Card3;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Card1 = input.ReadInt32();
            break;
          }
          case 24: {
            Card2 = input.ReadInt32();
            break;
          }
          case 32: {
            Card3 = input.ReadInt32();
            break;
          }
          case 40: {
            Type = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Card1 = input.ReadInt32();
            break;
          }
          case 24: {
            Card2 = input.ReadInt32();
            break;
          }
          case 32: {
            Card3 = input.ReadInt32();
            break;
          }
          case 40: {
            Type = (global::Texas.Protocol.HandType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpShowHandRSP : pb::IMessage<TpShowHandRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpShowHandRSP> _parser = new pb::MessageParser<TpShowHandRSP>(() => new TpShowHandRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpShowHandRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpShowHandRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpShowHandRSP(TpShowHandRSP other) : this() {
      info_ = other.info_.Clone();
      winnerSeatid_ = other.winnerSeatid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpShowHandRSP Clone() {
      return new TpShowHandRSP(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TpShowHandInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.TpShowHandInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TpShowHandInfo> info_ = new pbc::RepeatedField<global::Texas.Protocol.TpShowHandInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TpShowHandInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "winner_seatid" field.</summary>
    public const int WinnerSeatidFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_winnerSeatid_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> winnerSeatid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> WinnerSeatid {
      get { return winnerSeatid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpShowHandRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpShowHandRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      if(!winnerSeatid_.Equals(other.winnerSeatid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      hash ^= winnerSeatid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      info_.WriteTo(output, _repeated_info_codec);
      winnerSeatid_.WriteTo(output, _repeated_winnerSeatid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      info_.WriteTo(ref output, _repeated_info_codec);
      winnerSeatid_.WriteTo(ref output, _repeated_winnerSeatid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      size += winnerSeatid_.CalculateSize(_repeated_winnerSeatid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpShowHandRSP other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      winnerSeatid_.Add(other.winnerSeatid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 18:
          case 16: {
            winnerSeatid_.AddEntriesFrom(input, _repeated_winnerSeatid_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
          case 18:
          case 16: {
            winnerSeatid_.AddEntriesFrom(ref input, _repeated_winnerSeatid_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///广播通知牌桌内的玩家，ack_seatid 的玩家需要作出回应
  /// </summary>
  public sealed partial class TpCompareHandNotify : pb::IMessage<TpCompareHandNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpCompareHandNotify> _parser = new pb::MessageParser<TpCompareHandNotify>(() => new TpCompareHandNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpCompareHandNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandNotify(TpCompareHandNotify other) : this() {
      _hasBits0 = other._hasBits0;
      reqSeatid_ = other.reqSeatid_;
      ackSeatid_ = other.ackSeatid_;
      compareTime_ = other.compareTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandNotify Clone() {
      return new TpCompareHandNotify(this);
    }

    /// <summary>Field number for the "req_seatid" field.</summary>
    public const int ReqSeatidFieldNumber = 1;
    private readonly static int ReqSeatidDefaultValue = 0;

    private int reqSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSeatid {
      get { if ((_hasBits0 & 1) != 0) { return reqSeatid_; } else { return ReqSeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reqSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "req_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "req_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ack_seatid" field.</summary>
    public const int AckSeatidFieldNumber = 2;
    private readonly static int AckSeatidDefaultValue = 0;

    private int ackSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckSeatid {
      get { if ((_hasBits0 & 2) != 0) { return ackSeatid_; } else { return AckSeatidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ackSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "ack_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAckSeatid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ack_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAckSeatid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "compare_time" field.</summary>
    public const int CompareTimeFieldNumber = 3;
    private readonly static int CompareTimeDefaultValue = 0;

    private int compareTime_;
    /// <summary>
    ///seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CompareTime {
      get { if ((_hasBits0 & 4) != 0) { return compareTime_; } else { return CompareTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        compareTime_ = value;
      }
    }
    /// <summary>Gets whether the "compare_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompareTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "compare_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompareTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpCompareHandNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpCompareHandNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqSeatid != other.ReqSeatid) return false;
      if (AckSeatid != other.AckSeatid) return false;
      if (CompareTime != other.CompareTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReqSeatid) hash ^= ReqSeatid.GetHashCode();
      if (HasAckSeatid) hash ^= AckSeatid.GetHashCode();
      if (HasCompareTime) hash ^= CompareTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReqSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSeatid);
      }
      if (HasCompareTime) {
        output.WriteRawTag(24);
        output.WriteInt32(CompareTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReqSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSeatid);
      }
      if (HasCompareTime) {
        output.WriteRawTag(24);
        output.WriteInt32(CompareTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReqSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqSeatid);
      }
      if (HasAckSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckSeatid);
      }
      if (HasCompareTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompareTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpCompareHandNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasReqSeatid) {
        ReqSeatid = other.ReqSeatid;
      }
      if (other.HasAckSeatid) {
        AckSeatid = other.AckSeatid;
      }
      if (other.HasCompareTime) {
        CompareTime = other.CompareTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            AckSeatid = input.ReadInt32();
            break;
          }
          case 24: {
            CompareTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            AckSeatid = input.ReadInt32();
            break;
          }
          case 24: {
            CompareTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpCompareHandActionREQ : pb::IMessage<TpCompareHandActionREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpCompareHandActionREQ> _parser = new pb::MessageParser<TpCompareHandActionREQ>(() => new TpCompareHandActionREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpCompareHandActionREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionREQ(TpCompareHandActionREQ other) : this() {
      _hasBits0 = other._hasBits0;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionREQ Clone() {
      return new TpCompareHandActionREQ(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    /// <summary>
    ///1 agree 2 denny
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpCompareHandActionREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpCompareHandActionREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpCompareHandActionREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpCompareHandActionBRC : pb::IMessage<TpCompareHandActionBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpCompareHandActionBRC> _parser = new pb::MessageParser<TpCompareHandActionBRC>(() => new TpCompareHandActionBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpCompareHandActionBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionBRC(TpCompareHandActionBRC other) : this() {
      _hasBits0 = other._hasBits0;
      status_ = other.status_;
      reqSeatid_ = other.reqSeatid_;
      ackSeatid_ = other.ackSeatid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionBRC Clone() {
      return new TpCompareHandActionBRC(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static int StatusDefaultValue = 0;

    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "req_seatid" field.</summary>
    public const int ReqSeatidFieldNumber = 2;
    private readonly static int ReqSeatidDefaultValue = 0;

    private int reqSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSeatid {
      get { if ((_hasBits0 & 2) != 0) { return reqSeatid_; } else { return ReqSeatidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reqSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "req_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqSeatid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "req_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqSeatid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ack_seatid" field.</summary>
    public const int AckSeatidFieldNumber = 3;
    private readonly static int AckSeatidDefaultValue = 0;

    private int ackSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckSeatid {
      get { if ((_hasBits0 & 4) != 0) { return ackSeatid_; } else { return AckSeatidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ackSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "ack_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAckSeatid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ack_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAckSeatid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpCompareHandActionBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpCompareHandActionBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ReqSeatid != other.ReqSeatid) return false;
      if (AckSeatid != other.AckSeatid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasReqSeatid) hash ^= ReqSeatid.GetHashCode();
      if (HasAckSeatid) hash ^= AckSeatid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (HasReqSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(24);
        output.WriteInt32(AckSeatid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (HasReqSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(24);
        output.WriteInt32(AckSeatid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (HasReqSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqSeatid);
      }
      if (HasAckSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckSeatid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpCompareHandActionBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasReqSeatid) {
        ReqSeatid = other.ReqSeatid;
      }
      if (other.HasAckSeatid) {
        AckSeatid = other.AckSeatid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 24: {
            AckSeatid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 24: {
            AckSeatid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpCompareHandActionRSP : pb::IMessage<TpCompareHandActionRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpCompareHandActionRSP> _parser = new pb::MessageParser<TpCompareHandActionRSP>(() => new TpCompareHandActionRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpCompareHandActionRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionRSP(TpCompareHandActionRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandActionRSP Clone() {
      return new TpCompareHandActionRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///-1 超时或无权限 失败才应答
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpCompareHandActionRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpCompareHandActionRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpCompareHandActionRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpCompareHandResultNotify : pb::IMessage<TpCompareHandResultNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpCompareHandResultNotify> _parser = new pb::MessageParser<TpCompareHandResultNotify>(() => new TpCompareHandResultNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpCompareHandResultNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandResultNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandResultNotify(TpCompareHandResultNotify other) : this() {
      _hasBits0 = other._hasBits0;
      reqSeatid_ = other.reqSeatid_;
      ackSeatid_ = other.ackSeatid_;
      winnerSeatid_ = other.winnerSeatid_;
      reqHand_ = other.reqHand_ != null ? other.reqHand_.Clone() : null;
      ackHand_ = other.ackHand_ != null ? other.ackHand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandResultNotify Clone() {
      return new TpCompareHandResultNotify(this);
    }

    /// <summary>Field number for the "req_seatid" field.</summary>
    public const int ReqSeatidFieldNumber = 1;
    private readonly static int ReqSeatidDefaultValue = 0;

    private int reqSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSeatid {
      get { if ((_hasBits0 & 1) != 0) { return reqSeatid_; } else { return ReqSeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reqSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "req_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "req_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ack_seatid" field.</summary>
    public const int AckSeatidFieldNumber = 2;
    private readonly static int AckSeatidDefaultValue = 0;

    private int ackSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckSeatid {
      get { if ((_hasBits0 & 2) != 0) { return ackSeatid_; } else { return AckSeatidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ackSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "ack_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAckSeatid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ack_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAckSeatid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "winner_seatid" field.</summary>
    public const int WinnerSeatidFieldNumber = 3;
    private readonly static int WinnerSeatidDefaultValue = 0;

    private int winnerSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinnerSeatid {
      get { if ((_hasBits0 & 4) != 0) { return winnerSeatid_; } else { return WinnerSeatidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        winnerSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "winner_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinnerSeatid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "winner_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinnerSeatid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "req_hand" field.</summary>
    public const int ReqHandFieldNumber = 4;
    private global::Texas.Protocol.TpShowHandInfo reqHand_;
    /// <summary>
    ///这个字段只对参与比牌的玩家通知展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpShowHandInfo ReqHand {
      get { return reqHand_; }
      set {
        reqHand_ = value;
      }
    }

    /// <summary>Field number for the "ack_hand" field.</summary>
    public const int AckHandFieldNumber = 5;
    private global::Texas.Protocol.TpShowHandInfo ackHand_;
    /// <summary>
    ///这个字段只对参与比牌的玩家通知展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpShowHandInfo AckHand {
      get { return ackHand_; }
      set {
        ackHand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpCompareHandResultNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpCompareHandResultNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqSeatid != other.ReqSeatid) return false;
      if (AckSeatid != other.AckSeatid) return false;
      if (WinnerSeatid != other.WinnerSeatid) return false;
      if (!object.Equals(ReqHand, other.ReqHand)) return false;
      if (!object.Equals(AckHand, other.AckHand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReqSeatid) hash ^= ReqSeatid.GetHashCode();
      if (HasAckSeatid) hash ^= AckSeatid.GetHashCode();
      if (HasWinnerSeatid) hash ^= WinnerSeatid.GetHashCode();
      if (reqHand_ != null) hash ^= ReqHand.GetHashCode();
      if (ackHand_ != null) hash ^= AckHand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReqSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSeatid);
      }
      if (HasWinnerSeatid) {
        output.WriteRawTag(24);
        output.WriteInt32(WinnerSeatid);
      }
      if (reqHand_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReqHand);
      }
      if (ackHand_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AckHand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReqSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSeatid);
      }
      if (HasWinnerSeatid) {
        output.WriteRawTag(24);
        output.WriteInt32(WinnerSeatid);
      }
      if (reqHand_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReqHand);
      }
      if (ackHand_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AckHand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReqSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqSeatid);
      }
      if (HasAckSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckSeatid);
      }
      if (HasWinnerSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerSeatid);
      }
      if (reqHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReqHand);
      }
      if (ackHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AckHand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpCompareHandResultNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasReqSeatid) {
        ReqSeatid = other.ReqSeatid;
      }
      if (other.HasAckSeatid) {
        AckSeatid = other.AckSeatid;
      }
      if (other.HasWinnerSeatid) {
        WinnerSeatid = other.WinnerSeatid;
      }
      if (other.reqHand_ != null) {
        if (reqHand_ == null) {
          ReqHand = new global::Texas.Protocol.TpShowHandInfo();
        }
        ReqHand.MergeFrom(other.ReqHand);
      }
      if (other.ackHand_ != null) {
        if (ackHand_ == null) {
          AckHand = new global::Texas.Protocol.TpShowHandInfo();
        }
        AckHand.MergeFrom(other.AckHand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            AckSeatid = input.ReadInt32();
            break;
          }
          case 24: {
            WinnerSeatid = input.ReadInt32();
            break;
          }
          case 34: {
            if (reqHand_ == null) {
              ReqHand = new global::Texas.Protocol.TpShowHandInfo();
            }
            input.ReadMessage(ReqHand);
            break;
          }
          case 42: {
            if (ackHand_ == null) {
              AckHand = new global::Texas.Protocol.TpShowHandInfo();
            }
            input.ReadMessage(AckHand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            AckSeatid = input.ReadInt32();
            break;
          }
          case 24: {
            WinnerSeatid = input.ReadInt32();
            break;
          }
          case 34: {
            if (reqHand_ == null) {
              ReqHand = new global::Texas.Protocol.TpShowHandInfo();
            }
            input.ReadMessage(ReqHand);
            break;
          }
          case 42: {
            if (ackHand_ == null) {
              AckHand = new global::Texas.Protocol.TpShowHandInfo();
            }
            input.ReadMessage(AckHand);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpCompareHandCancelNotify : pb::IMessage<TpCompareHandCancelNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpCompareHandCancelNotify> _parser = new pb::MessageParser<TpCompareHandCancelNotify>(() => new TpCompareHandCancelNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpCompareHandCancelNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandCancelNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandCancelNotify(TpCompareHandCancelNotify other) : this() {
      _hasBits0 = other._hasBits0;
      reqSeatid_ = other.reqSeatid_;
      ackSeatid_ = other.ackSeatid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpCompareHandCancelNotify Clone() {
      return new TpCompareHandCancelNotify(this);
    }

    /// <summary>Field number for the "req_seatid" field.</summary>
    public const int ReqSeatidFieldNumber = 1;
    private readonly static int ReqSeatidDefaultValue = 0;

    private int reqSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqSeatid {
      get { if ((_hasBits0 & 1) != 0) { return reqSeatid_; } else { return ReqSeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reqSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "req_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "req_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ack_seatid" field.</summary>
    public const int AckSeatidFieldNumber = 2;
    private readonly static int AckSeatidDefaultValue = 0;

    private int ackSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckSeatid {
      get { if ((_hasBits0 & 2) != 0) { return ackSeatid_; } else { return AckSeatidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ackSeatid_ = value;
      }
    }
    /// <summary>Gets whether the "ack_seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAckSeatid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ack_seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAckSeatid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpCompareHandCancelNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpCompareHandCancelNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqSeatid != other.ReqSeatid) return false;
      if (AckSeatid != other.AckSeatid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReqSeatid) hash ^= ReqSeatid.GetHashCode();
      if (HasAckSeatid) hash ^= AckSeatid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReqSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSeatid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReqSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqSeatid);
      }
      if (HasAckSeatid) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSeatid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReqSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqSeatid);
      }
      if (HasAckSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckSeatid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpCompareHandCancelNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasReqSeatid) {
        ReqSeatid = other.ReqSeatid;
      }
      if (other.HasAckSeatid) {
        AckSeatid = other.AckSeatid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            AckSeatid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            AckSeatid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpPlayerHands : pb::IMessage<TpPlayerHands>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpPlayerHands> _parser = new pb::MessageParser<TpPlayerHands>(() => new TpPlayerHands());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpPlayerHands> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpPlayerHands() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpPlayerHands(TpPlayerHands other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      name_ = other.name_;
      cards_ = other.cards_.Clone();
      profit_ = other.profit_;
      position_ = other.position_;
      bIsShow_ = other.bIsShow_;
      iBeginChip_ = other.iBeginChip_;
      playStatus_ = other.playStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpPlayerHands Clone() {
      return new TpPlayerHands(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_cards_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> cards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 4;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 2) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 2;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private readonly static int PositionDefaultValue = 0;

    private int position_;
    /// <summary>
    ///0庄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Position {
      get { if ((_hasBits0 & 4) != 0) { return position_; } else { return PositionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        position_ = value;
      }
    }
    /// <summary>Gets whether the "position" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPosition {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "position" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPosition() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bIsShow" field.</summary>
    public const int BIsShowFieldNumber = 6;
    private readonly static bool BIsShowDefaultValue = false;

    private bool bIsShow_;
    /// <summary>
    /// 参与比牌的亮牌，参与sideshow的也亮牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BIsShow {
      get { if ((_hasBits0 & 8) != 0) { return bIsShow_; } else { return BIsShowDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bIsShow_ = value;
      }
    }
    /// <summary>Gets whether the "bIsShow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBIsShow {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bIsShow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBIsShow() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "iBeginChip" field.</summary>
    public const int IBeginChipFieldNumber = 7;
    private readonly static long IBeginChipDefaultValue = 0L;

    private long iBeginChip_;
    /// <summary>
    /// 开局前玩家筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IBeginChip {
      get { if ((_hasBits0 & 16) != 0) { return iBeginChip_; } else { return IBeginChipDefaultValue; } }
      set {
        _hasBits0 |= 16;
        iBeginChip_ = value;
      }
    }
    /// <summary>Gets whether the "iBeginChip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIBeginChip {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "iBeginChip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIBeginChip() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "play_status" field.</summary>
    public const int PlayStatusFieldNumber = 8;
    private readonly static global::Texas.Protocol.UserPlayStatus PlayStatusDefaultValue = global::Texas.Protocol.UserPlayStatus.NotIn;

    private global::Texas.Protocol.UserPlayStatus playStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserPlayStatus PlayStatus {
      get { if ((_hasBits0 & 32) != 0) { return playStatus_; } else { return PlayStatusDefaultValue; } }
      set {
        _hasBits0 |= 32;
        playStatus_ = value;
      }
    }
    /// <summary>Gets whether the "play_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlayStatus {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "play_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlayStatus() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpPlayerHands);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpPlayerHands other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (Profit != other.Profit) return false;
      if (Position != other.Position) return false;
      if (BIsShow != other.BIsShow) return false;
      if (IBeginChip != other.IBeginChip) return false;
      if (PlayStatus != other.PlayStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (HasBIsShow) hash ^= BIsShow.GetHashCode();
      if (HasIBeginChip) hash ^= IBeginChip.GetHashCode();
      if (HasPlayStatus) hash ^= PlayStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (HasProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(Profit);
      }
      if (HasPosition) {
        output.WriteRawTag(40);
        output.WriteInt32(Position);
      }
      if (HasBIsShow) {
        output.WriteRawTag(48);
        output.WriteBool(BIsShow);
      }
      if (HasIBeginChip) {
        output.WriteRawTag(56);
        output.WriteInt64(IBeginChip);
      }
      if (HasPlayStatus) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PlayStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (HasProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(Profit);
      }
      if (HasPosition) {
        output.WriteRawTag(40);
        output.WriteInt32(Position);
      }
      if (HasBIsShow) {
        output.WriteRawTag(48);
        output.WriteBool(BIsShow);
      }
      if (HasIBeginChip) {
        output.WriteRawTag(56);
        output.WriteInt64(IBeginChip);
      }
      if (HasPlayStatus) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PlayStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (HasPosition) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (HasBIsShow) {
        size += 1 + 1;
      }
      if (HasIBeginChip) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IBeginChip);
      }
      if (HasPlayStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpPlayerHands other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      cards_.Add(other.cards_);
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      if (other.HasPosition) {
        Position = other.Position;
      }
      if (other.HasBIsShow) {
        BIsShow = other.BIsShow;
      }
      if (other.HasIBeginChip) {
        IBeginChip = other.IBeginChip;
      }
      if (other.HasPlayStatus) {
        PlayStatus = other.PlayStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 32: {
            Profit = input.ReadInt64();
            break;
          }
          case 40: {
            Position = input.ReadInt32();
            break;
          }
          case 48: {
            BIsShow = input.ReadBool();
            break;
          }
          case 56: {
            IBeginChip = input.ReadInt64();
            break;
          }
          case 64: {
            PlayStatus = (global::Texas.Protocol.UserPlayStatus) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
          case 32: {
            Profit = input.ReadInt64();
            break;
          }
          case 40: {
            Position = input.ReadInt32();
            break;
          }
          case 48: {
            BIsShow = input.ReadBool();
            break;
          }
          case 56: {
            IBeginChip = input.ReadInt64();
            break;
          }
          case 64: {
            PlayStatus = (global::Texas.Protocol.UserPlayStatus) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpHandsInfo : pb::IMessage<TpHandsInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpHandsInfo> _parser = new pb::MessageParser<TpHandsInfo>(() => new TpHandsInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpHandsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfo(TpHandsInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      hands_ = other.hands_.Clone();
      iStartTime_ = other.iStartTime_;
      iAnte_ = other.iAnte_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfo Clone() {
      return new TpHandsInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TpPlayerHands> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.TpPlayerHands.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TpPlayerHands> hands_ = new pbc::RepeatedField<global::Texas.Protocol.TpPlayerHands>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TpPlayerHands> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "iStartTime" field.</summary>
    public const int IStartTimeFieldNumber = 3;
    private readonly static long IStartTimeDefaultValue = 0L;

    private long iStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IStartTime {
      get { if ((_hasBits0 & 1) != 0) { return iStartTime_; } else { return IStartTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        iStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "iStartTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIStartTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "iStartTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIStartTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "iAnte" field.</summary>
    public const int IAnteFieldNumber = 4;
    private readonly static long IAnteDefaultValue = 0L;

    private long iAnte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IAnte {
      get { if ((_hasBits0 & 2) != 0) { return iAnte_; } else { return IAnteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        iAnte_ = value;
      }
    }
    /// <summary>Gets whether the "iAnte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIAnte {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "iAnte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIAnte() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpHandsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpHandsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if (IStartTime != other.IStartTime) return false;
      if (IAnte != other.IAnte) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= hands_.GetHashCode();
      if (HasIStartTime) hash ^= IStartTime.GetHashCode();
      if (HasIAnte) hash ^= IAnte.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      if (HasIStartTime) {
        output.WriteRawTag(24);
        output.WriteInt64(IStartTime);
      }
      if (HasIAnte) {
        output.WriteRawTag(32);
        output.WriteInt64(IAnte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      hands_.WriteTo(ref output, _repeated_hands_codec);
      if (HasIStartTime) {
        output.WriteRawTag(24);
        output.WriteInt64(IStartTime);
      }
      if (HasIAnte) {
        output.WriteRawTag(32);
        output.WriteInt64(IAnte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (HasIStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IStartTime);
      }
      if (HasIAnte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IAnte);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpHandsInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      hands_.Add(other.hands_);
      if (other.HasIStartTime) {
        IStartTime = other.IStartTime;
      }
      if (other.HasIAnte) {
        IAnte = other.IAnte;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 24: {
            IStartTime = input.ReadInt64();
            break;
          }
          case 32: {
            IAnte = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            hands_.AddEntriesFrom(ref input, _repeated_hands_codec);
            break;
          }
          case 24: {
            IStartTime = input.ReadInt64();
            break;
          }
          case 32: {
            IAnte = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpHandsInfoREQ : pb::IMessage<TpHandsInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpHandsInfoREQ> _parser = new pb::MessageParser<TpHandsInfoREQ>(() => new TpHandsInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpHandsInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfoREQ(TpHandsInfoREQ other) : this() {
      gameIds_ = other.gameIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfoREQ Clone() {
      return new TpHandsInfoREQ(this);
    }

    /// <summary>Field number for the "game_ids" field.</summary>
    public const int GameIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gameIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gameIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 需要哪些gameid详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> GameIds {
      get { return gameIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpHandsInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpHandsInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameIds_.Equals(other.gameIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gameIds_.WriteTo(output, _repeated_gameIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gameIds_.WriteTo(ref output, _repeated_gameIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += gameIds_.CalculateSize(_repeated_gameIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpHandsInfoREQ other) {
      if (other == null) {
        return;
      }
      gameIds_.Add(other.gameIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameIds_.AddEntriesFrom(input, _repeated_gameIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gameIds_.AddEntriesFrom(ref input, _repeated_gameIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpHandsInfoRSP : pb::IMessage<TpHandsInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpHandsInfoRSP> _parser = new pb::MessageParser<TpHandsInfoRSP>(() => new TpHandsInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpHandsInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfoRSP(TpHandsInfoRSP other) : this() {
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpHandsInfoRSP Clone() {
      return new TpHandsInfoRSP(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.TpHandsInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.TpHandsInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.TpHandsInfo> info_ = new pbc::RepeatedField<global::Texas.Protocol.TpHandsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.TpHandsInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpHandsInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpHandsInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      info_.WriteTo(ref output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpHandsInfoRSP other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpActionNotifyBRC : pb::IMessage<TpActionNotifyBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpActionNotifyBRC> _parser = new pb::MessageParser<TpActionNotifyBRC>(() => new TpActionNotifyBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpActionNotifyBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionNotifyBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionNotifyBRC(TpActionNotifyBRC other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      callNeedChips_ = other.callNeedChips_;
      maxChipin_ = other.maxChipin_;
      canShow_ = other.canShow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpActionNotifyBRC Clone() {
      return new TpActionNotifyBRC(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "call_need_chips" field.</summary>
    public const int CallNeedChipsFieldNumber = 2;
    private readonly static long CallNeedChipsDefaultValue = 0L;

    private long callNeedChips_;
    /// <summary>
    ///跟注需要的筹码，有可能比手上的筹码多,看牌的玩家前端判断要double
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CallNeedChips {
      get { if ((_hasBits0 & 2) != 0) { return callNeedChips_; } else { return CallNeedChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        callNeedChips_ = value;
      }
    }
    /// <summary>Gets whether the "call_need_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCallNeedChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "call_need_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCallNeedChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_chipin" field.</summary>
    public const int MaxChipinFieldNumber = 3;
    private readonly static long MaxChipinDefaultValue = 0L;

    private long maxChipin_;
    /// <summary>
    ///可以下的最大筹码量,看牌的玩家要double
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxChipin {
      get { if ((_hasBits0 & 4) != 0) { return maxChipin_; } else { return MaxChipinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxChipin_ = value;
      }
    }
    /// <summary>Gets whether the "max_chipin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxChipin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_chipin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxChipin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "can_show" field.</summary>
    public const int CanShowFieldNumber = 4;
    private readonly static bool CanShowDefaultValue = false;

    private bool canShow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanShow {
      get { if ((_hasBits0 & 8) != 0) { return canShow_; } else { return CanShowDefaultValue; } }
      set {
        _hasBits0 |= 8;
        canShow_ = value;
      }
    }
    /// <summary>Gets whether the "can_show" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanShow {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "can_show" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanShow() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpActionNotifyBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpActionNotifyBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (CallNeedChips != other.CallNeedChips) return false;
      if (MaxChipin != other.MaxChipin) return false;
      if (CanShow != other.CanShow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasCallNeedChips) hash ^= CallNeedChips.GetHashCode();
      if (HasMaxChipin) hash ^= MaxChipin.GetHashCode();
      if (HasCanShow) hash ^= CanShow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasCallNeedChips) {
        output.WriteRawTag(16);
        output.WriteInt64(CallNeedChips);
      }
      if (HasMaxChipin) {
        output.WriteRawTag(24);
        output.WriteInt64(MaxChipin);
      }
      if (HasCanShow) {
        output.WriteRawTag(32);
        output.WriteBool(CanShow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasCallNeedChips) {
        output.WriteRawTag(16);
        output.WriteInt64(CallNeedChips);
      }
      if (HasMaxChipin) {
        output.WriteRawTag(24);
        output.WriteInt64(MaxChipin);
      }
      if (HasCanShow) {
        output.WriteRawTag(32);
        output.WriteBool(CanShow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasCallNeedChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallNeedChips);
      }
      if (HasMaxChipin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxChipin);
      }
      if (HasCanShow) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpActionNotifyBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasCallNeedChips) {
        CallNeedChips = other.CallNeedChips;
      }
      if (other.HasMaxChipin) {
        MaxChipin = other.MaxChipin;
      }
      if (other.HasCanShow) {
        CanShow = other.CanShow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            CallNeedChips = input.ReadInt64();
            break;
          }
          case 24: {
            MaxChipin = input.ReadInt64();
            break;
          }
          case 32: {
            CanShow = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            CallNeedChips = input.ReadInt64();
            break;
          }
          case 24: {
            MaxChipin = input.ReadInt64();
            break;
          }
          case 32: {
            CanShow = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpSitDownBRC : pb::IMessage<TpSitDownBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpSitDownBRC> _parser = new pb::MessageParser<TpSitDownBRC>(() => new TpSitDownBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpSitDownBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSitDownBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSitDownBRC(TpSitDownBRC other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      chips_ = other.chips_;
      brief_ = other.brief_ != null ? other.brief_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpSitDownBRC Clone() {
      return new TpSitDownBRC(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    /// <summary>
    ///历史遗漏字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "brief" field.</summary>
    public const int BriefFieldNumber = 3;
    private global::Texas.Protocol.UserBrief brief_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.UserBrief Brief {
      get { return brief_; }
      set {
        brief_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Texas.Protocol.TpSeatStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.TpSeatStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpSitDownBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpSitDownBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Chips != other.Chips) return false;
      if (!object.Equals(Brief, other.Brief)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (brief_ != null) hash ^= Brief.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (brief_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Brief);
      }
      if (status_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (brief_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Brief);
      }
      if (status_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (brief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brief);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpSitDownBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.brief_ != null) {
        if (brief_ == null) {
          Brief = new global::Texas.Protocol.UserBrief();
        }
        Brief.MergeFrom(other.Brief);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Texas.Protocol.TpSeatStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 26: {
            if (brief_ == null) {
              Brief = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Brief);
            break;
          }
          case 34: {
            if (status_ == null) {
              Status = new global::Texas.Protocol.TpSeatStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 26: {
            if (brief_ == null) {
              Brief = new global::Texas.Protocol.UserBrief();
            }
            input.ReadMessage(Brief);
            break;
          }
          case 34: {
            if (status_ == null) {
              Status = new global::Texas.Protocol.TpSeatStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TpUserLeaveInfoREQ : pb::IMessage<TpUserLeaveInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpUserLeaveInfoREQ> _parser = new pb::MessageParser<TpUserLeaveInfoREQ>(() => new TpUserLeaveInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpUserLeaveInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpUserLeaveInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpUserLeaveInfoREQ(TpUserLeaveInfoREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpUserLeaveInfoREQ Clone() {
      return new TpUserLeaveInfoREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpUserLeaveInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpUserLeaveInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpUserLeaveInfoREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class TpUserLeaveInfoRSP : pb::IMessage<TpUserLeaveInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TpUserLeaveInfoRSP> _parser = new pb::MessageParser<TpUserLeaveInfoRSP>(() => new TpUserLeaveInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TpUserLeaveInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.TpReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpUserLeaveInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpUserLeaveInfoRSP(TpUserLeaveInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      leaveTime_ = other.leaveTime_;
      userLastChips_ = other.userLastChips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TpUserLeaveInfoRSP Clone() {
      return new TpUserLeaveInfoRSP(this);
    }

    /// <summary>Field number for the "leave_time" field.</summary>
    public const int LeaveTimeFieldNumber = 1;
    private readonly static int LeaveTimeDefaultValue = 0;

    private int leaveTime_;
    /// <summary>
    ///玩家离桌多长时间(秒数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeaveTime {
      get { if ((_hasBits0 & 1) != 0) { return leaveTime_; } else { return LeaveTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leaveTime_ = value;
      }
    }
    /// <summary>Gets whether the "leave_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeaveTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leave_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeaveTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "user_last_chips" field.</summary>
    public const int UserLastChipsFieldNumber = 2;
    private readonly static long UserLastChipsDefaultValue = 0L;

    private long userLastChips_;
    /// <summary>
    ///玩家离桌时的筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UserLastChips {
      get { if ((_hasBits0 & 2) != 0) { return userLastChips_; } else { return UserLastChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        userLastChips_ = value;
      }
    }
    /// <summary>Gets whether the "user_last_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserLastChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "user_last_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserLastChips() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TpUserLeaveInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TpUserLeaveInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaveTime != other.LeaveTime) return false;
      if (UserLastChips != other.UserLastChips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeaveTime) hash ^= LeaveTime.GetHashCode();
      if (HasUserLastChips) hash ^= UserLastChips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeaveTime) {
        output.WriteRawTag(8);
        output.WriteInt32(LeaveTime);
      }
      if (HasUserLastChips) {
        output.WriteRawTag(16);
        output.WriteInt64(UserLastChips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeaveTime) {
        output.WriteRawTag(8);
        output.WriteInt32(LeaveTime);
      }
      if (HasUserLastChips) {
        output.WriteRawTag(16);
        output.WriteInt64(UserLastChips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeaveTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveTime);
      }
      if (HasUserLastChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserLastChips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TpUserLeaveInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasLeaveTime) {
        LeaveTime = other.LeaveTime;
      }
      if (other.HasUserLastChips) {
        UserLastChips = other.UserLastChips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeaveTime = input.ReadInt32();
            break;
          }
          case 16: {
            UserLastChips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeaveTime = input.ReadInt32();
            break;
          }
          case 16: {
            UserLastChips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
