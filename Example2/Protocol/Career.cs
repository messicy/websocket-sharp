// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: career.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from career.proto</summary>
  public static partial class CareerReflection {

    #region Descriptor
    /// <summary>File descriptor for career.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CareerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxjYXJlZXIucHJvdG8aCXBiMS5wcm90bxoKYmFzZS5wcm90bxoQbHVja3lf",
            "ZHJhdy5wcm90byLgDwoMUGVyc29uYWxEYXRhEhYKCWhhbmRzX251bRgBIAEo",
            "DUgAiAEBEhQKB3NldF9udW0YAiABKA1IAYgBARITCgZwcm9maXQYAyABKANI",
            "AogBARISCgVidXlpbhgEIAEoA0gDiAEBEhMKBmJhY2t1cBgFIAEoA0gEiAEB",
            "EhAKA2ZlZRgGIAEoA0gFiAEBEhUKCHZwaXBfbnVtGAcgASgNSAaIAQESGQoM",
            "dnBpcF93aW5fbnVtGAggASgNSAeIAQESFQoId3RzZF9udW0YCSABKA1ICIgB",
            "ARIZCgx3dHNkX3dpbl9udW0YCiABKA1ICYgBARIUCgdwZnJfbnVtGAsgASgN",
            "SAqIAQESFQoIYmV0M19udW0YDCABKA1IC4gBARIVCghiZXRjX251bRgNIAEo",
            "DUgMiAEBEhQKB3dpbl9udW0YDiABKA1IDYgBARIVCghmbG9wX251bRgPIAEo",
            "DUgOiAEBEiQKF3ByZV9mbG9wX2xhc3RfcmFpc2VfbnVtGBAgASgNSA+IAQES",
            "JgoZcHJlX2Zsb3Bfc2Vjb25kX3JhaXNlX251bRgRIAEoDUgQiAEBEh0KEGZv",
            "bGRfdG9fM2JldF9udW0YEiABKA1IEYgBARIdChBmYWNlX3RvXzNiZXRfbnVt",
            "GBMgASgNSBKIAQESHAoPc3RlYWxfcmFpc2VfbnVtGBQgASgNSBOIAQESGgoN",
            "c3RlYWxfcG9zX251bRgVIAEoDUgUiAEBEiEKFGZsb3BfY2hlY2tfcmFpc2Vf",
            "bnVtGBYgASgNSBWIAQESJwoaZmxvcF9jaGVja19iZWluZ19yYWlzZV9udW0Y",
            "FyABKA1IFogBARIdChBmb2xkX3RvX2NiZXRfbnVtGBggASgNSBeIAQESHQoQ",
            "ZmFjZV90b19jYmV0X251bRgZIAEoDUgYiAEBEhgKC2ZhbnRhc3lfbnVtGBog",
            "ASgNSBmIAQESGgoNcmVmYW50YXN5X251bRgbIAEoDUgaiAEBEhMKBlFRX251",
            "bRgcIAEoDUgbiAEBEhMKBktLX251bRgdIAEoDUgciAEBEhMKBkFBX251bRge",
            "IAEoDUgdiAEBEhsKDnRocmVlX2tpbmRfbnVtGB8gASgNSB6IAQESGAoLcmVn",
            "dWxhcl9udW0YICABKA1IH4gBARIcCg9wcm9ncmVzc2l2ZV9udW0YISABKA1I",
            "IIgBARIZCgx1bHRpbWF0ZV9udW0YIiABKA1IIYgBARIdChB3aWxkX3JlZ3Vs",
            "YXJfbnVtGCMgASgNSCKIAQESIQoUd2lsZF9wcm9ncmVzc2l2ZV9udW0YJCAB",
            "KA1II4gBARIeChF3aWxkX3VsdGltYXRlX251bRglIAEoDUgkiAEBEhcKCnB1",
            "c295X3JhdGUYJiABKA1IJYgBARIaCg10b3RhbF9iZXR0aW5nGCcgASgDSCaI",
            "AQESGgoNYm9tYnBvdF90aW1lcxgoIAEoDUgniAEBEhoKDXRvbmdpdHNfdGlt",
            "ZXMYKSABKA1IKIgBARIZCgxoaXRwb3RfdGltZXMYKiABKA1IKYgBARIYCgtm",
            "aWdodF90aW1lcxgrIAEoDUgqiAEBEhwKD2NoYWxsZW5nZV90aW1lcxgsIAEo",
            "DUgriAEBEh4KEXRvbmdpdHNfdGllX3RpbWVzGC0gASgNSCyIAQFCDAoKX2hh",
            "bmRzX251bUIKCghfc2V0X251bUIJCgdfcHJvZml0QggKBl9idXlpbkIJCgdf",
            "YmFja3VwQgYKBF9mZWVCCwoJX3ZwaXBfbnVtQg8KDV92cGlwX3dpbl9udW1C",
            "CwoJX3d0c2RfbnVtQg8KDV93dHNkX3dpbl9udW1CCgoIX3Bmcl9udW1CCwoJ",
            "X2JldDNfbnVtQgsKCV9iZXRjX251bUIKCghfd2luX251bUILCglfZmxvcF9u",
            "dW1CGgoYX3ByZV9mbG9wX2xhc3RfcmFpc2VfbnVtQhwKGl9wcmVfZmxvcF9z",
            "ZWNvbmRfcmFpc2VfbnVtQhMKEV9mb2xkX3RvXzNiZXRfbnVtQhMKEV9mYWNl",
            "X3RvXzNiZXRfbnVtQhIKEF9zdGVhbF9yYWlzZV9udW1CEAoOX3N0ZWFsX3Bv",
            "c19udW1CFwoVX2Zsb3BfY2hlY2tfcmFpc2VfbnVtQh0KG19mbG9wX2NoZWNr",
            "X2JlaW5nX3JhaXNlX251bUITChFfZm9sZF90b19jYmV0X251bUITChFfZmFj",
            "ZV90b19jYmV0X251bUIOCgxfZmFudGFzeV9udW1CEAoOX3JlZmFudGFzeV9u",
            "dW1CCQoHX1FRX251bUIJCgdfS0tfbnVtQgkKB19BQV9udW1CEQoPX3RocmVl",
            "X2tpbmRfbnVtQg4KDF9yZWd1bGFyX251bUISChBfcHJvZ3Jlc3NpdmVfbnVt",
            "Qg8KDV91bHRpbWF0ZV9udW1CEwoRX3dpbGRfcmVndWxhcl9udW1CFwoVX3dp",
            "bGRfcHJvZ3Jlc3NpdmVfbnVtQhQKEl93aWxkX3VsdGltYXRlX251bUINCgtf",
            "cHVzb3lfcmF0ZUIQCg5fdG90YWxfYmV0dGluZ0IQCg5fYm9tYnBvdF90aW1l",
            "c0IQCg5fdG9uZ2l0c190aW1lc0IPCg1faGl0cG90X3RpbWVzQg4KDF9maWdo",
            "dF90aW1lc0ISChBfY2hhbGxlbmdlX3RpbWVzQhQKEl90b25naXRzX3RpZV90",
            "aW1lcyKWAQoQVXNlclRvdGFsRGF0YVJFURIQCgN1aWQYASABKANIAIgBARIW",
            "CglkYXRhX3R5cGUYAiABKAVIAYgBARIVCghyZXFfdHlwZRgDIAEoBUgCiAEB",
            "EhMKBnJvb21pZBgEIAEoBUgDiAEBQgYKBF91aWRCDAoKX2RhdGFfdHlwZUIL",
            "CglfcmVxX3R5cGVCCQoHX3Jvb21pZCKPAwoQVXNlclRvdGFsRGF0YVJTUBIQ",
            "CgN1aWQYASABKANIAIgBARIWCglkYXRhX3R5cGUYAiABKAVIAYgBARImCgp0",
            "b3RhbF9kYXRhGAMgASgLMg0uUGVyc29uYWxEYXRhSAKIAQESFAoHbXZwX251",
            "bRgEIAEoDUgDiAEBEhgKC3JpY2hlc3RfbnVtGAUgASgNSASIAQESFQoIZmlz",
            "aF9udW0YBiABKA1IBYgBARIXCgpzZWxlY3RfbnVtGAcgASgNSAaIAQESGAoL",
            "c2V0X3dpbl9udW0YCCABKA1IB4gBARIVCghyc3BfdHlwZRgJIAEoBUgIiAEB",
            "EhMKBnJvb21pZBgKIAEoBUgJiAEBQgYKBF91aWRCDAoKX2RhdGFfdHlwZUIN",
            "CgtfdG90YWxfZGF0YUIKCghfbXZwX251bUIOCgxfcmljaGVzdF9udW1CCwoJ",
            "X2Zpc2hfbnVtQg0KC19zZWxlY3RfbnVtQg4KDF9zZXRfd2luX251bUILCglf",
            "cnNwX3R5cGVCCQoHX3Jvb21pZCLJAgoOVXNlckNhcmVlckRhdGESEAoDdWlk",
            "GAEgASgDSACIAQESFgoJZGF0YV90eXBlGAIgASgFSAGIAQESJgoKdG90YWxf",
            "ZGF0YRgDIAEoCzINLlBlcnNvbmFsRGF0YUgCiAEBEhQKB212cF9udW0YBCAB",
            "KA1IA4gBARIYCgtyaWNoZXN0X251bRgFIAEoDUgEiAEBEhUKCGZpc2hfbnVt",
            "GAYgASgNSAWIAQESFwoKc2VsZWN0X251bRgHIAEoDUgGiAEBEhgKC3NldF93",
            "aW5fbnVtGAggASgNSAeIAQFCBgoEX3VpZEIMCgpfZGF0YV90eXBlQg0KC190",
            "b3RhbF9kYXRhQgoKCF9tdnBfbnVtQg4KDF9yaWNoZXN0X251bUILCglfZmlz",
            "aF9udW1CDQoLX3NlbGVjdF9udW1CDgoMX3NldF93aW5fbnVtIm8KFk11bHRp",
            "VXNlcnNUb3RhbERhdGFSRVESCwoDdWlkGAEgAygDEhYKCWRhdGFfdHlwZRgC",
            "IAEoBUgAiAEBEhUKCHJlcV90eXBlGAMgASgFSAGIAQFCDAoKX2RhdGFfdHlw",
            "ZUILCglfcmVxX3R5cGUiYAoWTXVsdGlVc2Vyc1RvdGFsRGF0YVJTUBIiCgl1",
            "c2VyX2RhdGEYASADKAsyDy5Vc2VyQ2FyZWVyRGF0YRIVCghyc3BfdHlwZRgC",
            "IAEoBUgAiAEBQgsKCV9yc3BfdHlwZSJHCgtVc2VyRGF5RGF0YRIQCgNkYXkY",
            "ASABKAlIAIgBARITCgZwcm9maXQYAiABKANIAYgBAUIGCgRfZGF5QgkKB19w",
            "cm9maXQiwAEKElVzZXJEYWlseVByb2ZpdFJFURIQCgN1aWQYASABKANIAIgB",
            "ARIWCglkYXRhX3R5cGUYAiABKAVIAYgBARIWCglzdGFydF9kYXkYAyABKAlI",
            "AogBARIUCgdlbmRfZGF5GAQgASgJSAOIAQESFQoIcmVxX3R5cGUYBSABKAVI",
            "BIgBAUIGCgRfdWlkQgwKCl9kYXRhX3R5cGVCDAoKX3N0YXJ0X2RheUIKCghf",
            "ZW5kX2RheUILCglfcmVxX3R5cGUi5QEKElVzZXJEYWlseVByb2ZpdFJTUBIQ",
            "CgN1aWQYASABKANIAIgBARIWCglkYXRhX3R5cGUYAiABKAVIAYgBARIhCgtw",
            "cm9maXRfZGF0YRgDIAMoCzIMLlVzZXJEYXlEYXRhEhIKBWNvdW50GAQgASgN",
            "SAKIAQESGQoMdG90YWxfcHJvZml0GAUgASgDSAOIAQESFQoIcnNwX3R5cGUY",
            "BiABKAVIBIgBAUIGCgRfdWlkQgwKCl9kYXRhX3R5cGVCCAoGX2NvdW50Qg8K",
            "DV90b3RhbF9wcm9maXRCCwoJX3JzcF90eXBlInkKFVVzZXJMYXN0N0RheVBy",
            "b2ZpdFJFURIQCgN1aWQYASABKANIAIgBARIWCglkYXRhX3R5cGUYAiABKAVI",
            "AYgBARIUCgdlbmRfZGF5GAMgASgJSAKIAQFCBgoEX3VpZEIMCgpfZGF0YV90",
            "eXBlQgoKCF9lbmRfZGF5IvABChVVc2VyTGFzdDdEYXlQcm9maXRSU1ASEAoD",
            "dWlkGAEgASgDSACIAQESFgoJZGF0YV90eXBlGAIgASgFSAGIAQESIQoLcHJv",
            "Zml0X2RhdGEYAyADKAsyDC5Vc2VyRGF5RGF0YRIZCgx0b3RhbF9wcm9maXQY",
            "BCABKANIAogBARISCgVjb3VudBgFIAEoDUgDiAEBEhkKDHByb2ZpdF83ZGF5",
            "cxgGIAEoA0gEiAEBQgYKBF91aWRCDAoKX2RhdGFfdHlwZUIPCg1fdG90YWxf",
            "cHJvZml0QggKBl9jb3VudEIPCg1fcHJvZml0XzdkYXlzIogCChBEYWlseUdh",
            "bWVTZXRJbmZvEhIKBXNldGlkGAEgASgJSACIAQESEAoDZGF5GAIgASgJSAGI",
            "AQESHAoDc2V0GAMgASgLMgouUHJvZml0U2V0SAKIAQESEwoGY2x1YmlkGAQg",
            "ASgJSAOIAQESFgoJY2x1Yl9uYW1lGAUgASgJSASIAQESGQoMY2x1Yl9vd25l",
            "cmlkGAYgASgDSAWIAQESFgoJY2x1Yl9pY29uGAcgASgJSAaIAQFCCAoGX3Nl",
            "dGlkQgYKBF9kYXlCBgoEX3NldEIJCgdfY2x1YmlkQgwKCl9jbHViX25hbWVC",
            "DwoNX2NsdWJfb3duZXJpZEIMCgpfY2x1Yl9pY29uImcKDFVzZXJEYWlseVNl",
            "dBIQCgNkYXkYASABKAlIAIgBARIfCgRzZXRzGAIgAygLMhEuRGFpbHlHYW1l",
            "U2V0SW5mbxISCgVjb3VudBgDIAEoDUgBiAEBQgYKBF9kYXlCCAoGX2NvdW50",
            "IoYBChJEYWlseUx1Y2t5RHJhd0luZm8SEAoDZGF5GAEgASgJSACIAQESJQoG",
            "Y29uZmlnGAIgASgLMhAuTHVja3lEcmF3Q29uZmlnSAGIAQESJAoGcmVjb3Jk",
            "GAMgAygLMhQuTHVja3lEcmF3UmVjb3JkSW5mb0IGCgRfZGF5QgkKB19jb25m",
            "aWcicAoSVXNlckRhaWx5THVja3lEcmF3EhAKA2RheRgBIAEoCUgAiAEBEhIK",
            "BWNvdW50GAIgASgNSAGIAQESIgoFaW5mb3MYAyADKAsyEy5EYWlseUx1Y2t5",
            "RHJhd0luZm9CBgoEX2RheUIICgZfY291bnQiwQEKE1VzZXJEYWlseVNldElu",
            "Zm9SRVESEAoDdWlkGAEgASgDSACIAQESFgoJZGF0YV90eXBlGAIgASgFSAGI",
            "AQESFgoJc3RhcnRfZGF5GAMgASgJSAKIAQESFAoHZW5kX2RheRgEIAEoCUgD",
            "iAEBEhUKCHJlcV90eXBlGAUgASgFSASIAQFCBgoEX3VpZEIMCgpfZGF0YV90",
            "eXBlQgwKCl9zdGFydF9kYXlCCgoIX2VuZF9kYXlCCwoJX3JlcV90eXBlIuEB",
            "ChNVc2VyRGFpbHlTZXRJbmZvUlNQEhAKA3VpZBgBIAEoA0gAiAEBEhYKCWRh",
            "dGFfdHlwZRgCIAEoBUgBiAEBEh8KCGdhbWVfc2V0GAMgAygLMg0uVXNlckRh",
            "aWx5U2V0EhIKBWNvdW50GAQgASgNSAKIAQESFQoIcnNwX3R5cGUYBSABKAVI",
            "A4gBARInCgpsdWNreV9kcmF3GAYgAygLMhMuVXNlckRhaWx5THVja3lEcmF3",
            "QgYKBF91aWRCDAoKX2RhdGFfdHlwZUIICgZfY291bnRCCwoJX3JzcF90eXBl",
            "Ik0KDVVzZXJNb250aERhdGESEgoFbW9udGgYASABKAlIAIgBARITCgZwcm9m",
            "aXQYAiABKANIAYgBAUIICgZfbW9udGhCCQoHX3Byb2ZpdCKmAQoUVXNlck1v",
            "bnRobHlQcm9maXRSRVESEAoDdWlkGAEgASgDSACIAQESFgoJZGF0YV90eXBl",
            "GAIgASgFSAGIAQESGAoLc3RhcnRfbW9udGgYAyABKAlIAogBARIWCgllbmRf",
            "bW9udGgYBCABKAlIA4gBAUIGCgRfdWlkQgwKCl9kYXRhX3R5cGVCDgoMX3N0",
            "YXJ0X21vbnRoQgwKCl9lbmRfbW9udGgixQEKFFVzZXJNb250aGx5UHJvZml0",
            "UlNQEhAKA3VpZBgBIAEoA0gAiAEBEhYKCWRhdGFfdHlwZRgCIAEoBUgBiAEB",
            "EiMKC3Byb2ZpdF9kYXRhGAMgAygLMg4uVXNlck1vbnRoRGF0YRISCgVjb3Vu",
            "dBgEIAEoDUgCiAEBEhkKDHRvdGFsX3Byb2ZpdBgFIAEoA0gDiAEBQgYKBF91",
            "aWRCDAoKX2RhdGFfdHlwZUIICgZfY291bnRCDwoNX3RvdGFsX3Byb2ZpdCJb",
            "ChVEYXlMdWNreURyYXdCcmllZkRhdGESEwoGcHJvZml0GAEgASgDSACIAQES",
            "FQoIZHJhd19udW0YAiABKAVIAYgBAUIJCgdfcHJvZml0QgsKCV9kcmF3X251",
            "bSJ2CgxEYXlCcmllZkRhdGESEwoGcHJvZml0GAEgASgDSACIAQESFAoHc2V0",
            "X251bRgCIAEoBUgBiAEBEhYKCWhhbmRzX251bRgDIAEoBUgCiAEBQgkKB19w",
            "cm9maXRCCgoIX3NldF9udW1CDAoKX2hhbmRzX251bSKiAQoJRGF5RGV0YWls",
            "EiIKBmRldGFpbBgBIAEoCzINLkRheUJyaWVmRGF0YUgAiAEBEhAKA2RheRgC",
            "IAEoCUgBiAEBEjYKEWx1Y2t5X2RyYXdfZGV0YWlsGAMgASgLMhYuRGF5THVj",
            "a3lEcmF3QnJpZWZEYXRhSAKIAQFCCQoHX2RldGFpbEIGCgRfZGF5QhQKEl9s",
            "dWNreV9kcmF3X2RldGFpbCJqCgpNb250aERlYWlsEh4KCmRheV9kZXRhaWwY",
            "ASADKAsyCi5EYXlEZXRhaWwSEgoFbW9udGgYAiABKAlIAIgBARITCgZwcm9m",
            "aXQYAyABKANIAYgBAUIICgZfbW9udGhCCQoHX3Byb2ZpdCKUAQoYWWVhck1v",
            "bnRoTHVja3lEcmF3RGV0YWlsEhkKDG1vbnRoX3Byb2ZpdBgBIAEoA0gAiAEB",
            "EhsKDm1vbnRoX2RyYXdfbnVtGAIgASgFSAGIAQESEgoFbW9udGgYAyABKAlI",
            "AogBAUIPCg1fbW9udGhfcHJvZml0QhEKD19tb250aF9kcmF3X251bUIICgZf",
            "bW9udGgiuwEKD1llYXJNb250aERldGFpbBIZCgxtb250aF9wcm9maXQYASAB",
            "KANIAIgBARIaCg1tb250aF9zZXRfbnVtGAIgASgFSAGIAQESHAoPbW9udGhf",
            "aGFuZHNfbnVtGAMgASgFSAKIAQESEgoFbW9udGgYBCABKAlIA4gBAUIPCg1f",
            "bW9udGhfcHJvZml0QhAKDl9tb250aF9zZXRfbnVtQhIKEF9tb250aF9oYW5k",
            "c19udW1CCAoGX21vbnRoItABCgpZZWFyRGV0YWlsEiQKCnllYXJfbW9udGgY",
            "ASADKAsyEC5ZZWFyTW9udGhEZXRhaWwSEQoEeWVhchgCIAEoCUgAiAEBEhgK",
            "C3llYXJfcHJvZml0GAMgASgDSAGIAQESEgoFY291bnQYBCABKA1IAogBARI4",
            "ChV5ZWFyX21vbnRoX2x1Y2t5X2RyYXcYBSADKAsyGS5ZZWFyTW9udGhMdWNr",
            "eURyYXdEZXRhaWxCBwoFX3llYXJCDgoMX3llYXJfcHJvZml0QggKBl9jb3Vu",
            "dCKqAQoYVXNlck1vbnRobHlEZXRhaWxJbmZvUkVREhAKA3VpZBgBIAEoA0gA",
            "iAEBEhYKCWRhdGFfdHlwZRgCIAEoBUgBiAEBEhgKC3N0YXJ0X21vbnRoGAMg",
            "ASgJSAKIAQESFgoJZW5kX21vbnRoGAQgASgJSAOIAQFCBgoEX3VpZEIMCgpf",
            "ZGF0YV90eXBlQg4KDF9zdGFydF9tb250aEIMCgpfZW5kX21vbnRoIpsBChhV",
            "c2VyTW9udGhseURldGFpbEluZm9SU1ASEAoDdWlkGAEgASgDSACIAQESFgoJ",
            "ZGF0YV90eXBlGAIgASgFSAGIAQESIQoMbW9udGhfZGV0YWlsGAMgAygLMgsu",
            "TW9udGhEZWFpbBISCgVjb3VudBgEIAEoDUgCiAEBQgYKBF91aWRCDAoKX2Rh",
            "dGFfdHlwZUIICgZfY291bnQiowEKFVVzZXJZZWFyRGV0YWlsSW5mb1JFURIQ",
            "CgN1aWQYASABKANIAIgBARIWCglkYXRhX3R5cGUYAiABKAVIAYgBARIXCgpz",
            "dGFydF95ZWFyGAMgASgJSAKIAQESFQoIZW5kX3llYXIYBCABKAlIA4gBAUIG",
            "CgRfdWlkQgwKCl9kYXRhX3R5cGVCDQoLX3N0YXJ0X3llYXJCCwoJX2VuZF95",
            "ZWFyIo4BChVVc2VyWWVhckRldGFpbEluZm9SU1ASEAoDdWlkGAEgASgDSACI",
            "AQESFgoJZGF0YV90eXBlGAIgASgFSAGIAQESJQoLeWVhcl9kZXRhaWwYAyAB",
            "KAsyCy5ZZWFyRGV0YWlsSAKIAQFCBgoEX3VpZEIMCgpfZGF0YV90eXBlQg4K",
            "DF95ZWFyX2RldGFpbCJZChdVc2VyUHJvZml0RGV0YWlsSW5mb1JFURIQCgN1",
            "aWQYASABKANIAIgBARIWCglkYXRhX3R5cGUYAiABKAVIAYgBAUIGCgRfdWlk",
            "QgwKCl9kYXRhX3R5cGUisQEKF1VzZXJQcm9maXREZXRhaWxJbmZvUlNQEhAK",
            "A3VpZBgBIAEoA0gAiAEBEhYKCWRhdGFfdHlwZRgCIAEoBUgBiAEBEhkKDHRv",
            "dGFsX3Byb2ZpdBgDIAEoA0gCiAEBEhkKDHByb2ZpdF83ZGF5cxgEIAEoA0gD",
            "iAEBQgYKBF91aWRCDAoKX2RhdGFfdHlwZUIPCg1fdG90YWxfcHJvZml0Qg8K",
            "DV9wcm9maXRfN2RheXMiuQEKD1VzZXJDbHViRGF0YVJFURIQCgN1aWQYASAB",
            "KANIAIgBARIWCglkYXRhX3R5cGUYAiABKAVIAYgBARIVCghyZXFfdHlwZRgD",
            "IAEoBUgCiAEBEhMKBmNsdWJpZBgEIAEoCUgDiAEBEhUKCGxlYWd1ZWlkGAUg",
            "ASgFSASIAQFCBgoEX3VpZEIMCgpfZGF0YV90eXBlQgsKCV9yZXFfdHlwZUIJ",
            "CgdfY2x1YmlkQgsKCV9sZWFndWVpZCKyAwoPVXNlckNsdWJEYXRhUlNQEhAK",
            "A3VpZBgBIAEoA0gAiAEBEhYKCWRhdGFfdHlwZRgCIAEoBUgBiAEBEiYKCnRv",
            "dGFsX2RhdGEYAyABKAsyDS5QZXJzb25hbERhdGFIAogBARIUCgdtdnBfbnVt",
            "GAQgASgNSAOIAQESGAoLcmljaGVzdF9udW0YBSABKA1IBIgBARIVCghmaXNo",
            "X251bRgGIAEoDUgFiAEBEhcKCnNlbGVjdF9udW0YByABKA1IBogBARIYCgtz",
            "ZXRfd2luX251bRgIIAEoDUgHiAEBEhUKCHJzcF90eXBlGAkgASgFSAiIAQES",
            "EwoGY2x1YmlkGAogASgJSAmIAQESFQoIbGVhZ3VlaWQYCyABKAVICogBAUIG",
            "CgRfdWlkQgwKCl9kYXRhX3R5cGVCDQoLX3RvdGFsX2RhdGFCCgoIX212cF9u",
            "dW1CDgoMX3JpY2hlc3RfbnVtQgsKCV9maXNoX251bUINCgtfc2VsZWN0X251",
            "bUIOCgxfc2V0X3dpbl9udW1CCwoJX3JzcF90eXBlQgkKB19jbHViaWRCCwoJ",
            "X2xlYWd1ZWlkKu8HCgxVc2VyRGF0YVR5cGUSFgoSVVNFUkRBVEFfVFlQRV9O",
            "T05FEAASGwoXVVNFUkRBVEFfVFlQRV9DQVNIX0dBTUUQARIaChZVU0VSREFU",
            "QV9UWVBFX0NVUF9HQU1FEAISHAoYVVNFUkRBVEFfVFlQRV9MT0JCWV9HQU1F",
            "EAMSHQoZVVNFUkRBVEFfVFlQRV9MQURERVJfR0FNRRAEEhwKGFVTRVJEQVRB",
            "X1RZUEVfT01BSEFfR0FNRRAFEhoKFlVTRVJEQVRBX1RZUEVfTVRUX0dBTUUQ",
            "BhIjCh9VU0VSREFUQV9UWVBFX09GRklDSUFMX1NOR19HQU1FEAcSIwofVVNF",
            "UkRBVEFfVFlQRV9PRkZJQ0lBTF9NVFRfR0FNRRAIEiIKHlVTRVJEQVRBX1RZ",
            "UEVfTE9CQllfT01BSEFfR0FNRRAJEhsKF1VTRVJEQVRBX1RZUEVfUElORV9H",
            "QU1FEAoSIQodVVNFUkRBVEFfVFlQRV9MT0JCWV9QSU5FX0dBTUUQCxIlCiFV",
            "U0VSREFUQV9UWVBFX0NMVUJfT01BSEFfU05HX0dBTUUQDBIlCiFVU0VSREFU",
            "QV9UWVBFX0NMVUJfT01BSEFfTVRUX0dBTUUQDRIfChtVU0VSREFUQV9UWVBF",
            "X1pPT01fQ0FTSF9OTEgQDhIhCh1VU0VSREFUQV9UWVBFX1pPT01fQ0FTSF9P",
            "TUFIQRAPEiEKHVVTRVJEQVRBX1RZUEVfQ0xVQl9OTEhfNl9QTFVTEBASHAoY",
            "VVNFUkRBVEFfVFlQRV9NSVhFRF9HQU1FEBESJgoiVVNFUkRBVEFfVFlQRV9P",
            "RkZJQ0lBTF9TUElOVVBfR0FNRRASEhoKFlVTRVJEQVRBX1RZUEVfQUxMX0NM",
            "VUIQExIbChdVU0VSREFUQV9UWVBFX0FMTF9MT0JCWRAUEh4KGlVTRVJEQVRB",
            "X1RZUEVfQUxMX09GRklDSUFMEBUSIQodVVNFUkRBVEFfVFlQRV9DTFVCX09N",
            "QUhBX0hJTE8QFhIdChlVU0VSREFUQV9UWVBFX0NMVUJfU1BJTlVQEBcSGgoW",
            "VVNFUkRBVEFfVFlQRV9DTFVCX0FPRhAYEicKI1VTRVJEQVRBX1RZUEVfT0ZG",
            "SUNJQUxfUExPX01UVF9HQU1FEBkSGQoVVVNFUkRBVEFfVFlQRV9DTFVCX1RQ",
            "EBoSHAoYVVNFUkRBVEFfVFlQRV9DTFVCX1BVU09ZEBsSHAoYVVNFUkRBVEFf",
            "VFlQRV9DT0xPUl9HQU1FEBwSHAoYVVNFUkRBVEFfVFlQRV9MVUNLWV9EUkFX",
            "EB0SGQoVVVNFUkRBVEFfVFlQRV9UT05HSVRTEB5CGFoFL2dvcGKqAg5UZXhh",
            "cy5Qcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.Pb1Reflection.Descriptor, global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.LuckyDrawReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Texas.Protocol.UserDataType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.PersonalData), global::Texas.Protocol.PersonalData.Parser, new[]{ "HandsNum", "SetNum", "Profit", "Buyin", "Backup", "Fee", "VpipNum", "VpipWinNum", "WtsdNum", "WtsdWinNum", "PfrNum", "Bet3Num", "BetcNum", "WinNum", "FlopNum", "PreFlopLastRaiseNum", "PreFlopSecondRaiseNum", "FoldTo3BetNum", "FaceTo3BetNum", "StealRaiseNum", "StealPosNum", "FlopCheckRaiseNum", "FlopCheckBeingRaiseNum", "FoldToCbetNum", "FaceToCbetNum", "FantasyNum", "RefantasyNum", "QQNum", "KKNum", "AANum", "ThreeKindNum", "RegularNum", "ProgressiveNum", "UltimateNum", "WildRegularNum", "WildProgressiveNum", "WildUltimateNum", "PusoyRate", "TotalBetting", "BombpotTimes", "TongitsTimes", "HitpotTimes", "FightTimes", "ChallengeTimes", "TongitsTieTimes" }, new[]{ "HandsNum", "SetNum", "Profit", "Buyin", "Backup", "Fee", "VpipNum", "VpipWinNum", "WtsdNum", "WtsdWinNum", "PfrNum", "Bet3Num", "BetcNum", "WinNum", "FlopNum", "PreFlopLastRaiseNum", "PreFlopSecondRaiseNum", "FoldTo3BetNum", "FaceTo3BetNum", "StealRaiseNum", "StealPosNum", "FlopCheckRaiseNum", "FlopCheckBeingRaiseNum", "FoldToCbetNum", "FaceToCbetNum", "FantasyNum", "RefantasyNum", "QQNum", "KKNum", "AANum", "ThreeKindNum", "RegularNum", "ProgressiveNum", "UltimateNum", "WildRegularNum", "WildProgressiveNum", "WildUltimateNum", "PusoyRate", "TotalBetting", "BombpotTimes", "TongitsTimes", "HitpotTimes", "FightTimes", "ChallengeTimes", "TongitsTieTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserTotalDataREQ), global::Texas.Protocol.UserTotalDataREQ.Parser, new[]{ "Uid", "DataType", "ReqType", "Roomid" }, new[]{ "Uid", "DataType", "ReqType", "Roomid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserTotalDataRSP), global::Texas.Protocol.UserTotalDataRSP.Parser, new[]{ "Uid", "DataType", "TotalData", "MvpNum", "RichestNum", "FishNum", "SelectNum", "SetWinNum", "RspType", "Roomid" }, new[]{ "Uid", "DataType", "TotalData", "MvpNum", "RichestNum", "FishNum", "SelectNum", "SetWinNum", "RspType", "Roomid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserCareerData), global::Texas.Protocol.UserCareerData.Parser, new[]{ "Uid", "DataType", "TotalData", "MvpNum", "RichestNum", "FishNum", "SelectNum", "SetWinNum" }, new[]{ "Uid", "DataType", "TotalData", "MvpNum", "RichestNum", "FishNum", "SelectNum", "SetWinNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MultiUsersTotalDataREQ), global::Texas.Protocol.MultiUsersTotalDataREQ.Parser, new[]{ "Uid", "DataType", "ReqType" }, new[]{ "DataType", "ReqType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MultiUsersTotalDataRSP), global::Texas.Protocol.MultiUsersTotalDataRSP.Parser, new[]{ "UserData", "RspType" }, new[]{ "RspType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDayData), global::Texas.Protocol.UserDayData.Parser, new[]{ "Day", "Profit" }, new[]{ "Day", "Profit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDailyProfitREQ), global::Texas.Protocol.UserDailyProfitREQ.Parser, new[]{ "Uid", "DataType", "StartDay", "EndDay", "ReqType" }, new[]{ "Uid", "DataType", "StartDay", "EndDay", "ReqType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDailyProfitRSP), global::Texas.Protocol.UserDailyProfitRSP.Parser, new[]{ "Uid", "DataType", "ProfitData", "Count", "TotalProfit", "RspType" }, new[]{ "Uid", "DataType", "Count", "TotalProfit", "RspType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserLast7DayProfitREQ), global::Texas.Protocol.UserLast7DayProfitREQ.Parser, new[]{ "Uid", "DataType", "EndDay" }, new[]{ "Uid", "DataType", "EndDay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserLast7DayProfitRSP), global::Texas.Protocol.UserLast7DayProfitRSP.Parser, new[]{ "Uid", "DataType", "ProfitData", "TotalProfit", "Count", "Profit7Days" }, new[]{ "Uid", "DataType", "TotalProfit", "Count", "Profit7Days" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.DailyGameSetInfo), global::Texas.Protocol.DailyGameSetInfo.Parser, new[]{ "Setid", "Day", "Set", "Clubid", "ClubName", "ClubOwnerid", "ClubIcon" }, new[]{ "Setid", "Day", "Set", "Clubid", "ClubName", "ClubOwnerid", "ClubIcon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDailySet), global::Texas.Protocol.UserDailySet.Parser, new[]{ "Day", "Sets", "Count" }, new[]{ "Day", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.DailyLuckyDrawInfo), global::Texas.Protocol.DailyLuckyDrawInfo.Parser, new[]{ "Day", "Config", "Record" }, new[]{ "Day", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDailyLuckyDraw), global::Texas.Protocol.UserDailyLuckyDraw.Parser, new[]{ "Day", "Count", "Infos" }, new[]{ "Day", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDailySetInfoREQ), global::Texas.Protocol.UserDailySetInfoREQ.Parser, new[]{ "Uid", "DataType", "StartDay", "EndDay", "ReqType" }, new[]{ "Uid", "DataType", "StartDay", "EndDay", "ReqType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserDailySetInfoRSP), global::Texas.Protocol.UserDailySetInfoRSP.Parser, new[]{ "Uid", "DataType", "GameSet", "Count", "RspType", "LuckyDraw" }, new[]{ "Uid", "DataType", "Count", "RspType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserMonthData), global::Texas.Protocol.UserMonthData.Parser, new[]{ "Month", "Profit" }, new[]{ "Month", "Profit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserMonthlyProfitREQ), global::Texas.Protocol.UserMonthlyProfitREQ.Parser, new[]{ "Uid", "DataType", "StartMonth", "EndMonth" }, new[]{ "Uid", "DataType", "StartMonth", "EndMonth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserMonthlyProfitRSP), global::Texas.Protocol.UserMonthlyProfitRSP.Parser, new[]{ "Uid", "DataType", "ProfitData", "Count", "TotalProfit" }, new[]{ "Uid", "DataType", "Count", "TotalProfit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.DayLuckyDrawBriefData), global::Texas.Protocol.DayLuckyDrawBriefData.Parser, new[]{ "Profit", "DrawNum" }, new[]{ "Profit", "DrawNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.DayBriefData), global::Texas.Protocol.DayBriefData.Parser, new[]{ "Profit", "SetNum", "HandsNum" }, new[]{ "Profit", "SetNum", "HandsNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.DayDetail), global::Texas.Protocol.DayDetail.Parser, new[]{ "Detail", "Day", "LuckyDrawDetail" }, new[]{ "Detail", "Day", "LuckyDrawDetail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MonthDeail), global::Texas.Protocol.MonthDeail.Parser, new[]{ "DayDetail", "Month", "Profit" }, new[]{ "Month", "Profit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.YearMonthLuckyDrawDetail), global::Texas.Protocol.YearMonthLuckyDrawDetail.Parser, new[]{ "MonthProfit", "MonthDrawNum", "Month" }, new[]{ "MonthProfit", "MonthDrawNum", "Month" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.YearMonthDetail), global::Texas.Protocol.YearMonthDetail.Parser, new[]{ "MonthProfit", "MonthSetNum", "MonthHandsNum", "Month" }, new[]{ "MonthProfit", "MonthSetNum", "MonthHandsNum", "Month" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.YearDetail), global::Texas.Protocol.YearDetail.Parser, new[]{ "YearMonth", "Year", "YearProfit", "Count", "YearMonthLuckyDraw" }, new[]{ "Year", "YearProfit", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserMonthlyDetailInfoREQ), global::Texas.Protocol.UserMonthlyDetailInfoREQ.Parser, new[]{ "Uid", "DataType", "StartMonth", "EndMonth" }, new[]{ "Uid", "DataType", "StartMonth", "EndMonth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserMonthlyDetailInfoRSP), global::Texas.Protocol.UserMonthlyDetailInfoRSP.Parser, new[]{ "Uid", "DataType", "MonthDetail", "Count" }, new[]{ "Uid", "DataType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserYearDetailInfoREQ), global::Texas.Protocol.UserYearDetailInfoREQ.Parser, new[]{ "Uid", "DataType", "StartYear", "EndYear" }, new[]{ "Uid", "DataType", "StartYear", "EndYear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserYearDetailInfoRSP), global::Texas.Protocol.UserYearDetailInfoRSP.Parser, new[]{ "Uid", "DataType", "YearDetail" }, new[]{ "Uid", "DataType", "YearDetail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserProfitDetailInfoREQ), global::Texas.Protocol.UserProfitDetailInfoREQ.Parser, new[]{ "Uid", "DataType" }, new[]{ "Uid", "DataType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserProfitDetailInfoRSP), global::Texas.Protocol.UserProfitDetailInfoRSP.Parser, new[]{ "Uid", "DataType", "TotalProfit", "Profit7Days" }, new[]{ "Uid", "DataType", "TotalProfit", "Profit7Days" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserClubDataREQ), global::Texas.Protocol.UserClubDataREQ.Parser, new[]{ "Uid", "DataType", "ReqType", "Clubid", "Leagueid" }, new[]{ "Uid", "DataType", "ReqType", "Clubid", "Leagueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserClubDataRSP), global::Texas.Protocol.UserClubDataRSP.Parser, new[]{ "Uid", "DataType", "TotalData", "MvpNum", "RichestNum", "FishNum", "SelectNum", "SetWinNum", "RspType", "Clubid", "Leagueid" }, new[]{ "Uid", "DataType", "TotalData", "MvpNum", "RichestNum", "FishNum", "SelectNum", "SetWinNum", "RspType", "Clubid", "Leagueid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///生涯发送的用户数据类型
  /// </summary>
  public enum UserDataType {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_NONE")] None = 0,
    /// <summary>
    /// ring game
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CASH_GAME")] CashGame = 1,
    /// <summary>
    /// sng
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CUP_GAME")] CupGame = 2,
    /// <summary>
    /// 大厅局
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_LOBBY_GAME")] LobbyGame = 3,
    /// <summary>
    /// 天梯
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_LADDER_GAME")] LadderGame = 4,
    /// <summary>
    /// 奥马哈
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_OMAHA_GAME")] OmahaGame = 5,
    /// <summary>
    /// mtt
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_MTT_GAME")] MttGame = 6,
    /// <summary>
    /// 官方赛事 SNG
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_OFFICIAL_SNG_GAME")] OfficialSngGame = 7,
    /// <summary>
    /// 官方赛事 MTT/NLH
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_OFFICIAL_MTT_GAME")] OfficialMttGame = 8,
    /// <summary>
    /// 大厅奥马哈
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_LOBBY_OMAHA_GAME")] LobbyOmahaGame = 9,
    /// <summary>
    /// 大菠萝
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_PINE_GAME")] PineGame = 10,
    /// <summary>
    /// 大厅大菠萝
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_LOBBY_PINE_GAME")] LobbyPineGame = 11,
    /// <summary>
    /// 俱乐部 SNG PLO
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_OMAHA_SNG_GAME")] ClubOmahaSngGame = 12,
    /// <summary>
    /// 俱乐部 MTT PLO
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_OMAHA_MTT_GAME")] ClubOmahaMttGame = 13,
    /// <summary>
    /// 快速桌 ring gameNLH
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_ZOOM_CASH_NLH")] ZoomCashNlh = 14,
    /// <summary>
    /// 快速桌 ring gameOMAHA
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_ZOOM_CASH_OMAHA")] ZoomCashOmaha = 15,
    /// <summary>
    /// 俱乐部 6+ NLH
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_NLH_6_PLUS")] ClubNlh6Plus = 16,
    /// <summary>
    /// 混合游戏
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_MIXED_GAME")] MixedGame = 17,
    /// <summary>
    /// 官方赛事 SpinUp
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_OFFICIAL_SPINUP_GAME")] OfficialSpinupGame = 18,
    /// <summary>
    /// 俱乐部ALL : 1, 14, 2, 6, 5, 15, 12, 13, 10, 16, 17
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_ALL_CLUB")] AllClub = 19,
    /// <summary>
    /// 大厅ALL : 3, 9, 11
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_ALL_LOBBY")] AllLobby = 20,
    /// <summary>
    /// 官赛ALL : 7, 8, 18, 25
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_ALL_OFFICIAL")] AllOfficial = 21,
    /// <summary>
    /// 俱乐部 omaha Hi/Lo
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_OMAHA_HILO")] ClubOmahaHilo = 22,
    /// <summary>
    /// 俱乐部 spinup
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_SPINUP")] ClubSpinup = 23,
    /// <summary>
    /// 俱乐部 aof
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_AOF")] ClubAof = 24,
    /// <summary>
    /// 官方赛事 MTT/PLO
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_OFFICIAL_PLO_MTT_GAME")] OfficialPloMttGame = 25,
    /// <summary>
    /// 俱乐部 teenpatti
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_TP")] ClubTp = 26,
    /// <summary>
    /// 俱乐部 pusoy
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_CLUB_PUSOY")] ClubPusoy = 27,
    /// <summary>
    /// 俱乐部 color game
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_COLOR_GAME")] ColorGame = 28,
    /// <summary>
    /// 俱乐部 lucky draw
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_LUCKY_DRAW")] LuckyDraw = 29,
    /// <summary>
    /// 俱乐部 tongits
    /// </summary>
    [pbr::OriginalName("USERDATA_TYPE_TONGITS")] Tongits = 30,
  }

  #endregion

  #region Messages
  /// <summary>
  /// </summary>
  public sealed partial class PersonalData : pb::IMessage<PersonalData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PersonalData> _parser = new pb::MessageParser<PersonalData>(() => new PersonalData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PersonalData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PersonalData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PersonalData(PersonalData other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      handsNum_ = other.handsNum_;
      setNum_ = other.setNum_;
      profit_ = other.profit_;
      buyin_ = other.buyin_;
      backup_ = other.backup_;
      fee_ = other.fee_;
      vpipNum_ = other.vpipNum_;
      vpipWinNum_ = other.vpipWinNum_;
      wtsdNum_ = other.wtsdNum_;
      wtsdWinNum_ = other.wtsdWinNum_;
      pfrNum_ = other.pfrNum_;
      bet3Num_ = other.bet3Num_;
      betcNum_ = other.betcNum_;
      winNum_ = other.winNum_;
      flopNum_ = other.flopNum_;
      preFlopLastRaiseNum_ = other.preFlopLastRaiseNum_;
      preFlopSecondRaiseNum_ = other.preFlopSecondRaiseNum_;
      foldTo3BetNum_ = other.foldTo3BetNum_;
      faceTo3BetNum_ = other.faceTo3BetNum_;
      stealRaiseNum_ = other.stealRaiseNum_;
      stealPosNum_ = other.stealPosNum_;
      flopCheckRaiseNum_ = other.flopCheckRaiseNum_;
      flopCheckBeingRaiseNum_ = other.flopCheckBeingRaiseNum_;
      foldToCbetNum_ = other.foldToCbetNum_;
      faceToCbetNum_ = other.faceToCbetNum_;
      fantasyNum_ = other.fantasyNum_;
      refantasyNum_ = other.refantasyNum_;
      qQNum_ = other.qQNum_;
      kKNum_ = other.kKNum_;
      aANum_ = other.aANum_;
      threeKindNum_ = other.threeKindNum_;
      regularNum_ = other.regularNum_;
      progressiveNum_ = other.progressiveNum_;
      ultimateNum_ = other.ultimateNum_;
      wildRegularNum_ = other.wildRegularNum_;
      wildProgressiveNum_ = other.wildProgressiveNum_;
      wildUltimateNum_ = other.wildUltimateNum_;
      pusoyRate_ = other.pusoyRate_;
      totalBetting_ = other.totalBetting_;
      bombpotTimes_ = other.bombpotTimes_;
      tongitsTimes_ = other.tongitsTimes_;
      hitpotTimes_ = other.hitpotTimes_;
      fightTimes_ = other.fightTimes_;
      challengeTimes_ = other.challengeTimes_;
      tongitsTieTimes_ = other.tongitsTieTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PersonalData Clone() {
      return new PersonalData(this);
    }

    /// <summary>Field number for the "hands_num" field.</summary>
    public const int HandsNumFieldNumber = 1;
    private readonly static uint HandsNumDefaultValue = 0;

    private uint handsNum_;
    /// <summary>
    ///总手牌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HandsNum {
      get { if ((_hasBits0 & 1) != 0) { return handsNum_; } else { return HandsNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        handsNum_ = value;
      }
    }
    /// <summary>Gets whether the "hands_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hands_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "set_num" field.</summary>
    public const int SetNumFieldNumber = 2;
    private readonly static uint SetNumDefaultValue = 0;

    private uint setNum_;
    /// <summary>
    ///总牌局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SetNum {
      get { if ((_hasBits0 & 2) != 0) { return setNum_; } else { return SetNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        setNum_ = value;
      }
    }
    /// <summary>Gets whether the "set_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "set_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 3;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    /// <summary>
    ///盈利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 4) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "buyin" field.</summary>
    public const int BuyinFieldNumber = 4;
    private readonly static long BuyinDefaultValue = 0L;

    private long buyin_;
    /// <summary>
    ///总买入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Buyin {
      get { if ((_hasBits0 & 8) != 0) { return buyin_; } else { return BuyinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        buyin_ = value;
      }
    }
    /// <summary>Gets whether the "buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBuyin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBuyin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "backup" field.</summary>
    public const int BackupFieldNumber = 5;
    private readonly static long BackupDefaultValue = 0L;

    private long backup_;
    /// <summary>
    ///总退回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Backup {
      get { if ((_hasBits0 & 16) != 0) { return backup_; } else { return BackupDefaultValue; } }
      set {
        _hasBits0 |= 16;
        backup_ = value;
      }
    }
    /// <summary>Gets whether the "backup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBackup {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "backup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBackup() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 6;
    private readonly static long FeeDefaultValue = 0L;

    private long fee_;
    /// <summary>
    ///总被fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Fee {
      get { if ((_hasBits0 & 32) != 0) { return fee_; } else { return FeeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        fee_ = value;
      }
    }
    /// <summary>Gets whether the "fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFee {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFee() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "vpip_num" field.</summary>
    public const int VpipNumFieldNumber = 7;
    private readonly static uint VpipNumDefaultValue = 0;

    private uint vpipNum_;
    /// <summary>
    ///入局次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VpipNum {
      get { if ((_hasBits0 & 64) != 0) { return vpipNum_; } else { return VpipNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        vpipNum_ = value;
      }
    }
    /// <summary>Gets whether the "vpip_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpipNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "vpip_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpipNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "vpip_win_num" field.</summary>
    public const int VpipWinNumFieldNumber = 8;
    private readonly static uint VpipWinNumDefaultValue = 0;

    private uint vpipWinNum_;
    /// <summary>
    ///入局后胜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VpipWinNum {
      get { if ((_hasBits0 & 128) != 0) { return vpipWinNum_; } else { return VpipWinNumDefaultValue; } }
      set {
        _hasBits0 |= 128;
        vpipWinNum_ = value;
      }
    }
    /// <summary>Gets whether the "vpip_win_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpipWinNum {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "vpip_win_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpipWinNum() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "wtsd_num" field.</summary>
    public const int WtsdNumFieldNumber = 9;
    private readonly static uint WtsdNumDefaultValue = 0;

    private uint wtsdNum_;
    /// <summary>
    ///摊牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WtsdNum {
      get { if ((_hasBits0 & 256) != 0) { return wtsdNum_; } else { return WtsdNumDefaultValue; } }
      set {
        _hasBits0 |= 256;
        wtsdNum_ = value;
      }
    }
    /// <summary>Gets whether the "wtsd_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWtsdNum {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "wtsd_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWtsdNum() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "wtsd_win_num" field.</summary>
    public const int WtsdWinNumFieldNumber = 10;
    private readonly static uint WtsdWinNumDefaultValue = 0;

    private uint wtsdWinNum_;
    /// <summary>
    ///摊牌后获胜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WtsdWinNum {
      get { if ((_hasBits0 & 512) != 0) { return wtsdWinNum_; } else { return WtsdWinNumDefaultValue; } }
      set {
        _hasBits0 |= 512;
        wtsdWinNum_ = value;
      }
    }
    /// <summary>Gets whether the "wtsd_win_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWtsdWinNum {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "wtsd_win_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWtsdWinNum() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "pfr_num" field.</summary>
    public const int PfrNumFieldNumber = 11;
    private readonly static uint PfrNumDefaultValue = 0;

    private uint pfrNum_;
    /// <summary>
    ///翻牌前加注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PfrNum {
      get { if ((_hasBits0 & 1024) != 0) { return pfrNum_; } else { return PfrNumDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        pfrNum_ = value;
      }
    }
    /// <summary>Gets whether the "pfr_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPfrNum {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "pfr_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPfrNum() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "bet3_num" field.</summary>
    public const int Bet3NumFieldNumber = 12;
    private readonly static uint Bet3NumDefaultValue = 0;

    private uint bet3Num_;
    /// <summary>
    ///3bet次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Bet3Num {
      get { if ((_hasBits0 & 2048) != 0) { return bet3Num_; } else { return Bet3NumDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        bet3Num_ = value;
      }
    }
    /// <summary>Gets whether the "bet3_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBet3Num {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "bet3_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBet3Num() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "betc_num" field.</summary>
    public const int BetcNumFieldNumber = 13;
    private readonly static uint BetcNumDefaultValue = 0;

    private uint betcNum_;
    /// <summary>
    ///cbet次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BetcNum {
      get { if ((_hasBits0 & 4096) != 0) { return betcNum_; } else { return BetcNumDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        betcNum_ = value;
      }
    }
    /// <summary>Gets whether the "betc_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBetcNum {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "betc_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBetcNum() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "win_num" field.</summary>
    public const int WinNumFieldNumber = 14;
    private readonly static uint WinNumDefaultValue = 0;

    private uint winNum_;
    /// <summary>
    ///手牌胜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WinNum {
      get { if ((_hasBits0 & 8192) != 0) { return winNum_; } else { return WinNumDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        winNum_ = value;
      }
    }
    /// <summary>Gets whether the "win_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinNum {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "win_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinNum() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "flop_num" field.</summary>
    public const int FlopNumFieldNumber = 15;
    private readonly static uint FlopNumDefaultValue = 0;

    private uint flopNum_;
    /// <summary>
    ///看到flop次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FlopNum {
      get { if ((_hasBits0 & 16384) != 0) { return flopNum_; } else { return FlopNumDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        flopNum_ = value;
      }
    }
    /// <summary>Gets whether the "flop_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlopNum {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "flop_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlopNum() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "pre_flop_last_raise_num" field.</summary>
    public const int PreFlopLastRaiseNumFieldNumber = 16;
    private readonly static uint PreFlopLastRaiseNumDefaultValue = 0;

    private uint preFlopLastRaiseNum_;
    /// <summary>
    ///翻牌先在最后一加注的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PreFlopLastRaiseNum {
      get { if ((_hasBits0 & 32768) != 0) { return preFlopLastRaiseNum_; } else { return PreFlopLastRaiseNumDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        preFlopLastRaiseNum_ = value;
      }
    }
    /// <summary>Gets whether the "pre_flop_last_raise_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreFlopLastRaiseNum {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "pre_flop_last_raise_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreFlopLastRaiseNum() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "pre_flop_second_raise_num" field.</summary>
    public const int PreFlopSecondRaiseNumFieldNumber = 17;
    private readonly static uint PreFlopSecondRaiseNumDefaultValue = 0;

    private uint preFlopSecondRaiseNum_;
    /// <summary>
    ///翻牌前有且一个人raise的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PreFlopSecondRaiseNum {
      get { if ((_hasBits0 & 65536) != 0) { return preFlopSecondRaiseNum_; } else { return PreFlopSecondRaiseNumDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        preFlopSecondRaiseNum_ = value;
      }
    }
    /// <summary>Gets whether the "pre_flop_second_raise_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreFlopSecondRaiseNum {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "pre_flop_second_raise_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreFlopSecondRaiseNum() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "fold_to_3bet_num" field.</summary>
    public const int FoldTo3BetNumFieldNumber = 18;
    private readonly static uint FoldTo3BetNumDefaultValue = 0;

    private uint foldTo3BetNum_;
    /// <summary>
    ///翻牌前，自己先加注后，面对3Bet弃牌的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FoldTo3BetNum {
      get { if ((_hasBits0 & 131072) != 0) { return foldTo3BetNum_; } else { return FoldTo3BetNumDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        foldTo3BetNum_ = value;
      }
    }
    /// <summary>Gets whether the "fold_to_3bet_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFoldTo3BetNum {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "fold_to_3bet_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFoldTo3BetNum() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "face_to_3bet_num" field.</summary>
    public const int FaceTo3BetNumFieldNumber = 19;
    private readonly static uint FaceTo3BetNumDefaultValue = 0;

    private uint faceTo3BetNum_;
    /// <summary>
    ///翻牌前，自己先加注后，面对3Bet的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FaceTo3BetNum {
      get { if ((_hasBits0 & 262144) != 0) { return faceTo3BetNum_; } else { return FaceTo3BetNumDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        faceTo3BetNum_ = value;
      }
    }
    /// <summary>Gets whether the "face_to_3bet_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFaceTo3BetNum {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "face_to_3bet_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFaceTo3BetNum() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "steal_raise_num" field.</summary>
    public const int StealRaiseNumFieldNumber = 20;
    private readonly static uint StealRaiseNumDefaultValue = 0;

    private uint stealRaiseNum_;
    /// <summary>
    ///翻牌前，前面玩家都弃牌，玩家在CO，BTN或SB加注的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StealRaiseNum {
      get { if ((_hasBits0 & 524288) != 0) { return stealRaiseNum_; } else { return StealRaiseNumDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        stealRaiseNum_ = value;
      }
    }
    /// <summary>Gets whether the "steal_raise_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStealRaiseNum {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "steal_raise_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStealRaiseNum() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "steal_pos_num" field.</summary>
    public const int StealPosNumFieldNumber = 21;
    private readonly static uint StealPosNumDefaultValue = 0;

    private uint stealPosNum_;
    /// <summary>
    ///翻牌前，前面万家都弃牌，玩家在CO，BTN或SB的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StealPosNum {
      get { if ((_hasBits0 & 1048576) != 0) { return stealPosNum_; } else { return StealPosNumDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        stealPosNum_ = value;
      }
    }
    /// <summary>Gets whether the "steal_pos_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStealPosNum {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "steal_pos_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStealPosNum() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "flop_check_raise_num" field.</summary>
    public const int FlopCheckRaiseNumFieldNumber = 22;
    private readonly static uint FlopCheckRaiseNumDefaultValue = 0;

    private uint flopCheckRaiseNum_;
    /// <summary>
    ///翻牌圈，玩家先过牌，对方下注后做再加注的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FlopCheckRaiseNum {
      get { if ((_hasBits0 & 2097152) != 0) { return flopCheckRaiseNum_; } else { return FlopCheckRaiseNumDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        flopCheckRaiseNum_ = value;
      }
    }
    /// <summary>Gets whether the "flop_check_raise_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlopCheckRaiseNum {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "flop_check_raise_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlopCheckRaiseNum() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "flop_check_being_raise_num" field.</summary>
    public const int FlopCheckBeingRaiseNumFieldNumber = 23;
    private readonly static uint FlopCheckBeingRaiseNumDefaultValue = 0;

    private uint flopCheckBeingRaiseNum_;
    /// <summary>
    ///翻牌圈，玩家先过牌，对方下注的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FlopCheckBeingRaiseNum {
      get { if ((_hasBits0 & 4194304) != 0) { return flopCheckBeingRaiseNum_; } else { return FlopCheckBeingRaiseNumDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        flopCheckBeingRaiseNum_ = value;
      }
    }
    /// <summary>Gets whether the "flop_check_being_raise_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlopCheckBeingRaiseNum {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "flop_check_being_raise_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlopCheckBeingRaiseNum() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "fold_to_cbet_num" field.</summary>
    public const int FoldToCbetNumFieldNumber = 24;
    private readonly static uint FoldToCbetNumDefaultValue = 0;

    private uint foldToCbetNum_;
    /// <summary>
    ///玩家面对翻牌前加注的对手，翻牌圈持续下注时，弃牌的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FoldToCbetNum {
      get { if ((_hasBits0 & 8388608) != 0) { return foldToCbetNum_; } else { return FoldToCbetNumDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        foldToCbetNum_ = value;
      }
    }
    /// <summary>Gets whether the "fold_to_cbet_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFoldToCbetNum {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "fold_to_cbet_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFoldToCbetNum() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "face_to_cbet_num" field.</summary>
    public const int FaceToCbetNumFieldNumber = 25;
    private readonly static uint FaceToCbetNumDefaultValue = 0;

    private uint faceToCbetNum_;
    /// <summary>
    ///玩家面对翻牌前加注的对手，翻牌圈持续下注时的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FaceToCbetNum {
      get { if ((_hasBits0 & 16777216) != 0) { return faceToCbetNum_; } else { return FaceToCbetNumDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        faceToCbetNum_ = value;
      }
    }
    /// <summary>Gets whether the "face_to_cbet_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFaceToCbetNum {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "face_to_cbet_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFaceToCbetNum() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "fantasy_num" field.</summary>
    public const int FantasyNumFieldNumber = 26;
    private readonly static uint FantasyNumDefaultValue = 0;

    private uint fantasyNum_;
    /// <summary>
    ///进范次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FantasyNum {
      get { if ((_hasBits0 & 33554432) != 0) { return fantasyNum_; } else { return FantasyNumDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        fantasyNum_ = value;
      }
    }
    /// <summary>Gets whether the "fantasy_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFantasyNum {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "fantasy_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFantasyNum() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "refantasy_num" field.</summary>
    public const int RefantasyNumFieldNumber = 27;
    private readonly static uint RefantasyNumDefaultValue = 0;

    private uint refantasyNum_;
    /// <summary>
    ///re范次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RefantasyNum {
      get { if ((_hasBits0 & 67108864) != 0) { return refantasyNum_; } else { return RefantasyNumDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        refantasyNum_ = value;
      }
    }
    /// <summary>Gets whether the "refantasy_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefantasyNum {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "refantasy_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefantasyNum() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "QQ_num" field.</summary>
    public const int QQNumFieldNumber = 28;
    private readonly static uint QQNumDefaultValue = 0;

    private uint qQNum_;
    /// <summary>
    ///QQ进范次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint QQNum {
      get { if ((_hasBits0 & 134217728) != 0) { return qQNum_; } else { return QQNumDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        qQNum_ = value;
      }
    }
    /// <summary>Gets whether the "QQ_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQQNum {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "QQ_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQQNum() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "KK_num" field.</summary>
    public const int KKNumFieldNumber = 29;
    private readonly static uint KKNumDefaultValue = 0;

    private uint kKNum_;
    /// <summary>
    ///KK进范次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint KKNum {
      get { if ((_hasBits0 & 268435456) != 0) { return kKNum_; } else { return KKNumDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        kKNum_ = value;
      }
    }
    /// <summary>Gets whether the "KK_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKKNum {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "KK_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKKNum() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "AA_num" field.</summary>
    public const int AANumFieldNumber = 30;
    private readonly static uint AANumDefaultValue = 0;

    private uint aANum_;
    /// <summary>
    ///AA进范次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AANum {
      get { if ((_hasBits0 & 536870912) != 0) { return aANum_; } else { return AANumDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        aANum_ = value;
      }
    }
    /// <summary>Gets whether the "AA_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAANum {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "AA_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAANum() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "three_kind_num" field.</summary>
    public const int ThreeKindNumFieldNumber = 31;
    private readonly static uint ThreeKindNumDefaultValue = 0;

    private uint threeKindNum_;
    /// <summary>
    ///三条进范次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ThreeKindNum {
      get { if ((_hasBits0 & 1073741824) != 0) { return threeKindNum_; } else { return ThreeKindNumDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        threeKindNum_ = value;
      }
    }
    /// <summary>Gets whether the "three_kind_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThreeKindNum {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "three_kind_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThreeKindNum() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "regular_num" field.</summary>
    public const int RegularNumFieldNumber = 32;
    private readonly static uint RegularNumDefaultValue = 0;

    private uint regularNum_;
    /// <summary>
    ///普通模式次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RegularNum {
      get { if ((_hasBits0 & -2147483648) != 0) { return regularNum_; } else { return RegularNumDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        regularNum_ = value;
      }
    }
    /// <summary>Gets whether the "regular_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegularNum {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "regular_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegularNum() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "progressive_num" field.</summary>
    public const int ProgressiveNumFieldNumber = 33;
    private readonly static uint ProgressiveNumDefaultValue = 0;

    private uint progressiveNum_;
    /// <summary>
    ///血战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ProgressiveNum {
      get { if ((_hasBits1 & 1) != 0) { return progressiveNum_; } else { return ProgressiveNumDefaultValue; } }
      set {
        _hasBits1 |= 1;
        progressiveNum_ = value;
      }
    }
    /// <summary>Gets whether the "progressive_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProgressiveNum {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "progressive_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProgressiveNum() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "ultimate_num" field.</summary>
    public const int UltimateNumFieldNumber = 34;
    private readonly static uint UltimateNumDefaultValue = 0;

    private uint ultimateNum_;
    /// <summary>
    ///血进血出次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UltimateNum {
      get { if ((_hasBits1 & 2) != 0) { return ultimateNum_; } else { return UltimateNumDefaultValue; } }
      set {
        _hasBits1 |= 2;
        ultimateNum_ = value;
      }
    }
    /// <summary>Gets whether the "ultimate_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUltimateNum {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ultimate_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUltimateNum() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "wild_regular_num" field.</summary>
    public const int WildRegularNumFieldNumber = 35;
    private readonly static uint WildRegularNumDefaultValue = 0;

    private uint wildRegularNum_;
    /// <summary>
    ///赖子普通模式次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WildRegularNum {
      get { if ((_hasBits1 & 4) != 0) { return wildRegularNum_; } else { return WildRegularNumDefaultValue; } }
      set {
        _hasBits1 |= 4;
        wildRegularNum_ = value;
      }
    }
    /// <summary>Gets whether the "wild_regular_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWildRegularNum {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "wild_regular_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWildRegularNum() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "wild_progressive_num" field.</summary>
    public const int WildProgressiveNumFieldNumber = 36;
    private readonly static uint WildProgressiveNumDefaultValue = 0;

    private uint wildProgressiveNum_;
    /// <summary>
    ///赖子血战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WildProgressiveNum {
      get { if ((_hasBits1 & 8) != 0) { return wildProgressiveNum_; } else { return WildProgressiveNumDefaultValue; } }
      set {
        _hasBits1 |= 8;
        wildProgressiveNum_ = value;
      }
    }
    /// <summary>Gets whether the "wild_progressive_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWildProgressiveNum {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "wild_progressive_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWildProgressiveNum() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "wild_ultimate_num" field.</summary>
    public const int WildUltimateNumFieldNumber = 37;
    private readonly static uint WildUltimateNumDefaultValue = 0;

    private uint wildUltimateNum_;
    /// <summary>
    ///赖子血进血出次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WildUltimateNum {
      get { if ((_hasBits1 & 16) != 0) { return wildUltimateNum_; } else { return WildUltimateNumDefaultValue; } }
      set {
        _hasBits1 |= 16;
        wildUltimateNum_ = value;
      }
    }
    /// <summary>Gets whether the "wild_ultimate_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWildUltimateNum {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "wild_ultimate_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWildUltimateNum() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "pusoy_rate" field.</summary>
    public const int PusoyRateFieldNumber = 38;
    private readonly static uint PusoyRateDefaultValue = 0;

    private uint pusoyRate_;
    /// <summary>
    ///Pusoy Rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PusoyRate {
      get { if ((_hasBits1 & 32) != 0) { return pusoyRate_; } else { return PusoyRateDefaultValue; } }
      set {
        _hasBits1 |= 32;
        pusoyRate_ = value;
      }
    }
    /// <summary>Gets whether the "pusoy_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPusoyRate {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "pusoy_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPusoyRate() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "total_betting" field.</summary>
    public const int TotalBettingFieldNumber = 39;
    private readonly static long TotalBettingDefaultValue = 0L;

    private long totalBetting_;
    /// <summary>
    ///color game 總下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalBetting {
      get { if ((_hasBits1 & 64) != 0) { return totalBetting_; } else { return TotalBettingDefaultValue; } }
      set {
        _hasBits1 |= 64;
        totalBetting_ = value;
      }
    }
    /// <summary>Gets whether the "total_betting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBetting {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "total_betting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBetting() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "bombpot_times" field.</summary>
    public const int BombpotTimesFieldNumber = 40;
    private readonly static uint BombpotTimesDefaultValue = 0;

    private uint bombpotTimes_;
    /// <summary>
    ///bombpot times 炸彈彩池觸發次數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BombpotTimes {
      get { if ((_hasBits1 & 128) != 0) { return bombpotTimes_; } else { return BombpotTimesDefaultValue; } }
      set {
        _hasBits1 |= 128;
        bombpotTimes_ = value;
      }
    }
    /// <summary>Gets whether the "bombpot_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBombpotTimes {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "bombpot_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBombpotTimes() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "tongits_times" field.</summary>
    public const int TongitsTimesFieldNumber = 41;
    private readonly static uint TongitsTimesDefaultValue = 0;

    private uint tongitsTimes_;
    /// <summary>
    /// tongits 相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TongitsTimes {
      get { if ((_hasBits1 & 256) != 0) { return tongitsTimes_; } else { return TongitsTimesDefaultValue; } }
      set {
        _hasBits1 |= 256;
        tongitsTimes_ = value;
      }
    }
    /// <summary>Gets whether the "tongits_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTongitsTimes {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "tongits_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTongitsTimes() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "hitpot_times" field.</summary>
    public const int HitpotTimesFieldNumber = 42;
    private readonly static uint HitpotTimesDefaultValue = 0;

    private uint hitpotTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HitpotTimes {
      get { if ((_hasBits1 & 512) != 0) { return hitpotTimes_; } else { return HitpotTimesDefaultValue; } }
      set {
        _hasBits1 |= 512;
        hitpotTimes_ = value;
      }
    }
    /// <summary>Gets whether the "hitpot_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHitpotTimes {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "hitpot_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHitpotTimes() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "fight_times" field.</summary>
    public const int FightTimesFieldNumber = 43;
    private readonly static uint FightTimesDefaultValue = 0;

    private uint fightTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FightTimes {
      get { if ((_hasBits1 & 1024) != 0) { return fightTimes_; } else { return FightTimesDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        fightTimes_ = value;
      }
    }
    /// <summary>Gets whether the "fight_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFightTimes {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "fight_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFightTimes() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "challenge_times" field.</summary>
    public const int ChallengeTimesFieldNumber = 44;
    private readonly static uint ChallengeTimesDefaultValue = 0;

    private uint challengeTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ChallengeTimes {
      get { if ((_hasBits1 & 2048) != 0) { return challengeTimes_; } else { return ChallengeTimesDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        challengeTimes_ = value;
      }
    }
    /// <summary>Gets whether the "challenge_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChallengeTimes {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "challenge_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChallengeTimes() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "tongits_tie_times" field.</summary>
    public const int TongitsTieTimesFieldNumber = 45;
    private readonly static uint TongitsTieTimesDefaultValue = 0;

    private uint tongitsTieTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TongitsTieTimes {
      get { if ((_hasBits1 & 4096) != 0) { return tongitsTieTimes_; } else { return TongitsTieTimesDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        tongitsTieTimes_ = value;
      }
    }
    /// <summary>Gets whether the "tongits_tie_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTongitsTieTimes {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "tongits_tie_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTongitsTieTimes() {
      _hasBits1 &= ~4096;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PersonalData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PersonalData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandsNum != other.HandsNum) return false;
      if (SetNum != other.SetNum) return false;
      if (Profit != other.Profit) return false;
      if (Buyin != other.Buyin) return false;
      if (Backup != other.Backup) return false;
      if (Fee != other.Fee) return false;
      if (VpipNum != other.VpipNum) return false;
      if (VpipWinNum != other.VpipWinNum) return false;
      if (WtsdNum != other.WtsdNum) return false;
      if (WtsdWinNum != other.WtsdWinNum) return false;
      if (PfrNum != other.PfrNum) return false;
      if (Bet3Num != other.Bet3Num) return false;
      if (BetcNum != other.BetcNum) return false;
      if (WinNum != other.WinNum) return false;
      if (FlopNum != other.FlopNum) return false;
      if (PreFlopLastRaiseNum != other.PreFlopLastRaiseNum) return false;
      if (PreFlopSecondRaiseNum != other.PreFlopSecondRaiseNum) return false;
      if (FoldTo3BetNum != other.FoldTo3BetNum) return false;
      if (FaceTo3BetNum != other.FaceTo3BetNum) return false;
      if (StealRaiseNum != other.StealRaiseNum) return false;
      if (StealPosNum != other.StealPosNum) return false;
      if (FlopCheckRaiseNum != other.FlopCheckRaiseNum) return false;
      if (FlopCheckBeingRaiseNum != other.FlopCheckBeingRaiseNum) return false;
      if (FoldToCbetNum != other.FoldToCbetNum) return false;
      if (FaceToCbetNum != other.FaceToCbetNum) return false;
      if (FantasyNum != other.FantasyNum) return false;
      if (RefantasyNum != other.RefantasyNum) return false;
      if (QQNum != other.QQNum) return false;
      if (KKNum != other.KKNum) return false;
      if (AANum != other.AANum) return false;
      if (ThreeKindNum != other.ThreeKindNum) return false;
      if (RegularNum != other.RegularNum) return false;
      if (ProgressiveNum != other.ProgressiveNum) return false;
      if (UltimateNum != other.UltimateNum) return false;
      if (WildRegularNum != other.WildRegularNum) return false;
      if (WildProgressiveNum != other.WildProgressiveNum) return false;
      if (WildUltimateNum != other.WildUltimateNum) return false;
      if (PusoyRate != other.PusoyRate) return false;
      if (TotalBetting != other.TotalBetting) return false;
      if (BombpotTimes != other.BombpotTimes) return false;
      if (TongitsTimes != other.TongitsTimes) return false;
      if (HitpotTimes != other.HitpotTimes) return false;
      if (FightTimes != other.FightTimes) return false;
      if (ChallengeTimes != other.ChallengeTimes) return false;
      if (TongitsTieTimes != other.TongitsTieTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHandsNum) hash ^= HandsNum.GetHashCode();
      if (HasSetNum) hash ^= SetNum.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (HasBuyin) hash ^= Buyin.GetHashCode();
      if (HasBackup) hash ^= Backup.GetHashCode();
      if (HasFee) hash ^= Fee.GetHashCode();
      if (HasVpipNum) hash ^= VpipNum.GetHashCode();
      if (HasVpipWinNum) hash ^= VpipWinNum.GetHashCode();
      if (HasWtsdNum) hash ^= WtsdNum.GetHashCode();
      if (HasWtsdWinNum) hash ^= WtsdWinNum.GetHashCode();
      if (HasPfrNum) hash ^= PfrNum.GetHashCode();
      if (HasBet3Num) hash ^= Bet3Num.GetHashCode();
      if (HasBetcNum) hash ^= BetcNum.GetHashCode();
      if (HasWinNum) hash ^= WinNum.GetHashCode();
      if (HasFlopNum) hash ^= FlopNum.GetHashCode();
      if (HasPreFlopLastRaiseNum) hash ^= PreFlopLastRaiseNum.GetHashCode();
      if (HasPreFlopSecondRaiseNum) hash ^= PreFlopSecondRaiseNum.GetHashCode();
      if (HasFoldTo3BetNum) hash ^= FoldTo3BetNum.GetHashCode();
      if (HasFaceTo3BetNum) hash ^= FaceTo3BetNum.GetHashCode();
      if (HasStealRaiseNum) hash ^= StealRaiseNum.GetHashCode();
      if (HasStealPosNum) hash ^= StealPosNum.GetHashCode();
      if (HasFlopCheckRaiseNum) hash ^= FlopCheckRaiseNum.GetHashCode();
      if (HasFlopCheckBeingRaiseNum) hash ^= FlopCheckBeingRaiseNum.GetHashCode();
      if (HasFoldToCbetNum) hash ^= FoldToCbetNum.GetHashCode();
      if (HasFaceToCbetNum) hash ^= FaceToCbetNum.GetHashCode();
      if (HasFantasyNum) hash ^= FantasyNum.GetHashCode();
      if (HasRefantasyNum) hash ^= RefantasyNum.GetHashCode();
      if (HasQQNum) hash ^= QQNum.GetHashCode();
      if (HasKKNum) hash ^= KKNum.GetHashCode();
      if (HasAANum) hash ^= AANum.GetHashCode();
      if (HasThreeKindNum) hash ^= ThreeKindNum.GetHashCode();
      if (HasRegularNum) hash ^= RegularNum.GetHashCode();
      if (HasProgressiveNum) hash ^= ProgressiveNum.GetHashCode();
      if (HasUltimateNum) hash ^= UltimateNum.GetHashCode();
      if (HasWildRegularNum) hash ^= WildRegularNum.GetHashCode();
      if (HasWildProgressiveNum) hash ^= WildProgressiveNum.GetHashCode();
      if (HasWildUltimateNum) hash ^= WildUltimateNum.GetHashCode();
      if (HasPusoyRate) hash ^= PusoyRate.GetHashCode();
      if (HasTotalBetting) hash ^= TotalBetting.GetHashCode();
      if (HasBombpotTimes) hash ^= BombpotTimes.GetHashCode();
      if (HasTongitsTimes) hash ^= TongitsTimes.GetHashCode();
      if (HasHitpotTimes) hash ^= HitpotTimes.GetHashCode();
      if (HasFightTimes) hash ^= FightTimes.GetHashCode();
      if (HasChallengeTimes) hash ^= ChallengeTimes.GetHashCode();
      if (HasTongitsTieTimes) hash ^= TongitsTieTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHandsNum) {
        output.WriteRawTag(8);
        output.WriteUInt32(HandsNum);
      }
      if (HasSetNum) {
        output.WriteRawTag(16);
        output.WriteUInt32(SetNum);
      }
      if (HasProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(Profit);
      }
      if (HasBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(Buyin);
      }
      if (HasBackup) {
        output.WriteRawTag(40);
        output.WriteInt64(Backup);
      }
      if (HasFee) {
        output.WriteRawTag(48);
        output.WriteInt64(Fee);
      }
      if (HasVpipNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(VpipNum);
      }
      if (HasVpipWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(VpipWinNum);
      }
      if (HasWtsdNum) {
        output.WriteRawTag(72);
        output.WriteUInt32(WtsdNum);
      }
      if (HasWtsdWinNum) {
        output.WriteRawTag(80);
        output.WriteUInt32(WtsdWinNum);
      }
      if (HasPfrNum) {
        output.WriteRawTag(88);
        output.WriteUInt32(PfrNum);
      }
      if (HasBet3Num) {
        output.WriteRawTag(96);
        output.WriteUInt32(Bet3Num);
      }
      if (HasBetcNum) {
        output.WriteRawTag(104);
        output.WriteUInt32(BetcNum);
      }
      if (HasWinNum) {
        output.WriteRawTag(112);
        output.WriteUInt32(WinNum);
      }
      if (HasFlopNum) {
        output.WriteRawTag(120);
        output.WriteUInt32(FlopNum);
      }
      if (HasPreFlopLastRaiseNum) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PreFlopLastRaiseNum);
      }
      if (HasPreFlopSecondRaiseNum) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(PreFlopSecondRaiseNum);
      }
      if (HasFoldTo3BetNum) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(FoldTo3BetNum);
      }
      if (HasFaceTo3BetNum) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(FaceTo3BetNum);
      }
      if (HasStealRaiseNum) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(StealRaiseNum);
      }
      if (HasStealPosNum) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(StealPosNum);
      }
      if (HasFlopCheckRaiseNum) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(FlopCheckRaiseNum);
      }
      if (HasFlopCheckBeingRaiseNum) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(FlopCheckBeingRaiseNum);
      }
      if (HasFoldToCbetNum) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(FoldToCbetNum);
      }
      if (HasFaceToCbetNum) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(FaceToCbetNum);
      }
      if (HasFantasyNum) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(FantasyNum);
      }
      if (HasRefantasyNum) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RefantasyNum);
      }
      if (HasQQNum) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(QQNum);
      }
      if (HasKKNum) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(KKNum);
      }
      if (HasAANum) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(AANum);
      }
      if (HasThreeKindNum) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(ThreeKindNum);
      }
      if (HasRegularNum) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RegularNum);
      }
      if (HasProgressiveNum) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(ProgressiveNum);
      }
      if (HasUltimateNum) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(UltimateNum);
      }
      if (HasWildRegularNum) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(WildRegularNum);
      }
      if (HasWildProgressiveNum) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(WildProgressiveNum);
      }
      if (HasWildUltimateNum) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(WildUltimateNum);
      }
      if (HasPusoyRate) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(PusoyRate);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(TotalBetting);
      }
      if (HasBombpotTimes) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(BombpotTimes);
      }
      if (HasTongitsTimes) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(TongitsTimes);
      }
      if (HasHitpotTimes) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(HitpotTimes);
      }
      if (HasFightTimes) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(FightTimes);
      }
      if (HasChallengeTimes) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(ChallengeTimes);
      }
      if (HasTongitsTieTimes) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(TongitsTieTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHandsNum) {
        output.WriteRawTag(8);
        output.WriteUInt32(HandsNum);
      }
      if (HasSetNum) {
        output.WriteRawTag(16);
        output.WriteUInt32(SetNum);
      }
      if (HasProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(Profit);
      }
      if (HasBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(Buyin);
      }
      if (HasBackup) {
        output.WriteRawTag(40);
        output.WriteInt64(Backup);
      }
      if (HasFee) {
        output.WriteRawTag(48);
        output.WriteInt64(Fee);
      }
      if (HasVpipNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(VpipNum);
      }
      if (HasVpipWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(VpipWinNum);
      }
      if (HasWtsdNum) {
        output.WriteRawTag(72);
        output.WriteUInt32(WtsdNum);
      }
      if (HasWtsdWinNum) {
        output.WriteRawTag(80);
        output.WriteUInt32(WtsdWinNum);
      }
      if (HasPfrNum) {
        output.WriteRawTag(88);
        output.WriteUInt32(PfrNum);
      }
      if (HasBet3Num) {
        output.WriteRawTag(96);
        output.WriteUInt32(Bet3Num);
      }
      if (HasBetcNum) {
        output.WriteRawTag(104);
        output.WriteUInt32(BetcNum);
      }
      if (HasWinNum) {
        output.WriteRawTag(112);
        output.WriteUInt32(WinNum);
      }
      if (HasFlopNum) {
        output.WriteRawTag(120);
        output.WriteUInt32(FlopNum);
      }
      if (HasPreFlopLastRaiseNum) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PreFlopLastRaiseNum);
      }
      if (HasPreFlopSecondRaiseNum) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(PreFlopSecondRaiseNum);
      }
      if (HasFoldTo3BetNum) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(FoldTo3BetNum);
      }
      if (HasFaceTo3BetNum) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(FaceTo3BetNum);
      }
      if (HasStealRaiseNum) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(StealRaiseNum);
      }
      if (HasStealPosNum) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(StealPosNum);
      }
      if (HasFlopCheckRaiseNum) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(FlopCheckRaiseNum);
      }
      if (HasFlopCheckBeingRaiseNum) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(FlopCheckBeingRaiseNum);
      }
      if (HasFoldToCbetNum) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(FoldToCbetNum);
      }
      if (HasFaceToCbetNum) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(FaceToCbetNum);
      }
      if (HasFantasyNum) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(FantasyNum);
      }
      if (HasRefantasyNum) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RefantasyNum);
      }
      if (HasQQNum) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(QQNum);
      }
      if (HasKKNum) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(KKNum);
      }
      if (HasAANum) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(AANum);
      }
      if (HasThreeKindNum) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(ThreeKindNum);
      }
      if (HasRegularNum) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RegularNum);
      }
      if (HasProgressiveNum) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(ProgressiveNum);
      }
      if (HasUltimateNum) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(UltimateNum);
      }
      if (HasWildRegularNum) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(WildRegularNum);
      }
      if (HasWildProgressiveNum) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(WildProgressiveNum);
      }
      if (HasWildUltimateNum) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(WildUltimateNum);
      }
      if (HasPusoyRate) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(PusoyRate);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(TotalBetting);
      }
      if (HasBombpotTimes) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(BombpotTimes);
      }
      if (HasTongitsTimes) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(TongitsTimes);
      }
      if (HasHitpotTimes) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(HitpotTimes);
      }
      if (HasFightTimes) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(FightTimes);
      }
      if (HasChallengeTimes) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(ChallengeTimes);
      }
      if (HasTongitsTieTimes) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(TongitsTieTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHandsNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HandsNum);
      }
      if (HasSetNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetNum);
      }
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (HasBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Buyin);
      }
      if (HasBackup) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Backup);
      }
      if (HasFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (HasVpipNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VpipNum);
      }
      if (HasVpipWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VpipWinNum);
      }
      if (HasWtsdNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WtsdNum);
      }
      if (HasWtsdWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WtsdWinNum);
      }
      if (HasPfrNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PfrNum);
      }
      if (HasBet3Num) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bet3Num);
      }
      if (HasBetcNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BetcNum);
      }
      if (HasWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinNum);
      }
      if (HasFlopNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FlopNum);
      }
      if (HasPreFlopLastRaiseNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreFlopLastRaiseNum);
      }
      if (HasPreFlopSecondRaiseNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PreFlopSecondRaiseNum);
      }
      if (HasFoldTo3BetNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FoldTo3BetNum);
      }
      if (HasFaceTo3BetNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FaceTo3BetNum);
      }
      if (HasStealRaiseNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StealRaiseNum);
      }
      if (HasStealPosNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StealPosNum);
      }
      if (HasFlopCheckRaiseNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlopCheckRaiseNum);
      }
      if (HasFlopCheckBeingRaiseNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlopCheckBeingRaiseNum);
      }
      if (HasFoldToCbetNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FoldToCbetNum);
      }
      if (HasFaceToCbetNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FaceToCbetNum);
      }
      if (HasFantasyNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FantasyNum);
      }
      if (HasRefantasyNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RefantasyNum);
      }
      if (HasQQNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(QQNum);
      }
      if (HasKKNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KKNum);
      }
      if (HasAANum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AANum);
      }
      if (HasThreeKindNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThreeKindNum);
      }
      if (HasRegularNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RegularNum);
      }
      if (HasProgressiveNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProgressiveNum);
      }
      if (HasUltimateNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UltimateNum);
      }
      if (HasWildRegularNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WildRegularNum);
      }
      if (HasWildProgressiveNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WildProgressiveNum);
      }
      if (HasWildUltimateNum) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WildUltimateNum);
      }
      if (HasPusoyRate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PusoyRate);
      }
      if (HasTotalBetting) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalBetting);
      }
      if (HasBombpotTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BombpotTimes);
      }
      if (HasTongitsTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TongitsTimes);
      }
      if (HasHitpotTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitpotTimes);
      }
      if (HasFightTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FightTimes);
      }
      if (HasChallengeTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeTimes);
      }
      if (HasTongitsTieTimes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TongitsTieTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PersonalData other) {
      if (other == null) {
        return;
      }
      if (other.HasHandsNum) {
        HandsNum = other.HandsNum;
      }
      if (other.HasSetNum) {
        SetNum = other.SetNum;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      if (other.HasBuyin) {
        Buyin = other.Buyin;
      }
      if (other.HasBackup) {
        Backup = other.Backup;
      }
      if (other.HasFee) {
        Fee = other.Fee;
      }
      if (other.HasVpipNum) {
        VpipNum = other.VpipNum;
      }
      if (other.HasVpipWinNum) {
        VpipWinNum = other.VpipWinNum;
      }
      if (other.HasWtsdNum) {
        WtsdNum = other.WtsdNum;
      }
      if (other.HasWtsdWinNum) {
        WtsdWinNum = other.WtsdWinNum;
      }
      if (other.HasPfrNum) {
        PfrNum = other.PfrNum;
      }
      if (other.HasBet3Num) {
        Bet3Num = other.Bet3Num;
      }
      if (other.HasBetcNum) {
        BetcNum = other.BetcNum;
      }
      if (other.HasWinNum) {
        WinNum = other.WinNum;
      }
      if (other.HasFlopNum) {
        FlopNum = other.FlopNum;
      }
      if (other.HasPreFlopLastRaiseNum) {
        PreFlopLastRaiseNum = other.PreFlopLastRaiseNum;
      }
      if (other.HasPreFlopSecondRaiseNum) {
        PreFlopSecondRaiseNum = other.PreFlopSecondRaiseNum;
      }
      if (other.HasFoldTo3BetNum) {
        FoldTo3BetNum = other.FoldTo3BetNum;
      }
      if (other.HasFaceTo3BetNum) {
        FaceTo3BetNum = other.FaceTo3BetNum;
      }
      if (other.HasStealRaiseNum) {
        StealRaiseNum = other.StealRaiseNum;
      }
      if (other.HasStealPosNum) {
        StealPosNum = other.StealPosNum;
      }
      if (other.HasFlopCheckRaiseNum) {
        FlopCheckRaiseNum = other.FlopCheckRaiseNum;
      }
      if (other.HasFlopCheckBeingRaiseNum) {
        FlopCheckBeingRaiseNum = other.FlopCheckBeingRaiseNum;
      }
      if (other.HasFoldToCbetNum) {
        FoldToCbetNum = other.FoldToCbetNum;
      }
      if (other.HasFaceToCbetNum) {
        FaceToCbetNum = other.FaceToCbetNum;
      }
      if (other.HasFantasyNum) {
        FantasyNum = other.FantasyNum;
      }
      if (other.HasRefantasyNum) {
        RefantasyNum = other.RefantasyNum;
      }
      if (other.HasQQNum) {
        QQNum = other.QQNum;
      }
      if (other.HasKKNum) {
        KKNum = other.KKNum;
      }
      if (other.HasAANum) {
        AANum = other.AANum;
      }
      if (other.HasThreeKindNum) {
        ThreeKindNum = other.ThreeKindNum;
      }
      if (other.HasRegularNum) {
        RegularNum = other.RegularNum;
      }
      if (other.HasProgressiveNum) {
        ProgressiveNum = other.ProgressiveNum;
      }
      if (other.HasUltimateNum) {
        UltimateNum = other.UltimateNum;
      }
      if (other.HasWildRegularNum) {
        WildRegularNum = other.WildRegularNum;
      }
      if (other.HasWildProgressiveNum) {
        WildProgressiveNum = other.WildProgressiveNum;
      }
      if (other.HasWildUltimateNum) {
        WildUltimateNum = other.WildUltimateNum;
      }
      if (other.HasPusoyRate) {
        PusoyRate = other.PusoyRate;
      }
      if (other.HasTotalBetting) {
        TotalBetting = other.TotalBetting;
      }
      if (other.HasBombpotTimes) {
        BombpotTimes = other.BombpotTimes;
      }
      if (other.HasTongitsTimes) {
        TongitsTimes = other.TongitsTimes;
      }
      if (other.HasHitpotTimes) {
        HitpotTimes = other.HitpotTimes;
      }
      if (other.HasFightTimes) {
        FightTimes = other.FightTimes;
      }
      if (other.HasChallengeTimes) {
        ChallengeTimes = other.ChallengeTimes;
      }
      if (other.HasTongitsTieTimes) {
        TongitsTieTimes = other.TongitsTieTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandsNum = input.ReadUInt32();
            break;
          }
          case 16: {
            SetNum = input.ReadUInt32();
            break;
          }
          case 24: {
            Profit = input.ReadInt64();
            break;
          }
          case 32: {
            Buyin = input.ReadInt64();
            break;
          }
          case 40: {
            Backup = input.ReadInt64();
            break;
          }
          case 48: {
            Fee = input.ReadInt64();
            break;
          }
          case 56: {
            VpipNum = input.ReadUInt32();
            break;
          }
          case 64: {
            VpipWinNum = input.ReadUInt32();
            break;
          }
          case 72: {
            WtsdNum = input.ReadUInt32();
            break;
          }
          case 80: {
            WtsdWinNum = input.ReadUInt32();
            break;
          }
          case 88: {
            PfrNum = input.ReadUInt32();
            break;
          }
          case 96: {
            Bet3Num = input.ReadUInt32();
            break;
          }
          case 104: {
            BetcNum = input.ReadUInt32();
            break;
          }
          case 112: {
            WinNum = input.ReadUInt32();
            break;
          }
          case 120: {
            FlopNum = input.ReadUInt32();
            break;
          }
          case 128: {
            PreFlopLastRaiseNum = input.ReadUInt32();
            break;
          }
          case 136: {
            PreFlopSecondRaiseNum = input.ReadUInt32();
            break;
          }
          case 144: {
            FoldTo3BetNum = input.ReadUInt32();
            break;
          }
          case 152: {
            FaceTo3BetNum = input.ReadUInt32();
            break;
          }
          case 160: {
            StealRaiseNum = input.ReadUInt32();
            break;
          }
          case 168: {
            StealPosNum = input.ReadUInt32();
            break;
          }
          case 176: {
            FlopCheckRaiseNum = input.ReadUInt32();
            break;
          }
          case 184: {
            FlopCheckBeingRaiseNum = input.ReadUInt32();
            break;
          }
          case 192: {
            FoldToCbetNum = input.ReadUInt32();
            break;
          }
          case 200: {
            FaceToCbetNum = input.ReadUInt32();
            break;
          }
          case 208: {
            FantasyNum = input.ReadUInt32();
            break;
          }
          case 216: {
            RefantasyNum = input.ReadUInt32();
            break;
          }
          case 224: {
            QQNum = input.ReadUInt32();
            break;
          }
          case 232: {
            KKNum = input.ReadUInt32();
            break;
          }
          case 240: {
            AANum = input.ReadUInt32();
            break;
          }
          case 248: {
            ThreeKindNum = input.ReadUInt32();
            break;
          }
          case 256: {
            RegularNum = input.ReadUInt32();
            break;
          }
          case 264: {
            ProgressiveNum = input.ReadUInt32();
            break;
          }
          case 272: {
            UltimateNum = input.ReadUInt32();
            break;
          }
          case 280: {
            WildRegularNum = input.ReadUInt32();
            break;
          }
          case 288: {
            WildProgressiveNum = input.ReadUInt32();
            break;
          }
          case 296: {
            WildUltimateNum = input.ReadUInt32();
            break;
          }
          case 304: {
            PusoyRate = input.ReadUInt32();
            break;
          }
          case 312: {
            TotalBetting = input.ReadInt64();
            break;
          }
          case 320: {
            BombpotTimes = input.ReadUInt32();
            break;
          }
          case 328: {
            TongitsTimes = input.ReadUInt32();
            break;
          }
          case 336: {
            HitpotTimes = input.ReadUInt32();
            break;
          }
          case 344: {
            FightTimes = input.ReadUInt32();
            break;
          }
          case 352: {
            ChallengeTimes = input.ReadUInt32();
            break;
          }
          case 360: {
            TongitsTieTimes = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HandsNum = input.ReadUInt32();
            break;
          }
          case 16: {
            SetNum = input.ReadUInt32();
            break;
          }
          case 24: {
            Profit = input.ReadInt64();
            break;
          }
          case 32: {
            Buyin = input.ReadInt64();
            break;
          }
          case 40: {
            Backup = input.ReadInt64();
            break;
          }
          case 48: {
            Fee = input.ReadInt64();
            break;
          }
          case 56: {
            VpipNum = input.ReadUInt32();
            break;
          }
          case 64: {
            VpipWinNum = input.ReadUInt32();
            break;
          }
          case 72: {
            WtsdNum = input.ReadUInt32();
            break;
          }
          case 80: {
            WtsdWinNum = input.ReadUInt32();
            break;
          }
          case 88: {
            PfrNum = input.ReadUInt32();
            break;
          }
          case 96: {
            Bet3Num = input.ReadUInt32();
            break;
          }
          case 104: {
            BetcNum = input.ReadUInt32();
            break;
          }
          case 112: {
            WinNum = input.ReadUInt32();
            break;
          }
          case 120: {
            FlopNum = input.ReadUInt32();
            break;
          }
          case 128: {
            PreFlopLastRaiseNum = input.ReadUInt32();
            break;
          }
          case 136: {
            PreFlopSecondRaiseNum = input.ReadUInt32();
            break;
          }
          case 144: {
            FoldTo3BetNum = input.ReadUInt32();
            break;
          }
          case 152: {
            FaceTo3BetNum = input.ReadUInt32();
            break;
          }
          case 160: {
            StealRaiseNum = input.ReadUInt32();
            break;
          }
          case 168: {
            StealPosNum = input.ReadUInt32();
            break;
          }
          case 176: {
            FlopCheckRaiseNum = input.ReadUInt32();
            break;
          }
          case 184: {
            FlopCheckBeingRaiseNum = input.ReadUInt32();
            break;
          }
          case 192: {
            FoldToCbetNum = input.ReadUInt32();
            break;
          }
          case 200: {
            FaceToCbetNum = input.ReadUInt32();
            break;
          }
          case 208: {
            FantasyNum = input.ReadUInt32();
            break;
          }
          case 216: {
            RefantasyNum = input.ReadUInt32();
            break;
          }
          case 224: {
            QQNum = input.ReadUInt32();
            break;
          }
          case 232: {
            KKNum = input.ReadUInt32();
            break;
          }
          case 240: {
            AANum = input.ReadUInt32();
            break;
          }
          case 248: {
            ThreeKindNum = input.ReadUInt32();
            break;
          }
          case 256: {
            RegularNum = input.ReadUInt32();
            break;
          }
          case 264: {
            ProgressiveNum = input.ReadUInt32();
            break;
          }
          case 272: {
            UltimateNum = input.ReadUInt32();
            break;
          }
          case 280: {
            WildRegularNum = input.ReadUInt32();
            break;
          }
          case 288: {
            WildProgressiveNum = input.ReadUInt32();
            break;
          }
          case 296: {
            WildUltimateNum = input.ReadUInt32();
            break;
          }
          case 304: {
            PusoyRate = input.ReadUInt32();
            break;
          }
          case 312: {
            TotalBetting = input.ReadInt64();
            break;
          }
          case 320: {
            BombpotTimes = input.ReadUInt32();
            break;
          }
          case 328: {
            TongitsTimes = input.ReadUInt32();
            break;
          }
          case 336: {
            HitpotTimes = input.ReadUInt32();
            break;
          }
          case 344: {
            FightTimes = input.ReadUInt32();
            break;
          }
          case 352: {
            ChallengeTimes = input.ReadUInt32();
            break;
          }
          case 360: {
            TongitsTieTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///个人总数据
  /// </summary>
  public sealed partial class UserTotalDataREQ : pb::IMessage<UserTotalDataREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserTotalDataREQ> _parser = new pb::MessageParser<UserTotalDataREQ>(() => new UserTotalDataREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserTotalDataREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTotalDataREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTotalDataREQ(UserTotalDataREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      reqType_ = other.reqType_;
      roomid_ = other.roomid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTotalDataREQ Clone() {
      return new UserTotalDataREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "req_type" field.</summary>
    public const int ReqTypeFieldNumber = 3;
    private readonly static int ReqTypeDefaultValue = 0;

    private int reqType_;
    /// <summary>
    /// 1:自己 2:他人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqType {
      get { if ((_hasBits0 & 4) != 0) { return reqType_; } else { return ReqTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        reqType_ = value;
      }
    }
    /// <summary>Gets whether the "req_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "req_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 4;
    private readonly static int RoomidDefaultValue = 0;

    private int roomid_;
    /// <summary>
    /// 用于支持客户端多进程区分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Roomid {
      get { if ((_hasBits0 & 8) != 0) { return roomid_; } else { return RoomidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        roomid_ = value;
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserTotalDataREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserTotalDataREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (ReqType != other.ReqType) return false;
      if (Roomid != other.Roomid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasReqType) hash ^= ReqType.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasReqType) {
        output.WriteRawTag(24);
        output.WriteInt32(ReqType);
      }
      if (HasRoomid) {
        output.WriteRawTag(32);
        output.WriteInt32(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasReqType) {
        output.WriteRawTag(24);
        output.WriteInt32(ReqType);
      }
      if (HasRoomid) {
        output.WriteRawTag(32);
        output.WriteInt32(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasReqType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserTotalDataREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasReqType) {
        ReqType = other.ReqType;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            ReqType = input.ReadInt32();
            break;
          }
          case 32: {
            Roomid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            ReqType = input.ReadInt32();
            break;
          }
          case 32: {
            Roomid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserTotalDataRSP : pb::IMessage<UserTotalDataRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserTotalDataRSP> _parser = new pb::MessageParser<UserTotalDataRSP>(() => new UserTotalDataRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserTotalDataRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTotalDataRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTotalDataRSP(UserTotalDataRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      totalData_ = other.totalData_ != null ? other.totalData_.Clone() : null;
      mvpNum_ = other.mvpNum_;
      richestNum_ = other.richestNum_;
      fishNum_ = other.fishNum_;
      selectNum_ = other.selectNum_;
      setWinNum_ = other.setWinNum_;
      rspType_ = other.rspType_;
      roomid_ = other.roomid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserTotalDataRSP Clone() {
      return new UserTotalDataRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_data" field.</summary>
    public const int TotalDataFieldNumber = 3;
    private global::Texas.Protocol.PersonalData totalData_;
    /// <summary>
    ///个人总数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.PersonalData TotalData {
      get { return totalData_; }
      set {
        totalData_ = value;
      }
    }

    /// <summary>Field number for the "mvp_num" field.</summary>
    public const int MvpNumFieldNumber = 4;
    private readonly static uint MvpNumDefaultValue = 0;

    private uint mvpNum_;
    /// <summary>
    ///mvp次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MvpNum {
      get { if ((_hasBits0 & 4) != 0) { return mvpNum_; } else { return MvpNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mvpNum_ = value;
      }
    }
    /// <summary>Gets whether the "mvp_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMvpNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mvp_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMvpNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "richest_num" field.</summary>
    public const int RichestNumFieldNumber = 5;
    private readonly static uint RichestNumDefaultValue = 0;

    private uint richestNum_;
    /// <summary>
    ///土豪次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RichestNum {
      get { if ((_hasBits0 & 8) != 0) { return richestNum_; } else { return RichestNumDefaultValue; } }
      set {
        _hasBits0 |= 8;
        richestNum_ = value;
      }
    }
    /// <summary>Gets whether the "richest_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRichestNum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "richest_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRichestNum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "fish_num" field.</summary>
    public const int FishNumFieldNumber = 6;
    private readonly static uint FishNumDefaultValue = 0;

    private uint fishNum_;
    /// <summary>
    ///大鱼次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FishNum {
      get { if ((_hasBits0 & 16) != 0) { return fishNum_; } else { return FishNumDefaultValue; } }
      set {
        _hasBits0 |= 16;
        fishNum_ = value;
      }
    }
    /// <summary>Gets whether the "fish_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFishNum {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fish_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFishNum() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "select_num" field.</summary>
    public const int SelectNumFieldNumber = 7;
    private readonly static uint SelectNumDefaultValue = 0;

    private uint selectNum_;
    /// <summary>
    ///入圈次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SelectNum {
      get { if ((_hasBits0 & 32) != 0) { return selectNum_; } else { return SelectNumDefaultValue; } }
      set {
        _hasBits0 |= 32;
        selectNum_ = value;
      }
    }
    /// <summary>Gets whether the "select_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSelectNum {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "select_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSelectNum() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "set_win_num" field.</summary>
    public const int SetWinNumFieldNumber = 8;
    private readonly static uint SetWinNumDefaultValue = 0;

    private uint setWinNum_;
    /// <summary>
    ///夺冠次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SetWinNum {
      get { if ((_hasBits0 & 64) != 0) { return setWinNum_; } else { return SetWinNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        setWinNum_ = value;
      }
    }
    /// <summary>Gets whether the "set_win_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetWinNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "set_win_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetWinNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "rsp_type" field.</summary>
    public const int RspTypeFieldNumber = 9;
    private readonly static int RspTypeDefaultValue = 0;

    private int rspType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RspType {
      get { if ((_hasBits0 & 128) != 0) { return rspType_; } else { return RspTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rspType_ = value;
      }
    }
    /// <summary>Gets whether the "rsp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRspType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "rsp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRspType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 10;
    private readonly static int RoomidDefaultValue = 0;

    private int roomid_;
    /// <summary>
    /// 用于支持客户端多进程区分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Roomid {
      get { if ((_hasBits0 & 256) != 0) { return roomid_; } else { return RoomidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        roomid_ = value;
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserTotalDataRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserTotalDataRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(TotalData, other.TotalData)) return false;
      if (MvpNum != other.MvpNum) return false;
      if (RichestNum != other.RichestNum) return false;
      if (FishNum != other.FishNum) return false;
      if (SelectNum != other.SelectNum) return false;
      if (SetWinNum != other.SetWinNum) return false;
      if (RspType != other.RspType) return false;
      if (Roomid != other.Roomid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (totalData_ != null) hash ^= TotalData.GetHashCode();
      if (HasMvpNum) hash ^= MvpNum.GetHashCode();
      if (HasRichestNum) hash ^= RichestNum.GetHashCode();
      if (HasFishNum) hash ^= FishNum.GetHashCode();
      if (HasSelectNum) hash ^= SelectNum.GetHashCode();
      if (HasSetWinNum) hash ^= SetWinNum.GetHashCode();
      if (HasRspType) hash ^= RspType.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (totalData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalData);
      }
      if (HasMvpNum) {
        output.WriteRawTag(32);
        output.WriteUInt32(MvpNum);
      }
      if (HasRichestNum) {
        output.WriteRawTag(40);
        output.WriteUInt32(RichestNum);
      }
      if (HasFishNum) {
        output.WriteRawTag(48);
        output.WriteUInt32(FishNum);
      }
      if (HasSelectNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(SelectNum);
      }
      if (HasSetWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(SetWinNum);
      }
      if (HasRspType) {
        output.WriteRawTag(72);
        output.WriteInt32(RspType);
      }
      if (HasRoomid) {
        output.WriteRawTag(80);
        output.WriteInt32(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (totalData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalData);
      }
      if (HasMvpNum) {
        output.WriteRawTag(32);
        output.WriteUInt32(MvpNum);
      }
      if (HasRichestNum) {
        output.WriteRawTag(40);
        output.WriteUInt32(RichestNum);
      }
      if (HasFishNum) {
        output.WriteRawTag(48);
        output.WriteUInt32(FishNum);
      }
      if (HasSelectNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(SelectNum);
      }
      if (HasSetWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(SetWinNum);
      }
      if (HasRspType) {
        output.WriteRawTag(72);
        output.WriteInt32(RspType);
      }
      if (HasRoomid) {
        output.WriteRawTag(80);
        output.WriteInt32(Roomid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (totalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalData);
      }
      if (HasMvpNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MvpNum);
      }
      if (HasRichestNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RichestNum);
      }
      if (HasFishNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FishNum);
      }
      if (HasSelectNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectNum);
      }
      if (HasSetWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetWinNum);
      }
      if (HasRspType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RspType);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserTotalDataRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.totalData_ != null) {
        if (totalData_ == null) {
          TotalData = new global::Texas.Protocol.PersonalData();
        }
        TotalData.MergeFrom(other.TotalData);
      }
      if (other.HasMvpNum) {
        MvpNum = other.MvpNum;
      }
      if (other.HasRichestNum) {
        RichestNum = other.RichestNum;
      }
      if (other.HasFishNum) {
        FishNum = other.FishNum;
      }
      if (other.HasSelectNum) {
        SelectNum = other.SelectNum;
      }
      if (other.HasSetWinNum) {
        SetWinNum = other.SetWinNum;
      }
      if (other.HasRspType) {
        RspType = other.RspType;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (totalData_ == null) {
              TotalData = new global::Texas.Protocol.PersonalData();
            }
            input.ReadMessage(TotalData);
            break;
          }
          case 32: {
            MvpNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RichestNum = input.ReadUInt32();
            break;
          }
          case 48: {
            FishNum = input.ReadUInt32();
            break;
          }
          case 56: {
            SelectNum = input.ReadUInt32();
            break;
          }
          case 64: {
            SetWinNum = input.ReadUInt32();
            break;
          }
          case 72: {
            RspType = input.ReadInt32();
            break;
          }
          case 80: {
            Roomid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (totalData_ == null) {
              TotalData = new global::Texas.Protocol.PersonalData();
            }
            input.ReadMessage(TotalData);
            break;
          }
          case 32: {
            MvpNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RichestNum = input.ReadUInt32();
            break;
          }
          case 48: {
            FishNum = input.ReadUInt32();
            break;
          }
          case 56: {
            SelectNum = input.ReadUInt32();
            break;
          }
          case 64: {
            SetWinNum = input.ReadUInt32();
            break;
          }
          case 72: {
            RspType = input.ReadInt32();
            break;
          }
          case 80: {
            Roomid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserCareerData : pb::IMessage<UserCareerData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserCareerData> _parser = new pb::MessageParser<UserCareerData>(() => new UserCareerData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserCareerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserCareerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserCareerData(UserCareerData other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      totalData_ = other.totalData_ != null ? other.totalData_.Clone() : null;
      mvpNum_ = other.mvpNum_;
      richestNum_ = other.richestNum_;
      fishNum_ = other.fishNum_;
      selectNum_ = other.selectNum_;
      setWinNum_ = other.setWinNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserCareerData Clone() {
      return new UserCareerData(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_data" field.</summary>
    public const int TotalDataFieldNumber = 3;
    private global::Texas.Protocol.PersonalData totalData_;
    /// <summary>
    ///个人总数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.PersonalData TotalData {
      get { return totalData_; }
      set {
        totalData_ = value;
      }
    }

    /// <summary>Field number for the "mvp_num" field.</summary>
    public const int MvpNumFieldNumber = 4;
    private readonly static uint MvpNumDefaultValue = 0;

    private uint mvpNum_;
    /// <summary>
    ///mvp次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MvpNum {
      get { if ((_hasBits0 & 4) != 0) { return mvpNum_; } else { return MvpNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mvpNum_ = value;
      }
    }
    /// <summary>Gets whether the "mvp_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMvpNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mvp_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMvpNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "richest_num" field.</summary>
    public const int RichestNumFieldNumber = 5;
    private readonly static uint RichestNumDefaultValue = 0;

    private uint richestNum_;
    /// <summary>
    ///土豪次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RichestNum {
      get { if ((_hasBits0 & 8) != 0) { return richestNum_; } else { return RichestNumDefaultValue; } }
      set {
        _hasBits0 |= 8;
        richestNum_ = value;
      }
    }
    /// <summary>Gets whether the "richest_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRichestNum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "richest_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRichestNum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "fish_num" field.</summary>
    public const int FishNumFieldNumber = 6;
    private readonly static uint FishNumDefaultValue = 0;

    private uint fishNum_;
    /// <summary>
    ///大鱼次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FishNum {
      get { if ((_hasBits0 & 16) != 0) { return fishNum_; } else { return FishNumDefaultValue; } }
      set {
        _hasBits0 |= 16;
        fishNum_ = value;
      }
    }
    /// <summary>Gets whether the "fish_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFishNum {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fish_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFishNum() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "select_num" field.</summary>
    public const int SelectNumFieldNumber = 7;
    private readonly static uint SelectNumDefaultValue = 0;

    private uint selectNum_;
    /// <summary>
    ///入圈次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SelectNum {
      get { if ((_hasBits0 & 32) != 0) { return selectNum_; } else { return SelectNumDefaultValue; } }
      set {
        _hasBits0 |= 32;
        selectNum_ = value;
      }
    }
    /// <summary>Gets whether the "select_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSelectNum {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "select_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSelectNum() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "set_win_num" field.</summary>
    public const int SetWinNumFieldNumber = 8;
    private readonly static uint SetWinNumDefaultValue = 0;

    private uint setWinNum_;
    /// <summary>
    ///夺冠次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SetWinNum {
      get { if ((_hasBits0 & 64) != 0) { return setWinNum_; } else { return SetWinNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        setWinNum_ = value;
      }
    }
    /// <summary>Gets whether the "set_win_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetWinNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "set_win_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetWinNum() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserCareerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserCareerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(TotalData, other.TotalData)) return false;
      if (MvpNum != other.MvpNum) return false;
      if (RichestNum != other.RichestNum) return false;
      if (FishNum != other.FishNum) return false;
      if (SelectNum != other.SelectNum) return false;
      if (SetWinNum != other.SetWinNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (totalData_ != null) hash ^= TotalData.GetHashCode();
      if (HasMvpNum) hash ^= MvpNum.GetHashCode();
      if (HasRichestNum) hash ^= RichestNum.GetHashCode();
      if (HasFishNum) hash ^= FishNum.GetHashCode();
      if (HasSelectNum) hash ^= SelectNum.GetHashCode();
      if (HasSetWinNum) hash ^= SetWinNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (totalData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalData);
      }
      if (HasMvpNum) {
        output.WriteRawTag(32);
        output.WriteUInt32(MvpNum);
      }
      if (HasRichestNum) {
        output.WriteRawTag(40);
        output.WriteUInt32(RichestNum);
      }
      if (HasFishNum) {
        output.WriteRawTag(48);
        output.WriteUInt32(FishNum);
      }
      if (HasSelectNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(SelectNum);
      }
      if (HasSetWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(SetWinNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (totalData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalData);
      }
      if (HasMvpNum) {
        output.WriteRawTag(32);
        output.WriteUInt32(MvpNum);
      }
      if (HasRichestNum) {
        output.WriteRawTag(40);
        output.WriteUInt32(RichestNum);
      }
      if (HasFishNum) {
        output.WriteRawTag(48);
        output.WriteUInt32(FishNum);
      }
      if (HasSelectNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(SelectNum);
      }
      if (HasSetWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(SetWinNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (totalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalData);
      }
      if (HasMvpNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MvpNum);
      }
      if (HasRichestNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RichestNum);
      }
      if (HasFishNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FishNum);
      }
      if (HasSelectNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectNum);
      }
      if (HasSetWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetWinNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserCareerData other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.totalData_ != null) {
        if (totalData_ == null) {
          TotalData = new global::Texas.Protocol.PersonalData();
        }
        TotalData.MergeFrom(other.TotalData);
      }
      if (other.HasMvpNum) {
        MvpNum = other.MvpNum;
      }
      if (other.HasRichestNum) {
        RichestNum = other.RichestNum;
      }
      if (other.HasFishNum) {
        FishNum = other.FishNum;
      }
      if (other.HasSelectNum) {
        SelectNum = other.SelectNum;
      }
      if (other.HasSetWinNum) {
        SetWinNum = other.SetWinNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (totalData_ == null) {
              TotalData = new global::Texas.Protocol.PersonalData();
            }
            input.ReadMessage(TotalData);
            break;
          }
          case 32: {
            MvpNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RichestNum = input.ReadUInt32();
            break;
          }
          case 48: {
            FishNum = input.ReadUInt32();
            break;
          }
          case 56: {
            SelectNum = input.ReadUInt32();
            break;
          }
          case 64: {
            SetWinNum = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (totalData_ == null) {
              TotalData = new global::Texas.Protocol.PersonalData();
            }
            input.ReadMessage(TotalData);
            break;
          }
          case 32: {
            MvpNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RichestNum = input.ReadUInt32();
            break;
          }
          case 48: {
            FishNum = input.ReadUInt32();
            break;
          }
          case 56: {
            SelectNum = input.ReadUInt32();
            break;
          }
          case 64: {
            SetWinNum = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiUsersTotalDataREQ : pb::IMessage<MultiUsersTotalDataREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiUsersTotalDataREQ> _parser = new pb::MessageParser<MultiUsersTotalDataREQ>(() => new MultiUsersTotalDataREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MultiUsersTotalDataREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiUsersTotalDataREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiUsersTotalDataREQ(MultiUsersTotalDataREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_.Clone();
      dataType_ = other.dataType_;
      reqType_ = other.reqType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiUsersTotalDataREQ Clone() {
      return new MultiUsersTotalDataREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_uid_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> uid_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> Uid {
      get { return uid_; }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 1) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "req_type" field.</summary>
    public const int ReqTypeFieldNumber = 3;
    private readonly static int ReqTypeDefaultValue = 0;

    private int reqType_;
    /// <summary>
    /// 1:自己 2:他人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqType {
      get { if ((_hasBits0 & 2) != 0) { return reqType_; } else { return ReqTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reqType_ = value;
      }
    }
    /// <summary>Gets whether the "req_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "req_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MultiUsersTotalDataREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MultiUsersTotalDataREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uid_.Equals(other.uid_)) return false;
      if (DataType != other.DataType) return false;
      if (ReqType != other.ReqType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uid_.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasReqType) hash ^= ReqType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      uid_.WriteTo(output, _repeated_uid_codec);
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasReqType) {
        output.WriteRawTag(24);
        output.WriteInt32(ReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      uid_.WriteTo(ref output, _repeated_uid_codec);
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasReqType) {
        output.WriteRawTag(24);
        output.WriteInt32(ReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasReqType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MultiUsersTotalDataREQ other) {
      if (other == null) {
        return;
      }
      uid_.Add(other.uid_);
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasReqType) {
        ReqType = other.ReqType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(ref input, _repeated_uid_codec);
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiUsersTotalDataRSP : pb::IMessage<MultiUsersTotalDataRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiUsersTotalDataRSP> _parser = new pb::MessageParser<MultiUsersTotalDataRSP>(() => new MultiUsersTotalDataRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MultiUsersTotalDataRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiUsersTotalDataRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiUsersTotalDataRSP(MultiUsersTotalDataRSP other) : this() {
      _hasBits0 = other._hasBits0;
      userData_ = other.userData_.Clone();
      rspType_ = other.rspType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiUsersTotalDataRSP Clone() {
      return new MultiUsersTotalDataRSP(this);
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserCareerData> _repeated_userData_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.UserCareerData.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserCareerData> userData_ = new pbc::RepeatedField<global::Texas.Protocol.UserCareerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserCareerData> UserData {
      get { return userData_; }
    }

    /// <summary>Field number for the "rsp_type" field.</summary>
    public const int RspTypeFieldNumber = 2;
    private readonly static int RspTypeDefaultValue = 0;

    private int rspType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RspType {
      get { if ((_hasBits0 & 1) != 0) { return rspType_; } else { return RspTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rspType_ = value;
      }
    }
    /// <summary>Gets whether the "rsp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRspType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rsp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRspType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MultiUsersTotalDataRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MultiUsersTotalDataRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userData_.Equals(other.userData_)) return false;
      if (RspType != other.RspType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userData_.GetHashCode();
      if (HasRspType) hash ^= RspType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      userData_.WriteTo(output, _repeated_userData_codec);
      if (HasRspType) {
        output.WriteRawTag(16);
        output.WriteInt32(RspType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      userData_.WriteTo(ref output, _repeated_userData_codec);
      if (HasRspType) {
        output.WriteRawTag(16);
        output.WriteInt32(RspType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += userData_.CalculateSize(_repeated_userData_codec);
      if (HasRspType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RspType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MultiUsersTotalDataRSP other) {
      if (other == null) {
        return;
      }
      userData_.Add(other.userData_);
      if (other.HasRspType) {
        RspType = other.RspType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userData_.AddEntriesFrom(input, _repeated_userData_codec);
            break;
          }
          case 16: {
            RspType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            userData_.AddEntriesFrom(ref input, _repeated_userData_codec);
            break;
          }
          case 16: {
            RspType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserDayData : pb::IMessage<UserDayData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDayData> _parser = new pb::MessageParser<UserDayData>(() => new UserDayData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDayData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDayData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDayData(UserDayData other) : this() {
      _hasBits0 = other._hasBits0;
      day_ = other.day_;
      profit_ = other.profit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDayData Clone() {
      return new UserDayData(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private readonly static string DayDefaultValue = "";

    private string day_;
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Day {
      get { return day_ ?? DayDefaultValue; }
      set {
        day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDay {
      get { return day_ != null; }
    }
    /// <summary>Clears the value of the "day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDay() {
      day_ = null;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 2;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    /// <summary>
    ///盈利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 1) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDayData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDayData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (Profit != other.Profit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDay) hash ^= Day.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      if (HasProfit) {
        output.WriteRawTag(16);
        output.WriteInt64(Profit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      if (HasProfit) {
        output.WriteRawTag(16);
        output.WriteInt64(Profit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
      }
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDayData other) {
      if (other == null) {
        return;
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 16: {
            Profit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 16: {
            Profit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///查询个人每天盈亏
  /// </summary>
  public sealed partial class UserDailyProfitREQ : pb::IMessage<UserDailyProfitREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDailyProfitREQ> _parser = new pb::MessageParser<UserDailyProfitREQ>(() => new UserDailyProfitREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDailyProfitREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyProfitREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyProfitREQ(UserDailyProfitREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      startDay_ = other.startDay_;
      endDay_ = other.endDay_;
      reqType_ = other.reqType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyProfitREQ Clone() {
      return new UserDailyProfitREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "start_day" field.</summary>
    public const int StartDayFieldNumber = 3;
    private readonly static string StartDayDefaultValue = "";

    private string startDay_;
    /// <summary>
    ///开始日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartDay {
      get { return startDay_ ?? StartDayDefaultValue; }
      set {
        startDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartDay {
      get { return startDay_ != null; }
    }
    /// <summary>Clears the value of the "start_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartDay() {
      startDay_ = null;
    }

    /// <summary>Field number for the "end_day" field.</summary>
    public const int EndDayFieldNumber = 4;
    private readonly static string EndDayDefaultValue = "";

    private string endDay_;
    /// <summary>
    ///结束日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndDay {
      get { return endDay_ ?? EndDayDefaultValue; }
      set {
        endDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndDay {
      get { return endDay_ != null; }
    }
    /// <summary>Clears the value of the "end_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndDay() {
      endDay_ = null;
    }

    /// <summary>Field number for the "req_type" field.</summary>
    public const int ReqTypeFieldNumber = 5;
    private readonly static int ReqTypeDefaultValue = 0;

    private int reqType_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqType {
      get { if ((_hasBits0 & 4) != 0) { return reqType_; } else { return ReqTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        reqType_ = value;
      }
    }
    /// <summary>Gets whether the "req_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "req_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqType() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDailyProfitREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDailyProfitREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (StartDay != other.StartDay) return false;
      if (EndDay != other.EndDay) return false;
      if (ReqType != other.ReqType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasStartDay) hash ^= StartDay.GetHashCode();
      if (HasEndDay) hash ^= EndDay.GetHashCode();
      if (HasReqType) hash ^= ReqType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartDay) {
        output.WriteRawTag(26);
        output.WriteString(StartDay);
      }
      if (HasEndDay) {
        output.WriteRawTag(34);
        output.WriteString(EndDay);
      }
      if (HasReqType) {
        output.WriteRawTag(40);
        output.WriteInt32(ReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartDay) {
        output.WriteRawTag(26);
        output.WriteString(StartDay);
      }
      if (HasEndDay) {
        output.WriteRawTag(34);
        output.WriteString(EndDay);
      }
      if (HasReqType) {
        output.WriteRawTag(40);
        output.WriteInt32(ReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasStartDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDay);
      }
      if (HasEndDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDay);
      }
      if (HasReqType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDailyProfitREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasStartDay) {
        StartDay = other.StartDay;
      }
      if (other.HasEndDay) {
        EndDay = other.EndDay;
      }
      if (other.HasReqType) {
        ReqType = other.ReqType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartDay = input.ReadString();
            break;
          }
          case 34: {
            EndDay = input.ReadString();
            break;
          }
          case 40: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartDay = input.ReadString();
            break;
          }
          case 34: {
            EndDay = input.ReadString();
            break;
          }
          case 40: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserDailyProfitRSP : pb::IMessage<UserDailyProfitRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDailyProfitRSP> _parser = new pb::MessageParser<UserDailyProfitRSP>(() => new UserDailyProfitRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDailyProfitRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyProfitRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyProfitRSP(UserDailyProfitRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      profitData_ = other.profitData_.Clone();
      count_ = other.count_;
      totalProfit_ = other.totalProfit_;
      rspType_ = other.rspType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyProfitRSP Clone() {
      return new UserDailyProfitRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profit_data" field.</summary>
    public const int ProfitDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserDayData> _repeated_profitData_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.UserDayData.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserDayData> profitData_ = new pbc::RepeatedField<global::Texas.Protocol.UserDayData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserDayData> ProfitData {
      get { return profitData_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    ///返回数据个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 4) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 5;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    /// <summary>
    ///总盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 8) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 8;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "rsp_type" field.</summary>
    public const int RspTypeFieldNumber = 6;
    private readonly static int RspTypeDefaultValue = 0;

    private int rspType_;
    /// <summary>
    ///返回类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RspType {
      get { if ((_hasBits0 & 16) != 0) { return rspType_; } else { return RspTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        rspType_ = value;
      }
    }
    /// <summary>Gets whether the "rsp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRspType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "rsp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRspType() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDailyProfitRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDailyProfitRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if(!profitData_.Equals(other.profitData_)) return false;
      if (Count != other.Count) return false;
      if (TotalProfit != other.TotalProfit) return false;
      if (RspType != other.RspType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      hash ^= profitData_.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (HasRspType) hash ^= RspType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      profitData_.WriteTo(output, _repeated_profitData_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProfit);
      }
      if (HasRspType) {
        output.WriteRawTag(48);
        output.WriteInt32(RspType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      profitData_.WriteTo(ref output, _repeated_profitData_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProfit);
      }
      if (HasRspType) {
        output.WriteRawTag(48);
        output.WriteInt32(RspType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      size += profitData_.CalculateSize(_repeated_profitData_codec);
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (HasRspType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RspType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDailyProfitRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      profitData_.Add(other.profitData_);
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      if (other.HasRspType) {
        RspType = other.RspType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            profitData_.AddEntriesFrom(input, _repeated_profitData_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 48: {
            RspType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            profitData_.AddEntriesFrom(ref input, _repeated_profitData_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 48: {
            RspType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///近7天盈亏
  /// </summary>
  public sealed partial class UserLast7DayProfitREQ : pb::IMessage<UserLast7DayProfitREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserLast7DayProfitREQ> _parser = new pb::MessageParser<UserLast7DayProfitREQ>(() => new UserLast7DayProfitREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserLast7DayProfitREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLast7DayProfitREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLast7DayProfitREQ(UserLast7DayProfitREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      endDay_ = other.endDay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLast7DayProfitREQ Clone() {
      return new UserLast7DayProfitREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "end_day" field.</summary>
    public const int EndDayFieldNumber = 3;
    private readonly static string EndDayDefaultValue = "";

    private string endDay_;
    /// <summary>
    ///7天最后一天的日期(不填或空则当天就最后一天)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndDay {
      get { return endDay_ ?? EndDayDefaultValue; }
      set {
        endDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndDay {
      get { return endDay_ != null; }
    }
    /// <summary>Clears the value of the "end_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndDay() {
      endDay_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserLast7DayProfitREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserLast7DayProfitREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (EndDay != other.EndDay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasEndDay) hash ^= EndDay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasEndDay) {
        output.WriteRawTag(26);
        output.WriteString(EndDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasEndDay) {
        output.WriteRawTag(26);
        output.WriteString(EndDay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasEndDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserLast7DayProfitREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasEndDay) {
        EndDay = other.EndDay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            EndDay = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            EndDay = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserLast7DayProfitRSP : pb::IMessage<UserLast7DayProfitRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserLast7DayProfitRSP> _parser = new pb::MessageParser<UserLast7DayProfitRSP>(() => new UserLast7DayProfitRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserLast7DayProfitRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLast7DayProfitRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLast7DayProfitRSP(UserLast7DayProfitRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      profitData_ = other.profitData_.Clone();
      totalProfit_ = other.totalProfit_;
      count_ = other.count_;
      profit7Days_ = other.profit7Days_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLast7DayProfitRSP Clone() {
      return new UserLast7DayProfitRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profit_data" field.</summary>
    public const int ProfitDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserDayData> _repeated_profitData_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.UserDayData.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserDayData> profitData_ = new pbc::RepeatedField<global::Texas.Protocol.UserDayData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserDayData> ProfitData {
      get { return profitData_; }
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 4;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    /// <summary>
    ///总盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 4) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    ///返回数据个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 8) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "profit_7days" field.</summary>
    public const int Profit7DaysFieldNumber = 6;
    private readonly static long Profit7DaysDefaultValue = 0L;

    private long profit7Days_;
    /// <summary>
    ///七天盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit7Days {
      get { if ((_hasBits0 & 16) != 0) { return profit7Days_; } else { return Profit7DaysDefaultValue; } }
      set {
        _hasBits0 |= 16;
        profit7Days_ = value;
      }
    }
    /// <summary>Gets whether the "profit_7days" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit7Days {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "profit_7days" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit7Days() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserLast7DayProfitRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserLast7DayProfitRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if(!profitData_.Equals(other.profitData_)) return false;
      if (TotalProfit != other.TotalProfit) return false;
      if (Count != other.Count) return false;
      if (Profit7Days != other.Profit7Days) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      hash ^= profitData_.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasProfit7Days) hash ^= Profit7Days.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      profitData_.WriteTo(output, _repeated_profitData_codec);
      if (HasTotalProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalProfit);
      }
      if (HasCount) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (HasProfit7Days) {
        output.WriteRawTag(48);
        output.WriteInt64(Profit7Days);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      profitData_.WriteTo(ref output, _repeated_profitData_codec);
      if (HasTotalProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalProfit);
      }
      if (HasCount) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (HasProfit7Days) {
        output.WriteRawTag(48);
        output.WriteInt64(Profit7Days);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      size += profitData_.CalculateSize(_repeated_profitData_codec);
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (HasProfit7Days) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit7Days);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserLast7DayProfitRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      profitData_.Add(other.profitData_);
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasProfit7Days) {
        Profit7Days = other.Profit7Days;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            profitData_.AddEntriesFrom(input, _repeated_profitData_codec);
            break;
          }
          case 32: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 48: {
            Profit7Days = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            profitData_.AddEntriesFrom(ref input, _repeated_profitData_codec);
            break;
          }
          case 32: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 48: {
            Profit7Days = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyGameSetInfo : pb::IMessage<DailyGameSetInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyGameSetInfo> _parser = new pb::MessageParser<DailyGameSetInfo>(() => new DailyGameSetInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DailyGameSetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DailyGameSetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DailyGameSetInfo(DailyGameSetInfo other) : this() {
      _hasBits0 = other._hasBits0;
      setid_ = other.setid_;
      day_ = other.day_;
      set_ = other.set_ != null ? other.set_.Clone() : null;
      clubid_ = other.clubid_;
      clubName_ = other.clubName_;
      clubOwnerid_ = other.clubOwnerid_;
      clubIcon_ = other.clubIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DailyGameSetInfo Clone() {
      return new DailyGameSetInfo(this);
    }

    /// <summary>Field number for the "setid" field.</summary>
    public const int SetidFieldNumber = 1;
    private readonly static string SetidDefaultValue = "";

    private string setid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Setid {
      get { return setid_ ?? SetidDefaultValue; }
      set {
        setid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "setid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetid {
      get { return setid_ != null; }
    }
    /// <summary>Clears the value of the "setid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetid() {
      setid_ = null;
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private readonly static string DayDefaultValue = "";

    private string day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Day {
      get { return day_ ?? DayDefaultValue; }
      set {
        day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDay {
      get { return day_ != null; }
    }
    /// <summary>Clears the value of the "day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDay() {
      day_ = null;
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 3;
    private global::Texas.Protocol.ProfitSet set_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ProfitSet Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 4;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 5;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "club_ownerid" field.</summary>
    public const int ClubOwneridFieldNumber = 6;
    private readonly static long ClubOwneridDefaultValue = 0L;

    private long clubOwnerid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClubOwnerid {
      get { if ((_hasBits0 & 1) != 0) { return clubOwnerid_; } else { return ClubOwneridDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubOwnerid_ = value;
      }
    }
    /// <summary>Gets whether the "club_ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubOwnerid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubOwnerid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "club_icon" field.</summary>
    public const int ClubIconFieldNumber = 7;
    private readonly static string ClubIconDefaultValue = "";

    private string clubIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubIcon {
      get { return clubIcon_ ?? ClubIconDefaultValue; }
      set {
        clubIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubIcon {
      get { return clubIcon_ != null; }
    }
    /// <summary>Clears the value of the "club_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubIcon() {
      clubIcon_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DailyGameSetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DailyGameSetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Setid != other.Setid) return false;
      if (Day != other.Day) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (Clubid != other.Clubid) return false;
      if (ClubName != other.ClubName) return false;
      if (ClubOwnerid != other.ClubOwnerid) return false;
      if (ClubIcon != other.ClubIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSetid) hash ^= Setid.GetHashCode();
      if (HasDay) hash ^= Day.GetHashCode();
      if (set_ != null) hash ^= Set.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasClubOwnerid) hash ^= ClubOwnerid.GetHashCode();
      if (HasClubIcon) hash ^= ClubIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSetid) {
        output.WriteRawTag(10);
        output.WriteString(Setid);
      }
      if (HasDay) {
        output.WriteRawTag(18);
        output.WriteString(Day);
      }
      if (set_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Set);
      }
      if (HasClubid) {
        output.WriteRawTag(34);
        output.WriteString(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(42);
        output.WriteString(ClubName);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(48);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(58);
        output.WriteString(ClubIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSetid) {
        output.WriteRawTag(10);
        output.WriteString(Setid);
      }
      if (HasDay) {
        output.WriteRawTag(18);
        output.WriteString(Day);
      }
      if (set_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Set);
      }
      if (HasClubid) {
        output.WriteRawTag(34);
        output.WriteString(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(42);
        output.WriteString(ClubName);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(48);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(58);
        output.WriteString(ClubIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSetid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Setid);
      }
      if (HasDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
      }
      if (set_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasClubOwnerid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClubOwnerid);
      }
      if (HasClubIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DailyGameSetInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasSetid) {
        Setid = other.Setid;
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      if (other.set_ != null) {
        if (set_ == null) {
          Set = new global::Texas.Protocol.ProfitSet();
        }
        Set.MergeFrom(other.Set);
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasClubOwnerid) {
        ClubOwnerid = other.ClubOwnerid;
      }
      if (other.HasClubIcon) {
        ClubIcon = other.ClubIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Setid = input.ReadString();
            break;
          }
          case 18: {
            Day = input.ReadString();
            break;
          }
          case 26: {
            if (set_ == null) {
              Set = new global::Texas.Protocol.ProfitSet();
            }
            input.ReadMessage(Set);
            break;
          }
          case 34: {
            Clubid = input.ReadString();
            break;
          }
          case 42: {
            ClubName = input.ReadString();
            break;
          }
          case 48: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 58: {
            ClubIcon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Setid = input.ReadString();
            break;
          }
          case 18: {
            Day = input.ReadString();
            break;
          }
          case 26: {
            if (set_ == null) {
              Set = new global::Texas.Protocol.ProfitSet();
            }
            input.ReadMessage(Set);
            break;
          }
          case 34: {
            Clubid = input.ReadString();
            break;
          }
          case 42: {
            ClubName = input.ReadString();
            break;
          }
          case 48: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 58: {
            ClubIcon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserDailySet : pb::IMessage<UserDailySet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDailySet> _parser = new pb::MessageParser<UserDailySet>(() => new UserDailySet());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDailySet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySet(UserDailySet other) : this() {
      _hasBits0 = other._hasBits0;
      day_ = other.day_;
      sets_ = other.sets_.Clone();
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySet Clone() {
      return new UserDailySet(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private readonly static string DayDefaultValue = "";

    private string day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Day {
      get { return day_ ?? DayDefaultValue; }
      set {
        day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDay {
      get { return day_ != null; }
    }
    /// <summary>Clears the value of the "day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDay() {
      day_ = null;
    }

    /// <summary>Field number for the "sets" field.</summary>
    public const int SetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.DailyGameSetInfo> _repeated_sets_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.DailyGameSetInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.DailyGameSetInfo> sets_ = new pbc::RepeatedField<global::Texas.Protocol.DailyGameSetInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.DailyGameSetInfo> Sets {
      get { return sets_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDailySet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDailySet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if(!sets_.Equals(other.sets_)) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDay) hash ^= Day.GetHashCode();
      hash ^= sets_.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      sets_.WriteTo(output, _repeated_sets_codec);
      if (HasCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      sets_.WriteTo(ref output, _repeated_sets_codec);
      if (HasCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
      }
      size += sets_.CalculateSize(_repeated_sets_codec);
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDailySet other) {
      if (other == null) {
        return;
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      sets_.Add(other.sets_);
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 18: {
            sets_.AddEntriesFrom(input, _repeated_sets_codec);
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 18: {
            sets_.AddEntriesFrom(ref input, _repeated_sets_codec);
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyLuckyDrawInfo : pb::IMessage<DailyLuckyDrawInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyLuckyDrawInfo> _parser = new pb::MessageParser<DailyLuckyDrawInfo>(() => new DailyLuckyDrawInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DailyLuckyDrawInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DailyLuckyDrawInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DailyLuckyDrawInfo(DailyLuckyDrawInfo other) : this() {
      day_ = other.day_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      record_ = other.record_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DailyLuckyDrawInfo Clone() {
      return new DailyLuckyDrawInfo(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private readonly static string DayDefaultValue = "";

    private string day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Day {
      get { return day_ ?? DayDefaultValue; }
      set {
        day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDay {
      get { return day_ != null; }
    }
    /// <summary>Clears the value of the "day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDay() {
      day_ = null;
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Texas.Protocol.LuckyDrawConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.LuckyDrawConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.LuckyDrawRecordInfo> _repeated_record_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.LuckyDrawRecordInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.LuckyDrawRecordInfo> record_ = new pbc::RepeatedField<global::Texas.Protocol.LuckyDrawRecordInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.LuckyDrawRecordInfo> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DailyLuckyDrawInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DailyLuckyDrawInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if(!record_.Equals(other.record_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDay) hash ^= Day.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      hash ^= record_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      record_.WriteTo(output, _repeated_record_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      record_.WriteTo(ref output, _repeated_record_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      size += record_.CalculateSize(_repeated_record_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DailyLuckyDrawInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Texas.Protocol.LuckyDrawConfig();
        }
        Config.MergeFrom(other.Config);
      }
      record_.Add(other.record_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.LuckyDrawConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 26: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::Texas.Protocol.LuckyDrawConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 26: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserDailyLuckyDraw : pb::IMessage<UserDailyLuckyDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDailyLuckyDraw> _parser = new pb::MessageParser<UserDailyLuckyDraw>(() => new UserDailyLuckyDraw());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDailyLuckyDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyLuckyDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyLuckyDraw(UserDailyLuckyDraw other) : this() {
      _hasBits0 = other._hasBits0;
      day_ = other.day_;
      count_ = other.count_;
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailyLuckyDraw Clone() {
      return new UserDailyLuckyDraw(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private readonly static string DayDefaultValue = "";

    private string day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Day {
      get { return day_ ?? DayDefaultValue; }
      set {
        day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDay {
      get { return day_ != null; }
    }
    /// <summary>Clears the value of the "day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDay() {
      day_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.DailyLuckyDrawInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.DailyLuckyDrawInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.DailyLuckyDrawInfo> infos_ = new pbc::RepeatedField<global::Texas.Protocol.DailyLuckyDrawInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.DailyLuckyDrawInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDailyLuckyDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDailyLuckyDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (Count != other.Count) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDay) hash ^= Day.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDay) {
        output.WriteRawTag(10);
        output.WriteString(Day);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      infos_.WriteTo(ref output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDailyLuckyDraw other) {
      if (other == null) {
        return;
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Day = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(ref input, _repeated_infos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///每日牌局数据
  /// </summary>
  public sealed partial class UserDailySetInfoREQ : pb::IMessage<UserDailySetInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDailySetInfoREQ> _parser = new pb::MessageParser<UserDailySetInfoREQ>(() => new UserDailySetInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDailySetInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySetInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySetInfoREQ(UserDailySetInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      startDay_ = other.startDay_;
      endDay_ = other.endDay_;
      reqType_ = other.reqType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySetInfoREQ Clone() {
      return new UserDailySetInfoREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "start_day" field.</summary>
    public const int StartDayFieldNumber = 3;
    private readonly static string StartDayDefaultValue = "";

    private string startDay_;
    /// <summary>
    ///开始日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartDay {
      get { return startDay_ ?? StartDayDefaultValue; }
      set {
        startDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartDay {
      get { return startDay_ != null; }
    }
    /// <summary>Clears the value of the "start_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartDay() {
      startDay_ = null;
    }

    /// <summary>Field number for the "end_day" field.</summary>
    public const int EndDayFieldNumber = 4;
    private readonly static string EndDayDefaultValue = "";

    private string endDay_;
    /// <summary>
    ///结束日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndDay {
      get { return endDay_ ?? EndDayDefaultValue; }
      set {
        endDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndDay {
      get { return endDay_ != null; }
    }
    /// <summary>Clears the value of the "end_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndDay() {
      endDay_ = null;
    }

    /// <summary>Field number for the "req_type" field.</summary>
    public const int ReqTypeFieldNumber = 5;
    private readonly static int ReqTypeDefaultValue = 0;

    private int reqType_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqType {
      get { if ((_hasBits0 & 4) != 0) { return reqType_; } else { return ReqTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        reqType_ = value;
      }
    }
    /// <summary>Gets whether the "req_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "req_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqType() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDailySetInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDailySetInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (StartDay != other.StartDay) return false;
      if (EndDay != other.EndDay) return false;
      if (ReqType != other.ReqType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasStartDay) hash ^= StartDay.GetHashCode();
      if (HasEndDay) hash ^= EndDay.GetHashCode();
      if (HasReqType) hash ^= ReqType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartDay) {
        output.WriteRawTag(26);
        output.WriteString(StartDay);
      }
      if (HasEndDay) {
        output.WriteRawTag(34);
        output.WriteString(EndDay);
      }
      if (HasReqType) {
        output.WriteRawTag(40);
        output.WriteInt32(ReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartDay) {
        output.WriteRawTag(26);
        output.WriteString(StartDay);
      }
      if (HasEndDay) {
        output.WriteRawTag(34);
        output.WriteString(EndDay);
      }
      if (HasReqType) {
        output.WriteRawTag(40);
        output.WriteInt32(ReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasStartDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDay);
      }
      if (HasEndDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDay);
      }
      if (HasReqType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDailySetInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasStartDay) {
        StartDay = other.StartDay;
      }
      if (other.HasEndDay) {
        EndDay = other.EndDay;
      }
      if (other.HasReqType) {
        ReqType = other.ReqType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartDay = input.ReadString();
            break;
          }
          case 34: {
            EndDay = input.ReadString();
            break;
          }
          case 40: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartDay = input.ReadString();
            break;
          }
          case 34: {
            EndDay = input.ReadString();
            break;
          }
          case 40: {
            ReqType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserDailySetInfoRSP : pb::IMessage<UserDailySetInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserDailySetInfoRSP> _parser = new pb::MessageParser<UserDailySetInfoRSP>(() => new UserDailySetInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserDailySetInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySetInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySetInfoRSP(UserDailySetInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      gameSet_ = other.gameSet_.Clone();
      count_ = other.count_;
      rspType_ = other.rspType_;
      luckyDraw_ = other.luckyDraw_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserDailySetInfoRSP Clone() {
      return new UserDailySetInfoRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    /// 数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "game_set" field.</summary>
    public const int GameSetFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserDailySet> _repeated_gameSet_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.UserDailySet.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserDailySet> gameSet_ = new pbc::RepeatedField<global::Texas.Protocol.UserDailySet>();
    /// <summary>
    /// 牌局信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserDailySet> GameSet {
      get { return gameSet_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 4) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rsp_type" field.</summary>
    public const int RspTypeFieldNumber = 5;
    private readonly static int RspTypeDefaultValue = 0;

    private int rspType_;
    /// <summary>
    ///返回类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RspType {
      get { if ((_hasBits0 & 8) != 0) { return rspType_; } else { return RspTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rspType_ = value;
      }
    }
    /// <summary>Gets whether the "rsp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRspType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rsp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRspType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lucky_draw" field.</summary>
    public const int LuckyDrawFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserDailyLuckyDraw> _repeated_luckyDraw_codec
        = pb::FieldCodec.ForMessage(50, global::Texas.Protocol.UserDailyLuckyDraw.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserDailyLuckyDraw> luckyDraw_ = new pbc::RepeatedField<global::Texas.Protocol.UserDailyLuckyDraw>();
    /// <summary>
    /// LuckyDraw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserDailyLuckyDraw> LuckyDraw {
      get { return luckyDraw_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserDailySetInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserDailySetInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if(!gameSet_.Equals(other.gameSet_)) return false;
      if (Count != other.Count) return false;
      if (RspType != other.RspType) return false;
      if(!luckyDraw_.Equals(other.luckyDraw_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      hash ^= gameSet_.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasRspType) hash ^= RspType.GetHashCode();
      hash ^= luckyDraw_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      gameSet_.WriteTo(output, _repeated_gameSet_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (HasRspType) {
        output.WriteRawTag(40);
        output.WriteInt32(RspType);
      }
      luckyDraw_.WriteTo(output, _repeated_luckyDraw_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      gameSet_.WriteTo(ref output, _repeated_gameSet_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (HasRspType) {
        output.WriteRawTag(40);
        output.WriteInt32(RspType);
      }
      luckyDraw_.WriteTo(ref output, _repeated_luckyDraw_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      size += gameSet_.CalculateSize(_repeated_gameSet_codec);
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (HasRspType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RspType);
      }
      size += luckyDraw_.CalculateSize(_repeated_luckyDraw_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserDailySetInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      gameSet_.Add(other.gameSet_);
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasRspType) {
        RspType = other.RspType;
      }
      luckyDraw_.Add(other.luckyDraw_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            gameSet_.AddEntriesFrom(input, _repeated_gameSet_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            RspType = input.ReadInt32();
            break;
          }
          case 50: {
            luckyDraw_.AddEntriesFrom(input, _repeated_luckyDraw_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            gameSet_.AddEntriesFrom(ref input, _repeated_gameSet_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            RspType = input.ReadInt32();
            break;
          }
          case 50: {
            luckyDraw_.AddEntriesFrom(ref input, _repeated_luckyDraw_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserMonthData : pb::IMessage<UserMonthData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserMonthData> _parser = new pb::MessageParser<UserMonthData>(() => new UserMonthData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserMonthData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthData(UserMonthData other) : this() {
      _hasBits0 = other._hasBits0;
      month_ = other.month_;
      profit_ = other.profit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthData Clone() {
      return new UserMonthData(this);
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 1;
    private readonly static string MonthDefaultValue = "";

    private string month_;
    /// <summary>
    ///日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Month {
      get { return month_ ?? MonthDefaultValue; }
      set {
        month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonth {
      get { return month_ != null; }
    }
    /// <summary>Clears the value of the "month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonth() {
      month_ = null;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 2;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    /// <summary>
    ///盈利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 1) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserMonthData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserMonthData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Month != other.Month) return false;
      if (Profit != other.Profit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMonth) hash ^= Month.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMonth) {
        output.WriteRawTag(10);
        output.WriteString(Month);
      }
      if (HasProfit) {
        output.WriteRawTag(16);
        output.WriteInt64(Profit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMonth) {
        output.WriteRawTag(10);
        output.WriteString(Month);
      }
      if (HasProfit) {
        output.WriteRawTag(16);
        output.WriteInt64(Profit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
      }
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserMonthData other) {
      if (other == null) {
        return;
      }
      if (other.HasMonth) {
        Month = other.Month;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Month = input.ReadString();
            break;
          }
          case 16: {
            Profit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Month = input.ReadString();
            break;
          }
          case 16: {
            Profit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///查询个人每月盈亏
  /// </summary>
  public sealed partial class UserMonthlyProfitREQ : pb::IMessage<UserMonthlyProfitREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserMonthlyProfitREQ> _parser = new pb::MessageParser<UserMonthlyProfitREQ>(() => new UserMonthlyProfitREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserMonthlyProfitREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyProfitREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyProfitREQ(UserMonthlyProfitREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      startMonth_ = other.startMonth_;
      endMonth_ = other.endMonth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyProfitREQ Clone() {
      return new UserMonthlyProfitREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "start_month" field.</summary>
    public const int StartMonthFieldNumber = 3;
    private readonly static string StartMonthDefaultValue = "";

    private string startMonth_;
    /// <summary>
    ///开始日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartMonth {
      get { return startMonth_ ?? StartMonthDefaultValue; }
      set {
        startMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartMonth {
      get { return startMonth_ != null; }
    }
    /// <summary>Clears the value of the "start_month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartMonth() {
      startMonth_ = null;
    }

    /// <summary>Field number for the "end_month" field.</summary>
    public const int EndMonthFieldNumber = 4;
    private readonly static string EndMonthDefaultValue = "";

    private string endMonth_;
    /// <summary>
    ///结束日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndMonth {
      get { return endMonth_ ?? EndMonthDefaultValue; }
      set {
        endMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndMonth {
      get { return endMonth_ != null; }
    }
    /// <summary>Clears the value of the "end_month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndMonth() {
      endMonth_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserMonthlyProfitREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserMonthlyProfitREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (StartMonth != other.StartMonth) return false;
      if (EndMonth != other.EndMonth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasStartMonth) hash ^= StartMonth.GetHashCode();
      if (HasEndMonth) hash ^= EndMonth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartMonth) {
        output.WriteRawTag(26);
        output.WriteString(StartMonth);
      }
      if (HasEndMonth) {
        output.WriteRawTag(34);
        output.WriteString(EndMonth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartMonth) {
        output.WriteRawTag(26);
        output.WriteString(StartMonth);
      }
      if (HasEndMonth) {
        output.WriteRawTag(34);
        output.WriteString(EndMonth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasStartMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartMonth);
      }
      if (HasEndMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndMonth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserMonthlyProfitREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasStartMonth) {
        StartMonth = other.StartMonth;
      }
      if (other.HasEndMonth) {
        EndMonth = other.EndMonth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartMonth = input.ReadString();
            break;
          }
          case 34: {
            EndMonth = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartMonth = input.ReadString();
            break;
          }
          case 34: {
            EndMonth = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserMonthlyProfitRSP : pb::IMessage<UserMonthlyProfitRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserMonthlyProfitRSP> _parser = new pb::MessageParser<UserMonthlyProfitRSP>(() => new UserMonthlyProfitRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserMonthlyProfitRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyProfitRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyProfitRSP(UserMonthlyProfitRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      profitData_ = other.profitData_.Clone();
      count_ = other.count_;
      totalProfit_ = other.totalProfit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyProfitRSP Clone() {
      return new UserMonthlyProfitRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profit_data" field.</summary>
    public const int ProfitDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserMonthData> _repeated_profitData_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.UserMonthData.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserMonthData> profitData_ = new pbc::RepeatedField<global::Texas.Protocol.UserMonthData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserMonthData> ProfitData {
      get { return profitData_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    ///返回数据个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 4) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 5;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    /// <summary>
    ///总盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 8) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 8;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserMonthlyProfitRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserMonthlyProfitRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if(!profitData_.Equals(other.profitData_)) return false;
      if (Count != other.Count) return false;
      if (TotalProfit != other.TotalProfit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      hash ^= profitData_.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      profitData_.WriteTo(output, _repeated_profitData_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      profitData_.WriteTo(ref output, _repeated_profitData_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      size += profitData_.CalculateSize(_repeated_profitData_codec);
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserMonthlyProfitRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      profitData_.Add(other.profitData_);
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            profitData_.AddEntriesFrom(input, _repeated_profitData_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalProfit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            profitData_.AddEntriesFrom(ref input, _repeated_profitData_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalProfit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DayLuckyDrawBriefData : pb::IMessage<DayLuckyDrawBriefData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DayLuckyDrawBriefData> _parser = new pb::MessageParser<DayLuckyDrawBriefData>(() => new DayLuckyDrawBriefData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DayLuckyDrawBriefData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayLuckyDrawBriefData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayLuckyDrawBriefData(DayLuckyDrawBriefData other) : this() {
      _hasBits0 = other._hasBits0;
      profit_ = other.profit_;
      drawNum_ = other.drawNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayLuckyDrawBriefData Clone() {
      return new DayLuckyDrawBriefData(this);
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 1;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 1) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "draw_num" field.</summary>
    public const int DrawNumFieldNumber = 2;
    private readonly static int DrawNumDefaultValue = 0;

    private int drawNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DrawNum {
      get { if ((_hasBits0 & 2) != 0) { return drawNum_; } else { return DrawNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        drawNum_ = value;
      }
    }
    /// <summary>Gets whether the "draw_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "draw_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawNum() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DayLuckyDrawBriefData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DayLuckyDrawBriefData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profit != other.Profit) return false;
      if (DrawNum != other.DrawNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (HasDrawNum) hash ^= DrawNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(Profit);
      }
      if (HasDrawNum) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(Profit);
      }
      if (HasDrawNum) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (HasDrawNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DayLuckyDrawBriefData other) {
      if (other == null) {
        return;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      if (other.HasDrawNum) {
        DrawNum = other.DrawNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Profit = input.ReadInt64();
            break;
          }
          case 16: {
            DrawNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Profit = input.ReadInt64();
            break;
          }
          case 16: {
            DrawNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DayBriefData : pb::IMessage<DayBriefData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DayBriefData> _parser = new pb::MessageParser<DayBriefData>(() => new DayBriefData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DayBriefData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayBriefData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayBriefData(DayBriefData other) : this() {
      _hasBits0 = other._hasBits0;
      profit_ = other.profit_;
      setNum_ = other.setNum_;
      handsNum_ = other.handsNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayBriefData Clone() {
      return new DayBriefData(this);
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 1;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 1) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "set_num" field.</summary>
    public const int SetNumFieldNumber = 2;
    private readonly static int SetNumDefaultValue = 0;

    private int setNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SetNum {
      get { if ((_hasBits0 & 2) != 0) { return setNum_; } else { return SetNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        setNum_ = value;
      }
    }
    /// <summary>Gets whether the "set_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "set_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hands_num" field.</summary>
    public const int HandsNumFieldNumber = 3;
    private readonly static int HandsNumDefaultValue = 0;

    private int handsNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HandsNum {
      get { if ((_hasBits0 & 4) != 0) { return handsNum_; } else { return HandsNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        handsNum_ = value;
      }
    }
    /// <summary>Gets whether the "hands_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hands_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsNum() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DayBriefData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DayBriefData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profit != other.Profit) return false;
      if (SetNum != other.SetNum) return false;
      if (HandsNum != other.HandsNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (HasSetNum) hash ^= SetNum.GetHashCode();
      if (HasHandsNum) hash ^= HandsNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(Profit);
      }
      if (HasSetNum) {
        output.WriteRawTag(16);
        output.WriteInt32(SetNum);
      }
      if (HasHandsNum) {
        output.WriteRawTag(24);
        output.WriteInt32(HandsNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(Profit);
      }
      if (HasSetNum) {
        output.WriteRawTag(16);
        output.WriteInt32(SetNum);
      }
      if (HasHandsNum) {
        output.WriteRawTag(24);
        output.WriteInt32(HandsNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (HasSetNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SetNum);
      }
      if (HasHandsNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandsNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DayBriefData other) {
      if (other == null) {
        return;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      if (other.HasSetNum) {
        SetNum = other.SetNum;
      }
      if (other.HasHandsNum) {
        HandsNum = other.HandsNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Profit = input.ReadInt64();
            break;
          }
          case 16: {
            SetNum = input.ReadInt32();
            break;
          }
          case 24: {
            HandsNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Profit = input.ReadInt64();
            break;
          }
          case 16: {
            SetNum = input.ReadInt32();
            break;
          }
          case 24: {
            HandsNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DayDetail : pb::IMessage<DayDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DayDetail> _parser = new pb::MessageParser<DayDetail>(() => new DayDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DayDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayDetail(DayDetail other) : this() {
      detail_ = other.detail_ != null ? other.detail_.Clone() : null;
      day_ = other.day_;
      luckyDrawDetail_ = other.luckyDrawDetail_ != null ? other.luckyDrawDetail_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DayDetail Clone() {
      return new DayDetail(this);
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 1;
    private global::Texas.Protocol.DayBriefData detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.DayBriefData Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private readonly static string DayDefaultValue = "";

    private string day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Day {
      get { return day_ ?? DayDefaultValue; }
      set {
        day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDay {
      get { return day_ != null; }
    }
    /// <summary>Clears the value of the "day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDay() {
      day_ = null;
    }

    /// <summary>Field number for the "lucky_draw_detail" field.</summary>
    public const int LuckyDrawDetailFieldNumber = 3;
    private global::Texas.Protocol.DayLuckyDrawBriefData luckyDrawDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.DayLuckyDrawBriefData LuckyDrawDetail {
      get { return luckyDrawDetail_; }
      set {
        luckyDrawDetail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DayDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DayDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Detail, other.Detail)) return false;
      if (Day != other.Day) return false;
      if (!object.Equals(LuckyDrawDetail, other.LuckyDrawDetail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (detail_ != null) hash ^= Detail.GetHashCode();
      if (HasDay) hash ^= Day.GetHashCode();
      if (luckyDrawDetail_ != null) hash ^= LuckyDrawDetail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (detail_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Detail);
      }
      if (HasDay) {
        output.WriteRawTag(18);
        output.WriteString(Day);
      }
      if (luckyDrawDetail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LuckyDrawDetail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (detail_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Detail);
      }
      if (HasDay) {
        output.WriteRawTag(18);
        output.WriteString(Day);
      }
      if (luckyDrawDetail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LuckyDrawDetail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      if (HasDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
      }
      if (luckyDrawDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LuckyDrawDetail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DayDetail other) {
      if (other == null) {
        return;
      }
      if (other.detail_ != null) {
        if (detail_ == null) {
          Detail = new global::Texas.Protocol.DayBriefData();
        }
        Detail.MergeFrom(other.Detail);
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      if (other.luckyDrawDetail_ != null) {
        if (luckyDrawDetail_ == null) {
          LuckyDrawDetail = new global::Texas.Protocol.DayLuckyDrawBriefData();
        }
        LuckyDrawDetail.MergeFrom(other.LuckyDrawDetail);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (detail_ == null) {
              Detail = new global::Texas.Protocol.DayBriefData();
            }
            input.ReadMessage(Detail);
            break;
          }
          case 18: {
            Day = input.ReadString();
            break;
          }
          case 26: {
            if (luckyDrawDetail_ == null) {
              LuckyDrawDetail = new global::Texas.Protocol.DayLuckyDrawBriefData();
            }
            input.ReadMessage(LuckyDrawDetail);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (detail_ == null) {
              Detail = new global::Texas.Protocol.DayBriefData();
            }
            input.ReadMessage(Detail);
            break;
          }
          case 18: {
            Day = input.ReadString();
            break;
          }
          case 26: {
            if (luckyDrawDetail_ == null) {
              LuckyDrawDetail = new global::Texas.Protocol.DayLuckyDrawBriefData();
            }
            input.ReadMessage(LuckyDrawDetail);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonthDeail : pb::IMessage<MonthDeail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonthDeail> _parser = new pb::MessageParser<MonthDeail>(() => new MonthDeail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MonthDeail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonthDeail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonthDeail(MonthDeail other) : this() {
      _hasBits0 = other._hasBits0;
      dayDetail_ = other.dayDetail_.Clone();
      month_ = other.month_;
      profit_ = other.profit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonthDeail Clone() {
      return new MonthDeail(this);
    }

    /// <summary>Field number for the "day_detail" field.</summary>
    public const int DayDetailFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.DayDetail> _repeated_dayDetail_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.DayDetail.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.DayDetail> dayDetail_ = new pbc::RepeatedField<global::Texas.Protocol.DayDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.DayDetail> DayDetail {
      get { return dayDetail_; }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private readonly static string MonthDefaultValue = "";

    private string month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Month {
      get { return month_ ?? MonthDefaultValue; }
      set {
        month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonth {
      get { return month_ != null; }
    }
    /// <summary>Clears the value of the "month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonth() {
      month_ = null;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 3;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 1) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MonthDeail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MonthDeail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dayDetail_.Equals(other.dayDetail_)) return false;
      if (Month != other.Month) return false;
      if (Profit != other.Profit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dayDetail_.GetHashCode();
      if (HasMonth) hash ^= Month.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dayDetail_.WriteTo(output, _repeated_dayDetail_codec);
      if (HasMonth) {
        output.WriteRawTag(18);
        output.WriteString(Month);
      }
      if (HasProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(Profit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dayDetail_.WriteTo(ref output, _repeated_dayDetail_codec);
      if (HasMonth) {
        output.WriteRawTag(18);
        output.WriteString(Month);
      }
      if (HasProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(Profit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dayDetail_.CalculateSize(_repeated_dayDetail_codec);
      if (HasMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
      }
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MonthDeail other) {
      if (other == null) {
        return;
      }
      dayDetail_.Add(other.dayDetail_);
      if (other.HasMonth) {
        Month = other.Month;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dayDetail_.AddEntriesFrom(input, _repeated_dayDetail_codec);
            break;
          }
          case 18: {
            Month = input.ReadString();
            break;
          }
          case 24: {
            Profit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dayDetail_.AddEntriesFrom(ref input, _repeated_dayDetail_codec);
            break;
          }
          case 18: {
            Month = input.ReadString();
            break;
          }
          case 24: {
            Profit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class YearMonthLuckyDrawDetail : pb::IMessage<YearMonthLuckyDrawDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<YearMonthLuckyDrawDetail> _parser = new pb::MessageParser<YearMonthLuckyDrawDetail>(() => new YearMonthLuckyDrawDetail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<YearMonthLuckyDrawDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearMonthLuckyDrawDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearMonthLuckyDrawDetail(YearMonthLuckyDrawDetail other) : this() {
      _hasBits0 = other._hasBits0;
      monthProfit_ = other.monthProfit_;
      monthDrawNum_ = other.monthDrawNum_;
      month_ = other.month_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearMonthLuckyDrawDetail Clone() {
      return new YearMonthLuckyDrawDetail(this);
    }

    /// <summary>Field number for the "month_profit" field.</summary>
    public const int MonthProfitFieldNumber = 1;
    private readonly static long MonthProfitDefaultValue = 0L;

    private long monthProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MonthProfit {
      get { if ((_hasBits0 & 1) != 0) { return monthProfit_; } else { return MonthProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        monthProfit_ = value;
      }
    }
    /// <summary>Gets whether the "month_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonthProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "month_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonthProfit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "month_draw_num" field.</summary>
    public const int MonthDrawNumFieldNumber = 2;
    private readonly static int MonthDrawNumDefaultValue = 0;

    private int monthDrawNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonthDrawNum {
      get { if ((_hasBits0 & 2) != 0) { return monthDrawNum_; } else { return MonthDrawNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        monthDrawNum_ = value;
      }
    }
    /// <summary>Gets whether the "month_draw_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonthDrawNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "month_draw_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonthDrawNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 3;
    private readonly static string MonthDefaultValue = "";

    private string month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Month {
      get { return month_ ?? MonthDefaultValue; }
      set {
        month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonth {
      get { return month_ != null; }
    }
    /// <summary>Clears the value of the "month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonth() {
      month_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as YearMonthLuckyDrawDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(YearMonthLuckyDrawDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonthProfit != other.MonthProfit) return false;
      if (MonthDrawNum != other.MonthDrawNum) return false;
      if (Month != other.Month) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMonthProfit) hash ^= MonthProfit.GetHashCode();
      if (HasMonthDrawNum) hash ^= MonthDrawNum.GetHashCode();
      if (HasMonth) hash ^= Month.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMonthProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(MonthProfit);
      }
      if (HasMonthDrawNum) {
        output.WriteRawTag(16);
        output.WriteInt32(MonthDrawNum);
      }
      if (HasMonth) {
        output.WriteRawTag(26);
        output.WriteString(Month);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMonthProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(MonthProfit);
      }
      if (HasMonthDrawNum) {
        output.WriteRawTag(16);
        output.WriteInt32(MonthDrawNum);
      }
      if (HasMonth) {
        output.WriteRawTag(26);
        output.WriteString(Month);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMonthProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonthProfit);
      }
      if (HasMonthDrawNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonthDrawNum);
      }
      if (HasMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(YearMonthLuckyDrawDetail other) {
      if (other == null) {
        return;
      }
      if (other.HasMonthProfit) {
        MonthProfit = other.MonthProfit;
      }
      if (other.HasMonthDrawNum) {
        MonthDrawNum = other.MonthDrawNum;
      }
      if (other.HasMonth) {
        Month = other.Month;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonthProfit = input.ReadInt64();
            break;
          }
          case 16: {
            MonthDrawNum = input.ReadInt32();
            break;
          }
          case 26: {
            Month = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonthProfit = input.ReadInt64();
            break;
          }
          case 16: {
            MonthDrawNum = input.ReadInt32();
            break;
          }
          case 26: {
            Month = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class YearMonthDetail : pb::IMessage<YearMonthDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<YearMonthDetail> _parser = new pb::MessageParser<YearMonthDetail>(() => new YearMonthDetail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<YearMonthDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearMonthDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearMonthDetail(YearMonthDetail other) : this() {
      _hasBits0 = other._hasBits0;
      monthProfit_ = other.monthProfit_;
      monthSetNum_ = other.monthSetNum_;
      monthHandsNum_ = other.monthHandsNum_;
      month_ = other.month_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearMonthDetail Clone() {
      return new YearMonthDetail(this);
    }

    /// <summary>Field number for the "month_profit" field.</summary>
    public const int MonthProfitFieldNumber = 1;
    private readonly static long MonthProfitDefaultValue = 0L;

    private long monthProfit_;
    /// <summary>
    ///月总盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MonthProfit {
      get { if ((_hasBits0 & 1) != 0) { return monthProfit_; } else { return MonthProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        monthProfit_ = value;
      }
    }
    /// <summary>Gets whether the "month_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonthProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "month_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonthProfit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "month_set_num" field.</summary>
    public const int MonthSetNumFieldNumber = 2;
    private readonly static int MonthSetNumDefaultValue = 0;

    private int monthSetNum_;
    /// <summary>
    ///月总参与的版局数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonthSetNum {
      get { if ((_hasBits0 & 2) != 0) { return monthSetNum_; } else { return MonthSetNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        monthSetNum_ = value;
      }
    }
    /// <summary>Gets whether the "month_set_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonthSetNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "month_set_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonthSetNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "month_hands_num" field.</summary>
    public const int MonthHandsNumFieldNumber = 3;
    private readonly static int MonthHandsNumDefaultValue = 0;

    private int monthHandsNum_;
    /// <summary>
    ///月总手牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonthHandsNum {
      get { if ((_hasBits0 & 4) != 0) { return monthHandsNum_; } else { return MonthHandsNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        monthHandsNum_ = value;
      }
    }
    /// <summary>Gets whether the "month_hands_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonthHandsNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "month_hands_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonthHandsNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 4;
    private readonly static string MonthDefaultValue = "";

    private string month_;
    /// <summary>
    ///当前月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Month {
      get { return month_ ?? MonthDefaultValue; }
      set {
        month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonth {
      get { return month_ != null; }
    }
    /// <summary>Clears the value of the "month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonth() {
      month_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as YearMonthDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(YearMonthDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonthProfit != other.MonthProfit) return false;
      if (MonthSetNum != other.MonthSetNum) return false;
      if (MonthHandsNum != other.MonthHandsNum) return false;
      if (Month != other.Month) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMonthProfit) hash ^= MonthProfit.GetHashCode();
      if (HasMonthSetNum) hash ^= MonthSetNum.GetHashCode();
      if (HasMonthHandsNum) hash ^= MonthHandsNum.GetHashCode();
      if (HasMonth) hash ^= Month.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMonthProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(MonthProfit);
      }
      if (HasMonthSetNum) {
        output.WriteRawTag(16);
        output.WriteInt32(MonthSetNum);
      }
      if (HasMonthHandsNum) {
        output.WriteRawTag(24);
        output.WriteInt32(MonthHandsNum);
      }
      if (HasMonth) {
        output.WriteRawTag(34);
        output.WriteString(Month);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMonthProfit) {
        output.WriteRawTag(8);
        output.WriteInt64(MonthProfit);
      }
      if (HasMonthSetNum) {
        output.WriteRawTag(16);
        output.WriteInt32(MonthSetNum);
      }
      if (HasMonthHandsNum) {
        output.WriteRawTag(24);
        output.WriteInt32(MonthHandsNum);
      }
      if (HasMonth) {
        output.WriteRawTag(34);
        output.WriteString(Month);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMonthProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonthProfit);
      }
      if (HasMonthSetNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonthSetNum);
      }
      if (HasMonthHandsNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonthHandsNum);
      }
      if (HasMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(YearMonthDetail other) {
      if (other == null) {
        return;
      }
      if (other.HasMonthProfit) {
        MonthProfit = other.MonthProfit;
      }
      if (other.HasMonthSetNum) {
        MonthSetNum = other.MonthSetNum;
      }
      if (other.HasMonthHandsNum) {
        MonthHandsNum = other.MonthHandsNum;
      }
      if (other.HasMonth) {
        Month = other.Month;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonthProfit = input.ReadInt64();
            break;
          }
          case 16: {
            MonthSetNum = input.ReadInt32();
            break;
          }
          case 24: {
            MonthHandsNum = input.ReadInt32();
            break;
          }
          case 34: {
            Month = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonthProfit = input.ReadInt64();
            break;
          }
          case 16: {
            MonthSetNum = input.ReadInt32();
            break;
          }
          case 24: {
            MonthHandsNum = input.ReadInt32();
            break;
          }
          case 34: {
            Month = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class YearDetail : pb::IMessage<YearDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<YearDetail> _parser = new pb::MessageParser<YearDetail>(() => new YearDetail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<YearDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearDetail(YearDetail other) : this() {
      _hasBits0 = other._hasBits0;
      yearMonth_ = other.yearMonth_.Clone();
      year_ = other.year_;
      yearProfit_ = other.yearProfit_;
      count_ = other.count_;
      yearMonthLuckyDraw_ = other.yearMonthLuckyDraw_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public YearDetail Clone() {
      return new YearDetail(this);
    }

    /// <summary>Field number for the "year_month" field.</summary>
    public const int YearMonthFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.YearMonthDetail> _repeated_yearMonth_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.YearMonthDetail.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.YearMonthDetail> yearMonth_ = new pbc::RepeatedField<global::Texas.Protocol.YearMonthDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.YearMonthDetail> YearMonth {
      get { return yearMonth_; }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 2;
    private readonly static string YearDefaultValue = "";

    private string year_;
    /// <summary>
    ///当前年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Year {
      get { return year_ ?? YearDefaultValue; }
      set {
        year_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYear {
      get { return year_ != null; }
    }
    /// <summary>Clears the value of the "year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYear() {
      year_ = null;
    }

    /// <summary>Field number for the "year_profit" field.</summary>
    public const int YearProfitFieldNumber = 3;
    private readonly static long YearProfitDefaultValue = 0L;

    private long yearProfit_;
    /// <summary>
    ///当前年盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long YearProfit {
      get { if ((_hasBits0 & 1) != 0) { return yearProfit_; } else { return YearProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        yearProfit_ = value;
      }
    }
    /// <summary>Gets whether the "year_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYearProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "year_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYearProfit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    ///返回数据个数 (year_month + year_month_lucky_draw)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 2) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "year_month_lucky_draw" field.</summary>
    public const int YearMonthLuckyDrawFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Texas.Protocol.YearMonthLuckyDrawDetail> _repeated_yearMonthLuckyDraw_codec
        = pb::FieldCodec.ForMessage(42, global::Texas.Protocol.YearMonthLuckyDrawDetail.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.YearMonthLuckyDrawDetail> yearMonthLuckyDraw_ = new pbc::RepeatedField<global::Texas.Protocol.YearMonthLuckyDrawDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.YearMonthLuckyDrawDetail> YearMonthLuckyDraw {
      get { return yearMonthLuckyDraw_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as YearDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(YearDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!yearMonth_.Equals(other.yearMonth_)) return false;
      if (Year != other.Year) return false;
      if (YearProfit != other.YearProfit) return false;
      if (Count != other.Count) return false;
      if(!yearMonthLuckyDraw_.Equals(other.yearMonthLuckyDraw_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= yearMonth_.GetHashCode();
      if (HasYear) hash ^= Year.GetHashCode();
      if (HasYearProfit) hash ^= YearProfit.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      hash ^= yearMonthLuckyDraw_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      yearMonth_.WriteTo(output, _repeated_yearMonth_codec);
      if (HasYear) {
        output.WriteRawTag(18);
        output.WriteString(Year);
      }
      if (HasYearProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(YearProfit);
      }
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      yearMonthLuckyDraw_.WriteTo(output, _repeated_yearMonthLuckyDraw_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      yearMonth_.WriteTo(ref output, _repeated_yearMonth_codec);
      if (HasYear) {
        output.WriteRawTag(18);
        output.WriteString(Year);
      }
      if (HasYearProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(YearProfit);
      }
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      yearMonthLuckyDraw_.WriteTo(ref output, _repeated_yearMonthLuckyDraw_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += yearMonth_.CalculateSize(_repeated_yearMonth_codec);
      if (HasYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Year);
      }
      if (HasYearProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(YearProfit);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += yearMonthLuckyDraw_.CalculateSize(_repeated_yearMonthLuckyDraw_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(YearDetail other) {
      if (other == null) {
        return;
      }
      yearMonth_.Add(other.yearMonth_);
      if (other.HasYear) {
        Year = other.Year;
      }
      if (other.HasYearProfit) {
        YearProfit = other.YearProfit;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      yearMonthLuckyDraw_.Add(other.yearMonthLuckyDraw_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            yearMonth_.AddEntriesFrom(input, _repeated_yearMonth_codec);
            break;
          }
          case 18: {
            Year = input.ReadString();
            break;
          }
          case 24: {
            YearProfit = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 42: {
            yearMonthLuckyDraw_.AddEntriesFrom(input, _repeated_yearMonthLuckyDraw_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            yearMonth_.AddEntriesFrom(ref input, _repeated_yearMonth_codec);
            break;
          }
          case 18: {
            Year = input.ReadString();
            break;
          }
          case 24: {
            YearProfit = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 42: {
            yearMonthLuckyDraw_.AddEntriesFrom(ref input, _repeated_yearMonthLuckyDraw_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///每月详情
  /// </summary>
  public sealed partial class UserMonthlyDetailInfoREQ : pb::IMessage<UserMonthlyDetailInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserMonthlyDetailInfoREQ> _parser = new pb::MessageParser<UserMonthlyDetailInfoREQ>(() => new UserMonthlyDetailInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserMonthlyDetailInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyDetailInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyDetailInfoREQ(UserMonthlyDetailInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      startMonth_ = other.startMonth_;
      endMonth_ = other.endMonth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyDetailInfoREQ Clone() {
      return new UserMonthlyDetailInfoREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "start_month" field.</summary>
    public const int StartMonthFieldNumber = 3;
    private readonly static string StartMonthDefaultValue = "";

    private string startMonth_;
    /// <summary>
    ///开始日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartMonth {
      get { return startMonth_ ?? StartMonthDefaultValue; }
      set {
        startMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartMonth {
      get { return startMonth_ != null; }
    }
    /// <summary>Clears the value of the "start_month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartMonth() {
      startMonth_ = null;
    }

    /// <summary>Field number for the "end_month" field.</summary>
    public const int EndMonthFieldNumber = 4;
    private readonly static string EndMonthDefaultValue = "";

    private string endMonth_;
    /// <summary>
    ///结束日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndMonth {
      get { return endMonth_ ?? EndMonthDefaultValue; }
      set {
        endMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_month" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndMonth {
      get { return endMonth_ != null; }
    }
    /// <summary>Clears the value of the "end_month" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndMonth() {
      endMonth_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserMonthlyDetailInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserMonthlyDetailInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (StartMonth != other.StartMonth) return false;
      if (EndMonth != other.EndMonth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasStartMonth) hash ^= StartMonth.GetHashCode();
      if (HasEndMonth) hash ^= EndMonth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartMonth) {
        output.WriteRawTag(26);
        output.WriteString(StartMonth);
      }
      if (HasEndMonth) {
        output.WriteRawTag(34);
        output.WriteString(EndMonth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartMonth) {
        output.WriteRawTag(26);
        output.WriteString(StartMonth);
      }
      if (HasEndMonth) {
        output.WriteRawTag(34);
        output.WriteString(EndMonth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasStartMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartMonth);
      }
      if (HasEndMonth) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndMonth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserMonthlyDetailInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasStartMonth) {
        StartMonth = other.StartMonth;
      }
      if (other.HasEndMonth) {
        EndMonth = other.EndMonth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartMonth = input.ReadString();
            break;
          }
          case 34: {
            EndMonth = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartMonth = input.ReadString();
            break;
          }
          case 34: {
            EndMonth = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserMonthlyDetailInfoRSP : pb::IMessage<UserMonthlyDetailInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserMonthlyDetailInfoRSP> _parser = new pb::MessageParser<UserMonthlyDetailInfoRSP>(() => new UserMonthlyDetailInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserMonthlyDetailInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyDetailInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyDetailInfoRSP(UserMonthlyDetailInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      monthDetail_ = other.monthDetail_.Clone();
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserMonthlyDetailInfoRSP Clone() {
      return new UserMonthlyDetailInfoRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "month_detail" field.</summary>
    public const int MonthDetailFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.MonthDeail> _repeated_monthDetail_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.MonthDeail.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.MonthDeail> monthDetail_ = new pbc::RepeatedField<global::Texas.Protocol.MonthDeail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.MonthDeail> MonthDetail {
      get { return monthDetail_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    ///返回数据个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Count {
      get { if ((_hasBits0 & 4) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCount() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserMonthlyDetailInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserMonthlyDetailInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if(!monthDetail_.Equals(other.monthDetail_)) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      hash ^= monthDetail_.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      monthDetail_.WriteTo(output, _repeated_monthDetail_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      monthDetail_.WriteTo(ref output, _repeated_monthDetail_codec);
      if (HasCount) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      size += monthDetail_.CalculateSize(_repeated_monthDetail_codec);
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserMonthlyDetailInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      monthDetail_.Add(other.monthDetail_);
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            monthDetail_.AddEntriesFrom(input, _repeated_monthDetail_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            monthDetail_.AddEntriesFrom(ref input, _repeated_monthDetail_codec);
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///每年详情
  /// </summary>
  public sealed partial class UserYearDetailInfoREQ : pb::IMessage<UserYearDetailInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserYearDetailInfoREQ> _parser = new pb::MessageParser<UserYearDetailInfoREQ>(() => new UserYearDetailInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserYearDetailInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserYearDetailInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserYearDetailInfoREQ(UserYearDetailInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      startYear_ = other.startYear_;
      endYear_ = other.endYear_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserYearDetailInfoREQ Clone() {
      return new UserYearDetailInfoREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "start_year" field.</summary>
    public const int StartYearFieldNumber = 3;
    private readonly static string StartYearDefaultValue = "";

    private string startYear_;
    /// <summary>
    ///开始日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartYear {
      get { return startYear_ ?? StartYearDefaultValue; }
      set {
        startYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartYear {
      get { return startYear_ != null; }
    }
    /// <summary>Clears the value of the "start_year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartYear() {
      startYear_ = null;
    }

    /// <summary>Field number for the "end_year" field.</summary>
    public const int EndYearFieldNumber = 4;
    private readonly static string EndYearDefaultValue = "";

    private string endYear_;
    /// <summary>
    ///结束日期	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndYear {
      get { return endYear_ ?? EndYearDefaultValue; }
      set {
        endYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndYear {
      get { return endYear_ != null; }
    }
    /// <summary>Clears the value of the "end_year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndYear() {
      endYear_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserYearDetailInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserYearDetailInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (StartYear != other.StartYear) return false;
      if (EndYear != other.EndYear) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasStartYear) hash ^= StartYear.GetHashCode();
      if (HasEndYear) hash ^= EndYear.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartYear) {
        output.WriteRawTag(26);
        output.WriteString(StartYear);
      }
      if (HasEndYear) {
        output.WriteRawTag(34);
        output.WriteString(EndYear);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasStartYear) {
        output.WriteRawTag(26);
        output.WriteString(StartYear);
      }
      if (HasEndYear) {
        output.WriteRawTag(34);
        output.WriteString(EndYear);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasStartYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartYear);
      }
      if (HasEndYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndYear);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserYearDetailInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasStartYear) {
        StartYear = other.StartYear;
      }
      if (other.HasEndYear) {
        EndYear = other.EndYear;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartYear = input.ReadString();
            break;
          }
          case 34: {
            EndYear = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            StartYear = input.ReadString();
            break;
          }
          case 34: {
            EndYear = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserYearDetailInfoRSP : pb::IMessage<UserYearDetailInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserYearDetailInfoRSP> _parser = new pb::MessageParser<UserYearDetailInfoRSP>(() => new UserYearDetailInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserYearDetailInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserYearDetailInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserYearDetailInfoRSP(UserYearDetailInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      yearDetail_ = other.yearDetail_ != null ? other.yearDetail_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserYearDetailInfoRSP Clone() {
      return new UserYearDetailInfoRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "year_detail" field.</summary>
    public const int YearDetailFieldNumber = 3;
    private global::Texas.Protocol.YearDetail yearDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.YearDetail YearDetail {
      get { return yearDetail_; }
      set {
        yearDetail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserYearDetailInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserYearDetailInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(YearDetail, other.YearDetail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (yearDetail_ != null) hash ^= YearDetail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (yearDetail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(YearDetail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (yearDetail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(YearDetail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (yearDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YearDetail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserYearDetailInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.yearDetail_ != null) {
        if (yearDetail_ == null) {
          YearDetail = new global::Texas.Protocol.YearDetail();
        }
        YearDetail.MergeFrom(other.YearDetail);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (yearDetail_ == null) {
              YearDetail = new global::Texas.Protocol.YearDetail();
            }
            input.ReadMessage(YearDetail);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (yearDetail_ == null) {
              YearDetail = new global::Texas.Protocol.YearDetail();
            }
            input.ReadMessage(YearDetail);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///新接口，查询用户的最近七天盈利及历史总盈利
  /// </summary>
  public sealed partial class UserProfitDetailInfoREQ : pb::IMessage<UserProfitDetailInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserProfitDetailInfoREQ> _parser = new pb::MessageParser<UserProfitDetailInfoREQ>(() => new UserProfitDetailInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserProfitDetailInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserProfitDetailInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserProfitDetailInfoREQ(UserProfitDetailInfoREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserProfitDetailInfoREQ Clone() {
      return new UserProfitDetailInfoREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserProfitDetailInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserProfitDetailInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserProfitDetailInfoREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserProfitDetailInfoRSP : pb::IMessage<UserProfitDetailInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserProfitDetailInfoRSP> _parser = new pb::MessageParser<UserProfitDetailInfoRSP>(() => new UserProfitDetailInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserProfitDetailInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserProfitDetailInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserProfitDetailInfoRSP(UserProfitDetailInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      totalProfit_ = other.totalProfit_;
      profit7Days_ = other.profit7Days_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserProfitDetailInfoRSP Clone() {
      return new UserProfitDetailInfoRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 3;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    /// <summary>
    ///用户历史盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 4) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "profit_7days" field.</summary>
    public const int Profit7DaysFieldNumber = 4;
    private readonly static long Profit7DaysDefaultValue = 0L;

    private long profit7Days_;
    /// <summary>
    ///最近七天总盈亏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit7Days {
      get { if ((_hasBits0 & 8) != 0) { return profit7Days_; } else { return Profit7DaysDefaultValue; } }
      set {
        _hasBits0 |= 8;
        profit7Days_ = value;
      }
    }
    /// <summary>Gets whether the "profit_7days" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit7Days {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "profit_7days" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit7Days() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserProfitDetailInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserProfitDetailInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (TotalProfit != other.TotalProfit) return false;
      if (Profit7Days != other.Profit7Days) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (HasProfit7Days) hash ^= Profit7Days.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalProfit);
      }
      if (HasProfit7Days) {
        output.WriteRawTag(32);
        output.WriteInt64(Profit7Days);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasTotalProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalProfit);
      }
      if (HasProfit7Days) {
        output.WriteRawTag(32);
        output.WriteInt64(Profit7Days);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (HasProfit7Days) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit7Days);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserProfitDetailInfoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      if (other.HasProfit7Days) {
        Profit7Days = other.Profit7Days;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 32: {
            Profit7Days = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 32: {
            Profit7Days = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///个人俱乐部数据
  /// </summary>
  public sealed partial class UserClubDataREQ : pb::IMessage<UserClubDataREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserClubDataREQ> _parser = new pb::MessageParser<UserClubDataREQ>(() => new UserClubDataREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserClubDataREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserClubDataREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserClubDataREQ(UserClubDataREQ other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      reqType_ = other.reqType_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserClubDataREQ Clone() {
      return new UserClubDataREQ(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "req_type" field.</summary>
    public const int ReqTypeFieldNumber = 3;
    private readonly static int ReqTypeDefaultValue = 0;

    private int reqType_;
    /// <summary>
    /// 1:自己 2:他人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqType {
      get { if ((_hasBits0 & 4) != 0) { return reqType_; } else { return ReqTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        reqType_ = value;
      }
    }
    /// <summary>Gets whether the "req_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "req_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 4;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 5;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 8) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 8;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserClubDataREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserClubDataREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (ReqType != other.ReqType) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (HasReqType) hash ^= ReqType.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasReqType) {
        output.WriteRawTag(24);
        output.WriteInt32(ReqType);
      }
      if (HasClubid) {
        output.WriteRawTag(34);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(40);
        output.WriteInt32(Leagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (HasReqType) {
        output.WriteRawTag(24);
        output.WriteInt32(ReqType);
      }
      if (HasClubid) {
        output.WriteRawTag(34);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(40);
        output.WriteInt32(Leagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (HasReqType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqType);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserClubDataREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.HasReqType) {
        ReqType = other.ReqType;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            ReqType = input.ReadInt32();
            break;
          }
          case 34: {
            Clubid = input.ReadString();
            break;
          }
          case 40: {
            Leagueid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 24: {
            ReqType = input.ReadInt32();
            break;
          }
          case 34: {
            Clubid = input.ReadString();
            break;
          }
          case 40: {
            Leagueid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserClubDataRSP : pb::IMessage<UserClubDataRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserClubDataRSP> _parser = new pb::MessageParser<UserClubDataRSP>(() => new UserClubDataRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserClubDataRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.CareerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserClubDataRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserClubDataRSP(UserClubDataRSP other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      dataType_ = other.dataType_;
      totalData_ = other.totalData_ != null ? other.totalData_.Clone() : null;
      mvpNum_ = other.mvpNum_;
      richestNum_ = other.richestNum_;
      fishNum_ = other.fishNum_;
      selectNum_ = other.selectNum_;
      setWinNum_ = other.setWinNum_;
      rspType_ = other.rspType_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserClubDataRSP Clone() {
      return new UserClubDataRSP(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private readonly static int DataTypeDefaultValue = 0;

    private int dataType_;
    /// <summary>
    ///数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DataType {
      get { if ((_hasBits0 & 2) != 0) { return dataType_; } else { return DataTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dataType_ = value;
      }
    }
    /// <summary>Gets whether the "data_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "data_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_data" field.</summary>
    public const int TotalDataFieldNumber = 3;
    private global::Texas.Protocol.PersonalData totalData_;
    /// <summary>
    ///个人总数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.PersonalData TotalData {
      get { return totalData_; }
      set {
        totalData_ = value;
      }
    }

    /// <summary>Field number for the "mvp_num" field.</summary>
    public const int MvpNumFieldNumber = 4;
    private readonly static uint MvpNumDefaultValue = 0;

    private uint mvpNum_;
    /// <summary>
    ///mvp次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MvpNum {
      get { if ((_hasBits0 & 4) != 0) { return mvpNum_; } else { return MvpNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mvpNum_ = value;
      }
    }
    /// <summary>Gets whether the "mvp_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMvpNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mvp_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMvpNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "richest_num" field.</summary>
    public const int RichestNumFieldNumber = 5;
    private readonly static uint RichestNumDefaultValue = 0;

    private uint richestNum_;
    /// <summary>
    ///土豪次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RichestNum {
      get { if ((_hasBits0 & 8) != 0) { return richestNum_; } else { return RichestNumDefaultValue; } }
      set {
        _hasBits0 |= 8;
        richestNum_ = value;
      }
    }
    /// <summary>Gets whether the "richest_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRichestNum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "richest_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRichestNum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "fish_num" field.</summary>
    public const int FishNumFieldNumber = 6;
    private readonly static uint FishNumDefaultValue = 0;

    private uint fishNum_;
    /// <summary>
    ///大鱼次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FishNum {
      get { if ((_hasBits0 & 16) != 0) { return fishNum_; } else { return FishNumDefaultValue; } }
      set {
        _hasBits0 |= 16;
        fishNum_ = value;
      }
    }
    /// <summary>Gets whether the "fish_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFishNum {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "fish_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFishNum() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "select_num" field.</summary>
    public const int SelectNumFieldNumber = 7;
    private readonly static uint SelectNumDefaultValue = 0;

    private uint selectNum_;
    /// <summary>
    ///入圈次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SelectNum {
      get { if ((_hasBits0 & 32) != 0) { return selectNum_; } else { return SelectNumDefaultValue; } }
      set {
        _hasBits0 |= 32;
        selectNum_ = value;
      }
    }
    /// <summary>Gets whether the "select_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSelectNum {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "select_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSelectNum() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "set_win_num" field.</summary>
    public const int SetWinNumFieldNumber = 8;
    private readonly static uint SetWinNumDefaultValue = 0;

    private uint setWinNum_;
    /// <summary>
    ///夺冠次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SetWinNum {
      get { if ((_hasBits0 & 64) != 0) { return setWinNum_; } else { return SetWinNumDefaultValue; } }
      set {
        _hasBits0 |= 64;
        setWinNum_ = value;
      }
    }
    /// <summary>Gets whether the "set_win_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSetWinNum {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "set_win_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSetWinNum() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "rsp_type" field.</summary>
    public const int RspTypeFieldNumber = 9;
    private readonly static int RspTypeDefaultValue = 0;

    private int rspType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RspType {
      get { if ((_hasBits0 & 128) != 0) { return rspType_; } else { return RspTypeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rspType_ = value;
      }
    }
    /// <summary>Gets whether the "rsp_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRspType {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "rsp_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRspType() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 10;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 11;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 256) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserClubDataRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserClubDataRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(TotalData, other.TotalData)) return false;
      if (MvpNum != other.MvpNum) return false;
      if (RichestNum != other.RichestNum) return false;
      if (FishNum != other.FishNum) return false;
      if (SelectNum != other.SelectNum) return false;
      if (SetWinNum != other.SetWinNum) return false;
      if (RspType != other.RspType) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasDataType) hash ^= DataType.GetHashCode();
      if (totalData_ != null) hash ^= TotalData.GetHashCode();
      if (HasMvpNum) hash ^= MvpNum.GetHashCode();
      if (HasRichestNum) hash ^= RichestNum.GetHashCode();
      if (HasFishNum) hash ^= FishNum.GetHashCode();
      if (HasSelectNum) hash ^= SelectNum.GetHashCode();
      if (HasSetWinNum) hash ^= SetWinNum.GetHashCode();
      if (HasRspType) hash ^= RspType.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (totalData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalData);
      }
      if (HasMvpNum) {
        output.WriteRawTag(32);
        output.WriteUInt32(MvpNum);
      }
      if (HasRichestNum) {
        output.WriteRawTag(40);
        output.WriteUInt32(RichestNum);
      }
      if (HasFishNum) {
        output.WriteRawTag(48);
        output.WriteUInt32(FishNum);
      }
      if (HasSelectNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(SelectNum);
      }
      if (HasSetWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(SetWinNum);
      }
      if (HasRspType) {
        output.WriteRawTag(72);
        output.WriteInt32(RspType);
      }
      if (HasClubid) {
        output.WriteRawTag(82);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(88);
        output.WriteInt32(Leagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasDataType) {
        output.WriteRawTag(16);
        output.WriteInt32(DataType);
      }
      if (totalData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalData);
      }
      if (HasMvpNum) {
        output.WriteRawTag(32);
        output.WriteUInt32(MvpNum);
      }
      if (HasRichestNum) {
        output.WriteRawTag(40);
        output.WriteUInt32(RichestNum);
      }
      if (HasFishNum) {
        output.WriteRawTag(48);
        output.WriteUInt32(FishNum);
      }
      if (HasSelectNum) {
        output.WriteRawTag(56);
        output.WriteUInt32(SelectNum);
      }
      if (HasSetWinNum) {
        output.WriteRawTag(64);
        output.WriteUInt32(SetWinNum);
      }
      if (HasRspType) {
        output.WriteRawTag(72);
        output.WriteInt32(RspType);
      }
      if (HasClubid) {
        output.WriteRawTag(82);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(88);
        output.WriteInt32(Leagueid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasDataType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (totalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalData);
      }
      if (HasMvpNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MvpNum);
      }
      if (HasRichestNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RichestNum);
      }
      if (HasFishNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FishNum);
      }
      if (HasSelectNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectNum);
      }
      if (HasSetWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetWinNum);
      }
      if (HasRspType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RspType);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserClubDataRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasDataType) {
        DataType = other.DataType;
      }
      if (other.totalData_ != null) {
        if (totalData_ == null) {
          TotalData = new global::Texas.Protocol.PersonalData();
        }
        TotalData.MergeFrom(other.TotalData);
      }
      if (other.HasMvpNum) {
        MvpNum = other.MvpNum;
      }
      if (other.HasRichestNum) {
        RichestNum = other.RichestNum;
      }
      if (other.HasFishNum) {
        FishNum = other.FishNum;
      }
      if (other.HasSelectNum) {
        SelectNum = other.SelectNum;
      }
      if (other.HasSetWinNum) {
        SetWinNum = other.SetWinNum;
      }
      if (other.HasRspType) {
        RspType = other.RspType;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (totalData_ == null) {
              TotalData = new global::Texas.Protocol.PersonalData();
            }
            input.ReadMessage(TotalData);
            break;
          }
          case 32: {
            MvpNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RichestNum = input.ReadUInt32();
            break;
          }
          case 48: {
            FishNum = input.ReadUInt32();
            break;
          }
          case 56: {
            SelectNum = input.ReadUInt32();
            break;
          }
          case 64: {
            SetWinNum = input.ReadUInt32();
            break;
          }
          case 72: {
            RspType = input.ReadInt32();
            break;
          }
          case 82: {
            Clubid = input.ReadString();
            break;
          }
          case 88: {
            Leagueid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            DataType = input.ReadInt32();
            break;
          }
          case 26: {
            if (totalData_ == null) {
              TotalData = new global::Texas.Protocol.PersonalData();
            }
            input.ReadMessage(TotalData);
            break;
          }
          case 32: {
            MvpNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RichestNum = input.ReadUInt32();
            break;
          }
          case 48: {
            FishNum = input.ReadUInt32();
            break;
          }
          case 56: {
            SelectNum = input.ReadUInt32();
            break;
          }
          case 64: {
            SetWinNum = input.ReadUInt32();
            break;
          }
          case 72: {
            RspType = input.ReadInt32();
            break;
          }
          case 82: {
            Clubid = input.ReadString();
            break;
          }
          case 88: {
            Leagueid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
