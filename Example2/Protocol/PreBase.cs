// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pre_base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from pre_base.proto</summary>
  public static partial class PreBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for pre_base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PreBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcmVfYmFzZS5wcm90byLtAQoNSXRlbUNsYXNzSW5mbxIWCglpdGVtX25h",
            "bWUYASABKAlIAIgBARIWCglpdGVtX3R5cGUYAiABKAVIAYgBARIVCghpY29u",
            "X3VybBgDIAEoCUgCiAEBEhgKC2V4cGlyZV90aW1lGAQgASgFSAOIAQESFgoJ",
            "Y2FuX21lcmdlGAUgASgISASIAQESEgoFcHJpY2UYBiABKANIBYgBAUIMCgpf",
            "aXRlbV9uYW1lQgwKCl9pdGVtX3R5cGVCCwoJX2ljb25fdXJsQg4KDF9leHBp",
            "cmVfdGltZUIMCgpfY2FuX21lcmdlQggKBl9wcmljZSKvAgoNTXR0UmV3YXJk",
            "SW5mbxISCgVjaGlwcxgBIAEoA0gAiAEBEhEKCWl0ZW1fbmFtZRgCIAMoCRIS",
            "CgVzY29yZRgDIAEoBUgBiAEBEhMKBnJlYmF0ZRgEIAEoA0gCiAEBEhkKDHNw",
            "ZWNpYWxfc2hvdxgFIAEoCUgDiAEBEhIKCml0ZW1fcHJpY2UYBiADKAMSIwoJ",
            "aXRlbV90eXBlGAcgAygOMhAuQ2x1YkJhZ3BhY2tUeXBlEhcKCnN0YXJ0X3Jh",
            "bmsYCCABKAVIBIgBARIVCghlbmRfcmFuaxgJIAEoBUgFiAEBQggKBl9jaGlw",
            "c0IICgZfc2NvcmVCCQoHX3JlYmF0ZUIPCg1fc3BlY2lhbF9zaG93Qg0KC19z",
            "dGFydF9yYW5rQgsKCV9lbmRfcmFuayJMCgRJdGVtEhMKBml0ZW1pZBgBIAEo",
            "A0gAiAEBEhYKCWl0ZW1fbmFtZRgCIAEoCUgBiAEBQgkKB19pdGVtaWRCDAoK",
            "X2l0ZW1fbmFtZSKnAQoJVXNlckJyaWVmEhAKA3VpZBgBIAEoA0gAiAEBEhEK",
            "BG5hbWUYAiABKAlIAYgBARITCgZhdmF0YXIYAyABKAlIAogBARIWCgljbHVi",
            "X25hbWUYBCABKAlIA4gBARITCgZjbGFuaWQYBSABKAVIBIgBAUIGCgRfdWlk",
            "QgcKBV9uYW1lQgkKB19hdmF0YXJCDAoKX2NsdWJfbmFtZUIJCgdfY2xhbmlk",
            "IscBChNSZXdhcmRDb25maWd1cmVJdGVtEhQKB3JhbmtpbmcYASABKAVIAIgB",
            "ARIZCgxyYW5raW5nX251bXMYAiABKAVIAYgBARIRCgRuYW1lGAMgASgJSAKI",
            "AQESEgoFdmFsdWUYBCABKAVIA4gBARIYCgtleHBpcmVfdGltZRgFIAEoA0gE",
            "iAEBQgoKCF9yYW5raW5nQg8KDV9yYW5raW5nX251bXNCBwoFX25hbWVCCAoG",
            "X3ZhbHVlQg4KDF9leHBpcmVfdGltZSK4AgoKQWN0aW9uRGF0YRIWCglsZWZ0",
            "X3RpbWUYASABKANIAIgBARIcCgdhY3Rpb25zGAIgAygOMgsuQWN0aW9uVHlw",
            "ZRIQCgNiZXQYAyABKANIAYgBARIRCgRjYWxsGAQgASgDSAKIAQESFgoJbWlu",
            "X3JhaXNlGAUgASgDSAOIAQESFgoJbWF4X3JhaXNlGAYgASgDSASIAQESIAoT",
            "cHJldmlvdXNfcGxheWVyX2JldBgHIAEoA0gFiAEBEhkKDHJhaXNlXzF4Y2hp",
            "cBgIIAEoA0gGiAEBQgwKCl9sZWZ0X3RpbWVCBgoEX2JldEIHCgVfY2FsbEIM",
            "CgpfbWluX3JhaXNlQgwKCl9tYXhfcmFpc2VCFgoUX3ByZXZpb3VzX3BsYXll",
            "cl9iZXRCDwoNX3JhaXNlXzF4Y2hpcCrvAgoKQWN0aW9uVHlwZRIPCgtBQ1RJ",
            "T05fTk9ORRAAEg8KC0FDVElPTl9GT0xEEAESEAoMQUNUSU9OX0NIRUNLEAIS",
            "DwoLQUNUSU9OX0NBTEwQAxIQCgxBQ1RJT05fUkFJU0UQBBIPCgtBQ1RJT05f",
            "V0FJVBAFEhAKDEFDVElPTl9TSVRFRBAGEg4KCkFDVElPTl9CRVQQBxINCglB",
            "Q1RJT05fU0IQCBINCglBQ1RJT05fQkIQCRIPCgtBQ1RJT05fQU5URRAKEhMK",
            "D0FDVElPTl9GT1JDRV9CQhALEhAKDEFDVElPTl9BbGxpbhAMEhYKEkFDVElP",
            "Tl9TWVNURU1fRk9MRBANEhcKE0FDVElPTl9TWVNURU1fQ0hFQ0sQDhITCg9B",
            "Q1RJT05fU1RSQURETEUQDxIOCgpBQ1RJT05fUE9UEBASFAoQQUNUSU9OX0ZB",
            "U1RfRk9MRBAREhUKEUFDVElPTl9CT01CUE9UX0JCEBIqgwIKDFRwQWN0aW9u",
            "VHlwZRISCg5UUF9BQ1RJT05fTk9ORRAAEhIKDlRQX0FDVElPTl9QQUNLEAES",
            "EwoPVFBfQUNUSU9OX0JMSU5EEAISEwoPVFBfQUNUSU9OX0NIQUFMEAMSEgoO",
            "VFBfQUNUSU9OX1NIT1cQBBIXChNUUF9BQ1RJT05fU0lERV9TSE9XEAUSEwoP",
            "VFBfQUNUSU9OX1NJVEVEEAYSEgoOVFBfQUNUSU9OX1dBSVQQBxISCg5UUF9B",
            "Q1RJT05fQU5URRAIEhkKFVRQX0FDVElPTl9TWVNURU1fUEFDSxAJEhwKGFRQ",
            "X0FDVElPTl9DT01QQVJFX0ZBSUxFRBAKKmQKDVByZUFjdGlvblR5cGUSEwoP",
            "UFJFX0FDVElPTl9OT05FEAASEwoPUFJFX0FDVElPTl9GT0xEEAESFAoQUFJF",
            "X0FDVElPTl9DSEVDSxACEhMKD1BSRV9BQ1RJT05fQ0FMTBADKrICCghSb29t",
            "VHlwZRINCglURVNUX1JPT00QABIPCgtDVVNUT01fUk9PTRABEgwKCE1UVF9S",
            "T09NEAISDAoIU05HX1JPT00QAxIPCgtMQURERVJfUk9PTRAEEg0KCUNMVUJf",
            "Uk9PTRAFEhMKD0FMTElOX0ZPTERfUk9PTRAGEg4KCkxPQkJZX1JPT00QBxIO",
            "CgpPTUFIQV9ST09NEAgSDQoJUElORV9ST09NEAkSEgoOT01BSEFfU05HX1JP",
            "T00QChISCg5PTUFIQV9NVFRfUk9PTRALEg4KCk1JWEVEX1JPT00QDBIPCgtT",
            "UElOVVBfUk9PTRANEg4KClBVU09ZX1JPT00QDhILCgdUUF9ST09NEA8SDgoK",
            "Q09MT1JfUk9PTRAQEhAKDFRPTkdJVFNfUk9PTRARKokBCghSb29tTW9kZRIS",
            "Cg5ST09NX01PREVfTk9ORRAAEhMKD1JPT01fTU9ERV9MT0JCWRABEhQKEFJP",
            "T01fTU9ERV9MQURERVIQAhISCg5ST09NX01PREVfQ0xVQhADEhIKDlJPT01f",
            "TU9ERV9IQUxMEAQSFgoSUk9PTV9NT0RFX09GRklDSUFMEAUqpQsKCEdhbWVN",
            "b2RlEhUKEUdBTUVfTU9ERV9SRUdVTEFSEAASHQoZR0FNRV9NT0RFX09GQ19Q",
            "Uk9HUkVTU0lWRRABEhoKFkdBTUVfTU9ERV9PRkNfVUxUSU1BVEUQAhIZChVH",
            "QU1FX01PREVfUExPXzVfQ0FSRFMQChISCg5HQU1FX01PREVfWk9PTRALEhgK",
            "FEdBTUVfTU9ERV9OTEhfNl9QTFVTEAwSGAoUR0FNRV9NT0RFX0FMTElOX0ZP",
            "TEQQDRIUChBHQU1FX01PREVfSFVOVEVSEA4SHQoZR0FNRV9NT0RFX1NOT1dC",
            "QUxMX0hVTlRFUhAPEhsKF0dBTUVfTU9ERV9NVFRfU0FURUxMSVRFEBASGAoU",
            "R0FNRV9NT0RFX01UVF9FTlRJVFkQERIZChVHQU1FX01PREVfUExPXzZfQ0FS",
            "RFMQEhIYChRHQU1FX01PREVfWk9PTV9QTE9fNRATEhsKF0dBTUVfTU9ERV9U",
            "T05HSVRTX0pPS0VSEBQSIwofR0FNRV9NT0RFX09GQ19XSUxEX0NBUkRfUkVH",
            "VUxBUhBkEicKI0dBTUVfTU9ERV9PRkNfV0lMRF9DQVJEX1BST0dSRVNTSVZF",
            "EGUSJAogR0FNRV9NT0RFX09GQ19XSUxEX0NBUkRfVUxUSU1BVEUQZhIfChpH",
            "QU1FX01PREVfUkVHVUxBUl9DQUxMVElNRRDIARIjCh5HQU1FX01PREVfUExP",
            "XzVfQ0FSRFNfQ0FMTFRJTUUQ0gESIwoeR0FNRV9NT0RFX1BMT182X0NBUkRT",
            "X0NBTExUSU1FENMBEh8KGkdBTUVfTU9ERV9NSVhFRF9HQU1FX1BMT180EKwC",
            "Eh8KGkdBTUVfTU9ERV9NSVhFRF9HQU1FX1BMT181EK0CEiMKHkdBTUVfTU9E",
            "RV9NSVhFRF9QTE9fNF9DQUxMVElNRRCuAhIjCh5HQU1FX01PREVfTUlYRURf",
            "UExPXzVfQ0FMTFRJTUUQrwISFQoQR0FNRV9NT0RFX1NQSU5VUBCQAxIdChhH",
            "QU1FX01PREVfSFVOVEVSXzVfQ0FSRFMQngMSJgohR0FNRV9NT0RFX1NOT1dC",
            "QUxMX0hVTlRFUl81X0NBUkRTEJ8DEiAKG0dBTUVfTU9ERV9TQVRFTExJVEVf",
            "NV9DQVJEUxCgAxIdChhHQU1FX01PREVfRU5USVRZXzVfQ0FSRFMQoQMSGQoU",
            "R0FNRV9NT0RFX0hpTG9fUExPXzQQ9AMSGQoUR0FNRV9NT0RFX0hpTG9fUExP",
            "XzUQ9QMSIgodR0FNRV9NT0RFX0hpTG9fUExPXzRfQ0FMTFRJTUUQ9gMSIgod",
            "R0FNRV9NT0RFX0hpTG9fUExPXzVfQ0FMTFRJTUUQ9wMSFgoRR0FNRV9NT0RF",
            "XzNfMV9OTEgQ+AMSHwoaR0FNRV9NT0RFXzNfMV9OTEhfQ0FMTFRJTUUQ+QMS",
            "GQoUR0FNRV9NT0RFX0hpTG9fUExPXzYQ+gMSIgodR0FNRV9NT0RFX0hpTG9f",
            "UExPXzZfQ0FMTFRJTUUQ+wMSFgoRR0FNRV9NT0RFX0FPRl9OTEgQ/AMSGwoW",
            "R0FNRV9NT0RFXzNfMV9OTEhfRkxPUBD9AxIkCh9HQU1FX01PREVfM18xX05M",
            "SF9GTE9QX0NBTExUSU1FEP4DEhoKFUdBTUVfTU9ERV9SRUdVTEFSXzcybxD/",
            "AxIjCh5HQU1FX01PREVfUkVHVUxBUl9DQUxMVElNRV83Mm8QgAQSGgoVR0FN",
            "RV9NT0RFXzNfMV9OTEhfNzJvEIEEEiMKHkdBTUVfTU9ERV8zXzFfTkxIX0NB",
            "TExUSU1FXzcybxCCBBIfChpHQU1FX01PREVfM18xX05MSF9GTE9QXzcybxCD",
            "BBIoCiNHQU1FX01PREVfM18xX05MSF9GTE9QX0NBTExUSU1FXzcybxCEBCrX",
            "AwoQQ2x1YkNhc2hSb29tVHlwZRIfChtDTFVCX0NBU0hfUk9PTV9UWVBFX0lO",
            "VkFMSUQQABIbChdDTFVCX0NBU0hfUk9PTV9UWVBFX05MSBABEhwKGENMVUJf",
            "Q0FTSF9ST09NX1RZUEVfTkxINhACEhwKGENMVUJfQ0FTSF9ST09NX1RZUEVf",
            "UExPNBADEhwKGENMVUJfQ0FTSF9ST09NX1RZUEVfUExPNRAEEhsKF0NMVUJf",
            "Q0FTSF9ST09NX1RZUEVfT0ZDEAUSJQohQ0xVQl9DQVNIX1JPT01fVFlQRV9P",
            "RkNfV0lMRF9DQVJEEAYSJgoiQ0xVQl9DQVNIX1JPT01fVFlQRV9NSVhFRF9O",
            "TEhfUExPNBAHEiYKIkNMVUJfQ0FTSF9ST09NX1RZUEVfTUlYRURfTkxIX1BM",
            "TzUQCBIdChlDTFVCX0NBU0hfUk9PTV9UWVBFX0ZMQVNIEAkSHAoYQ0xVQl9D",
            "QVNIX1JPT01fVFlQRV9QTE82EAoSHQoZQ0xVQl9DQVNIX1JPT01fVFlQRV9Q",
            "VVNPWRALEhoKFkNMVUJfQ0FTSF9ST09NX1RZUEVfVFAQDBIfChtDTFVCX0NB",
            "U0hfUk9PTV9UWVBFX1RPTkdJVFMQDSp1CgpSb3VuZFN0YWdlEg4KClJPVU5E",
            "X05PTkUQABISCg5ST1VORF9QUkVfRkxPUBABEg4KClJPVU5EX0ZMT1AQAhIO",
            "CgpST1VORF9UVVJOEAMSDwoLUk9VTkRfUklWRVIQBBISCg5ST1VORF9DT01Q",
            "TEVURRAFKskBCglWYWx1ZVR5cGUSDAoISU5WQUlMSUQQABIOCgpVU0VSX01P",
            "TkVZEAESEAoMVVNFUl9ESUFNT05EEAISEAoMVVNFUl9QUENISVBTEAMSFQoR",
            "VVNFUl9MRUFHVUVfQ0hJUFMQBBIQCgxDTFVCX1BQQ0hJUFMQBRISCg5MRUFH",
            "VUVfUFBDSElQUxAGEhQKEENMVUJfQUdFTlRfQ0hJUFMQBxIWChJMRUFHVUVf",
            "QUdFTlRfQ0hJUFMQCBIPCgtVU0VSX1JFQkFURRAJKmoKClBQQ3VycmVuY3kS",
            "FAoQUFBfQ1VSUkVOQ1lfTk9ORRAAEhQKEFBQX0NVUlJFTkNZX0dPTEQQARIX",
            "ChNQUF9DVVJSRU5DWV9ESUFNT05EEAISFwoTUFBfQ1VSUkVOQ1lfUFBDSElQ",
            "UxADKmoKClNpZ251cFR5cGUSEwoPU0lHTlVQX1RZUEVfQUxMEAASFQoRU0lH",
            "TlVQX1RZUEVfQ0hJUFMQARIWChJTSUdOVVBfVFlQRV9USUNLRVQQAhIYChRT",
            "SUdOVVBfVFlQRV9ESUFNT05EUxADKoQBChBPZmZpY2lhbERlc2NUeXBlEhsK",
            "F09GRklDSUFMX0RFU0NfVFlQRV9OT05FEAASGgoWT0ZGSUNJQUxfREVTQ19U",
            "WVBFX0hPVBABEhoKFk9GRklDSUFMX0RFU0NfVFlQRV9ORVcQAhIbChdPRkZJ",
            "Q0lBTF9ERVNDX1RZUEVfRlJFRRADKk8KEE9mZmljaWFsTG9jYXRpb24SHAoY",
            "T0ZGSUNJQUxfTE9DQVRJT05fT05MSU5FEAASHQoZT0ZGSUNJQUxfTE9DQVRJ",
            "T05fT0ZGTElORRABKjoKC09mZmljaWFsVGFnEhQKEE9GRklDSUFMX1RBR19I",
            "T1QQABIVChFPRkZJQ0lBTF9UQUdfUFBXQxABKkQKDU9mZmljaWFsUG9wdXAS",
            "FwoTT0ZGSUNJQUxfUE9QVVBfTk9ORRAAEhoKFk9GRklDSUFMX1BPUFVQX0RF",
            "RkFVTFQQASq1BgoOVXNlclJvb21BY3Rpb24SGQoVVVNFUl9ST09NX0FDVElP",
            "Tl9OT05FEAASGwoXVVNFUl9ST09NX0FDVElPTl9TSUdOVVAQARIiCh5VU0VS",
            "X1JPT01fQUNUSU9OX0NBTkNFTF9TSUdOVVAQAhIcChhVU0VSX1JPT01fQUNU",
            "SU9OX1NJVERPV04QAxIcChhVU0VSX1JPT01fQUNUSU9OX1NUQU5EVVAQBBId",
            "ChlVU0VSX1JPT01fQUNUSU9OX1dJVEhEUkFXEAUSIwofVVNFUl9ST09NX0FD",
            "VElPTl9SRURSQVdfTE9UVEVSWRAGEicKI1VTRVJfUk9PTV9BQ1RJT05fVVNF",
            "Ul9SRVFVRVNUX1NUQU5EEAcSIwofVVNFUl9ST09NX0FDVElPTl9OT19DSElQ",
            "U19TVEFORBAIEiIKHlVTRVJfUk9PTV9BQ1RJT05fVElNRV9VUF9TVEFORBAJ",
            "EiQKIFVTRVJfUk9PTV9BQ1RJT05fTk9fQUNUSU9OX1NUQU5EEAoSIQodVVNF",
            "Ul9ST09NX0FDVElPTl9TWVNURU1fU1RBTkQQCxImCiJVU0VSX1JPT01fQUNU",
            "SU9OX0xBRERFUl9PVkVSX1NUQU5EEAwSJwojVVNFUl9ST09NX0FDVElPTl9D",
            "SEFOR0VfVEFCTEVfU1RBTkQQDRIhCh1VU0VSX1JPT01fQUNUSU9OX0tJQ0tF",
            "RF9TVEFORBAOEicKI1VTRVJfUk9PTV9BQ1RJT05fRklOQUxfUkVXQVJEX1NU",
            "QU5EEA8SIwofVVNFUl9ST09NX0FDVElPTl9MQUNLX0dQU19TVEFORBAQEisK",
            "J1VTRVJfUk9PTV9BQ1RJT05fQlJFQUtfR1BTSVBfUlVMRV9TVEFORBAREiQK",
            "IFVTRVJfUk9PTV9BQ1RJT05fWk9PTV9GT0xEX1NUQU5EEBISKgomVVNFUl9S",
            "T09NX0FDVElPTl9DQUxMVElNRV9DQU5DRUxfU1RBTkQQExInCiNVU0VSX1JP",
            "T01fQUNUSU9OX1VOS05PV05fVFlQRV9TVEFORBAUEiIKHlVTRVJfUk9PTV9B",
            "Q1RJT05fQ0FQVENIQV9TVEFORBAVKrIDCgpCYW5rZXJUeXBlEhQKEEJBTktF",
            "Ul9UWVBFX05PTkUQABIVChFCQU5LRVJfVFlQRV9CVVlJThABEhsKF0JBTktF",
            "Ul9UWVBFX0RFTEFZX0JVWUlOEAISFQoRQkFOS0VSX1RZUEVfUkVCVVkQAxIV",
            "ChFCQU5LRVJfVFlQRV9UT1BVUBAEEhUKEUJBTktFUl9UWVBFX0FERE9OEAUS",
            "GwoXQkFOS0VSX1RZUEVfR0FNRV9SRVdBUkQQBhIdChlCQU5LRVJfVFlQRV9I",
            "VU5URVJfUkVXQVJEEAcSHgoaQkFOS0VSX1RZUEVfSkFDS1BPVF9SRVdBUkQQ",
            "CBIWChJCQU5LRVJfVFlQRV9SRUZVTkQQZBIXChNCQU5LRVJfVFlQRV9DQVNI",
            "T1VUEGUSHAoYQkFOS0VSX1RZUEVfQ0hBTkdFX1RBQkxFEGYSHgoaQkFOS0VS",
            "X1RZUEVfV0lUSERSQVdfQ0hJUFMQZxIkCiBCQU5LRVJfVFlQRV9SRURSQVdf",
            "TE9UVEVSWV9DSElQUxBoEiQKH0JBTktFUl9UWVBFX0dST1VQX01UVF9EQVky",
            "X0lOSVQQyAEqXAoUTXR0UmV3YXJkUGVyY2VudFR5cGUSEwoPTVRUX1RFTl9Q",
            "RVJDRU5UEAASFwoTTVRUX0ZJRlRFRU5fUEVSQ0VOVBABEhYKEk1UVF9UV0VO",
            "VFlfUEVSQ0VOVBACKnsKDU10dFJld2FyZE1vZGUSEwoPTVRUX1NOR19ERUZB",
            "VUxUEAASEQoNTVRUX1RPUF9IRUFWWRABEgwKCE1UVF9GQUxUEAISEAoMTVRU",
            "X0NIQU1QSU9OEAMSEAoMU05HX1NUQU5EQVJEEAQSEAoMU05HX0NIQU1QSU9O",
            "EAUqdQoRR2FtZVNldFBsYXlTdGF0dXMSHQoZR0FNRV9TRVRfUExBWV9TVEFU",
            "VVNfTk9ORRAAEiAKHEdBTUVfU0VUX1BMQVlfU1RBVFVTX1BMQVlJTkcQARIf",
            "ChtHQU1FX1NFVF9QTEFZX1NUQVRVU19GSU5JU0gQZCrkAQoOVXNlclBsYXlT",
            "dGF0dXMSGwoXVVNFUl9QTEFZX1NUQVRVU19OT1RfSU4QABIbChdVU0VSX1BM",
            "QVlfU1RBVFVTX1NJR05VUBABEhwKGFVTRVJfUExBWV9TVEFUVVNfUExBWUlO",
            "RxACEhwKGFVTRVJfUExBWV9TVEFUVVNfU1RBTkRVUBADEhwKGFVTRVJfUExB",
            "WV9TVEFUVVNfU0lUVElORxAEEhsKF1VTRVJfUExBWV9TVEFUVVNfUkVUVVJO",
            "EAUSIQodVVNFUl9QTEFZX1NUQVRVU19DSEFOR0VfVEFCTEUQBippCg9DbHVi",
            "QmFncGFja1R5cGUSEgoOQkFHUEFDS19USUNLRVQQABISCg5CQUdQQUNLX0VO",
            "VElUWRABEhQKEEJBR1BBQ0tfQUxMX1RZUEUQAhIYChRCQUdQQUNLX1NVUEVS",
            "X1RJQ0tFVBADKmAKFkF1dG9EZWxheVJvb21PdmVyVGltZXMSCwoHREVGQVVM",
            "VBAAEgkKBVRIUkVFEAMSBwoDU0lYEAYSCAoETklORRAJEgoKBlRXRUxWRRAM",
            "Eg8KC1RXRU5UWV9GT1VSEBgqpQkKEUNsdWJDaGlwc0Zsb3dUeXBlEhIKDkZs",
            "b3dUeXBlX0NoaXBzEAASEwoPRmxvd1R5cGVfQ3JlZGl0EAESEAoMRmxvd1R5",
            "cGVfR3RkEAISEwoPRmxvd1R5cGVfVGlja2V0EAMSEwoPRmxvd1R5cGVfRW50",
            "aXR5EAQSEgoORmxvd1R5cGVfU3Rvcm0QBRIXChNGbG93VHlwZV9MZWF2ZV9D",
            "bHViEAYSGQoVRmxvd1R5cGVfTGVhdmVfQ3JlZGl0EAcSFwoTRmxvd1R5cGVf",
            "QWRkX1RpY2tldBAIEhgKFEZsb3dUeXBlX0dpdmVfVGlja2V0EAkSGwoXRmxv",
            "d1R5cGVfUmVjeWNsZV9UaWNrZXQQChIaChZGbG93VHlwZV9FeHBpcmVfdGlj",
            "a2V0EAsSGQoVRmxvd1R5cGVfU3Rvcm1fQ3JlYXRlEAwSGQoVRmxvd1R5cGVf",
            "U3Rvcm1fQ2hhbmdlEA0SGQoVRmxvd1R5cGVfU3Rvcm1fQ2FuY2VsEA4SGwoX",
            "Rmxvd1R5cGVfU3Rvcm1fUm9sbGJhY2sQDxIfChtGbG93VHlwZV9SaW5nX0dh",
            "bWVfQWN0aXZpdHkQEBImCiJGbG93VHlwZV9SaW5nX0dhbWVfQWN0aXZpdHlf",
            "Q3JlYXRlEBESJgoiRmxvd1R5cGVfUmluZ19HYW1lX0FjdGl2aXR5X0NoYW5n",
            "ZRASEiYKIkZsb3dUeXBlX1JpbmdfR2FtZV9BY3Rpdml0eV9DYW5jZWwQExIo",
            "CiRGbG93VHlwZV9SaW5nX0dhbWVfQWN0aXZpdHlfUm9sbGJhY2sQFBIZChVG",
            "bG93VHlwZV9NdHRfQWN0aXZpdHkQFRIgChxGbG93VHlwZV9NdHRfQWN0aXZp",
            "dHlfQ3JlYXRlEBYSIAocRmxvd1R5cGVfTXR0X0FjdGl2aXR5X0NoYW5nZRAX",
            "EiAKHEZsb3dUeXBlX010dF9BY3Rpdml0eV9DYW5jZWwQGBIiCh5GbG93VHlw",
            "ZV9NdHRfQWN0aXZpdHlfUm9sbGJhY2sQGRIhCh1GbG93VHlwZV9TcGVjaWZp",
            "ZWRSR19BY3Rpdml0eRAaEigKJEZsb3dUeXBlX1NwZWNpZmllZFJHX0FjdGl2",
            "aXR5X0NyZWF0ZRAbEigKJEZsb3dUeXBlX1NwZWNpZmllZFJHX0FjdGl2aXR5",
            "X0NoYW5nZRAcEigKJEZsb3dUeXBlX1NwZWNpZmllZFJHX0FjdGl2aXR5X0Nh",
            "bmNlbBAdEioKJkZsb3dUeXBlX1NwZWNpZmllZFJHX0FjdGl2aXR5X1JvbGxi",
            "YWNrEB4SHgoaRmxvd1R5cGVfQ2x1Yl9EYWlseV9SZXdhcmQQHxIuCipGbG93",
            "VHlwZV9IYW5kTWlzc2lvbl9QUF9DaGlwc19SZXdhcmRfQ2xhaW0QIBIvCitG",
            "bG93VHlwZV9IYW5kTWlzc2lvbl9MdWNreURyYXdfUmV3YXJkX0NsYWltECES",
            "KAokRmxvd1R5cGVfSGFuZE1pc3Npb25fUFBfQ2hpcHNfUmV3YXJkECISKQol",
            "Rmxvd1R5cGVfSGFuZE1pc3Npb25fTHVja3lEcmF3X1Jld2FyZBAjKkAKEFBQ",
            "UG9rZXJSYW5nZVR5cGUSFwoTUkFOR0VfVFlQRV9QTEFURk9STRAAEhMKD1JB",
            "TkdFX1RZUEVfQ0xVQhABQhhaBS9nb3BiqgIOVGV4YXMuUHJvdG9jb2xiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Texas.Protocol.ActionType), typeof(global::Texas.Protocol.TpActionType), typeof(global::Texas.Protocol.PreActionType), typeof(global::Texas.Protocol.RoomType), typeof(global::Texas.Protocol.RoomMode), typeof(global::Texas.Protocol.GameMode), typeof(global::Texas.Protocol.ClubCashRoomType), typeof(global::Texas.Protocol.RoundStage), typeof(global::Texas.Protocol.ValueType), typeof(global::Texas.Protocol.PPCurrency), typeof(global::Texas.Protocol.SignupType), typeof(global::Texas.Protocol.OfficialDescType), typeof(global::Texas.Protocol.OfficialLocation), typeof(global::Texas.Protocol.OfficialTag), typeof(global::Texas.Protocol.OfficialPopup), typeof(global::Texas.Protocol.UserRoomAction), typeof(global::Texas.Protocol.BankerType), typeof(global::Texas.Protocol.MttRewardPercentType), typeof(global::Texas.Protocol.MttRewardMode), typeof(global::Texas.Protocol.GameSetPlayStatus), typeof(global::Texas.Protocol.UserPlayStatus), typeof(global::Texas.Protocol.ClubBagpackType), typeof(global::Texas.Protocol.AutoDelayRoomOverTimes), typeof(global::Texas.Protocol.ClubChipsFlowType), typeof(global::Texas.Protocol.PPPokerRangeType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ItemClassInfo), global::Texas.Protocol.ItemClassInfo.Parser, new[]{ "ItemName", "ItemType", "IconUrl", "ExpireTime", "CanMerge", "Price" }, new[]{ "ItemName", "ItemType", "IconUrl", "ExpireTime", "CanMerge", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MttRewardInfo), global::Texas.Protocol.MttRewardInfo.Parser, new[]{ "Chips", "ItemName", "Score", "Rebate", "SpecialShow", "ItemPrice", "ItemType", "StartRank", "EndRank" }, new[]{ "Chips", "Score", "Rebate", "SpecialShow", "StartRank", "EndRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.Item), global::Texas.Protocol.Item.Parser, new[]{ "Itemid", "ItemName" }, new[]{ "Itemid", "ItemName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.UserBrief), global::Texas.Protocol.UserBrief.Parser, new[]{ "Uid", "Name", "Avatar", "ClubName", "Clanid" }, new[]{ "Uid", "Name", "Avatar", "ClubName", "Clanid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.RewardConfigureItem), global::Texas.Protocol.RewardConfigureItem.Parser, new[]{ "Ranking", "RankingNums", "Name", "Value", "ExpireTime" }, new[]{ "Ranking", "RankingNums", "Name", "Value", "ExpireTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ActionData), global::Texas.Protocol.ActionData.Parser, new[]{ "LeftTime", "Actions", "Bet", "Call", "MinRaise", "MaxRaise", "PreviousPlayerBet", "Raise1Xchip" }, new[]{ "LeftTime", "Bet", "Call", "MinRaise", "MaxRaise", "PreviousPlayerBet", "Raise1Xchip" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ActionType {
    [pbr::OriginalName("ACTION_NONE")] ActionNone = 0,
    [pbr::OriginalName("ACTION_FOLD")] ActionFold = 1,
    [pbr::OriginalName("ACTION_CHECK")] ActionCheck = 2,
    [pbr::OriginalName("ACTION_CALL")] ActionCall = 3,
    [pbr::OriginalName("ACTION_RAISE")] ActionRaise = 4,
    /// <summary>
    ///等待下注
    /// </summary>
    [pbr::OriginalName("ACTION_WAIT")] ActionWait = 5,
    /// <summary>
    ///坐下，未入局状态
    /// </summary>
    [pbr::OriginalName("ACTION_SITED")] ActionSited = 6,
    /// <summary>
    ///第一个加注
    /// </summary>
    [pbr::OriginalName("ACTION_BET")] ActionBet = 7,
    /// <summary>
    ///下小盲
    /// </summary>
    [pbr::OriginalName("ACTION_SB")] ActionSb = 8,
    /// <summary>
    ///下大盲
    /// </summary>
    [pbr::OriginalName("ACTION_BB")] ActionBb = 9,
    /// <summary>
    ///下前注
    /// </summary>
    [pbr::OriginalName("ACTION_ANTE")] ActionAnte = 10,
    /// <summary>
    ///强制大盲
    /// </summary>
    [pbr::OriginalName("ACTION_FORCE_BB")] ActionForceBb = 11,
    [pbr::OriginalName("ACTION_Allin")] ActionAllin = 12,
    /// <summary>
    ///系统操作产生的类型
    /// </summary>
    [pbr::OriginalName("ACTION_SYSTEM_FOLD")] ActionSystemFold = 13,
    /// <summary>
    ///系统自动看牌
    /// </summary>
    [pbr::OriginalName("ACTION_SYSTEM_CHECK")] ActionSystemCheck = 14,
    [pbr::OriginalName("ACTION_STRADDLE")] ActionStraddle = 15,
    /// <summary>
    ///底池限注时，加注满一个pool
    /// </summary>
    [pbr::OriginalName("ACTION_POT")] ActionPot = 16,
    /// <summary>
    ///快速桌快速弃牌
    /// </summary>
    [pbr::OriginalName("ACTION_FAST_FOLD")] ActionFastFold = 17,
    /// <summary>
    ///bombpot 下注
    /// </summary>
    [pbr::OriginalName("ACTION_BOMBPOT_BB")] ActionBombpotBb = 18,
  }

  /// <summary>
  ///teenpatti 操作类型
  /// </summary>
  public enum TpActionType {
    [pbr::OriginalName("TP_ACTION_NONE")] TpActionNone = 0,
    [pbr::OriginalName("TP_ACTION_PACK")] TpActionPack = 1,
    [pbr::OriginalName("TP_ACTION_BLIND")] TpActionBlind = 2,
    [pbr::OriginalName("TP_ACTION_CHAAL")] TpActionChaal = 3,
    [pbr::OriginalName("TP_ACTION_SHOW")] TpActionShow = 4,
    [pbr::OriginalName("TP_ACTION_SIDE_SHOW")] TpActionSideShow = 5,
    /// <summary>
    ///坐下，未入局状态
    /// </summary>
    [pbr::OriginalName("TP_ACTION_SITED")] TpActionSited = 6,
    /// <summary>
    ///等待下注
    /// </summary>
    [pbr::OriginalName("TP_ACTION_WAIT")] TpActionWait = 7,
    /// <summary>
    ///下前注
    /// </summary>
    [pbr::OriginalName("TP_ACTION_ANTE")] TpActionAnte = 8,
    /// <summary>
    ///系统操作产生的类型
    /// </summary>
    [pbr::OriginalName("TP_ACTION_SYSTEM_PACK")] TpActionSystemPack = 9,
    /// <summary>
    ///比牌失败
    /// </summary>
    [pbr::OriginalName("TP_ACTION_COMPARE_FAILED")] TpActionCompareFailed = 10,
  }

  /// <summary>
  /// 預操作
  /// </summary>
  public enum PreActionType {
    [pbr::OriginalName("PRE_ACTION_NONE")] PreActionNone = 0,
    [pbr::OriginalName("PRE_ACTION_FOLD")] PreActionFold = 1,
    [pbr::OriginalName("PRE_ACTION_CHECK")] PreActionCheck = 2,
    [pbr::OriginalName("PRE_ACTION_CALL")] PreActionCall = 3,
  }

  public enum RoomType {
    [pbr::OriginalName("TEST_ROOM")] TestRoom = 0,
    /// <summary>
    /// 普通组局房间 (HALL HODLEM)
    /// </summary>
    [pbr::OriginalName("CUSTOM_ROOM")] CustomRoom = 1,
    /// <summary>
    /// 所有MTT NLH (HALL, CLUB)
    /// </summary>
    [pbr::OriginalName("MTT_ROOM")] MttRoom = 2,
    /// <summary>
    /// 所有SNG NLH (HALL, CLUB)
    /// </summary>
    [pbr::OriginalName("SNG_ROOM")] SngRoom = 3,
    /// <summary>
    /// 天梯中的房间(LADDER)
    /// </summary>
    [pbr::OriginalName("LADDER_ROOM")] LadderRoom = 4,
    /// <summary>
    /// 俱乐部房间 (CLUB的HODLEM)
    /// </summary>
    [pbr::OriginalName("CLUB_ROOM")] ClubRoom = 5,
    /// <summary>
    /// LOBBY的ALLINORFOLD
    /// </summary>
    [pbr::OriginalName("ALLIN_FOLD_ROOM")] AllinFoldRoom = 6,
    /// <summary>
    /// LOBBY 的 REGULAR和ANTE
    /// </summary>
    [pbr::OriginalName("LOBBY_ROOM")] LobbyRoom = 7,
    /// <summary>
    /// 所有PLO Cash (HALL, CLUB, LOBBY)
    /// </summary>
    [pbr::OriginalName("OMAHA_ROOM")] OmahaRoom = 8,
    /// <summary>
    /// 大菠萝
    /// </summary>
    [pbr::OriginalName("PINE_ROOM")] PineRoom = 9,
    /// <summary>
    /// OMAHA SNG
    /// </summary>
    [pbr::OriginalName("OMAHA_SNG_ROOM")] OmahaSngRoom = 10,
    /// <summary>
    /// OMAHA MTT
    /// </summary>
    [pbr::OriginalName("OMAHA_MTT_ROOM")] OmahaMttRoom = 11,
    /// <summary>
    /// MIXED GAME
    /// </summary>
    [pbr::OriginalName("MIXED_ROOM")] MixedRoom = 12,
    /// <summary>
    /// SPINUP SNG
    /// </summary>
    [pbr::OriginalName("SPINUP_ROOM")] SpinupRoom = 13,
    [pbr::OriginalName("PUSOY_ROOM")] PusoyRoom = 14,
    /// <summary>
    /// teenpatti
    /// </summary>
    [pbr::OriginalName("TP_ROOM")] TpRoom = 15,
    [pbr::OriginalName("COLOR_ROOM")] ColorRoom = 16,
    /// <summary>
    ///new_game_proto
    ///NEWGAME_ROOM    = 1000;
    /// </summary>
    [pbr::OriginalName("TONGITS_ROOM")] TongitsRoom = 17,
  }

  /// <summary>
  /// 房间玩法
  /// </summary>
  public enum RoomMode {
    [pbr::OriginalName("ROOM_MODE_NONE")] None = 0,
    /// <summary>
    /// 大厅
    /// </summary>
    [pbr::OriginalName("ROOM_MODE_LOBBY")] Lobby = 1,
    /// <summary>
    /// 天梯
    /// </summary>
    [pbr::OriginalName("ROOM_MODE_LADDER")] Ladder = 2,
    /// <summary>
    /// 俱乐部
    /// </summary>
    [pbr::OriginalName("ROOM_MODE_CLUB")] Club = 3,
    /// <summary>
    /// 约局
    /// </summary>
    [pbr::OriginalName("ROOM_MODE_HALL")] Hall = 4,
    /// <summary>
    /// 官方赛事
    /// </summary>
    [pbr::OriginalName("ROOM_MODE_OFFICIAL")] Official = 5,
  }

  /// <summary>
  ///玩法细分
  /// </summary>
  public enum GameMode {
    /// <summary>
    /// 普通玩法
    /// </summary>
    [pbr::OriginalName("GAME_MODE_REGULAR")] Regular = 0,
    /// <summary>
    /// OFC 血战
    /// </summary>
    [pbr::OriginalName("GAME_MODE_OFC_PROGRESSIVE")] OfcProgressive = 1,
    /// <summary>
    /// OFC 血进血出
    /// </summary>
    [pbr::OriginalName("GAME_MODE_OFC_ULTIMATE")] OfcUltimate = 2,
    /// <summary>
    /// PLO 5张牌
    /// </summary>
    [pbr::OriginalName("GAME_MODE_PLO_5_CARDS")] Plo5Cards = 10,
    /// <summary>
    /// NLH, PLO4 的 flash 桌專用
    /// </summary>
    [pbr::OriginalName("GAME_MODE_ZOOM")] Zoom = 11,
    /// <summary>
    /// 6 plus 德州
    /// </summary>
    [pbr::OriginalName("GAME_MODE_NLH_6_PLUS")] Nlh6Plus = 12,
    /// <summary>
    /// allin or fold
    /// </summary>
    [pbr::OriginalName("GAME_MODE_ALLIN_FOLD")] AllinFold = 13,
    /// <summary>
    /// 猎人赛
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HUNTER")] Hunter = 14,
    /// <summary>
    /// 滚雪球猎人赛
    /// </summary>
    [pbr::OriginalName("GAME_MODE_SNOWBALL_HUNTER")] SnowballHunter = 15,
    /// <summary>
    /// MTT卫星赛
    /// </summary>
    [pbr::OriginalName("GAME_MODE_MTT_SATELLITE")] MttSatellite = 16,
    /// <summary>
    /// MTT实物赛
    /// </summary>
    [pbr::OriginalName("GAME_MODE_MTT_ENTITY")] MttEntity = 17,
    /// <summary>
    /// PLO 6张牌
    /// </summary>
    [pbr::OriginalName("GAME_MODE_PLO_6_CARDS")] Plo6Cards = 18,
    /// <summary>
    /// PLO5 的 flash 桌專用 (為了與 PLO4 的 flash 做區隔)
    /// </summary>
    [pbr::OriginalName("GAME_MODE_ZOOM_PLO_5")] ZoomPlo5 = 19,
    /// <summary>
    /// Tongits 的 Joker 模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_TONGITS_JOKER")] TongitsJoker = 20,
    /// <summary>
    /// OFC 赖子普通
    /// </summary>
    [pbr::OriginalName("GAME_MODE_OFC_WILD_CARD_REGULAR")] OfcWildCardRegular = 100,
    /// <summary>
    /// OFC 赖子血战
    /// </summary>
    [pbr::OriginalName("GAME_MODE_OFC_WILD_CARD_PROGRESSIVE")] OfcWildCardProgressive = 101,
    /// <summary>
    /// OFC 赖子血进血出
    /// </summary>
    [pbr::OriginalName("GAME_MODE_OFC_WILD_CARD_ULTIMATE")] OfcWildCardUltimate = 102,
    /// <summary>
    /// 普通模式CallTime模式(NLH和PLO普通模式)
    /// </summary>
    [pbr::OriginalName("GAME_MODE_REGULAR_CALLTIME")] RegularCalltime = 200,
    /// <summary>
    /// PLO 5张牌CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_PLO_5_CARDS_CALLTIME")] Plo5CardsCalltime = 210,
    /// <summary>
    /// PLO 6张牌CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_PLO_6_CARDS_CALLTIME")] Plo6CardsCalltime = 211,
    /// <summary>
    /// 混合游戏 德州加4张奥马哈
    /// </summary>
    [pbr::OriginalName("GAME_MODE_MIXED_GAME_PLO_4")] MixedGamePlo4 = 300,
    /// <summary>
    /// 混合游戏 德州加5张奥马哈
    /// </summary>
    [pbr::OriginalName("GAME_MODE_MIXED_GAME_PLO_5")] MixedGamePlo5 = 301,
    /// <summary>
    /// 混合游戏 德州加4张奥马哈 CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_MIXED_PLO_4_CALLTIME")] MixedPlo4Calltime = 302,
    /// <summary>
    /// 混合游戏 德州加5张奥马哈 CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_MIXED_PLO_5_CALLTIME")] MixedPlo5Calltime = 303,
    /// <summary>
    /// SpinUp SNG的一种玩法
    /// </summary>
    [pbr::OriginalName("GAME_MODE_SPINUP")] Spinup = 400,
    /// <summary>
    /// MTT 猎人赛 5cards
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HUNTER_5_CARDS")] Hunter5Cards = 414,
    /// <summary>
    /// MTT 滚雪球猎人赛 5cards
    /// </summary>
    [pbr::OriginalName("GAME_MODE_SNOWBALL_HUNTER_5_CARDS")] SnowballHunter5Cards = 415,
    /// <summary>
    /// MTT 卫星赛 5cards
    /// </summary>
    [pbr::OriginalName("GAME_MODE_SATELLITE_5_CARDS")] Satellite5Cards = 416,
    /// <summary>
    /// MTT 实物赛 5cards
    /// </summary>
    [pbr::OriginalName("GAME_MODE_ENTITY_5_CARDS")] Entity5Cards = 417,
    /// <summary>
    /// 4张牌 omaha Hi/Lo
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HiLo_PLO_4")] HiLoPlo4 = 500,
    /// <summary>
    /// 5张牌 omaha Hi/Lo
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HiLo_PLO_5")] HiLoPlo5 = 501,
    /// <summary>
    /// 4张牌 omaha Hi/Lo CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HiLo_PLO_4_CALLTIME")] HiLoPlo4Calltime = 502,
    /// <summary>
    /// 5张牌 omaha Hi/Lo CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HiLo_PLO_5_CALLTIME")] HiLoPlo5Calltime = 503,
    /// <summary>
    /// 3-1德州
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH")] _31Nlh = 504,
    /// <summary>
    /// 3-1德州 calltime
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_CALLTIME")] _31NlhCalltime = 505,
    /// <summary>
    /// 6张牌 omaha Hi/Lo
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HiLo_PLO_6")] HiLoPlo6 = 506,
    /// <summary>
    /// 6张牌 omaha Hi/Lo CallTime模式
    /// </summary>
    [pbr::OriginalName("GAME_MODE_HiLo_PLO_6_CALLTIME")] HiLoPlo6Calltime = 507,
    /// <summary>
    /// NLH Allin-or-Fold
    /// </summary>
    [pbr::OriginalName("GAME_MODE_AOF_NLH")] AofNlh = 508,
    /// <summary>
    /// 3-1德州 flop棄牌
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_FLOP")] _31NlhFlop = 509,
    /// <summary>
    /// 3-1德州 flop棄牌 calltime
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_FLOP_CALLTIME")] _31NlhFlopCalltime = 510,
    /// <summary>
    /// 普通玩法 72o
    /// </summary>
    [pbr::OriginalName("GAME_MODE_REGULAR_72o")] Regular72O = 511,
    /// <summary>
    /// 普通玩法 CallTime 72o
    /// </summary>
    [pbr::OriginalName("GAME_MODE_REGULAR_CALLTIME_72o")] RegularCalltime72O = 512,
    /// <summary>
    /// 3-1德州 72o
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_72o")] _31Nlh72O = 513,
    /// <summary>
    /// 3-1德州 CallTime 72o
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_CALLTIME_72o")] _31NlhCalltime72O = 514,
    /// <summary>
    /// 3-1德州 flop棄牌 72o
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_FLOP_72o")] _31NlhFlop72O = 515,
    /// <summary>
    /// 3-1德州 flop棄牌 calltime 72o
    /// </summary>
    [pbr::OriginalName("GAME_MODE_3_1_NLH_FLOP_CALLTIME_72o")] _31NlhFlopCalltime72O = 516,
  }

  /// <summary>
  /// ClubCashRoomType: 统计俱乐部现金桌类型(运营给出分类)
  /// 前后端通过(RoomMode,RoomType,GameMode)表明房间玩法类型
  /// RoomMode = 3, (RoomType, GameMode)
  /// </summary>
  public enum ClubCashRoomType {
    /// <summary>
    /// 无效值
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_INVALID")] Invalid = 0,
    /// <summary>
    /// 普通NLH:			(5,0), (5,200),(5,504),(5,505)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_NLH")] Nlh = 1,
    /// <summary>
    /// 6+NLH:				(5,12)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_NLH6")] Nlh6 = 2,
    /// <summary>
    /// 普通PLO:			(8,0), (8,200), (8,500), (8,502)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_PLO4")] Plo4 = 3,
    /// <summary>
    /// 5张牌PLO:			(8,10), (8,210), (8,501), (8,503)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_PLO5")] Plo5 = 4,
    /// <summary>
    /// OFC(不带癞子):		(9,0), (9,1), (9,2)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_OFC")] Ofc = 5,
    /// <summary>
    /// OFC(带癞子):		(9,100), (9,101), (9,102)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_OFC_WILD_CARD")] OfcWildCard = 6,
    /// <summary>
    /// 混合游戏(NLH&amp;PLO4):	(12,300), (12,302)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_MIXED_NLH_PLO4")] MixedNlhPlo4 = 7,
    /// <summary>
    /// 混合游戏(NLH&amp;PLO5): (12,301), (12,303)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_MIXED_NLH_PLO5")] MixedNlhPlo5 = 8,
    /// <summary>
    /// FLASH桌:            (5,11), (8,11), (8,19)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_FLASH")] Flash = 9,
    /// <summary>
    /// 6张牌PLO:          (8,18) (8,211) (8,506) (8,507)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_PLO6")] Plo6 = 10,
    /// <summary>
    /// PUSOY              (14,0)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_PUSOY")] Pusoy = 11,
    /// <summary>
    /// teenpatii room :   (15,0)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_TP")] Tp = 12,
    /// <summary>
    /// tongits toom :     (17,0), (17,20)
    /// </summary>
    [pbr::OriginalName("CLUB_CASH_ROOM_TYPE_TONGITS")] Tongits = 13,
  }

  public enum RoundStage {
    [pbr::OriginalName("ROUND_NONE")] RoundNone = 0,
    [pbr::OriginalName("ROUND_PRE_FLOP")] RoundPreFlop = 1,
    [pbr::OriginalName("ROUND_FLOP")] RoundFlop = 2,
    [pbr::OriginalName("ROUND_TURN")] RoundTurn = 3,
    [pbr::OriginalName("ROUND_RIVER")] RoundRiver = 4,
    [pbr::OriginalName("ROUND_COMPLETE")] RoundComplete = 5,
  }

  public enum ValueType {
    [pbr::OriginalName("INVAILID")] Invailid = 0,
    /// <summary>
    ///金币    uid
    /// </summary>
    [pbr::OriginalName("USER_MONEY")] UserMoney = 1,
    /// <summary>
    ///钻石   uid
    /// </summary>
    [pbr::OriginalName("USER_DIAMOND")] UserDiamond = 2,
    /// <summary>
    ///玩家pp币   clubid uid
    /// </summary>
    [pbr::OriginalName("USER_PPCHIPS")] UserPpchips = 3,
    /// <summary>
    ///玩家联盟pp币  leagueid clubid uid
    /// </summary>
    [pbr::OriginalName("USER_LEAGUE_CHIPS")] UserLeagueChips = 4,
    /// <summary>
    ///俱乐部pp币  clubid
    /// </summary>
    [pbr::OriginalName("CLUB_PPCHIPS")] ClubPpchips = 5,
    /// <summary>
    ///联盟pp币  leagueid clubid
    /// </summary>
    [pbr::OriginalName("LEAGUE_PPCHIPS")] LeaguePpchips = 6,
    /// <summary>
    ///俱乐部代理授信 clubid uid
    /// </summary>
    [pbr::OriginalName("CLUB_AGENT_CHIPS")] ClubAgentChips = 7,
    /// <summary>
    ///联盟代理授信  leagueid clubid uid
    /// </summary>
    [pbr::OriginalName("LEAGUE_AGENT_CHIPS")] LeagueAgentChips = 8,
    /// <summary>
    ///玩家返利积分
    /// </summary>
    [pbr::OriginalName("USER_REBATE")] UserRebate = 9,
  }

  public enum PPCurrency {
    [pbr::OriginalName("PP_CURRENCY_NONE")] None = 0,
    /// <summary>
    ///金币
    /// </summary>
    [pbr::OriginalName("PP_CURRENCY_GOLD")] Gold = 1,
    /// <summary>
    ///钻石
    /// </summary>
    [pbr::OriginalName("PP_CURRENCY_DIAMOND")] Diamond = 2,
    /// <summary>
    ///PP币
    /// </summary>
    [pbr::OriginalName("PP_CURRENCY_PPCHIPS")] Ppchips = 3,
  }

  public enum SignupType {
    /// <summary>
    /// 都可以
    /// </summary>
    [pbr::OriginalName("SIGNUP_TYPE_ALL")] All = 0,
    /// <summary>
    /// 仅金币
    /// </summary>
    [pbr::OriginalName("SIGNUP_TYPE_CHIPS")] Chips = 1,
    /// <summary>
    /// 仅门票
    /// </summary>
    [pbr::OriginalName("SIGNUP_TYPE_TICKET")] Ticket = 2,
    /// <summary>
    /// 僅鑽石
    /// </summary>
    [pbr::OriginalName("SIGNUP_TYPE_DIAMONDS")] Diamonds = 3,
  }

  public enum OfficialDescType {
    [pbr::OriginalName("OFFICIAL_DESC_TYPE_NONE")] None = 0,
    [pbr::OriginalName("OFFICIAL_DESC_TYPE_HOT")] Hot = 1,
    [pbr::OriginalName("OFFICIAL_DESC_TYPE_NEW")] New = 2,
    [pbr::OriginalName("OFFICIAL_DESC_TYPE_FREE")] Free = 3,
  }

  public enum OfficialLocation {
    [pbr::OriginalName("OFFICIAL_LOCATION_ONLINE")] Online = 0,
    [pbr::OriginalName("OFFICIAL_LOCATION_OFFLINE")] Offline = 1,
  }

  public enum OfficialTag {
    /// <summary>
    /// 热门赛事
    /// </summary>
    [pbr::OriginalName("OFFICIAL_TAG_HOT")] Hot = 0,
    /// <summary>
    /// PPWC赛事
    /// </summary>
    [pbr::OriginalName("OFFICIAL_TAG_PPWC")] Ppwc = 1,
  }

  public enum OfficialPopup {
    /// <summary>
    /// 无弹窗
    /// </summary>
    [pbr::OriginalName("OFFICIAL_POPUP_NONE")] None = 0,
    /// <summary>
    /// 默认弹窗
    /// </summary>
    [pbr::OriginalName("OFFICIAL_POPUP_DEFAULT")] Default = 1,
  }

  public enum UserRoomAction {
    [pbr::OriginalName("USER_ROOM_ACTION_NONE")] None = 0,
    /// <summary>
    ///报名
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_SIGNUP")] Signup = 1,
    /// <summary>
    ///取消报名
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_CANCEL_SIGNUP")] CancelSignup = 2,
    /// <summary>
    ///坐下
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_SITDOWN")] Sitdown = 3,
    /// <summary>
    ///站起(弃用)
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_STANDUP")] Standup = 4,
    /// <summary>
    ///撤回筹码
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_WITHDRAW")] Withdraw = 5,
    /// <summary>
    ///重新摇奖
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_REDRAW_LOTTERY")] RedrawLottery = 6,
    /// <summary>
    ///用户请求站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_USER_REQUEST_STAND")] UserRequestStand = 7,
    /// <summary>
    ///没筹码站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_NO_CHIPS_STAND")] NoChipsStand = 8,
    /// <summary>
    ///房间时间到站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_TIME_UP_STAND")] TimeUpStand = 9,
    /// <summary>
    ///不操作被弹起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_NO_ACTION_STAND")] NoActionStand = 10,
    /// <summary>
    ///系统弹起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_SYSTEM_STAND")] SystemStand = 11,
    /// <summary>
    ///天梯结束弹起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_LADDER_OVER_STAND")] LadderOverStand = 12,
    /// <summary>
    ///换桌站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_CHANGE_TABLE_STAND")] ChangeTableStand = 13,
    /// <summary>
    ///被踢站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_KICKED_STAND")] KickedStand = 14,
    /// <summary>
    ///第一名站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_FINAL_REWARD_STAND")] FinalRewardStand = 15,
    /// <summary>
    ///缺少GPS弹起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_LACK_GPS_STAND")] LackGpsStand = 16,
    /// <summary>
    ///gps、ip不合规
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_BREAK_GPSIP_RULE_STAND")] BreakGpsipRuleStand = 17,
    /// <summary>
    ///快速桌弃牌站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_ZOOM_FOLD_STAND")] ZoomFoldStand = 18,
    /// <summary>
    ///call time 桌取消坐入站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_CALLTIME_CANCEL_STAND")] CalltimeCancelStand = 19,
    /// <summary>
    ///未知类型站起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_UNKNOWN_TYPE_STAND")] UnknownTypeStand = 20,
    /// <summary>
    ///人机校验失败弹起
    /// </summary>
    [pbr::OriginalName("USER_ROOM_ACTION_CAPTCHA_STAND")] CaptchaStand = 21,
  }

  public enum BankerType {
    [pbr::OriginalName("BANKER_TYPE_NONE")] None = 0,
    /// <summary>
    ///买入
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_BUYIN")] Buyin = 1,
    /// <summary>
    ///延迟买入
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_DELAY_BUYIN")] DelayBuyin = 2,
    /// <summary>
    ///rebuy
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_REBUY")] Rebuy = 3,
    [pbr::OriginalName("BANKER_TYPE_TOPUP")] Topup = 4,
    [pbr::OriginalName("BANKER_TYPE_ADDON")] Addon = 5,
    /// <summary>
    ///mtt sng发奖
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_GAME_REWARD")] GameReward = 6,
    /// <summary>
    ///猎人奖励
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_HUNTER_REWARD")] HunterReward = 7,
    /// <summary>
    ///jackpot 奖励
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_JACKPOT_REWARD")] JackpotReward = 8,
    /// <summary>
    ///取消报名退款
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_REFUND")] Refund = 100,
    /// <summary>
    ///站起cashout
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_CASHOUT")] Cashout = 101,
    /// <summary>
    ///换桌
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_CHANGE_TABLE")] ChangeTable = 102,
    /// <summary>
    ///撤回筹码
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_WITHDRAW_CHIPS")] WithdrawChips = 103,
    /// <summary>
    ///重新摇奖
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_REDRAW_LOTTERY_CHIPS")] RedrawLotteryChips = 104,
    /// <summary>
    ///分组赛day2初始化
    /// </summary>
    [pbr::OriginalName("BANKER_TYPE_GROUP_MTT_DAY2_INIT")] GroupMttDay2Init = 200,
  }

  public enum MttRewardPercentType {
    [pbr::OriginalName("MTT_TEN_PERCENT")] MttTenPercent = 0,
    [pbr::OriginalName("MTT_FIFTEEN_PERCENT")] MttFifteenPercent = 1,
    [pbr::OriginalName("MTT_TWENTY_PERCENT")] MttTwentyPercent = 2,
  }

  public enum MttRewardMode {
    /// <summary>
    ///default
    /// </summary>
    [pbr::OriginalName("MTT_SNG_DEFAULT")] MttSngDefault = 0,
    /// <summary>
    ///Top Heavy
    /// </summary>
    [pbr::OriginalName("MTT_TOP_HEAVY")] MttTopHeavy = 1,
    /// <summary>
    ///Flat
    /// </summary>
    [pbr::OriginalName("MTT_FALT")] MttFalt = 2,
    /// <summary>
    ///MTT Champion
    /// </summary>
    [pbr::OriginalName("MTT_CHAMPION")] MttChampion = 3,
    /// <summary>
    ///Standard
    /// </summary>
    [pbr::OriginalName("SNG_STANDARD")] SngStandard = 4,
    /// <summary>
    ///Champion
    /// </summary>
    [pbr::OriginalName("SNG_CHAMPION")] SngChampion = 5,
  }

  /// <summary>
  ///牌局状态
  /// </summary>
  public enum GameSetPlayStatus {
    /// <summary>
    ///没有开始牌局
    /// </summary>
    [pbr::OriginalName("GAME_SET_PLAY_STATUS_NONE")] None = 0,
    /// <summary>
    ///开始玩牌
    /// </summary>
    [pbr::OriginalName("GAME_SET_PLAY_STATUS_PLAYING")] Playing = 1,
    /// <summary>
    ///牌局结束
    /// </summary>
    [pbr::OriginalName("GAME_SET_PLAY_STATUS_FINISH")] Finish = 100,
  }

  public enum UserPlayStatus {
    /// <summary>
    ///未参与
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_NOT_IN")] NotIn = 0,
    /// <summary>
    ///已报名
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_SIGNUP")] Signup = 1,
    /// <summary>
    ///正在打牌
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_PLAYING")] Playing = 2,
    /// <summary>
    ///站起
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_STANDUP")] Standup = 3,
    /// <summary>
    ///坐下未加入牌局
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_SITTING")] Sitting = 4,
    /// <summary>
    ///异常还币
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_RETURN")] Return = 5,
    /// <summary>
    ///换桌
    /// </summary>
    [pbr::OriginalName("USER_PLAY_STATUS_CHANGE_TABLE")] ChangeTable = 6,
  }

  /// <summary>
  /// 俱乐部背包:物品类型
  /// </summary>
  public enum ClubBagpackType {
    /// <summary>
    /// 门票:pppoker_club.bagpack_ticket,pppoker_club_flow.flow_bagpack_ticket
    /// </summary>
    [pbr::OriginalName("BAGPACK_TICKET")] BagpackTicket = 0,
    /// <summary>
    /// 实物:pppoker_club.bagpack_entity,pppoker_club_flow.flow_bagpack_entity
    /// </summary>
    [pbr::OriginalName("BAGPACK_ENTITY")] BagpackEntity = 1,
    /// <summary>
    /// 门票和实物
    /// </summary>
    [pbr::OriginalName("BAGPACK_ALL_TYPE")] BagpackAllType = 2,
    /// <summary>
    ///超级联盟门票
    /// </summary>
    [pbr::OriginalName("BAGPACK_SUPER_TICKET")] BagpackSuperTicket = 3,
  }

  public enum AutoDelayRoomOverTimes {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("THREE")] Three = 3,
    [pbr::OriginalName("SIX")] Six = 6,
    [pbr::OriginalName("NINE")] Nine = 9,
    [pbr::OriginalName("TWELVE")] Twelve = 12,
    [pbr::OriginalName("TWENTY_FOUR")] TwentyFour = 24,
  }

  public enum ClubChipsFlowType {
    /// <summary>
    ///收发流水
    /// </summary>
    [pbr::OriginalName("FlowType_Chips")] FlowTypeChips = 0,
    /// <summary>
    ///授信流水
    /// </summary>
    [pbr::OriginalName("FlowType_Credit")] FlowTypeCredit = 1,
    /// <summary>
    ///保底流水
    /// </summary>
    [pbr::OriginalName("FlowType_Gtd")] FlowTypeGtd = 2,
    /// <summary>
    ///门票回收流水
    /// </summary>
    [pbr::OriginalName("FlowType_Ticket")] FlowTypeTicket = 3,
    /// <summary>
    ///实物回收流水
    /// </summary>
    [pbr::OriginalName("FlowType_Entity")] FlowTypeEntity = 4,
    /// <summary>
    ///红包雨
    /// </summary>
    [pbr::OriginalName("FlowType_Storm")] FlowTypeStorm = 5,
    /// <summary>
    ///用户离开俱乐部流水(PP币、门票和实物的总和)
    /// </summary>
    [pbr::OriginalName("FlowType_Leave_Club")] FlowTypeLeaveClub = 6,
    /// <summary>
    ///用户离开俱乐部流水（代理授信余额）
    /// </summary>
    [pbr::OriginalName("FlowType_Leave_Credit")] FlowTypeLeaveCredit = 7,
    /// <summary>
    ///添加俱乐部门票
    /// </summary>
    [pbr::OriginalName("FlowType_Add_Ticket")] FlowTypeAddTicket = 8,
    /// <summary>
    ///赠送俱乐部门票
    /// </summary>
    [pbr::OriginalName("FlowType_Give_Ticket")] FlowTypeGiveTicket = 9,
    /// <summary>
    ///回收俱乐部门票
    /// </summary>
    [pbr::OriginalName("FlowType_Recycle_Ticket")] FlowTypeRecycleTicket = 10,
    /// <summary>
    ///过期俱乐部门票回收
    /// </summary>
    [pbr::OriginalName("FlowType_Expire_ticket")] FlowTypeExpireTicket = 11,
    /// <summary>
    ///创建pp币雨
    /// </summary>
    [pbr::OriginalName("FlowType_Storm_Create")] FlowTypeStormCreate = 12,
    /// <summary>
    ///变更pp币雨
    /// </summary>
    [pbr::OriginalName("FlowType_Storm_Change")] FlowTypeStormChange = 13,
    /// <summary>
    ///中止PP币雨
    /// </summary>
    [pbr::OriginalName("FlowType_Storm_Cancel")] FlowTypeStormCancel = 14,
    /// <summary>
    ///PP币雨剩余返还
    /// </summary>
    [pbr::OriginalName("FlowType_Storm_Rollback")] FlowTypeStormRollback = 15,
    /// <summary>
    /// ring game活动奖励
    /// </summary>
    [pbr::OriginalName("FlowType_Ring_Game_Activity")] FlowTypeRingGameActivity = 16,
    /// <summary>
    ///创建ring game 活动
    /// </summary>
    [pbr::OriginalName("FlowType_Ring_Game_Activity_Create")] FlowTypeRingGameActivityCreate = 17,
    /// <summary>
    ///变更ring game 活动
    /// </summary>
    [pbr::OriginalName("FlowType_Ring_Game_Activity_Change")] FlowTypeRingGameActivityChange = 18,
    /// <summary>
    ///中止ring game 活动
    /// </summary>
    [pbr::OriginalName("FlowType_Ring_Game_Activity_Cancel")] FlowTypeRingGameActivityCancel = 19,
    /// <summary>
    ///ring game活动剩余返还
    /// </summary>
    [pbr::OriginalName("FlowType_Ring_Game_Activity_Rollback")] FlowTypeRingGameActivityRollback = 20,
    /// <summary>
    /// mtt活动奖励
    /// </summary>
    [pbr::OriginalName("FlowType_Mtt_Activity")] FlowTypeMttActivity = 21,
    /// <summary>
    ///创建mtt 活动
    /// </summary>
    [pbr::OriginalName("FlowType_Mtt_Activity_Create")] FlowTypeMttActivityCreate = 22,
    /// <summary>
    ///变更mtt 活动
    /// </summary>
    [pbr::OriginalName("FlowType_Mtt_Activity_Change")] FlowTypeMttActivityChange = 23,
    /// <summary>
    ///中止mtt 活动
    /// </summary>
    [pbr::OriginalName("FlowType_Mtt_Activity_Cancel")] FlowTypeMttActivityCancel = 24,
    /// <summary>
    ///mtt活动剩余返还
    /// </summary>
    [pbr::OriginalName("FlowType_Mtt_Activity_Rollback")] FlowTypeMttActivityRollback = 25,
    /// <summary>
    /// SpecifiedRG活動獎勵
    /// </summary>
    [pbr::OriginalName("FlowType_SpecifiedRG_Activity")] FlowTypeSpecifiedRgActivity = 26,
    /// <summary>
    /// 創建SpecifiedRG 活動
    /// </summary>
    [pbr::OriginalName("FlowType_SpecifiedRG_Activity_Create")] FlowTypeSpecifiedRgActivityCreate = 27,
    /// <summary>
    /// 變更SpecifiedRG 活動
    /// </summary>
    [pbr::OriginalName("FlowType_SpecifiedRG_Activity_Change")] FlowTypeSpecifiedRgActivityChange = 28,
    /// <summary>
    /// 中止SpecifiedRG 活動
    /// </summary>
    [pbr::OriginalName("FlowType_SpecifiedRG_Activity_Cancel")] FlowTypeSpecifiedRgActivityCancel = 29,
    /// <summary>
    /// SpecifiedRG活動剩餘返還
    /// </summary>
    [pbr::OriginalName("FlowType_SpecifiedRG_Activity_Rollback")] FlowTypeSpecifiedRgActivityRollback = 30,
    /// <summary>
    ///俱乐部每日奖励
    /// </summary>
    [pbr::OriginalName("FlowType_Club_Daily_Reward")] FlowTypeClubDailyReward = 31,
    /// <summary>
    /// 手牌任務
    /// </summary>
    [pbr::OriginalName("FlowType_HandMission_PP_Chips_Reward_Claim")] FlowTypeHandMissionPpChipsRewardClaim = 32,
    /// <summary>
    /// 領取手牌任務 luckydraw 獎勵
    /// </summary>
    [pbr::OriginalName("FlowType_HandMission_LuckyDraw_Reward_Claim")] FlowTypeHandMissionLuckyDrawRewardClaim = 33,
    /// <summary>
    /// 俱樂部發放手牌任務 pp 幣獎勵
    /// </summary>
    [pbr::OriginalName("FlowType_HandMission_PP_Chips_Reward")] FlowTypeHandMissionPpChipsReward = 34,
    /// <summary>
    /// 俱樂部發放手牌任務 luckydraw 獎勵
    /// </summary>
    [pbr::OriginalName("FlowType_HandMission_LuckyDraw_Reward")] FlowTypeHandMissionLuckyDrawReward = 35,
  }

  public enum PPPokerRangeType {
    /// <summary>
    /// 平台
    /// </summary>
    [pbr::OriginalName("RANGE_TYPE_PLATFORM")] RangeTypePlatform = 0,
    /// <summary>
    /// 俱乐部
    /// </summary>
    [pbr::OriginalName("RANGE_TYPE_CLUB")] RangeTypeClub = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///物品类型
  /// </summary>
  public sealed partial class ItemClassInfo : pb::IMessage<ItemClassInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ItemClassInfo> _parser = new pb::MessageParser<ItemClassInfo>(() => new ItemClassInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ItemClassInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemClassInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemClassInfo(ItemClassInfo other) : this() {
      _hasBits0 = other._hasBits0;
      itemName_ = other.itemName_;
      itemType_ = other.itemType_;
      iconUrl_ = other.iconUrl_;
      expireTime_ = other.expireTime_;
      canMerge_ = other.canMerge_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemClassInfo Clone() {
      return new ItemClassInfo(this);
    }

    /// <summary>Field number for the "item_name" field.</summary>
    public const int ItemNameFieldNumber = 1;
    private readonly static string ItemNameDefaultValue = "";

    private string itemName_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ItemName {
      get { return itemName_ ?? ItemNameDefaultValue; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "item_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemName {
      get { return itemName_ != null; }
    }
    /// <summary>Clears the value of the "item_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemName() {
      itemName_ = null;
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 2;
    private readonly static int ItemTypeDefaultValue = 0;

    private int itemType_;
    /// <summary>
    ///1 道具   2 兑换券
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemType {
      get { if ((_hasBits0 & 1) != 0) { return itemType_; } else { return ItemTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemType_ = value;
      }
    }
    /// <summary>Gets whether the "item_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "item_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "icon_url" field.</summary>
    public const int IconUrlFieldNumber = 3;
    private readonly static string IconUrlDefaultValue = "";

    private string iconUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconUrl {
      get { return iconUrl_ ?? IconUrlDefaultValue; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconUrl {
      get { return iconUrl_ != null; }
    }
    /// <summary>Clears the value of the "icon_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconUrl() {
      iconUrl_ = null;
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 4;
    private readonly static int ExpireTimeDefaultValue = 0;

    private int expireTime_;
    /// <summary>
    ///单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExpireTime {
      get { if ((_hasBits0 & 2) != 0) { return expireTime_; } else { return ExpireTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTime_ = value;
      }
    }
    /// <summary>Gets whether the "expire_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpireTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expire_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpireTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "can_merge" field.</summary>
    public const int CanMergeFieldNumber = 5;
    private readonly static bool CanMergeDefaultValue = false;

    private bool canMerge_;
    /// <summary>
    ///是否可以合并
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanMerge {
      get { if ((_hasBits0 & 4) != 0) { return canMerge_; } else { return CanMergeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        canMerge_ = value;
      }
    }
    /// <summary>Gets whether the "can_merge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanMerge {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "can_merge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanMerge() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private readonly static long PriceDefaultValue = 0L;

    private long price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Price {
      get { if ((_hasBits0 & 8) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrice() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ItemClassInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ItemClassInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemName != other.ItemName) return false;
      if (ItemType != other.ItemType) return false;
      if (IconUrl != other.IconUrl) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (CanMerge != other.CanMerge) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemName) hash ^= ItemName.GetHashCode();
      if (HasItemType) hash ^= ItemType.GetHashCode();
      if (HasIconUrl) hash ^= IconUrl.GetHashCode();
      if (HasExpireTime) hash ^= ExpireTime.GetHashCode();
      if (HasCanMerge) hash ^= CanMerge.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemName) {
        output.WriteRawTag(10);
        output.WriteString(ItemName);
      }
      if (HasItemType) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemType);
      }
      if (HasIconUrl) {
        output.WriteRawTag(26);
        output.WriteString(IconUrl);
      }
      if (HasExpireTime) {
        output.WriteRawTag(32);
        output.WriteInt32(ExpireTime);
      }
      if (HasCanMerge) {
        output.WriteRawTag(40);
        output.WriteBool(CanMerge);
      }
      if (HasPrice) {
        output.WriteRawTag(48);
        output.WriteInt64(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemName) {
        output.WriteRawTag(10);
        output.WriteString(ItemName);
      }
      if (HasItemType) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemType);
      }
      if (HasIconUrl) {
        output.WriteRawTag(26);
        output.WriteString(IconUrl);
      }
      if (HasExpireTime) {
        output.WriteRawTag(32);
        output.WriteInt32(ExpireTime);
      }
      if (HasCanMerge) {
        output.WriteRawTag(40);
        output.WriteBool(CanMerge);
      }
      if (HasPrice) {
        output.WriteRawTag(48);
        output.WriteInt64(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasItemName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (HasItemType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemType);
      }
      if (HasIconUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      if (HasExpireTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireTime);
      }
      if (HasCanMerge) {
        size += 1 + 1;
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ItemClassInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasItemName) {
        ItemName = other.ItemName;
      }
      if (other.HasItemType) {
        ItemType = other.ItemType;
      }
      if (other.HasIconUrl) {
        IconUrl = other.IconUrl;
      }
      if (other.HasExpireTime) {
        ExpireTime = other.ExpireTime;
      }
      if (other.HasCanMerge) {
        CanMerge = other.CanMerge;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemName = input.ReadString();
            break;
          }
          case 16: {
            ItemType = input.ReadInt32();
            break;
          }
          case 26: {
            IconUrl = input.ReadString();
            break;
          }
          case 32: {
            ExpireTime = input.ReadInt32();
            break;
          }
          case 40: {
            CanMerge = input.ReadBool();
            break;
          }
          case 48: {
            Price = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ItemName = input.ReadString();
            break;
          }
          case 16: {
            ItemType = input.ReadInt32();
            break;
          }
          case 26: {
            IconUrl = input.ReadString();
            break;
          }
          case 32: {
            ExpireTime = input.ReadInt32();
            break;
          }
          case 40: {
            CanMerge = input.ReadBool();
            break;
          }
          case 48: {
            Price = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MttRewardInfo : pb::IMessage<MttRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MttRewardInfo> _parser = new pb::MessageParser<MttRewardInfo>(() => new MttRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MttRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttRewardInfo(MttRewardInfo other) : this() {
      _hasBits0 = other._hasBits0;
      chips_ = other.chips_;
      itemName_ = other.itemName_.Clone();
      score_ = other.score_;
      rebate_ = other.rebate_;
      specialShow_ = other.specialShow_;
      itemPrice_ = other.itemPrice_.Clone();
      itemType_ = other.itemType_.Clone();
      startRank_ = other.startRank_;
      endRank_ = other.endRank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttRewardInfo Clone() {
      return new MttRewardInfo(this);
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 1;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 1) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_name" field.</summary>
    public const int ItemNameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_itemName_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> itemName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ItemName {
      get { return itemName_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Score {
      get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rebate" field.</summary>
    public const int RebateFieldNumber = 4;
    private readonly static long RebateDefaultValue = 0L;

    private long rebate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Rebate {
      get { if ((_hasBits0 & 4) != 0) { return rebate_; } else { return RebateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rebate_ = value;
      }
    }
    /// <summary>Gets whether the "rebate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rebate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "special_show" field.</summary>
    public const int SpecialShowFieldNumber = 5;
    private readonly static string SpecialShowDefaultValue = "";

    private string specialShow_;
    /// <summary>
    ///是否特殊展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpecialShow {
      get { return specialShow_ ?? SpecialShowDefaultValue; }
      set {
        specialShow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "special_show" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpecialShow {
      get { return specialShow_ != null; }
    }
    /// <summary>Clears the value of the "special_show" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpecialShow() {
      specialShow_ = null;
    }

    /// <summary>Field number for the "item_price" field.</summary>
    public const int ItemPriceFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_itemPrice_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> itemPrice_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///门票对应的价值,与item_name一一对应
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> ItemPrice {
      get { return itemPrice_; }
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ClubBagpackType> _repeated_itemType_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Texas.Protocol.ClubBagpackType) x);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ClubBagpackType> itemType_ = new pbc::RepeatedField<global::Texas.Protocol.ClubBagpackType>();
    /// <summary>
    ///物品类型,0:门票;1:实物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ClubBagpackType> ItemType {
      get { return itemType_; }
    }

    /// <summary>Field number for the "start_rank" field.</summary>
    public const int StartRankFieldNumber = 8;
    private readonly static int StartRankDefaultValue = 0;

    private int startRank_;
    /// <summary>
    ///排名区间[start_rank, end_rank]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartRank {
      get { if ((_hasBits0 & 8) != 0) { return startRank_; } else { return StartRankDefaultValue; } }
      set {
        _hasBits0 |= 8;
        startRank_ = value;
      }
    }
    /// <summary>Gets whether the "start_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartRank {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "start_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartRank() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "end_rank" field.</summary>
    public const int EndRankFieldNumber = 9;
    private readonly static int EndRankDefaultValue = 0;

    private int endRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EndRank {
      get { if ((_hasBits0 & 16) != 0) { return endRank_; } else { return EndRankDefaultValue; } }
      set {
        _hasBits0 |= 16;
        endRank_ = value;
      }
    }
    /// <summary>Gets whether the "end_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndRank {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "end_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndRank() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MttRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MttRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chips != other.Chips) return false;
      if(!itemName_.Equals(other.itemName_)) return false;
      if (Score != other.Score) return false;
      if (Rebate != other.Rebate) return false;
      if (SpecialShow != other.SpecialShow) return false;
      if(!itemPrice_.Equals(other.itemPrice_)) return false;
      if(!itemType_.Equals(other.itemType_)) return false;
      if (StartRank != other.StartRank) return false;
      if (EndRank != other.EndRank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChips) hash ^= Chips.GetHashCode();
      hash ^= itemName_.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (HasRebate) hash ^= Rebate.GetHashCode();
      if (HasSpecialShow) hash ^= SpecialShow.GetHashCode();
      hash ^= itemPrice_.GetHashCode();
      hash ^= itemType_.GetHashCode();
      if (HasStartRank) hash ^= StartRank.GetHashCode();
      if (HasEndRank) hash ^= EndRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChips) {
        output.WriteRawTag(8);
        output.WriteInt64(Chips);
      }
      itemName_.WriteTo(output, _repeated_itemName_codec);
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (HasRebate) {
        output.WriteRawTag(32);
        output.WriteInt64(Rebate);
      }
      if (HasSpecialShow) {
        output.WriteRawTag(42);
        output.WriteString(SpecialShow);
      }
      itemPrice_.WriteTo(output, _repeated_itemPrice_codec);
      itemType_.WriteTo(output, _repeated_itemType_codec);
      if (HasStartRank) {
        output.WriteRawTag(64);
        output.WriteInt32(StartRank);
      }
      if (HasEndRank) {
        output.WriteRawTag(72);
        output.WriteInt32(EndRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChips) {
        output.WriteRawTag(8);
        output.WriteInt64(Chips);
      }
      itemName_.WriteTo(ref output, _repeated_itemName_codec);
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (HasRebate) {
        output.WriteRawTag(32);
        output.WriteInt64(Rebate);
      }
      if (HasSpecialShow) {
        output.WriteRawTag(42);
        output.WriteString(SpecialShow);
      }
      itemPrice_.WriteTo(ref output, _repeated_itemPrice_codec);
      itemType_.WriteTo(ref output, _repeated_itemType_codec);
      if (HasStartRank) {
        output.WriteRawTag(64);
        output.WriteInt32(StartRank);
      }
      if (HasEndRank) {
        output.WriteRawTag(72);
        output.WriteInt32(EndRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      size += itemName_.CalculateSize(_repeated_itemName_codec);
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (HasRebate) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rebate);
      }
      if (HasSpecialShow) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecialShow);
      }
      size += itemPrice_.CalculateSize(_repeated_itemPrice_codec);
      size += itemType_.CalculateSize(_repeated_itemType_codec);
      if (HasStartRank) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRank);
      }
      if (HasEndRank) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MttRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      itemName_.Add(other.itemName_);
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasRebate) {
        Rebate = other.Rebate;
      }
      if (other.HasSpecialShow) {
        SpecialShow = other.SpecialShow;
      }
      itemPrice_.Add(other.itemPrice_);
      itemType_.Add(other.itemType_);
      if (other.HasStartRank) {
        StartRank = other.StartRank;
      }
      if (other.HasEndRank) {
        EndRank = other.EndRank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chips = input.ReadInt64();
            break;
          }
          case 18: {
            itemName_.AddEntriesFrom(input, _repeated_itemName_codec);
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            Rebate = input.ReadInt64();
            break;
          }
          case 42: {
            SpecialShow = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            itemPrice_.AddEntriesFrom(input, _repeated_itemPrice_codec);
            break;
          }
          case 58:
          case 56: {
            itemType_.AddEntriesFrom(input, _repeated_itemType_codec);
            break;
          }
          case 64: {
            StartRank = input.ReadInt32();
            break;
          }
          case 72: {
            EndRank = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chips = input.ReadInt64();
            break;
          }
          case 18: {
            itemName_.AddEntriesFrom(ref input, _repeated_itemName_codec);
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            Rebate = input.ReadInt64();
            break;
          }
          case 42: {
            SpecialShow = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            itemPrice_.AddEntriesFrom(ref input, _repeated_itemPrice_codec);
            break;
          }
          case 58:
          case 56: {
            itemType_.AddEntriesFrom(ref input, _repeated_itemType_codec);
            break;
          }
          case 64: {
            StartRank = input.ReadInt32();
            break;
          }
          case 72: {
            EndRank = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Item : pb::IMessage<Item>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Item(Item other) : this() {
      _hasBits0 = other._hasBits0;
      itemid_ = other.itemid_;
      itemName_ = other.itemName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private readonly static long ItemidDefaultValue = 0L;

    private long itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Itemid {
      get { if ((_hasBits0 & 1) != 0) { return itemid_; } else { return ItemidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemid_ = value;
      }
    }
    /// <summary>Gets whether the "itemid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "itemid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "item_name" field.</summary>
    public const int ItemNameFieldNumber = 2;
    private readonly static string ItemNameDefaultValue = "";

    private string itemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ItemName {
      get { return itemName_ ?? ItemNameDefaultValue; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "item_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemName {
      get { return itemName_ != null; }
    }
    /// <summary>Clears the value of the "item_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemName() {
      itemName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itemid != other.Itemid) return false;
      if (ItemName != other.ItemName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemid) hash ^= Itemid.GetHashCode();
      if (HasItemName) hash ^= ItemName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemid) {
        output.WriteRawTag(8);
        output.WriteInt64(Itemid);
      }
      if (HasItemName) {
        output.WriteRawTag(18);
        output.WriteString(ItemName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemid) {
        output.WriteRawTag(8);
        output.WriteInt64(Itemid);
      }
      if (HasItemName) {
        output.WriteRawTag(18);
        output.WriteString(ItemName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasItemid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Itemid);
      }
      if (HasItemName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.HasItemid) {
        Itemid = other.Itemid;
      }
      if (other.HasItemName) {
        ItemName = other.ItemName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Itemid = input.ReadInt64();
            break;
          }
          case 18: {
            ItemName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Itemid = input.ReadInt64();
            break;
          }
          case 18: {
            ItemName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserBrief : pb::IMessage<UserBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserBrief> _parser = new pb::MessageParser<UserBrief>(() => new UserBrief());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserBrief(UserBrief other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      clubName_ = other.clubName_;
      clanid_ = other.clanid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserBrief Clone() {
      return new UserBrief(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static long UidDefaultValue = 0L;

    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private readonly static string AvatarDefaultValue = "";

    private string avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Avatar {
      get { return avatar_ ?? AvatarDefaultValue; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "avatar" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the "avatar" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 4;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "clanid" field.</summary>
    public const int ClanidFieldNumber = 5;
    private readonly static int ClanidDefaultValue = 0;

    private int clanid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Clanid {
      get { if ((_hasBits0 & 2) != 0) { return clanid_; } else { return ClanidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clanid_ = value;
      }
    }
    /// <summary>Gets whether the "clanid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClanid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clanid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClanid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (ClubName != other.ClubName) return false;
      if (Clanid != other.Clanid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasClanid) hash ^= Clanid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasAvatar) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (HasClubName) {
        output.WriteRawTag(34);
        output.WriteString(ClubName);
      }
      if (HasClanid) {
        output.WriteRawTag(40);
        output.WriteInt32(Clanid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasAvatar) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (HasClubName) {
        output.WriteRawTag(34);
        output.WriteString(ClubName);
      }
      if (HasClanid) {
        output.WriteRawTag(40);
        output.WriteInt32(Clanid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasClanid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clanid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserBrief other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasAvatar) {
        Avatar = other.Avatar;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasClanid) {
        Clanid = other.Clanid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 34: {
            ClubName = input.ReadString();
            break;
          }
          case 40: {
            Clanid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 34: {
            ClubName = input.ReadString();
            break;
          }
          case 40: {
            Clanid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MTT奖励配置
  /// </summary>
  public sealed partial class RewardConfigureItem : pb::IMessage<RewardConfigureItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RewardConfigureItem> _parser = new pb::MessageParser<RewardConfigureItem>(() => new RewardConfigureItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RewardConfigureItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RewardConfigureItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RewardConfigureItem(RewardConfigureItem other) : this() {
      _hasBits0 = other._hasBits0;
      ranking_ = other.ranking_;
      rankingNums_ = other.rankingNums_;
      name_ = other.name_;
      value_ = other.value_;
      expireTime_ = other.expireTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RewardConfigureItem Clone() {
      return new RewardConfigureItem(this);
    }

    /// <summary>Field number for the "ranking" field.</summary>
    public const int RankingFieldNumber = 1;
    private readonly static int RankingDefaultValue = 0;

    private int ranking_;
    /// <summary>
    /// 开始奖励名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ranking {
      get { if ((_hasBits0 & 1) != 0) { return ranking_; } else { return RankingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ranking_ = value;
      }
    }
    /// <summary>Gets whether the "ranking" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRanking {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ranking" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRanking() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ranking_nums" field.</summary>
    public const int RankingNumsFieldNumber = 2;
    private readonly static int RankingNumsDefaultValue = 0;

    private int rankingNums_;
    /// <summary>
    /// 奖励名次数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RankingNums {
      get { if ((_hasBits0 & 2) != 0) { return rankingNums_; } else { return RankingNumsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rankingNums_ = value;
      }
    }
    /// <summary>Gets whether the "ranking_nums" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRankingNums {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ranking_nums" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRankingNums() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// 奖励名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private readonly static int ValueDefaultValue = 0;

    private int value_;
    /// <summary>
    /// 奖励价值,1PP币=>100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Value {
      get { if ((_hasBits0 & 4) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 5;
    private readonly static long ExpireTimeDefaultValue = 0L;

    private long expireTime_;
    /// <summary>
    /// 奖励到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpireTime {
      get { if ((_hasBits0 & 8) != 0) { return expireTime_; } else { return ExpireTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        expireTime_ = value;
      }
    }
    /// <summary>Gets whether the "expire_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpireTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "expire_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpireTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RewardConfigureItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RewardConfigureItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ranking != other.Ranking) return false;
      if (RankingNums != other.RankingNums) return false;
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (ExpireTime != other.ExpireTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRanking) hash ^= Ranking.GetHashCode();
      if (HasRankingNums) hash ^= RankingNums.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasExpireTime) hash ^= ExpireTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRanking) {
        output.WriteRawTag(8);
        output.WriteInt32(Ranking);
      }
      if (HasRankingNums) {
        output.WriteRawTag(16);
        output.WriteInt32(RankingNums);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
      if (HasExpireTime) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpireTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRanking) {
        output.WriteRawTag(8);
        output.WriteInt32(Ranking);
      }
      if (HasRankingNums) {
        output.WriteRawTag(16);
        output.WriteInt32(RankingNums);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
      if (HasExpireTime) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpireTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRanking) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ranking);
      }
      if (HasRankingNums) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankingNums);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (HasExpireTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RewardConfigureItem other) {
      if (other == null) {
        return;
      }
      if (other.HasRanking) {
        Ranking = other.Ranking;
      }
      if (other.HasRankingNums) {
        RankingNums = other.RankingNums;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasExpireTime) {
        ExpireTime = other.ExpireTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ranking = input.ReadInt32();
            break;
          }
          case 16: {
            RankingNums = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
          case 40: {
            ExpireTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ranking = input.ReadInt32();
            break;
          }
          case 16: {
            RankingNums = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
          case 40: {
            ExpireTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionData : pb::IMessage<ActionData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionData> _parser = new pb::MessageParser<ActionData>(() => new ActionData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ActionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ActionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ActionData(ActionData other) : this() {
      _hasBits0 = other._hasBits0;
      leftTime_ = other.leftTime_;
      actions_ = other.actions_.Clone();
      bet_ = other.bet_;
      call_ = other.call_;
      minRaise_ = other.minRaise_;
      maxRaise_ = other.maxRaise_;
      previousPlayerBet_ = other.previousPlayerBet_;
      raise1Xchip_ = other.raise1Xchip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ActionData Clone() {
      return new ActionData(this);
    }

    /// <summary>Field number for the "left_time" field.</summary>
    public const int LeftTimeFieldNumber = 1;
    private readonly static long LeftTimeDefaultValue = 0L;

    private long leftTime_;
    /// <summary>
    ///剩余思考时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LeftTime {
      get { if ((_hasBits0 & 1) != 0) { return leftTime_; } else { return LeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leftTime_ = value;
      }
    }
    /// <summary>Gets whether the "left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ActionType> _repeated_actions_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Texas.Protocol.ActionType) x);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ActionType> actions_ = new pbc::RepeatedField<global::Texas.Protocol.ActionType>();
    /// <summary>
    ///可操作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ActionType> Actions {
      get { return actions_; }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private readonly static long BetDefaultValue = 0L;

    private long bet_;
    /// <summary>
    ///本次行动最小下注量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Bet {
      get { if ((_hasBits0 & 2) != 0) { return bet_; } else { return BetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bet_ = value;
      }
    }
    /// <summary>Gets whether the "bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBet {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBet() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "call" field.</summary>
    public const int CallFieldNumber = 4;
    private readonly static long CallDefaultValue = 0L;

    private long call_;
    /// <summary>
    ///call的下注量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Call {
      get { if ((_hasBits0 & 4) != 0) { return call_; } else { return CallDefaultValue; } }
      set {
        _hasBits0 |= 4;
        call_ = value;
      }
    }
    /// <summary>Gets whether the "call" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCall {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "call" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCall() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_raise" field.</summary>
    public const int MinRaiseFieldNumber = 5;
    private readonly static long MinRaiseDefaultValue = 0L;

    private long minRaise_;
    /// <summary>
    ///最小加注量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinRaise {
      get { if ((_hasBits0 & 8) != 0) { return minRaise_; } else { return MinRaiseDefaultValue; } }
      set {
        _hasBits0 |= 8;
        minRaise_ = value;
      }
    }
    /// <summary>Gets whether the "min_raise" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinRaise {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "min_raise" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinRaise() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "max_raise" field.</summary>
    public const int MaxRaiseFieldNumber = 6;
    private readonly static long MaxRaiseDefaultValue = 0L;

    private long maxRaise_;
    /// <summary>
    ///最大加注量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxRaise {
      get { if ((_hasBits0 & 16) != 0) { return maxRaise_; } else { return MaxRaiseDefaultValue; } }
      set {
        _hasBits0 |= 16;
        maxRaise_ = value;
      }
    }
    /// <summary>Gets whether the "max_raise" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxRaise {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "max_raise" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxRaise() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "previous_player_bet" field.</summary>
    public const int PreviousPlayerBetFieldNumber = 7;
    private readonly static long PreviousPlayerBetDefaultValue = 0L;

    private long previousPlayerBet_;
    /// <summary>
    ///上一个玩家的下注量，在raise的时候填充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PreviousPlayerBet {
      get { if ((_hasBits0 & 32) != 0) { return previousPlayerBet_; } else { return PreviousPlayerBetDefaultValue; } }
      set {
        _hasBits0 |= 32;
        previousPlayerBet_ = value;
      }
    }
    /// <summary>Gets whether the "previous_player_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreviousPlayerBet {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "previous_player_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreviousPlayerBet() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "raise_1xchip" field.</summary>
    public const int Raise1XchipFieldNumber = 8;
    private readonly static long Raise1XchipDefaultValue = 0L;

    private long raise1Xchip_;
    /// <summary>
    /// 1x加注的筹码量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Raise1Xchip {
      get { if ((_hasBits0 & 64) != 0) { return raise1Xchip_; } else { return Raise1XchipDefaultValue; } }
      set {
        _hasBits0 |= 64;
        raise1Xchip_ = value;
      }
    }
    /// <summary>Gets whether the "raise_1xchip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRaise1Xchip {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "raise_1xchip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRaise1Xchip() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ActionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ActionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftTime != other.LeftTime) return false;
      if(!actions_.Equals(other.actions_)) return false;
      if (Bet != other.Bet) return false;
      if (Call != other.Call) return false;
      if (MinRaise != other.MinRaise) return false;
      if (MaxRaise != other.MaxRaise) return false;
      if (PreviousPlayerBet != other.PreviousPlayerBet) return false;
      if (Raise1Xchip != other.Raise1Xchip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeftTime) hash ^= LeftTime.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (HasBet) hash ^= Bet.GetHashCode();
      if (HasCall) hash ^= Call.GetHashCode();
      if (HasMinRaise) hash ^= MinRaise.GetHashCode();
      if (HasMaxRaise) hash ^= MaxRaise.GetHashCode();
      if (HasPreviousPlayerBet) hash ^= PreviousPlayerBet.GetHashCode();
      if (HasRaise1Xchip) hash ^= Raise1Xchip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeftTime) {
        output.WriteRawTag(8);
        output.WriteInt64(LeftTime);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      if (HasBet) {
        output.WriteRawTag(24);
        output.WriteInt64(Bet);
      }
      if (HasCall) {
        output.WriteRawTag(32);
        output.WriteInt64(Call);
      }
      if (HasMinRaise) {
        output.WriteRawTag(40);
        output.WriteInt64(MinRaise);
      }
      if (HasMaxRaise) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxRaise);
      }
      if (HasPreviousPlayerBet) {
        output.WriteRawTag(56);
        output.WriteInt64(PreviousPlayerBet);
      }
      if (HasRaise1Xchip) {
        output.WriteRawTag(64);
        output.WriteInt64(Raise1Xchip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeftTime) {
        output.WriteRawTag(8);
        output.WriteInt64(LeftTime);
      }
      actions_.WriteTo(ref output, _repeated_actions_codec);
      if (HasBet) {
        output.WriteRawTag(24);
        output.WriteInt64(Bet);
      }
      if (HasCall) {
        output.WriteRawTag(32);
        output.WriteInt64(Call);
      }
      if (HasMinRaise) {
        output.WriteRawTag(40);
        output.WriteInt64(MinRaise);
      }
      if (HasMaxRaise) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxRaise);
      }
      if (HasPreviousPlayerBet) {
        output.WriteRawTag(56);
        output.WriteInt64(PreviousPlayerBet);
      }
      if (HasRaise1Xchip) {
        output.WriteRawTag(64);
        output.WriteInt64(Raise1Xchip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftTime);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (HasBet) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bet);
      }
      if (HasCall) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Call);
      }
      if (HasMinRaise) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinRaise);
      }
      if (HasMaxRaise) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxRaise);
      }
      if (HasPreviousPlayerBet) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreviousPlayerBet);
      }
      if (HasRaise1Xchip) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Raise1Xchip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ActionData other) {
      if (other == null) {
        return;
      }
      if (other.HasLeftTime) {
        LeftTime = other.LeftTime;
      }
      actions_.Add(other.actions_);
      if (other.HasBet) {
        Bet = other.Bet;
      }
      if (other.HasCall) {
        Call = other.Call;
      }
      if (other.HasMinRaise) {
        MinRaise = other.MinRaise;
      }
      if (other.HasMaxRaise) {
        MaxRaise = other.MaxRaise;
      }
      if (other.HasPreviousPlayerBet) {
        PreviousPlayerBet = other.PreviousPlayerBet;
      }
      if (other.HasRaise1Xchip) {
        Raise1Xchip = other.Raise1Xchip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeftTime = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
          case 24: {
            Bet = input.ReadInt64();
            break;
          }
          case 32: {
            Call = input.ReadInt64();
            break;
          }
          case 40: {
            MinRaise = input.ReadInt64();
            break;
          }
          case 48: {
            MaxRaise = input.ReadInt64();
            break;
          }
          case 56: {
            PreviousPlayerBet = input.ReadInt64();
            break;
          }
          case 64: {
            Raise1Xchip = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeftTime = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            actions_.AddEntriesFrom(ref input, _repeated_actions_codec);
            break;
          }
          case 24: {
            Bet = input.ReadInt64();
            break;
          }
          case 32: {
            Call = input.ReadInt64();
            break;
          }
          case 40: {
            MinRaise = input.ReadInt64();
            break;
          }
          case 48: {
            MaxRaise = input.ReadInt64();
            break;
          }
          case 56: {
            PreviousPlayerBet = input.ReadInt64();
            break;
          }
          case 64: {
            Raise1Xchip = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
