// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pre_base1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from pre_base1.proto</summary>
  public static partial class PreBase1Reflection {

    #region Descriptor
    /// <summary>File descriptor for pre_base1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PreBase1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wcmVfYmFzZTEucHJvdG8aDnByZV9iYXNlLnByb3RvIvMLCgpQcm9maXRJ",
            "bmZvEhYKCXVzZXJfbmFtZRgBIAEoCUgAiAEBEhIKBWJ1eWluGAIgASgDSAGI",
            "AQESEwoGcHJvZml0GAMgASgDSAKIAQESEAoDdWlkGAQgASgJSAOIAQESFQoI",
            "aWNvbl91cmwYBSABKAlIBIgBARIVCghoYW5kc251bRgGIAEoBUgFiAEBEhAK",
            "A2ZlZRgHIAEoA0gGiAEBEhEKBGNvc3QYCCABKANIB4gBARITCgZyZXdhcmQY",
            "CSABKANICIgBARIRCgRyYW5rGAogASgFSAmIAQESHAoPaW5zdXJhbmNlX2No",
            "aXBzGAsgASgDSAqIAQESGgoNaHVudGVyX3Jld2FyZBgMIAEoA0gLiAEBEhYK",
            "CWFnZW50X3VpZBgNIAEoA0gMiAEBEigKC3Jld2FyZF9pbmZvGA4gASgLMg4u",
            "TXR0UmV3YXJkSW5mb0gNiAEBEhYKCXJlYnV5X251bRgPIAEoBUgOiAEBEhYK",
            "CWFkZG9uX251bRgQIAEoBUgPiAEBEhYKCW10dF9zY29yZRgRIAEoBUgQiAEB",
            "EhUKBnRpY2tldBgSIAMoCzIFLkl0ZW0SEwoGY2x1YmlkGBMgASgJSBGIAQES",
            "GAoLamFja3BvdF9mZWUYFCABKANIEogBARIbCg5qYWNrcG90X3Jld2FyZBgV",
            "IAEoA0gTiAEBEhMKBnJlYmF0ZRgWIAEoA0gUiAEBEhsKDndpdGhkcmF3X2No",
            "aXBzGBcgASgDSBWIAQESFwoKaHVudGVyX251bRgYIAEoBUgWiAEBEhgKC2lz",
            "X29sZF9kYXRhGBkgASgISBeIAQESGgoNZXZjaG9wX3Byb2ZpdBgaIAEoA0gY",
            "iAEBEh8KEnVzZXJfZXZjaG9wX3Byb2ZpdBgbIAEoA0gZiAEBEhcKCnByZV9w",
            "cm9maXQYHCABKANIGogBARIVCghmcmFtZV9pZBgdIAEoCUgbiAEBEhoKDWlz",
            "X2Vhcmx5X2JpcmQYHiABKAhIHIgBARIVCghsZWFndWVpZBgfIAEoBUgdiAEB",
            "Eh8KEnNldmVuX2RldWNlX3Jld2FyZBggIAEoA0geiAEBEhoKDWNlcnRpZmlj",
            "YXRpb24YISABKAVIH4gBARIaCg10b3RhbF9iZXR0aW5nGCIgASgDSCCIAQES",
            "HgoRdXNlcl9wcGdsX2NvdW50cnkYIyABKAlIIYgBARIiChV0b25naXRzX2hp",
            "dHBvdF9wcm9maXQYJCABKANIIogBARIiChV0b25naXRzX3NhZ2FzYV9wcm9m",
            "aXQYJSABKANII4gBAUIMCgpfdXNlcl9uYW1lQggKBl9idXlpbkIJCgdfcHJv",
            "Zml0QgYKBF91aWRCCwoJX2ljb25fdXJsQgsKCV9oYW5kc251bUIGCgRfZmVl",
            "QgcKBV9jb3N0QgkKB19yZXdhcmRCBwoFX3JhbmtCEgoQX2luc3VyYW5jZV9j",
            "aGlwc0IQCg5faHVudGVyX3Jld2FyZEIMCgpfYWdlbnRfdWlkQg4KDF9yZXdh",
            "cmRfaW5mb0IMCgpfcmVidXlfbnVtQgwKCl9hZGRvbl9udW1CDAoKX210dF9z",
            "Y29yZUIJCgdfY2x1YmlkQg4KDF9qYWNrcG90X2ZlZUIRCg9famFja3BvdF9y",
            "ZXdhcmRCCQoHX3JlYmF0ZUIRCg9fd2l0aGRyYXdfY2hpcHNCDQoLX2h1bnRl",
            "cl9udW1CDgoMX2lzX29sZF9kYXRhQhAKDl9ldmNob3BfcHJvZml0QhUKE191",
            "c2VyX2V2Y2hvcF9wcm9maXRCDQoLX3ByZV9wcm9maXRCCwoJX2ZyYW1lX2lk",
            "QhAKDl9pc19lYXJseV9iaXJkQgsKCV9sZWFndWVpZEIVChNfc2V2ZW5fZGV1",
            "Y2VfcmV3YXJkQhAKDl9jZXJ0aWZpY2F0aW9uQhAKDl90b3RhbF9iZXR0aW5n",
            "QhQKEl91c2VyX3BwZ2xfY291bnRyeUIYChZfdG9uZ2l0c19oaXRwb3RfcHJv",
            "Zml0QhgKFl90b25naXRzX3NhZ2FzYV9wcm9maXQihgEKEE10dEljbVJld2Fy",
            "ZEluZm8SEAoDdWlkGAEgASgJSACIAQESEgoFY2hpcHMYAiABKANIAYgBARIR",
            "CgRuYW1lGAMgASgJSAKIAQESEwoGcmV3YXJkGAQgASgDSAOIAQFCBgoEX3Vp",
            "ZEIICgZfY2hpcHNCBwoFX25hbWVCCQoHX3Jld2FyZEIaWgcvcGJwcGdvqgIO",
            "VGV4YXMuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.PreBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ProfitInfo), global::Texas.Protocol.ProfitInfo.Parser, new[]{ "UserName", "Buyin", "Profit", "Uid", "IconUrl", "Handsnum", "Fee", "Cost", "Reward", "Rank", "InsuranceChips", "HunterReward", "AgentUid", "RewardInfo", "RebuyNum", "AddonNum", "MttScore", "Ticket", "Clubid", "JackpotFee", "JackpotReward", "Rebate", "WithdrawChips", "HunterNum", "IsOldData", "EvchopProfit", "UserEvchopProfit", "PreProfit", "FrameId", "IsEarlyBird", "Leagueid", "SevenDeuceReward", "Certification", "TotalBetting", "UserPpglCountry", "TongitsHitpotProfit", "TongitsSagasaProfit" }, new[]{ "UserName", "Buyin", "Profit", "Uid", "IconUrl", "Handsnum", "Fee", "Cost", "Reward", "Rank", "InsuranceChips", "HunterReward", "AgentUid", "RewardInfo", "RebuyNum", "AddonNum", "MttScore", "Clubid", "JackpotFee", "JackpotReward", "Rebate", "WithdrawChips", "HunterNum", "IsOldData", "EvchopProfit", "UserEvchopProfit", "PreProfit", "FrameId", "IsEarlyBird", "Leagueid", "SevenDeuceReward", "Certification", "TotalBetting", "UserPpglCountry", "TongitsHitpotProfit", "TongitsSagasaProfit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.MttIcmRewardInfo), global::Texas.Protocol.MttIcmRewardInfo.Parser, new[]{ "Uid", "Chips", "Name", "Reward" }, new[]{ "Uid", "Chips", "Name", "Reward" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProfitInfo : pb::IMessage<ProfitInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfitInfo> _parser = new pb::MessageParser<ProfitInfo>(() => new ProfitInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProfitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBase1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitInfo(ProfitInfo other) : this() {
      _hasBits0 = other._hasBits0;
      userName_ = other.userName_;
      buyin_ = other.buyin_;
      profit_ = other.profit_;
      uid_ = other.uid_;
      iconUrl_ = other.iconUrl_;
      handsnum_ = other.handsnum_;
      fee_ = other.fee_;
      cost_ = other.cost_;
      reward_ = other.reward_;
      rank_ = other.rank_;
      insuranceChips_ = other.insuranceChips_;
      hunterReward_ = other.hunterReward_;
      agentUid_ = other.agentUid_;
      rewardInfo_ = other.rewardInfo_ != null ? other.rewardInfo_.Clone() : null;
      rebuyNum_ = other.rebuyNum_;
      addonNum_ = other.addonNum_;
      mttScore_ = other.mttScore_;
      ticket_ = other.ticket_.Clone();
      clubid_ = other.clubid_;
      jackpotFee_ = other.jackpotFee_;
      jackpotReward_ = other.jackpotReward_;
      rebate_ = other.rebate_;
      withdrawChips_ = other.withdrawChips_;
      hunterNum_ = other.hunterNum_;
      isOldData_ = other.isOldData_;
      evchopProfit_ = other.evchopProfit_;
      userEvchopProfit_ = other.userEvchopProfit_;
      preProfit_ = other.preProfit_;
      frameId_ = other.frameId_;
      isEarlyBird_ = other.isEarlyBird_;
      leagueid_ = other.leagueid_;
      sevenDeuceReward_ = other.sevenDeuceReward_;
      certification_ = other.certification_;
      totalBetting_ = other.totalBetting_;
      userPpglCountry_ = other.userPpglCountry_;
      tongitsHitpotProfit_ = other.tongitsHitpotProfit_;
      tongitsSagasaProfit_ = other.tongitsSagasaProfit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProfitInfo Clone() {
      return new ProfitInfo(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private readonly static string UserNameDefaultValue = "";

    private string userName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_ ?? UserNameDefaultValue; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserName {
      get { return userName_ != null; }
    }
    /// <summary>Clears the value of the "user_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserName() {
      userName_ = null;
    }

    /// <summary>Field number for the "buyin" field.</summary>
    public const int BuyinFieldNumber = 2;
    private readonly static long BuyinDefaultValue = 0L;

    private long buyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Buyin {
      get { if ((_hasBits0 & 1) != 0) { return buyin_; } else { return BuyinDefaultValue; } }
      set {
        _hasBits0 |= 1;
        buyin_ = value;
      }
    }
    /// <summary>Gets whether the "buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBuyin {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBuyin() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 3;
    private readonly static long ProfitDefaultValue = 0L;

    private long profit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Profit {
      get { if ((_hasBits0 & 2) != 0) { return profit_; } else { return ProfitDefaultValue; } }
      set {
        _hasBits0 |= 2;
        profit_ = value;
      }
    }
    /// <summary>Gets whether the "profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProfit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProfit() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "icon_url" field.</summary>
    public const int IconUrlFieldNumber = 5;
    private readonly static string IconUrlDefaultValue = "";

    private string iconUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconUrl {
      get { return iconUrl_ ?? IconUrlDefaultValue; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconUrl {
      get { return iconUrl_ != null; }
    }
    /// <summary>Clears the value of the "icon_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconUrl() {
      iconUrl_ = null;
    }

    /// <summary>Field number for the "handsnum" field.</summary>
    public const int HandsnumFieldNumber = 6;
    private readonly static int HandsnumDefaultValue = 0;

    private int handsnum_;
    /// <summary>
    ///玩家本局手牌数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Handsnum {
      get { if ((_hasBits0 & 4) != 0) { return handsnum_; } else { return HandsnumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        handsnum_ = value;
      }
    }
    /// <summary>Gets whether the "handsnum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHandsnum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "handsnum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHandsnum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 7;
    private readonly static long FeeDefaultValue = 0L;

    private long fee_;
    /// <summary>
    ///被fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Fee {
      get { if ((_hasBits0 & 8) != 0) { return fee_; } else { return FeeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fee_ = value;
      }
    }
    /// <summary>Gets whether the "fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFee {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFee() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 8;
    private readonly static long CostDefaultValue = 0L;

    private long cost_;
    /// <summary>
    /// sng花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Cost {
      get { if ((_hasBits0 & 16) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 16;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCost {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCost() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 9;
    private readonly static long RewardDefaultValue = 0L;

    private long reward_;
    /// <summary>
    /// sng奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Reward {
      get { if ((_hasBits0 & 32) != 0) { return reward_; } else { return RewardDefaultValue; } }
      set {
        _hasBits0 |= 32;
        reward_ = value;
      }
    }
    /// <summary>Gets whether the "reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReward {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReward() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 10;
    private readonly static int RankDefaultValue = 0;

    private int rank_;
    /// <summary>
    ///sng 获得的名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { if ((_hasBits0 & 64) != 0) { return rank_; } else { return RankDefaultValue; } }
      set {
        _hasBits0 |= 64;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRank {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRank() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "insurance_chips" field.</summary>
    public const int InsuranceChipsFieldNumber = 11;
    private readonly static long InsuranceChipsDefaultValue = 0L;

    private long insuranceChips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long InsuranceChips {
      get { if ((_hasBits0 & 128) != 0) { return insuranceChips_; } else { return InsuranceChipsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        insuranceChips_ = value;
      }
    }
    /// <summary>Gets whether the "insurance_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInsuranceChips {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "insurance_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInsuranceChips() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "hunter_reward" field.</summary>
    public const int HunterRewardFieldNumber = 12;
    private readonly static long HunterRewardDefaultValue = 0L;

    private long hunterReward_;
    /// <summary>
    /// 已兑现的赏金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HunterReward {
      get { if ((_hasBits0 & 256) != 0) { return hunterReward_; } else { return HunterRewardDefaultValue; } }
      set {
        _hasBits0 |= 256;
        hunterReward_ = value;
      }
    }
    /// <summary>Gets whether the "hunter_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHunterReward {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "hunter_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHunterReward() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "agent_uid" field.</summary>
    public const int AgentUidFieldNumber = 13;
    private readonly static long AgentUidDefaultValue = 0L;

    private long agentUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AgentUid {
      get { if ((_hasBits0 & 512) != 0) { return agentUid_; } else { return AgentUidDefaultValue; } }
      set {
        _hasBits0 |= 512;
        agentUid_ = value;
      }
    }
    /// <summary>Gets whether the "agent_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAgentUid {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "agent_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAgentUid() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "reward_info" field.</summary>
    public const int RewardInfoFieldNumber = 14;
    private global::Texas.Protocol.MttRewardInfo rewardInfo_;
    /// <summary>
    ///固定奖池的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.MttRewardInfo RewardInfo {
      get { return rewardInfo_; }
      set {
        rewardInfo_ = value;
      }
    }

    /// <summary>Field number for the "rebuy_num" field.</summary>
    public const int RebuyNumFieldNumber = 15;
    private readonly static int RebuyNumDefaultValue = 0;

    private int rebuyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RebuyNum {
      get { if ((_hasBits0 & 1024) != 0) { return rebuyNum_; } else { return RebuyNumDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        rebuyNum_ = value;
      }
    }
    /// <summary>Gets whether the "rebuy_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebuyNum {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "rebuy_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebuyNum() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "addon_num" field.</summary>
    public const int AddonNumFieldNumber = 16;
    private readonly static int AddonNumDefaultValue = 0;

    private int addonNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddonNum {
      get { if ((_hasBits0 & 2048) != 0) { return addonNum_; } else { return AddonNumDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        addonNum_ = value;
      }
    }
    /// <summary>Gets whether the "addon_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonNum {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "addon_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddonNum() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "mtt_score" field.</summary>
    public const int MttScoreFieldNumber = 17;
    private readonly static int MttScoreDefaultValue = 0;

    private int mttScore_;
    /// <summary>
    ///mtt积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MttScore {
      get { if ((_hasBits0 & 4096) != 0) { return mttScore_; } else { return MttScoreDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        mttScore_ = value;
      }
    }
    /// <summary>Gets whether the "mtt_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMttScore {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "mtt_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMttScore() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Texas.Protocol.Item> _repeated_ticket_codec
        = pb::FieldCodec.ForMessage(146, global::Texas.Protocol.Item.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.Item> ticket_ = new pbc::RepeatedField<global::Texas.Protocol.Item>();
    /// <summary>
    ///消耗的门票信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.Item> Ticket {
      get { return ticket_; }
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 19;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "jackpot_fee" field.</summary>
    public const int JackpotFeeFieldNumber = 20;
    private readonly static long JackpotFeeDefaultValue = 0L;

    private long jackpotFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotFee {
      get { if ((_hasBits0 & 8192) != 0) { return jackpotFee_; } else { return JackpotFeeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        jackpotFee_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_fee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotFee {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_fee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotFee() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "jackpot_reward" field.</summary>
    public const int JackpotRewardFieldNumber = 21;
    private readonly static long JackpotRewardDefaultValue = 0L;

    private long jackpotReward_;
    /// <summary>
    /// jackpot_reward不存GameSetRecord表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long JackpotReward {
      get { if ((_hasBits0 & 16384) != 0) { return jackpotReward_; } else { return JackpotRewardDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        jackpotReward_ = value;
      }
    }
    /// <summary>Gets whether the "jackpot_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasJackpotReward {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "jackpot_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearJackpotReward() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "rebate" field.</summary>
    public const int RebateFieldNumber = 22;
    private readonly static long RebateDefaultValue = 0L;

    private long rebate_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Rebate {
      get { if ((_hasBits0 & 32768) != 0) { return rebate_; } else { return RebateDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        rebate_ = value;
      }
    }
    /// <summary>Gets whether the "rebate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRebate {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "rebate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRebate() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "withdraw_chips" field.</summary>
    public const int WithdrawChipsFieldNumber = 23;
    private readonly static long WithdrawChipsDefaultValue = 0L;

    private long withdrawChips_;
    /// <summary>
    /// 回撤筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WithdrawChips {
      get { if ((_hasBits0 & 65536) != 0) { return withdrawChips_; } else { return WithdrawChipsDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        withdrawChips_ = value;
      }
    }
    /// <summary>Gets whether the "withdraw_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWithdrawChips {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "withdraw_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWithdrawChips() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "hunter_num" field.</summary>
    public const int HunterNumFieldNumber = 24;
    private readonly static int HunterNumDefaultValue = 0;

    private int hunterNum_;
    /// <summary>
    /// 已猎人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HunterNum {
      get { if ((_hasBits0 & 131072) != 0) { return hunterNum_; } else { return HunterNumDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        hunterNum_ = value;
      }
    }
    /// <summary>Gets whether the "hunter_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHunterNum {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "hunter_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHunterNum() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "is_old_data" field.</summary>
    public const int IsOldDataFieldNumber = 25;
    private readonly static bool IsOldDataDefaultValue = false;

    private bool isOldData_;
    /// <summary>
    /// 是否旧的水上水下数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOldData {
      get { if ((_hasBits0 & 262144) != 0) { return isOldData_; } else { return IsOldDataDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        isOldData_ = value;
      }
    }
    /// <summary>Gets whether the "is_old_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOldData {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_old_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOldData() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "evchop_profit" field.</summary>
    public const int EvchopProfitFieldNumber = 26;
    private readonly static long EvchopProfitDefaultValue = 0L;

    private long evchopProfit_;
    /// <summary>
    ///庄家提前兑现的盈利(分摊到用户身上的)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EvchopProfit {
      get { if ((_hasBits0 & 524288) != 0) { return evchopProfit_; } else { return EvchopProfitDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        evchopProfit_ = value;
      }
    }
    /// <summary>Gets whether the "evchop_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEvchopProfit {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "evchop_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvchopProfit() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "user_evchop_profit" field.</summary>
    public const int UserEvchopProfitFieldNumber = 27;
    private readonly static long UserEvchopProfitDefaultValue = 0L;

    private long userEvchopProfit_;
    /// <summary>
    ///玩家提前兑现的盈利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UserEvchopProfit {
      get { if ((_hasBits0 & 1048576) != 0) { return userEvchopProfit_; } else { return UserEvchopProfitDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        userEvchopProfit_ = value;
      }
    }
    /// <summary>Gets whether the "user_evchop_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserEvchopProfit {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "user_evchop_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserEvchopProfit() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "pre_profit" field.</summary>
    public const int PreProfitFieldNumber = 28;
    private readonly static long PreProfitDefaultValue = 0L;

    private long preProfit_;
    /// <summary>
    /// 记录上把收益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PreProfit {
      get { if ((_hasBits0 & 2097152) != 0) { return preProfit_; } else { return PreProfitDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        preProfit_ = value;
      }
    }
    /// <summary>Gets whether the "pre_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreProfit {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "pre_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreProfit() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 29;
    private readonly static string FrameIdDefaultValue = "";

    private string frameId_;
    /// <summary>
    ///玩家头像框id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FrameId {
      get { return frameId_ ?? FrameIdDefaultValue; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameId {
      get { return frameId_ != null; }
    }
    /// <summary>Clears the value of the "frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameId() {
      frameId_ = null;
    }

    /// <summary>Field number for the "is_early_bird" field.</summary>
    public const int IsEarlyBirdFieldNumber = 30;
    private readonly static bool IsEarlyBirdDefaultValue = false;

    private bool isEarlyBird_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEarlyBird {
      get { if ((_hasBits0 & 4194304) != 0) { return isEarlyBird_; } else { return IsEarlyBirdDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        isEarlyBird_ = value;
      }
    }
    /// <summary>Gets whether the "is_early_bird" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEarlyBird {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "is_early_bird" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEarlyBird() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 31;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 8388608) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "seven_deuce_reward" field.</summary>
    public const int SevenDeuceRewardFieldNumber = 32;
    private readonly static long SevenDeuceRewardDefaultValue = 0L;

    private long sevenDeuceReward_;
    /// <summary>
    ///72o獎勵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SevenDeuceReward {
      get { if ((_hasBits0 & 16777216) != 0) { return sevenDeuceReward_; } else { return SevenDeuceRewardDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        sevenDeuceReward_ = value;
      }
    }
    /// <summary>Gets whether the "seven_deuce_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSevenDeuceReward {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "seven_deuce_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSevenDeuceReward() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "certification" field.</summary>
    public const int CertificationFieldNumber = 33;
    private readonly static int CertificationDefaultValue = 0;

    private int certification_;
    /// <summary>
    ///俱樂部會員認證
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Certification {
      get { if ((_hasBits0 & 33554432) != 0) { return certification_; } else { return CertificationDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        certification_ = value;
      }
    }
    /// <summary>Gets whether the "certification" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCertification {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "certification" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCertification() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "total_betting" field.</summary>
    public const int TotalBettingFieldNumber = 34;
    private readonly static long TotalBettingDefaultValue = 0L;

    private long totalBetting_;
    /// <summary>
    ///color game 玩家總下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalBetting {
      get { if ((_hasBits0 & 67108864) != 0) { return totalBetting_; } else { return TotalBettingDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        totalBetting_ = value;
      }
    }
    /// <summary>Gets whether the "total_betting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBetting {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "total_betting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBetting() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "user_ppgl_country" field.</summary>
    public const int UserPpglCountryFieldNumber = 35;
    private readonly static string UserPpglCountryDefaultValue = "";

    private string userPpglCountry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserPpglCountry {
      get { return userPpglCountry_ ?? UserPpglCountryDefaultValue; }
      set {
        userPpglCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_ppgl_country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserPpglCountry {
      get { return userPpglCountry_ != null; }
    }
    /// <summary>Clears the value of the "user_ppgl_country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserPpglCountry() {
      userPpglCountry_ = null;
    }

    /// <summary>Field number for the "tongits_hitpot_profit" field.</summary>
    public const int TongitsHitpotProfitFieldNumber = 36;
    private readonly static long TongitsHitpotProfitDefaultValue = 0L;

    private long tongitsHitpotProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TongitsHitpotProfit {
      get { if ((_hasBits0 & 134217728) != 0) { return tongitsHitpotProfit_; } else { return TongitsHitpotProfitDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        tongitsHitpotProfit_ = value;
      }
    }
    /// <summary>Gets whether the "tongits_hitpot_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTongitsHitpotProfit {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "tongits_hitpot_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTongitsHitpotProfit() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "tongits_sagasa_profit" field.</summary>
    public const int TongitsSagasaProfitFieldNumber = 37;
    private readonly static long TongitsSagasaProfitDefaultValue = 0L;

    private long tongitsSagasaProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TongitsSagasaProfit {
      get { if ((_hasBits0 & 268435456) != 0) { return tongitsSagasaProfit_; } else { return TongitsSagasaProfitDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        tongitsSagasaProfit_ = value;
      }
    }
    /// <summary>Gets whether the "tongits_sagasa_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTongitsSagasaProfit {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "tongits_sagasa_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTongitsSagasaProfit() {
      _hasBits0 &= ~268435456;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProfitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProfitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Buyin != other.Buyin) return false;
      if (Profit != other.Profit) return false;
      if (Uid != other.Uid) return false;
      if (IconUrl != other.IconUrl) return false;
      if (Handsnum != other.Handsnum) return false;
      if (Fee != other.Fee) return false;
      if (Cost != other.Cost) return false;
      if (Reward != other.Reward) return false;
      if (Rank != other.Rank) return false;
      if (InsuranceChips != other.InsuranceChips) return false;
      if (HunterReward != other.HunterReward) return false;
      if (AgentUid != other.AgentUid) return false;
      if (!object.Equals(RewardInfo, other.RewardInfo)) return false;
      if (RebuyNum != other.RebuyNum) return false;
      if (AddonNum != other.AddonNum) return false;
      if (MttScore != other.MttScore) return false;
      if(!ticket_.Equals(other.ticket_)) return false;
      if (Clubid != other.Clubid) return false;
      if (JackpotFee != other.JackpotFee) return false;
      if (JackpotReward != other.JackpotReward) return false;
      if (Rebate != other.Rebate) return false;
      if (WithdrawChips != other.WithdrawChips) return false;
      if (HunterNum != other.HunterNum) return false;
      if (IsOldData != other.IsOldData) return false;
      if (EvchopProfit != other.EvchopProfit) return false;
      if (UserEvchopProfit != other.UserEvchopProfit) return false;
      if (PreProfit != other.PreProfit) return false;
      if (FrameId != other.FrameId) return false;
      if (IsEarlyBird != other.IsEarlyBird) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SevenDeuceReward != other.SevenDeuceReward) return false;
      if (Certification != other.Certification) return false;
      if (TotalBetting != other.TotalBetting) return false;
      if (UserPpglCountry != other.UserPpglCountry) return false;
      if (TongitsHitpotProfit != other.TongitsHitpotProfit) return false;
      if (TongitsSagasaProfit != other.TongitsSagasaProfit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserName) hash ^= UserName.GetHashCode();
      if (HasBuyin) hash ^= Buyin.GetHashCode();
      if (HasProfit) hash ^= Profit.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasIconUrl) hash ^= IconUrl.GetHashCode();
      if (HasHandsnum) hash ^= Handsnum.GetHashCode();
      if (HasFee) hash ^= Fee.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasReward) hash ^= Reward.GetHashCode();
      if (HasRank) hash ^= Rank.GetHashCode();
      if (HasInsuranceChips) hash ^= InsuranceChips.GetHashCode();
      if (HasHunterReward) hash ^= HunterReward.GetHashCode();
      if (HasAgentUid) hash ^= AgentUid.GetHashCode();
      if (rewardInfo_ != null) hash ^= RewardInfo.GetHashCode();
      if (HasRebuyNum) hash ^= RebuyNum.GetHashCode();
      if (HasAddonNum) hash ^= AddonNum.GetHashCode();
      if (HasMttScore) hash ^= MttScore.GetHashCode();
      hash ^= ticket_.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasJackpotFee) hash ^= JackpotFee.GetHashCode();
      if (HasJackpotReward) hash ^= JackpotReward.GetHashCode();
      if (HasRebate) hash ^= Rebate.GetHashCode();
      if (HasWithdrawChips) hash ^= WithdrawChips.GetHashCode();
      if (HasHunterNum) hash ^= HunterNum.GetHashCode();
      if (HasIsOldData) hash ^= IsOldData.GetHashCode();
      if (HasEvchopProfit) hash ^= EvchopProfit.GetHashCode();
      if (HasUserEvchopProfit) hash ^= UserEvchopProfit.GetHashCode();
      if (HasPreProfit) hash ^= PreProfit.GetHashCode();
      if (HasFrameId) hash ^= FrameId.GetHashCode();
      if (HasIsEarlyBird) hash ^= IsEarlyBird.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSevenDeuceReward) hash ^= SevenDeuceReward.GetHashCode();
      if (HasCertification) hash ^= Certification.GetHashCode();
      if (HasTotalBetting) hash ^= TotalBetting.GetHashCode();
      if (HasUserPpglCountry) hash ^= UserPpglCountry.GetHashCode();
      if (HasTongitsHitpotProfit) hash ^= TongitsHitpotProfit.GetHashCode();
      if (HasTongitsSagasaProfit) hash ^= TongitsSagasaProfit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUserName) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (HasBuyin) {
        output.WriteRawTag(16);
        output.WriteInt64(Buyin);
      }
      if (HasProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(Profit);
      }
      if (HasUid) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (HasIconUrl) {
        output.WriteRawTag(42);
        output.WriteString(IconUrl);
      }
      if (HasHandsnum) {
        output.WriteRawTag(48);
        output.WriteInt32(Handsnum);
      }
      if (HasFee) {
        output.WriteRawTag(56);
        output.WriteInt64(Fee);
      }
      if (HasCost) {
        output.WriteRawTag(64);
        output.WriteInt64(Cost);
      }
      if (HasReward) {
        output.WriteRawTag(72);
        output.WriteInt64(Reward);
      }
      if (HasRank) {
        output.WriteRawTag(80);
        output.WriteInt32(Rank);
      }
      if (HasInsuranceChips) {
        output.WriteRawTag(88);
        output.WriteInt64(InsuranceChips);
      }
      if (HasHunterReward) {
        output.WriteRawTag(96);
        output.WriteInt64(HunterReward);
      }
      if (HasAgentUid) {
        output.WriteRawTag(104);
        output.WriteInt64(AgentUid);
      }
      if (rewardInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(RewardInfo);
      }
      if (HasRebuyNum) {
        output.WriteRawTag(120);
        output.WriteInt32(RebuyNum);
      }
      if (HasAddonNum) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AddonNum);
      }
      if (HasMttScore) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MttScore);
      }
      ticket_.WriteTo(output, _repeated_ticket_codec);
      if (HasClubid) {
        output.WriteRawTag(154, 1);
        output.WriteString(Clubid);
      }
      if (HasJackpotFee) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(JackpotFee);
      }
      if (HasJackpotReward) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(JackpotReward);
      }
      if (HasRebate) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Rebate);
      }
      if (HasWithdrawChips) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(WithdrawChips);
      }
      if (HasHunterNum) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(HunterNum);
      }
      if (HasIsOldData) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsOldData);
      }
      if (HasEvchopProfit) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(EvchopProfit);
      }
      if (HasUserEvchopProfit) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(UserEvchopProfit);
      }
      if (HasPreProfit) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(PreProfit);
      }
      if (HasFrameId) {
        output.WriteRawTag(234, 1);
        output.WriteString(FrameId);
      }
      if (HasIsEarlyBird) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsEarlyBird);
      }
      if (HasLeagueid) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasSevenDeuceReward) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(SevenDeuceReward);
      }
      if (HasCertification) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Certification);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TotalBetting);
      }
      if (HasUserPpglCountry) {
        output.WriteRawTag(154, 2);
        output.WriteString(UserPpglCountry);
      }
      if (HasTongitsHitpotProfit) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(TongitsHitpotProfit);
      }
      if (HasTongitsSagasaProfit) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(TongitsSagasaProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUserName) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (HasBuyin) {
        output.WriteRawTag(16);
        output.WriteInt64(Buyin);
      }
      if (HasProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(Profit);
      }
      if (HasUid) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (HasIconUrl) {
        output.WriteRawTag(42);
        output.WriteString(IconUrl);
      }
      if (HasHandsnum) {
        output.WriteRawTag(48);
        output.WriteInt32(Handsnum);
      }
      if (HasFee) {
        output.WriteRawTag(56);
        output.WriteInt64(Fee);
      }
      if (HasCost) {
        output.WriteRawTag(64);
        output.WriteInt64(Cost);
      }
      if (HasReward) {
        output.WriteRawTag(72);
        output.WriteInt64(Reward);
      }
      if (HasRank) {
        output.WriteRawTag(80);
        output.WriteInt32(Rank);
      }
      if (HasInsuranceChips) {
        output.WriteRawTag(88);
        output.WriteInt64(InsuranceChips);
      }
      if (HasHunterReward) {
        output.WriteRawTag(96);
        output.WriteInt64(HunterReward);
      }
      if (HasAgentUid) {
        output.WriteRawTag(104);
        output.WriteInt64(AgentUid);
      }
      if (rewardInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(RewardInfo);
      }
      if (HasRebuyNum) {
        output.WriteRawTag(120);
        output.WriteInt32(RebuyNum);
      }
      if (HasAddonNum) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AddonNum);
      }
      if (HasMttScore) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MttScore);
      }
      ticket_.WriteTo(ref output, _repeated_ticket_codec);
      if (HasClubid) {
        output.WriteRawTag(154, 1);
        output.WriteString(Clubid);
      }
      if (HasJackpotFee) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(JackpotFee);
      }
      if (HasJackpotReward) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(JackpotReward);
      }
      if (HasRebate) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Rebate);
      }
      if (HasWithdrawChips) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(WithdrawChips);
      }
      if (HasHunterNum) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(HunterNum);
      }
      if (HasIsOldData) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsOldData);
      }
      if (HasEvchopProfit) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(EvchopProfit);
      }
      if (HasUserEvchopProfit) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(UserEvchopProfit);
      }
      if (HasPreProfit) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(PreProfit);
      }
      if (HasFrameId) {
        output.WriteRawTag(234, 1);
        output.WriteString(FrameId);
      }
      if (HasIsEarlyBird) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsEarlyBird);
      }
      if (HasLeagueid) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Leagueid);
      }
      if (HasSevenDeuceReward) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(SevenDeuceReward);
      }
      if (HasCertification) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Certification);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TotalBetting);
      }
      if (HasUserPpglCountry) {
        output.WriteRawTag(154, 2);
        output.WriteString(UserPpglCountry);
      }
      if (HasTongitsHitpotProfit) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(TongitsHitpotProfit);
      }
      if (HasTongitsSagasaProfit) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(TongitsSagasaProfit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUserName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (HasBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Buyin);
      }
      if (HasProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasIconUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      if (HasHandsnum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Handsnum);
      }
      if (HasFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (HasReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      if (HasRank) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HasInsuranceChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InsuranceChips);
      }
      if (HasHunterReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HunterReward);
      }
      if (HasAgentUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgentUid);
      }
      if (rewardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardInfo);
      }
      if (HasRebuyNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RebuyNum);
      }
      if (HasAddonNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddonNum);
      }
      if (HasMttScore) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MttScore);
      }
      size += ticket_.CalculateSize(_repeated_ticket_codec);
      if (HasClubid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasJackpotFee) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(JackpotFee);
      }
      if (HasJackpotReward) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(JackpotReward);
      }
      if (HasRebate) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Rebate);
      }
      if (HasWithdrawChips) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WithdrawChips);
      }
      if (HasHunterNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HunterNum);
      }
      if (HasIsOldData) {
        size += 2 + 1;
      }
      if (HasEvchopProfit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EvchopProfit);
      }
      if (HasUserEvchopProfit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserEvchopProfit);
      }
      if (HasPreProfit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PreProfit);
      }
      if (HasFrameId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (HasIsEarlyBird) {
        size += 2 + 1;
      }
      if (HasLeagueid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSevenDeuceReward) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SevenDeuceReward);
      }
      if (HasCertification) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Certification);
      }
      if (HasTotalBetting) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalBetting);
      }
      if (HasUserPpglCountry) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserPpglCountry);
      }
      if (HasTongitsHitpotProfit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TongitsHitpotProfit);
      }
      if (HasTongitsSagasaProfit) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TongitsSagasaProfit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProfitInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasUserName) {
        UserName = other.UserName;
      }
      if (other.HasBuyin) {
        Buyin = other.Buyin;
      }
      if (other.HasProfit) {
        Profit = other.Profit;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasIconUrl) {
        IconUrl = other.IconUrl;
      }
      if (other.HasHandsnum) {
        Handsnum = other.Handsnum;
      }
      if (other.HasFee) {
        Fee = other.Fee;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasReward) {
        Reward = other.Reward;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasInsuranceChips) {
        InsuranceChips = other.InsuranceChips;
      }
      if (other.HasHunterReward) {
        HunterReward = other.HunterReward;
      }
      if (other.HasAgentUid) {
        AgentUid = other.AgentUid;
      }
      if (other.rewardInfo_ != null) {
        if (rewardInfo_ == null) {
          RewardInfo = new global::Texas.Protocol.MttRewardInfo();
        }
        RewardInfo.MergeFrom(other.RewardInfo);
      }
      if (other.HasRebuyNum) {
        RebuyNum = other.RebuyNum;
      }
      if (other.HasAddonNum) {
        AddonNum = other.AddonNum;
      }
      if (other.HasMttScore) {
        MttScore = other.MttScore;
      }
      ticket_.Add(other.ticket_);
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasJackpotFee) {
        JackpotFee = other.JackpotFee;
      }
      if (other.HasJackpotReward) {
        JackpotReward = other.JackpotReward;
      }
      if (other.HasRebate) {
        Rebate = other.Rebate;
      }
      if (other.HasWithdrawChips) {
        WithdrawChips = other.WithdrawChips;
      }
      if (other.HasHunterNum) {
        HunterNum = other.HunterNum;
      }
      if (other.HasIsOldData) {
        IsOldData = other.IsOldData;
      }
      if (other.HasEvchopProfit) {
        EvchopProfit = other.EvchopProfit;
      }
      if (other.HasUserEvchopProfit) {
        UserEvchopProfit = other.UserEvchopProfit;
      }
      if (other.HasPreProfit) {
        PreProfit = other.PreProfit;
      }
      if (other.HasFrameId) {
        FrameId = other.FrameId;
      }
      if (other.HasIsEarlyBird) {
        IsEarlyBird = other.IsEarlyBird;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSevenDeuceReward) {
        SevenDeuceReward = other.SevenDeuceReward;
      }
      if (other.HasCertification) {
        Certification = other.Certification;
      }
      if (other.HasTotalBetting) {
        TotalBetting = other.TotalBetting;
      }
      if (other.HasUserPpglCountry) {
        UserPpglCountry = other.UserPpglCountry;
      }
      if (other.HasTongitsHitpotProfit) {
        TongitsHitpotProfit = other.TongitsHitpotProfit;
      }
      if (other.HasTongitsSagasaProfit) {
        TongitsSagasaProfit = other.TongitsSagasaProfit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Buyin = input.ReadInt64();
            break;
          }
          case 24: {
            Profit = input.ReadInt64();
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 42: {
            IconUrl = input.ReadString();
            break;
          }
          case 48: {
            Handsnum = input.ReadInt32();
            break;
          }
          case 56: {
            Fee = input.ReadInt64();
            break;
          }
          case 64: {
            Cost = input.ReadInt64();
            break;
          }
          case 72: {
            Reward = input.ReadInt64();
            break;
          }
          case 80: {
            Rank = input.ReadInt32();
            break;
          }
          case 88: {
            InsuranceChips = input.ReadInt64();
            break;
          }
          case 96: {
            HunterReward = input.ReadInt64();
            break;
          }
          case 104: {
            AgentUid = input.ReadInt64();
            break;
          }
          case 114: {
            if (rewardInfo_ == null) {
              RewardInfo = new global::Texas.Protocol.MttRewardInfo();
            }
            input.ReadMessage(RewardInfo);
            break;
          }
          case 120: {
            RebuyNum = input.ReadInt32();
            break;
          }
          case 128: {
            AddonNum = input.ReadInt32();
            break;
          }
          case 136: {
            MttScore = input.ReadInt32();
            break;
          }
          case 146: {
            ticket_.AddEntriesFrom(input, _repeated_ticket_codec);
            break;
          }
          case 154: {
            Clubid = input.ReadString();
            break;
          }
          case 160: {
            JackpotFee = input.ReadInt64();
            break;
          }
          case 168: {
            JackpotReward = input.ReadInt64();
            break;
          }
          case 176: {
            Rebate = input.ReadInt64();
            break;
          }
          case 184: {
            WithdrawChips = input.ReadInt64();
            break;
          }
          case 192: {
            HunterNum = input.ReadInt32();
            break;
          }
          case 200: {
            IsOldData = input.ReadBool();
            break;
          }
          case 208: {
            EvchopProfit = input.ReadInt64();
            break;
          }
          case 216: {
            UserEvchopProfit = input.ReadInt64();
            break;
          }
          case 224: {
            PreProfit = input.ReadInt64();
            break;
          }
          case 234: {
            FrameId = input.ReadString();
            break;
          }
          case 240: {
            IsEarlyBird = input.ReadBool();
            break;
          }
          case 248: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 256: {
            SevenDeuceReward = input.ReadInt64();
            break;
          }
          case 264: {
            Certification = input.ReadInt32();
            break;
          }
          case 272: {
            TotalBetting = input.ReadInt64();
            break;
          }
          case 282: {
            UserPpglCountry = input.ReadString();
            break;
          }
          case 288: {
            TongitsHitpotProfit = input.ReadInt64();
            break;
          }
          case 296: {
            TongitsSagasaProfit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Buyin = input.ReadInt64();
            break;
          }
          case 24: {
            Profit = input.ReadInt64();
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 42: {
            IconUrl = input.ReadString();
            break;
          }
          case 48: {
            Handsnum = input.ReadInt32();
            break;
          }
          case 56: {
            Fee = input.ReadInt64();
            break;
          }
          case 64: {
            Cost = input.ReadInt64();
            break;
          }
          case 72: {
            Reward = input.ReadInt64();
            break;
          }
          case 80: {
            Rank = input.ReadInt32();
            break;
          }
          case 88: {
            InsuranceChips = input.ReadInt64();
            break;
          }
          case 96: {
            HunterReward = input.ReadInt64();
            break;
          }
          case 104: {
            AgentUid = input.ReadInt64();
            break;
          }
          case 114: {
            if (rewardInfo_ == null) {
              RewardInfo = new global::Texas.Protocol.MttRewardInfo();
            }
            input.ReadMessage(RewardInfo);
            break;
          }
          case 120: {
            RebuyNum = input.ReadInt32();
            break;
          }
          case 128: {
            AddonNum = input.ReadInt32();
            break;
          }
          case 136: {
            MttScore = input.ReadInt32();
            break;
          }
          case 146: {
            ticket_.AddEntriesFrom(ref input, _repeated_ticket_codec);
            break;
          }
          case 154: {
            Clubid = input.ReadString();
            break;
          }
          case 160: {
            JackpotFee = input.ReadInt64();
            break;
          }
          case 168: {
            JackpotReward = input.ReadInt64();
            break;
          }
          case 176: {
            Rebate = input.ReadInt64();
            break;
          }
          case 184: {
            WithdrawChips = input.ReadInt64();
            break;
          }
          case 192: {
            HunterNum = input.ReadInt32();
            break;
          }
          case 200: {
            IsOldData = input.ReadBool();
            break;
          }
          case 208: {
            EvchopProfit = input.ReadInt64();
            break;
          }
          case 216: {
            UserEvchopProfit = input.ReadInt64();
            break;
          }
          case 224: {
            PreProfit = input.ReadInt64();
            break;
          }
          case 234: {
            FrameId = input.ReadString();
            break;
          }
          case 240: {
            IsEarlyBird = input.ReadBool();
            break;
          }
          case 248: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 256: {
            SevenDeuceReward = input.ReadInt64();
            break;
          }
          case 264: {
            Certification = input.ReadInt32();
            break;
          }
          case 272: {
            TotalBetting = input.ReadInt64();
            break;
          }
          case 282: {
            UserPpglCountry = input.ReadString();
            break;
          }
          case 288: {
            TongitsHitpotProfit = input.ReadInt64();
            break;
          }
          case 296: {
            TongitsSagasaProfit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MttIcmRewardInfo : pb::IMessage<MttIcmRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MttIcmRewardInfo> _parser = new pb::MessageParser<MttIcmRewardInfo>(() => new MttIcmRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MttIcmRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.PreBase1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttIcmRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttIcmRewardInfo(MttIcmRewardInfo other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      chips_ = other.chips_;
      name_ = other.name_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MttIcmRewardInfo Clone() {
      return new MttIcmRewardInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    /// <summary>
    ///玩家筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 1) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private readonly static long RewardDefaultValue = 0L;

    private long reward_;
    /// <summary>
    ///玩家的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Reward {
      get { if ((_hasBits0 & 2) != 0) { return reward_; } else { return RewardDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reward_ = value;
      }
    }
    /// <summary>Gets whether the "reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReward {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReward() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MttIcmRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MttIcmRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Chips != other.Chips) return false;
      if (Name != other.Name) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasReward) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasReward) {
        output.WriteRawTag(32);
        output.WriteInt64(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasReward) {
        output.WriteRawTag(32);
        output.WriteInt64(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasReward) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MttIcmRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasReward) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Reward = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Reward = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
