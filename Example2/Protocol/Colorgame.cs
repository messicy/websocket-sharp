// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: colorgame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texas.Protocol {

  /// <summary>Holder for reflection information generated from colorgame.proto</summary>
  public static partial class ColorgameReflection {

    #region Descriptor
    /// <summary>File descriptor for colorgame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ColorgameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jb2xvcmdhbWUucHJvdG8aDnByZV9iYXNlLnByb3RvGgpiYXNlLnByb3Rv",
            "GgpwaW5lLnByb3RvGg9wcmVfYmFzZTEucHJvdG8aCXBiMy5wcm90byKmAQoQ",
            "Q29sb3JSYXRlU2V0dGluZxIbCg5vbmVfY29sb3JfcmF0ZRgBIAEoBUgAiAEB",
            "EhsKDnR3b19jb2xvcl9yYXRlGAIgASgFSAGIAQESHQoQdGhyZWVfY29sb3Jf",
            "cmF0ZRgDIAEoBUgCiAEBQhEKD19vbmVfY29sb3JfcmF0ZUIRCg9fdHdvX2Nv",
            "bG9yX3JhdGVCEwoRX3RocmVlX2NvbG9yX3JhdGUifwoPQ29sb3JCZXRTZXR0",
            "aW5nEhQKB21pbl9iZXQYASABKAVIAIgBARIXCgptaWRkbGVfYmV0GAIgASgF",
            "SAGIAQESFQoIaGlnaF9iZXQYAyABKAVIAogBAUIKCghfbWluX2JldEINCgtf",
            "bWlkZGxlX2JldEILCglfaGlnaF9iZXQiWAoOQ29sb3JCb2FyZEluZm8SGAoL",
            "Ym9hcmRfaW5kZXgYASABKAVIAIgBARISCgVtb25leRgCIAEoA0gBiAEBQg4K",
            "DF9ib2FyZF9pbmRleEIICgZfbW9uZXkirQEKDUNvbG9yR2FtZURpY2USHQoQ",
            "Zmlyc3RfZGljZV9jb2xvchgBIAEoBUgAiAEBEh4KEXNlY29uZF9kaWNlX2Nv",
            "bG9yGAIgASgFSAGIAQESHQoQdGhpcmRfZGljZV9jb2xvchgDIAEoBUgCiAEB",
            "QhMKEV9maXJzdF9kaWNlX2NvbG9yQhQKEl9zZWNvbmRfZGljZV9jb2xvckIT",
            "ChFfdGhpcmRfZGljZV9jb2xvciKFEgoNQ29sb3JSb29tSW5mbxIWCglyb29t",
            "X25hbWUYASABKAlIAIgBARISCgVibGluZBgCIAEoA0gBiAEBEhYKCW1pbl9i",
            "dXlpbhgDIAEoA0gCiAEBEhYKCW1heF9idXlpbhgEIAEoA0gDiAEBEhYKCW1p",
            "bl9zdGFjaxgFIAEoA0gEiAEBEhUKCGZlZXBvaW50GAYgASgFSAWIAQESEwoG",
            "ZmVlY2FwGAcgASgFSAaIAQESHAoPY3JlYXRvcl91c2VyX2lkGAggASgDSAeI",
            "AQESEwoGY2x1YmlkGAkgASgJSAiIAQESFQoIbGVhZ3VlaWQYCiABKAVICYgB",
            "ARIbCg5zdXBlcl9sZWFndWVpZBgLIAEoBUgKiAEBEh4KEXN1cGVyX2xlYWd1",
            "ZV90eXBlGAwgASgFSAuIAQESFwoKb3duZXJfaWNvbhgNIAEoCUgMiAEBEhcK",
            "Cm93bmVyX25hbWUYDiABKAlIDYgBARIUCgdvd25lcmlkGA8gASgDSA6IAQES",
            "HAoPb3duZXJfdmlwX2xldmVsGBAgASgNSA+IAQESEwoGcmVnaW9uGBEgASgF",
            "SBCIAQESFQoIcGxhdGZvcm0YEiABKAlIEYgBARIWCgljbHViX25hbWUYEyAB",
            "KAlIEogBARIZCgxjbHViX293bmVyaWQYFCABKANIE4gBARIWCgljbHViX2lj",
            "b24YFSABKAlIFIgBARIbCg5vcGVyYXRpb25fdGltZRgWIAEoBUgViAEBEhYK",
            "CXJvb21fdGltZRgXIAEoBUgWiAEBEhUKCHNlYXRfbnVtGBggASgFSBeIAQES",
            "FwoKYXV0b19zdGFydBgZIAEoBUgYiAEBEiEKCXJvb21fdHlwZRgaIAEoDjIJ",
            "LlJvb21UeXBlSBmIAQESIQoJcm9vbV9tb2RlGBsgASgOMgkuUm9vbU1vZGVI",
            "GogBARIhCglnYW1lX21vZGUYHCABKA4yCS5HYW1lTW9kZUgbiAEBEhUKCHRp",
            "bWV6b25lGB0gASgFSByIAQESEwoGcm9vbWlkGB4gASgJSB2IAQESFQoIb2Zm",
            "aWNpYWwYHyABKAhIHogBARITCgZwYXNzd2QYICABKAlIH4gBARIkChdpc19h",
            "dXRvX2RlbGF5X3Jvb21fb3ZlchghIAEoCEggiAEBEicKGmF1dG9fZGVsYXlf",
            "cm9vbV9vdmVyX3RpbWVzGCIgASgFSCGIAQESIAoTaXNfYXV0b19jcmVhdGVf",
            "cm9vbRgjIAEoCEgiiAEBEhUKCG1vZHVsZWlkGCQgASgDSCOIAQESFwoKbXVs",
            "dGlfb3BpZBglIAEoCUgkiAEBEhMKBnRlbXBpZBgmIAEoCUgliAEBEhYKCWdw",
            "c19saW1pdBgnIAEoCEgmiAEBEhUKCGlwX2xpbWl0GCggASgISCeIAQESGwoO",
            "Zm9yYmlkZGVuX2NoYXQYKSABKAhIKIgBARIZCgxwYXNzd2RfbGltaXQYKiAB",
            "KAhIKYgBARIXCgppc19jYXB0Y2hhGCsgASgISCqIAQESFgoJaXNfYmFuX3Bj",
            "GCwgASgISCuIAQESGgoNaXNfY2hlY2tfbWFpbBgtIAEoCEgsiAEBEh8KEmdw",
            "c19kaXN0YW5jZV9saW1pdBguIAEoBUgtiAEBEhoKDWNyZWF0ZV9jbHViaWQY",
            "LyABKAVILogBARIgChNmb3JiaWRkZW5fY2hhdF9tb2RlGDAgASgFSC+IAQES",
            "GQoMcm9vbV92ZXJzaW9uGDEgASgFSDCIAQESHQoQY2FsbHRpbWVfbWludXRl",
            "cxgyIAEoBUgxiAEBEh4KEXJhdGVfc2V0dGluZ190eXBlGDMgASgFSDKIAQES",
            "LAoMcmF0ZV9zZXR0aW5nGDQgASgLMhEuQ29sb3JSYXRlU2V0dGluZ0gziAEB",
            "EioKC2JldF9zZXR0aW5nGDUgASgLMhAuQ29sb3JCZXRTZXR0aW5nSDSIAQFC",
            "DAoKX3Jvb21fbmFtZUIICgZfYmxpbmRCDAoKX21pbl9idXlpbkIMCgpfbWF4",
            "X2J1eWluQgwKCl9taW5fc3RhY2tCCwoJX2ZlZXBvaW50QgkKB19mZWVjYXBC",
            "EgoQX2NyZWF0b3JfdXNlcl9pZEIJCgdfY2x1YmlkQgsKCV9sZWFndWVpZEIR",
            "Cg9fc3VwZXJfbGVhZ3VlaWRCFAoSX3N1cGVyX2xlYWd1ZV90eXBlQg0KC19v",
            "d25lcl9pY29uQg0KC19vd25lcl9uYW1lQgoKCF9vd25lcmlkQhIKEF9vd25l",
            "cl92aXBfbGV2ZWxCCQoHX3JlZ2lvbkILCglfcGxhdGZvcm1CDAoKX2NsdWJf",
            "bmFtZUIPCg1fY2x1Yl9vd25lcmlkQgwKCl9jbHViX2ljb25CEQoPX29wZXJh",
            "dGlvbl90aW1lQgwKCl9yb29tX3RpbWVCCwoJX3NlYXRfbnVtQg0KC19hdXRv",
            "X3N0YXJ0QgwKCl9yb29tX3R5cGVCDAoKX3Jvb21fbW9kZUIMCgpfZ2FtZV9t",
            "b2RlQgsKCV90aW1lem9uZUIJCgdfcm9vbWlkQgsKCV9vZmZpY2lhbEIJCgdf",
            "cGFzc3dkQhoKGF9pc19hdXRvX2RlbGF5X3Jvb21fb3ZlckIdChtfYXV0b19k",
            "ZWxheV9yb29tX292ZXJfdGltZXNCFgoUX2lzX2F1dG9fY3JlYXRlX3Jvb21C",
            "CwoJX21vZHVsZWlkQg0KC19tdWx0aV9vcGlkQgkKB190ZW1waWRCDAoKX2dw",
            "c19saW1pdEILCglfaXBfbGltaXRCEQoPX2ZvcmJpZGRlbl9jaGF0Qg8KDV9w",
            "YXNzd2RfbGltaXRCDQoLX2lzX2NhcHRjaGFCDAoKX2lzX2Jhbl9wY0IQCg5f",
            "aXNfY2hlY2tfbWFpbEIVChNfZ3BzX2Rpc3RhbmNlX2xpbWl0QhAKDl9jcmVh",
            "dGVfY2x1YmlkQhYKFF9mb3JiaWRkZW5fY2hhdF9tb2RlQg8KDV9yb29tX3Zl",
            "cnNpb25CEwoRX2NhbGx0aW1lX21pbnV0ZXNCFAoSX3JhdGVfc2V0dGluZ190",
            "eXBlQg8KDV9yYXRlX3NldHRpbmdCDgoMX2JldF9zZXR0aW5nIr0NChJDcmVh",
            "dGVDb2xvclJvb21SRVESFgoJcm9vbV9uYW1lGAEgASgJSACIAQESEgoFYmxp",
            "bmQYAiABKANIAYgBARIWCgltaW5fYnV5aW4YAyABKANIAogBARIWCgltYXhf",
            "YnV5aW4YBCABKANIA4gBARIWCgltaW5fc3RhY2sYBSABKANIBIgBARIVCghm",
            "ZWVwb2ludBgGIAEoBUgFiAEBEhMKBmZlZWNhcBgHIAEoBUgGiAEBEhwKD2Ny",
            "ZWF0b3JfdXNlcl9pZBgIIAEoA0gHiAEBEhMKBmNsdWJpZBgJIAEoCUgIiAEB",
            "EhUKCGxlYWd1ZWlkGAogASgFSAmIAQESGwoOc3VwZXJfbGVhZ3VlaWQYCyAB",
            "KAVICogBARIeChFzdXBlcl9sZWFndWVfdHlwZRgMIAEoBUgLiAEBEhsKDm9w",
            "ZXJhdGlvbl90aW1lGA0gASgFSAyIAQESFgoJcm9vbV90aW1lGA4gASgFSA2I",
            "AQESFQoIc2VhdF9udW0YDyABKAVIDogBARIXCgphdXRvX3N0YXJ0GBAgASgF",
            "SA+IAQESIQoJcm9vbV90eXBlGBEgASgOMgkuUm9vbVR5cGVIEIgBARIhCgln",
            "YW1lX21vZGUYEiABKA4yCS5HYW1lTW9kZUgRiAEBEhUKCHRpbWV6b25lGBMg",
            "ASgFSBKIAQESEwoGcm9vbWlkGBQgASgJSBOIAQESGwoOZGVyaXZlZF9yb29t",
            "aWQYFSABKAVIFIgBARIkChdpc19hdXRvX2RlbGF5X3Jvb21fb3ZlchgWIAEo",
            "CEgViAEBEicKGmF1dG9fZGVsYXlfcm9vbV9vdmVyX3RpbWVzGBcgASgFSBaI",
            "AQESIAoTaXNfYXV0b19jcmVhdGVfcm9vbRgYIAEoCEgXiAEBEhUKCG1vZHVs",
            "ZWlkGBkgASgDSBiIAQESFwoKbXVsdGlfb3BpZBgaIAEoCUgZiAEBEhQKB2Nh",
            "bl91c2UYGyABKAhIGogBARIWCglncHNfbGltaXQYHCABKAhIG4gBARIVCghp",
            "cF9saW1pdBgdIAEoCEgciAEBEhsKDmZvcmJpZGRlbl9jaGF0GB4gASgISB2I",
            "AQESGQoMcGFzc3dkX2xpbWl0GB8gASgISB6IAQESFwoKaXNfY2FwdGNoYRgg",
            "IAEoCEgfiAEBEhYKCWlzX2Jhbl9wYxghIAEoCEggiAEBEhoKDWlzX2NoZWNr",
            "X21haWwYIiABKAhIIYgBARIgChNmb3JiaWRkZW5fY2hhdF9tb2RlGCMgASgF",
            "SCKIAQESHQoQY2FsbHRpbWVfbWludXRlcxgkIAEoBUgjiAEBEh4KEXJhdGVf",
            "c2V0dGluZ190eXBlGCUgASgFSCSIAQESKgoLYmV0X3NldHRpbmcYJiABKAsy",
            "EC5Db2xvckJldFNldHRpbmdIJYgBARIQCghiYW5fY2x1YhgnIAMoBRITCgti",
            "YW5fY291bnRyeRgoIAMoCUIMCgpfcm9vbV9uYW1lQggKBl9ibGluZEIMCgpf",
            "bWluX2J1eWluQgwKCl9tYXhfYnV5aW5CDAoKX21pbl9zdGFja0ILCglfZmVl",
            "cG9pbnRCCQoHX2ZlZWNhcEISChBfY3JlYXRvcl91c2VyX2lkQgkKB19jbHVi",
            "aWRCCwoJX2xlYWd1ZWlkQhEKD19zdXBlcl9sZWFndWVpZEIUChJfc3VwZXJf",
            "bGVhZ3VlX3R5cGVCEQoPX29wZXJhdGlvbl90aW1lQgwKCl9yb29tX3RpbWVC",
            "CwoJX3NlYXRfbnVtQg0KC19hdXRvX3N0YXJ0QgwKCl9yb29tX3R5cGVCDAoK",
            "X2dhbWVfbW9kZUILCglfdGltZXpvbmVCCQoHX3Jvb21pZEIRCg9fZGVyaXZl",
            "ZF9yb29taWRCGgoYX2lzX2F1dG9fZGVsYXlfcm9vbV9vdmVyQh0KG19hdXRv",
            "X2RlbGF5X3Jvb21fb3Zlcl90aW1lc0IWChRfaXNfYXV0b19jcmVhdGVfcm9v",
            "bUILCglfbW9kdWxlaWRCDQoLX211bHRpX29waWRCCgoIX2Nhbl91c2VCDAoK",
            "X2dwc19saW1pdEILCglfaXBfbGltaXRCEQoPX2ZvcmJpZGRlbl9jaGF0Qg8K",
            "DV9wYXNzd2RfbGltaXRCDQoLX2lzX2NhcHRjaGFCDAoKX2lzX2Jhbl9wY0IQ",
            "Cg5faXNfY2hlY2tfbWFpbEIWChRfZm9yYmlkZGVuX2NoYXRfbW9kZUITChFf",
            "Y2FsbHRpbWVfbWludXRlc0IUChJfcmF0ZV9zZXR0aW5nX3R5cGVCDgoMX2Jl",
            "dF9zZXR0aW5nIogBChJDcmVhdGVDb2xvclJvb21SU1ASEQoEY29kZRgBIAEo",
            "BUgAiAEBEhMKBnJlYXNvbhgCIAEoCUgBiAEBEicKCmNvbG9yX2luZm8YAyAB",
            "KAsyDi5Db2xvclJvb21JbmZvSAKIAQFCBwoFX2NvZGVCCQoHX3JlYXNvbkIN",
            "CgtfY29sb3JfaW5mbyIvCg9Db2xvclNpdERvd25SRVESEgoFY2hpcHMYASAB",
            "KANIAIgBAUIICgZfY2hpcHMiEQoPQ29sb3JTdGFuZFVwUkVRIi0KD0NvbG9y",
            "U3RhbmRVcFJTUBIRCgRjb2RlGAEgASgFSACIAQFCBwoFX2NvZGUiuQMKD0Nv",
            "bG9yUGxheWVySW5mbxIRCgRuYW1lGAEgASgJSACIAQESFQoIaWNvbl91cmwY",
            "AiABKAlIAYgBARIQCgN1aWQYAyABKAlIAogBARITCgZjbHViaWQYBCABKAlI",
            "A4gBARIWCgljbHViX25hbWUYBSABKAlIBIgBARIWCgl2aXBfbGV2ZWwYBiAB",
            "KAVIBYgBARISCgVsZXZlbBgHIAEoBUgGiAEBEhQKB2NvdW50cnkYCCABKAlI",
            "B4gBARIUCgdncHNfbG9uGAkgASgFSAiIAQESFAoHZ3BzX2xhdBgKIAEoBUgJ",
            "iAEBEhsKDndhaXRpbmdfc3RhdHVzGAsgASgFSAqIAQESGgoNY2VydGlmaWNh",
            "dGlvbhgMIAEoBUgLiAEBQgcKBV9uYW1lQgsKCV9pY29uX3VybEIGCgRfdWlk",
            "QgkKB19jbHViaWRCDAoKX2NsdWJfbmFtZUIMCgpfdmlwX2xldmVsQggKBl9s",
            "ZXZlbEIKCghfY291bnRyeUIKCghfZ3BzX2xvbkIKCghfZ3BzX2xhdEIRCg9f",
            "d2FpdGluZ19zdGF0dXNCEAoOX2NlcnRpZmljYXRpb24ijQEKF0NvbG9yUGxh",
            "eWVyR2FtaW5nU3RhdHVzEhIKBWNoaXBzGAEgASgDSACIAQESFwoKaXNfcGxh",
            "eWluZxgCIAEoCEgBiAEBEiwKE3BsYXllcl9iZXR0aW5nX2luZm8YAyADKAsy",
            "Dy5Db2xvckJvYXJkSW5mb0IICgZfY2hpcHNCDQoLX2lzX3BsYXlpbmci2QEK",
            "D0NvbG9yU2VhdFN0YXR1cxITCgZzZWF0aWQYASABKAVIAIgBARIqCgtwbGF5",
            "ZXJfaW5mbxgFIAEoCzIQLkNvbG9yUGxheWVySW5mb0gBiAEBEjQKDXBsYXll",
            "cl9zdGF0dXMYBiABKAsyGC5Db2xvclBsYXllckdhbWluZ1N0YXR1c0gCiAEB",
            "EhUKCGZyYW1lX2lkGAcgASgJSAOIAQFCCQoHX3NlYXRpZEIOCgxfcGxheWVy",
            "X2luZm9CEAoOX3BsYXllcl9zdGF0dXNCCwoJX2ZyYW1lX2lkIpUBCg9Db2xv",
            "clNpdERvd25SU1ASHwoEY29kZRgBIAEoDjIMLlNpdERvd25Db2RlSACIAQES",
            "EgoFY2hpcHMYAiABKANIAYgBARIqCgtzZWF0X3N0YXR1cxgDIAEoCzIQLkNv",
            "bG9yU2VhdFN0YXR1c0gCiAEBQgcKBV9jb2RlQggKBl9jaGlwc0IOCgxfc2Vh",
            "dF9zdGF0dXMiWQoRQ29sb3JMZWF2ZUdhbWVSRVESEgoFbGVhdmUYASABKAhI",
            "AIgBARIXCgpsZWF2ZV90eXBlGAIgASgFSAGIAQFCCAoGX2xlYXZlQg0KC19s",
            "ZWF2ZV90eXBlIk0KEUNvbG9yTGVhdmVHYW1lUlNQEhEKBGNvZGUYASABKAVI",
            "AIgBARISCgVsZWF2ZRgCIAEoCEgBiAEBQgcKBV9jb2RlQggKBl9sZWF2ZSJN",
            "ChFDb2xvckxlYXZlR2FtZUJSQxITCgZzZWF0aWQYASABKAVIAIgBARIQCgN1",
            "aWQYAiABKAlIAYgBAUIJCgdfc2VhdGlkQgYKBF91aWQiWwoRQ29sb3JHYW1l",
            "U3RhcnRCUkMSFgoJbGVmdF90aW1lGAEgASgFSACIAQESFAoHZ2FtZV9pZBgC",
            "IAEoCUgBiAEBQgwKCl9sZWZ0X3RpbWVCCgoIX2dhbWVfaWQiYQoQQ29sb3JS",
            "b29tT3ZlckJSQxIbCgZwcm9maXQYASADKAsyCy5Qcm9maXRJbmZvEhwKD2lz",
            "X3Jvb21fc3RhcnRlZBgCIAEoCEgAiAEBQhIKEF9pc19yb29tX3N0YXJ0ZWQi",
            "pAMKEkNvbG9yUGxheWluZ1N0YXR1cxISCgVzdGFnZRgBIAEoBUgAiAEBEhwK",
            "D3N0YWdlX2xlZnRfdGltZRgCIAEoBUgBiAEBEh8KEnRvdGFsX3BsYXllcl9j",
            "b3VudBgDIAEoBUgCiAEBEikKCnNlbGZfc2VhdHMYBCABKAsyEC5Db2xvclNl",
            "YXRTdGF0dXNIA4gBARIXCgpnYW1lX2NvdW50GAUgASgFSASIAQESLwoScmVj",
            "ZW50X2dhbWVfcmVzdWx0GAYgASgLMg4uQ29sb3JHYW1lRGljZUgFiAEBEi0K",
            "FHJlY2VudF9yZXdhcmRfcmVzdWx0GAcgAygLMg8uQ29sb3JCb2FyZEluZm8S",
            "LQoUYm9hcmRfYmV0dGluZ19zdGF0dXMYCCADKAsyDy5Db2xvckJvYXJkSW5m",
            "b0IICgZfc3RhZ2VCEgoQX3N0YWdlX2xlZnRfdGltZUIVChNfdG90YWxfcGxh",
            "eWVyX2NvdW50Qg0KC19zZWxmX3NlYXRzQg0KC19nYW1lX2NvdW50QhUKE19y",
            "ZWNlbnRfZ2FtZV9yZXN1bHQirgEKD0NvbG9yUm9vbVN0YXR1cxIwCg5wbGF5",
            "aW5nX3N0YXR1cxgBIAEoCzITLkNvbG9yUGxheWluZ1N0YXR1c0gAiAEBEhcK",
            "CmlzX3N0YXJ0ZWQYAiABKAhIAYgBARIbCg5yb29tX2xlZnRfdGltZRgDIAEo",
            "BUgCiAEBQhEKD19wbGF5aW5nX3N0YXR1c0INCgtfaXNfc3RhcnRlZEIRCg9f",
            "cm9vbV9sZWZ0X3RpbWUiFwoVQ29sb3JPYnNlcnZlcnNMaXN0UkVRIjYKFUNv",
            "bG9yT2JzZXJ2ZXJzTGlzdFJTUBIdCglvYnNlcnZlcnMYASADKAsyCi5Vc2Vy",
            "QnJpZWYiNwoVQ29sb3JFeGNoYW5nZUNoaXBzUkVREhMKBmFtb3VudBgBIAEo",
            "A0gAiAEBQgkKB19hbW91bnQiMwoVQ29sb3JFeGNoYW5nZUNoaXBzUlNQEhEK",
            "BGNvZGUYASABKAVIAIgBAUIHCgVfY29kZSIVChNDb2xvclJlYnV5Tm90aWZ5",
            "UlNQIlUKFUNvbG9yRXhjaGFuZ2VDaGlwc0JSQxITCgZzZWF0aWQYASABKAVI",
            "AIgBARISCgVjaGlwcxgCIAEoA0gBiAEBQgkKB19zZWF0aWRCCAoGX2NoaXBz",
            "IhQKEkNvbG9yR2FtZUlETGlzdFJFUSJDChJDb2xvckdhbWVJRExpc3RSU1AS",
            "DwoHZ2FtZV9pZBgBIAMoCRISCgV0b3RhbBgCIAEoBUgAiAEBQggKBl90b3Rh",
            "bCJGCgtDb2xvckJldFJFURIoCgpwbGF5ZXJfYmV0GAEgASgLMg8uQ29sb3JC",
            "b2FyZEluZm9IAIgBAUINCgtfcGxheWVyX2JldCKMAQoLQ29sb3JCZXRSU1AS",
            "EQoEY29kZRgBIAEoBUgAiAEBEikKC3RvdGFsX21vbmV5GAIgASgLMg8uQ29s",
            "b3JCb2FyZEluZm9IAYgBARIXCgpsZWZ0X21vbmV5GAMgASgDSAKIAQFCBwoF",
            "X2NvZGVCDgoMX3RvdGFsX21vbmV5Qg0KC19sZWZ0X21vbmV5IlAKC0NvbG9y",
            "QmV0QlJDEhwKFHJlY2VudF9iZXR0aW5nX2luZGV4GAEgAygFEiMKCmJvYXJk",
            "X2luZm8YAiADKAsyDy5Db2xvckJvYXJkSW5mbyIOCgxDb2xvclVuZG9SRVEi",
            "jQEKDENvbG9yVW5kb1JTUBIRCgRjb2RlGAEgASgFSACIAQESKQoLdG90YWxf",
            "bW9uZXkYAiABKAsyDy5Db2xvckJvYXJkSW5mb0gBiAEBEhcKCmxlZnRfbW9u",
            "ZXkYAyABKANIAogBAUIHCgVfY29kZUIOCgxfdG90YWxfbW9uZXlCDQoLX2xl",
            "ZnRfbW9uZXkiEQoPQ29sb3JVbmRvQWxsUkVRInsKD0NvbG9yVW5kb0FsbFJT",
            "UBIRCgRjb2RlGAEgASgFSACIAQESJAoLdG90YWxfbW9uZXkYAiADKAsyDy5D",
            "b2xvckJvYXJkSW5mbxIXCgpsZWZ0X21vbmV5GAMgASgDSAGIAQFCBwoFX2Nv",
            "ZGVCDQoLX2xlZnRfbW9uZXkiFQoTQ29sb3JIaXN0b3J5SW5mb1JFUSLxAQoT",
            "Q29sb3JIaXN0b3J5SW5mb1JTUBIkCgxoaXN0b3J5X2luZm8YASADKAsyDi5D",
            "b2xvckdhbWVEaWNlEh0KEHRvdGFsX2dhbWVfY291bnQYAiABKAVIAIgBARIb",
            "Cg5yb29tX2xlZnRfdGltZRgDIAEoA0gBiAEBEiAKE3BsYXllcl90b3RhbF9w",
            "cm9maXQYBCABKANIAogBARIWCg5oaXN0b3J5X3Byb2ZpdBgFIAMoA0ITChFf",
            "dG90YWxfZ2FtZV9jb3VudEIRCg9fcm9vbV9sZWZ0X3RpbWVCFgoUX3BsYXll",
            "cl90b3RhbF9wcm9maXQiqgIKFkNvbG9yR2FtZURpY2VSZXN1bHRCUkMSIgoF",
            "ZGljZXMYASABKAsyDi5Db2xvckdhbWVEaWNlSACIAQESHAoPc3RhZ2VfbGVm",
            "dF90aW1lGAIgASgFSAGIAQESJgoNcmV3YXJkX3Jlc3VsdBgDIAMoCzIPLkNv",
            "bG9yQm9hcmRJbmZvEhYKCW93bl9jaGlwcxgEIAEoA0gCiAEBEhsKDmhhc19i",
            "aWdfcmV3YXJkGAUgASgISAOIAQESHQoQYmlnX3Jld2FyZF9jaGlwcxgGIAEo",
            "A0gEiAEBQggKBl9kaWNlc0ISChBfc3RhZ2VfbGVmdF90aW1lQgwKCl9vd25f",
            "Y2hpcHNCEQoPX2hhc19iaWdfcmV3YXJkQhMKEV9iaWdfcmV3YXJkX2NoaXBz",
            "IpUBCg9Db2xvckdhbWVSZXN1bHQSEgoKZGljZV9jb2xvchgBIAMoBRIUCgxi",
            "b2FyZF9wcm9maXQYAiADKAMSGQoMdG90YWxfcHJvZml0GAMgASgDSACIAQES",
            "GgoNdG90YWxfYmV0dGluZxgEIAEoA0gBiAEBQg8KDV90b3RhbF9wcm9maXRC",
            "EAoOX3RvdGFsX2JldHRpbmcirwEKDUNvbG9yUmFua0luZm8SEQoEcmFuaxgB",
            "IAEoBUgAiAEBEhAKA3VpZBgCIAEoCUgBiAEBEhEKBG5hbWUYAyABKAlIAogB",
            "ARIXCgpoZWFkaW1ndXJsGAQgASgJSAOIAQESFgoJdG90YWxfYmV0GAUgASgD",
            "SASIAQFCBwoFX3JhbmtCBgoEX3VpZEIHCgVfbmFtZUINCgtfaGVhZGltZ3Vy",
            "bEIMCgpfdG90YWxfYmV0IqgBChBDb2xvcldlZWtSYW5rUkVREhYKCXdlZWtf",
            "dHlwZRgBIAEoBUgAiAEBEhMKBmNsdWJpZBgCIAEoCUgBiAEBEhMKBnJvb21p",
            "ZBgDIAEoCUgCiAEBEhsKDm5lZWRfc2VsZl9yYW5rGAQgASgISAOIAQFCDAoK",
            "X3dlZWtfdHlwZUIJCgdfY2x1YmlkQgkKB19yb29taWRCEQoPX25lZWRfc2Vs",
            "Zl9yYW5rIrMDChBDb2xvcldlZWtSYW5rUlNQEhEKBGNvZGUYASABKAVIAIgB",
            "ARIXCgpzdGFydF90aW1lGAIgASgDSAGIAQESFQoIZW5kX3RpbWUYAyABKANI",
            "AogBARIhCglyYW5rX2luZm8YBCADKAsyDi5Db2xvclJhbmtJbmZvEiYKCXNl",
            "bGZfaW5mbxgFIAEoCzIOLkNvbG9yUmFua0luZm9IA4gBARITCgZyb29taWQY",
            "BiABKAlIBIgBARIWCgl3ZWVrX3R5cGUYByABKAVIBYgBARIWCgliZWdpbl9k",
            "YXkYCCABKAlIBogBARIUCgdlbmRfZGF5GAkgASgJSAeIAQESFwoKdXRjX29m",
            "ZnNldBgKIAEoCUgIiAEBEhgKC3RpbWV6b25lX2lkGAsgASgJSAmIAQFCBwoF",
            "X2NvZGVCDQoLX3N0YXJ0X3RpbWVCCwoJX2VuZF90aW1lQgwKCl9zZWxmX2lu",
            "Zm9CCQoHX3Jvb21pZEIMCgpfd2Vla190eXBlQgwKCl9iZWdpbl9kYXlCCgoI",
            "X2VuZF9kYXlCDQoLX3V0Y19vZmZzZXRCDgoMX3RpbWV6b25lX2lkIk0KE0Nv",
            "bG9yUGxheWVyQ291bnRCUkMSHwoSdG90YWxfcGxheWVyX2NvdW50GAEgASgF",
            "SACIAQFCFQoTX3RvdGFsX3BsYXllcl9jb3VudCI6ChRDb2xvckRpc21pc3NU",
            "YWJsZUJSQxIVCgh0YWJsZV9pZBgBIAEoBUgAiAEBQgsKCV90YWJsZV9pZEIa",
            "WgcvcGJwcGdvqgIOVGV4YXMuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Texas.Protocol.PreBaseReflection.Descriptor, global::Texas.Protocol.BaseReflection.Descriptor, global::Texas.Protocol.PineReflection.Descriptor, global::Texas.Protocol.PreBase1Reflection.Descriptor, global::Texas.Protocol.Pb3Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorRateSetting), global::Texas.Protocol.ColorRateSetting.Parser, new[]{ "OneColorRate", "TwoColorRate", "ThreeColorRate" }, new[]{ "OneColorRate", "TwoColorRate", "ThreeColorRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorBetSetting), global::Texas.Protocol.ColorBetSetting.Parser, new[]{ "MinBet", "MiddleBet", "HighBet" }, new[]{ "MinBet", "MiddleBet", "HighBet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorBoardInfo), global::Texas.Protocol.ColorBoardInfo.Parser, new[]{ "BoardIndex", "Money" }, new[]{ "BoardIndex", "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorGameDice), global::Texas.Protocol.ColorGameDice.Parser, new[]{ "FirstDiceColor", "SecondDiceColor", "ThirdDiceColor" }, new[]{ "FirstDiceColor", "SecondDiceColor", "ThirdDiceColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorRoomInfo), global::Texas.Protocol.ColorRoomInfo.Parser, new[]{ "RoomName", "Blind", "MinBuyin", "MaxBuyin", "MinStack", "Feepoint", "Feecap", "CreatorUserId", "Clubid", "Leagueid", "SuperLeagueid", "SuperLeagueType", "OwnerIcon", "OwnerName", "Ownerid", "OwnerVipLevel", "Region", "Platform", "ClubName", "ClubOwnerid", "ClubIcon", "OperationTime", "RoomTime", "SeatNum", "AutoStart", "RoomType", "RoomMode", "GameMode", "Timezone", "Roomid", "Official", "Passwd", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "Moduleid", "MultiOpid", "Tempid", "GpsLimit", "IpLimit", "ForbiddenChat", "PasswdLimit", "IsCaptcha", "IsBanPc", "IsCheckMail", "GpsDistanceLimit", "CreateClubid", "ForbiddenChatMode", "RoomVersion", "CalltimeMinutes", "RateSettingType", "RateSetting", "BetSetting" }, new[]{ "RoomName", "Blind", "MinBuyin", "MaxBuyin", "MinStack", "Feepoint", "Feecap", "CreatorUserId", "Clubid", "Leagueid", "SuperLeagueid", "SuperLeagueType", "OwnerIcon", "OwnerName", "Ownerid", "OwnerVipLevel", "Region", "Platform", "ClubName", "ClubOwnerid", "ClubIcon", "OperationTime", "RoomTime", "SeatNum", "AutoStart", "RoomType", "RoomMode", "GameMode", "Timezone", "Roomid", "Official", "Passwd", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "Moduleid", "MultiOpid", "Tempid", "GpsLimit", "IpLimit", "ForbiddenChat", "PasswdLimit", "IsCaptcha", "IsBanPc", "IsCheckMail", "GpsDistanceLimit", "CreateClubid", "ForbiddenChatMode", "RoomVersion", "CalltimeMinutes", "RateSettingType", "RateSetting", "BetSetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CreateColorRoomREQ), global::Texas.Protocol.CreateColorRoomREQ.Parser, new[]{ "RoomName", "Blind", "MinBuyin", "MaxBuyin", "MinStack", "Feepoint", "Feecap", "CreatorUserId", "Clubid", "Leagueid", "SuperLeagueid", "SuperLeagueType", "OperationTime", "RoomTime", "SeatNum", "AutoStart", "RoomType", "GameMode", "Timezone", "Roomid", "DerivedRoomid", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "Moduleid", "MultiOpid", "CanUse", "GpsLimit", "IpLimit", "ForbiddenChat", "PasswdLimit", "IsCaptcha", "IsBanPc", "IsCheckMail", "ForbiddenChatMode", "CalltimeMinutes", "RateSettingType", "BetSetting", "BanClub", "BanCountry" }, new[]{ "RoomName", "Blind", "MinBuyin", "MaxBuyin", "MinStack", "Feepoint", "Feecap", "CreatorUserId", "Clubid", "Leagueid", "SuperLeagueid", "SuperLeagueType", "OperationTime", "RoomTime", "SeatNum", "AutoStart", "RoomType", "GameMode", "Timezone", "Roomid", "DerivedRoomid", "IsAutoDelayRoomOver", "AutoDelayRoomOverTimes", "IsAutoCreateRoom", "Moduleid", "MultiOpid", "CanUse", "GpsLimit", "IpLimit", "ForbiddenChat", "PasswdLimit", "IsCaptcha", "IsBanPc", "IsCheckMail", "ForbiddenChatMode", "CalltimeMinutes", "RateSettingType", "BetSetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.CreateColorRoomRSP), global::Texas.Protocol.CreateColorRoomRSP.Parser, new[]{ "Code", "Reason", "ColorInfo" }, new[]{ "Code", "Reason", "ColorInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorSitDownREQ), global::Texas.Protocol.ColorSitDownREQ.Parser, new[]{ "Chips" }, new[]{ "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorStandUpREQ), global::Texas.Protocol.ColorStandUpREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorStandUpRSP), global::Texas.Protocol.ColorStandUpRSP.Parser, new[]{ "Code" }, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorPlayerInfo), global::Texas.Protocol.ColorPlayerInfo.Parser, new[]{ "Name", "IconUrl", "Uid", "Clubid", "ClubName", "VipLevel", "Level", "Country", "GpsLon", "GpsLat", "WaitingStatus", "Certification" }, new[]{ "Name", "IconUrl", "Uid", "Clubid", "ClubName", "VipLevel", "Level", "Country", "GpsLon", "GpsLat", "WaitingStatus", "Certification" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorPlayerGamingStatus), global::Texas.Protocol.ColorPlayerGamingStatus.Parser, new[]{ "Chips", "IsPlaying", "PlayerBettingInfo" }, new[]{ "Chips", "IsPlaying" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorSeatStatus), global::Texas.Protocol.ColorSeatStatus.Parser, new[]{ "Seatid", "PlayerInfo", "PlayerStatus", "FrameId" }, new[]{ "Seatid", "PlayerInfo", "PlayerStatus", "FrameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorSitDownRSP), global::Texas.Protocol.ColorSitDownRSP.Parser, new[]{ "Code", "Chips", "SeatStatus" }, new[]{ "Code", "Chips", "SeatStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorLeaveGameREQ), global::Texas.Protocol.ColorLeaveGameREQ.Parser, new[]{ "Leave", "LeaveType" }, new[]{ "Leave", "LeaveType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorLeaveGameRSP), global::Texas.Protocol.ColorLeaveGameRSP.Parser, new[]{ "Code", "Leave" }, new[]{ "Code", "Leave" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorLeaveGameBRC), global::Texas.Protocol.ColorLeaveGameBRC.Parser, new[]{ "Seatid", "Uid" }, new[]{ "Seatid", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorGameStartBRC), global::Texas.Protocol.ColorGameStartBRC.Parser, new[]{ "LeftTime", "GameId" }, new[]{ "LeftTime", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorRoomOverBRC), global::Texas.Protocol.ColorRoomOverBRC.Parser, new[]{ "Profit", "IsRoomStarted" }, new[]{ "IsRoomStarted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorPlayingStatus), global::Texas.Protocol.ColorPlayingStatus.Parser, new[]{ "Stage", "StageLeftTime", "TotalPlayerCount", "SelfSeats", "GameCount", "RecentGameResult", "RecentRewardResult", "BoardBettingStatus" }, new[]{ "Stage", "StageLeftTime", "TotalPlayerCount", "SelfSeats", "GameCount", "RecentGameResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorRoomStatus), global::Texas.Protocol.ColorRoomStatus.Parser, new[]{ "PlayingStatus", "IsStarted", "RoomLeftTime" }, new[]{ "PlayingStatus", "IsStarted", "RoomLeftTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorObserversListREQ), global::Texas.Protocol.ColorObserversListREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorObserversListRSP), global::Texas.Protocol.ColorObserversListRSP.Parser, new[]{ "Observers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorExchangeChipsREQ), global::Texas.Protocol.ColorExchangeChipsREQ.Parser, new[]{ "Amount" }, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorExchangeChipsRSP), global::Texas.Protocol.ColorExchangeChipsRSP.Parser, new[]{ "Code" }, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorRebuyNotifyRSP), global::Texas.Protocol.ColorRebuyNotifyRSP.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorExchangeChipsBRC), global::Texas.Protocol.ColorExchangeChipsBRC.Parser, new[]{ "Seatid", "Chips" }, new[]{ "Seatid", "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorGameIDListREQ), global::Texas.Protocol.ColorGameIDListREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorGameIDListRSP), global::Texas.Protocol.ColorGameIDListRSP.Parser, new[]{ "GameId", "Total" }, new[]{ "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorBetREQ), global::Texas.Protocol.ColorBetREQ.Parser, new[]{ "PlayerBet" }, new[]{ "PlayerBet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorBetRSP), global::Texas.Protocol.ColorBetRSP.Parser, new[]{ "Code", "TotalMoney", "LeftMoney" }, new[]{ "Code", "TotalMoney", "LeftMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorBetBRC), global::Texas.Protocol.ColorBetBRC.Parser, new[]{ "RecentBettingIndex", "BoardInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorUndoREQ), global::Texas.Protocol.ColorUndoREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorUndoRSP), global::Texas.Protocol.ColorUndoRSP.Parser, new[]{ "Code", "TotalMoney", "LeftMoney" }, new[]{ "Code", "TotalMoney", "LeftMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorUndoAllREQ), global::Texas.Protocol.ColorUndoAllREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorUndoAllRSP), global::Texas.Protocol.ColorUndoAllRSP.Parser, new[]{ "Code", "TotalMoney", "LeftMoney" }, new[]{ "Code", "LeftMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorHistoryInfoREQ), global::Texas.Protocol.ColorHistoryInfoREQ.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorHistoryInfoRSP), global::Texas.Protocol.ColorHistoryInfoRSP.Parser, new[]{ "HistoryInfo", "TotalGameCount", "RoomLeftTime", "PlayerTotalProfit", "HistoryProfit" }, new[]{ "TotalGameCount", "RoomLeftTime", "PlayerTotalProfit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorGameDiceResultBRC), global::Texas.Protocol.ColorGameDiceResultBRC.Parser, new[]{ "Dices", "StageLeftTime", "RewardResult", "OwnChips", "HasBigReward", "BigRewardChips" }, new[]{ "Dices", "StageLeftTime", "OwnChips", "HasBigReward", "BigRewardChips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorGameResult), global::Texas.Protocol.ColorGameResult.Parser, new[]{ "DiceColor", "BoardProfit", "TotalProfit", "TotalBetting" }, new[]{ "TotalProfit", "TotalBetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorRankInfo), global::Texas.Protocol.ColorRankInfo.Parser, new[]{ "Rank", "Uid", "Name", "Headimgurl", "TotalBet" }, new[]{ "Rank", "Uid", "Name", "Headimgurl", "TotalBet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorWeekRankREQ), global::Texas.Protocol.ColorWeekRankREQ.Parser, new[]{ "WeekType", "Clubid", "Roomid", "NeedSelfRank" }, new[]{ "WeekType", "Clubid", "Roomid", "NeedSelfRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorWeekRankRSP), global::Texas.Protocol.ColorWeekRankRSP.Parser, new[]{ "Code", "StartTime", "EndTime", "RankInfo", "SelfInfo", "Roomid", "WeekType", "BeginDay", "EndDay", "UtcOffset", "TimezoneId" }, new[]{ "Code", "StartTime", "EndTime", "SelfInfo", "Roomid", "WeekType", "BeginDay", "EndDay", "UtcOffset", "TimezoneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorPlayerCountBRC), global::Texas.Protocol.ColorPlayerCountBRC.Parser, new[]{ "TotalPlayerCount" }, new[]{ "TotalPlayerCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texas.Protocol.ColorDismissTableBRC), global::Texas.Protocol.ColorDismissTableBRC.Parser, new[]{ "TableId" }, new[]{ "TableId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ColorRateSetting : pb::IMessage<ColorRateSetting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRateSetting> _parser = new pb::MessageParser<ColorRateSetting>(() => new ColorRateSetting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorRateSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRateSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRateSetting(ColorRateSetting other) : this() {
      _hasBits0 = other._hasBits0;
      oneColorRate_ = other.oneColorRate_;
      twoColorRate_ = other.twoColorRate_;
      threeColorRate_ = other.threeColorRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRateSetting Clone() {
      return new ColorRateSetting(this);
    }

    /// <summary>Field number for the "one_color_rate" field.</summary>
    public const int OneColorRateFieldNumber = 1;
    private readonly static int OneColorRateDefaultValue = 0;

    private int oneColorRate_;
    /// <summary>
    ///倍率設定 100代表1倍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OneColorRate {
      get { if ((_hasBits0 & 1) != 0) { return oneColorRate_; } else { return OneColorRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oneColorRate_ = value;
      }
    }
    /// <summary>Gets whether the "one_color_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOneColorRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "one_color_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOneColorRate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "two_color_rate" field.</summary>
    public const int TwoColorRateFieldNumber = 2;
    private readonly static int TwoColorRateDefaultValue = 0;

    private int twoColorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TwoColorRate {
      get { if ((_hasBits0 & 2) != 0) { return twoColorRate_; } else { return TwoColorRateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        twoColorRate_ = value;
      }
    }
    /// <summary>Gets whether the "two_color_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTwoColorRate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "two_color_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTwoColorRate() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "three_color_rate" field.</summary>
    public const int ThreeColorRateFieldNumber = 3;
    private readonly static int ThreeColorRateDefaultValue = 0;

    private int threeColorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThreeColorRate {
      get { if ((_hasBits0 & 4) != 0) { return threeColorRate_; } else { return ThreeColorRateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        threeColorRate_ = value;
      }
    }
    /// <summary>Gets whether the "three_color_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThreeColorRate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "three_color_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThreeColorRate() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorRateSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorRateSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OneColorRate != other.OneColorRate) return false;
      if (TwoColorRate != other.TwoColorRate) return false;
      if (ThreeColorRate != other.ThreeColorRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOneColorRate) hash ^= OneColorRate.GetHashCode();
      if (HasTwoColorRate) hash ^= TwoColorRate.GetHashCode();
      if (HasThreeColorRate) hash ^= ThreeColorRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOneColorRate) {
        output.WriteRawTag(8);
        output.WriteInt32(OneColorRate);
      }
      if (HasTwoColorRate) {
        output.WriteRawTag(16);
        output.WriteInt32(TwoColorRate);
      }
      if (HasThreeColorRate) {
        output.WriteRawTag(24);
        output.WriteInt32(ThreeColorRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOneColorRate) {
        output.WriteRawTag(8);
        output.WriteInt32(OneColorRate);
      }
      if (HasTwoColorRate) {
        output.WriteRawTag(16);
        output.WriteInt32(TwoColorRate);
      }
      if (HasThreeColorRate) {
        output.WriteRawTag(24);
        output.WriteInt32(ThreeColorRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOneColorRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OneColorRate);
      }
      if (HasTwoColorRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TwoColorRate);
      }
      if (HasThreeColorRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreeColorRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorRateSetting other) {
      if (other == null) {
        return;
      }
      if (other.HasOneColorRate) {
        OneColorRate = other.OneColorRate;
      }
      if (other.HasTwoColorRate) {
        TwoColorRate = other.TwoColorRate;
      }
      if (other.HasThreeColorRate) {
        ThreeColorRate = other.ThreeColorRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OneColorRate = input.ReadInt32();
            break;
          }
          case 16: {
            TwoColorRate = input.ReadInt32();
            break;
          }
          case 24: {
            ThreeColorRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OneColorRate = input.ReadInt32();
            break;
          }
          case 16: {
            TwoColorRate = input.ReadInt32();
            break;
          }
          case 24: {
            ThreeColorRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorBetSetting : pb::IMessage<ColorBetSetting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorBetSetting> _parser = new pb::MessageParser<ColorBetSetting>(() => new ColorBetSetting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorBetSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetSetting(ColorBetSetting other) : this() {
      _hasBits0 = other._hasBits0;
      minBet_ = other.minBet_;
      middleBet_ = other.middleBet_;
      highBet_ = other.highBet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetSetting Clone() {
      return new ColorBetSetting(this);
    }

    /// <summary>Field number for the "min_bet" field.</summary>
    public const int MinBetFieldNumber = 1;
    private readonly static int MinBetDefaultValue = 0;

    private int minBet_;
    /// <summary>
    ///下注PP幣設定 100代表1PP幣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinBet {
      get { if ((_hasBits0 & 1) != 0) { return minBet_; } else { return MinBetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minBet_ = value;
      }
    }
    /// <summary>Gets whether the "min_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBet {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBet() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "middle_bet" field.</summary>
    public const int MiddleBetFieldNumber = 2;
    private readonly static int MiddleBetDefaultValue = 0;

    private int middleBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MiddleBet {
      get { if ((_hasBits0 & 2) != 0) { return middleBet_; } else { return MiddleBetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        middleBet_ = value;
      }
    }
    /// <summary>Gets whether the "middle_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMiddleBet {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "middle_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMiddleBet() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "high_bet" field.</summary>
    public const int HighBetFieldNumber = 3;
    private readonly static int HighBetDefaultValue = 0;

    private int highBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HighBet {
      get { if ((_hasBits0 & 4) != 0) { return highBet_; } else { return HighBetDefaultValue; } }
      set {
        _hasBits0 |= 4;
        highBet_ = value;
      }
    }
    /// <summary>Gets whether the "high_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighBet {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "high_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighBet() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorBetSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorBetSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinBet != other.MinBet) return false;
      if (MiddleBet != other.MiddleBet) return false;
      if (HighBet != other.HighBet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinBet) hash ^= MinBet.GetHashCode();
      if (HasMiddleBet) hash ^= MiddleBet.GetHashCode();
      if (HasHighBet) hash ^= HighBet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinBet) {
        output.WriteRawTag(8);
        output.WriteInt32(MinBet);
      }
      if (HasMiddleBet) {
        output.WriteRawTag(16);
        output.WriteInt32(MiddleBet);
      }
      if (HasHighBet) {
        output.WriteRawTag(24);
        output.WriteInt32(HighBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinBet) {
        output.WriteRawTag(8);
        output.WriteInt32(MinBet);
      }
      if (HasMiddleBet) {
        output.WriteRawTag(16);
        output.WriteInt32(MiddleBet);
      }
      if (HasHighBet) {
        output.WriteRawTag(24);
        output.WriteInt32(HighBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinBet) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinBet);
      }
      if (HasMiddleBet) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiddleBet);
      }
      if (HasHighBet) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighBet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorBetSetting other) {
      if (other == null) {
        return;
      }
      if (other.HasMinBet) {
        MinBet = other.MinBet;
      }
      if (other.HasMiddleBet) {
        MiddleBet = other.MiddleBet;
      }
      if (other.HasHighBet) {
        HighBet = other.HighBet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinBet = input.ReadInt32();
            break;
          }
          case 16: {
            MiddleBet = input.ReadInt32();
            break;
          }
          case 24: {
            HighBet = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinBet = input.ReadInt32();
            break;
          }
          case 16: {
            MiddleBet = input.ReadInt32();
            break;
          }
          case 24: {
            HighBet = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorBoardInfo : pb::IMessage<ColorBoardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorBoardInfo> _parser = new pb::MessageParser<ColorBoardInfo>(() => new ColorBoardInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorBoardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBoardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBoardInfo(ColorBoardInfo other) : this() {
      _hasBits0 = other._hasBits0;
      boardIndex_ = other.boardIndex_;
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBoardInfo Clone() {
      return new ColorBoardInfo(this);
    }

    /// <summary>Field number for the "board_index" field.</summary>
    public const int BoardIndexFieldNumber = 1;
    private readonly static int BoardIndexDefaultValue = 0;

    private int boardIndex_;
    /// <summary>
    ///
    ///board_index
    ///0 1 2
    ///3 4 5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoardIndex {
      get { if ((_hasBits0 & 1) != 0) { return boardIndex_; } else { return BoardIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        boardIndex_ = value;
      }
    }
    /// <summary>Gets whether the "board_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBoardIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "board_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBoardIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 2;
    private readonly static long MoneyDefaultValue = 0L;

    private long money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Money {
      get { if ((_hasBits0 & 2) != 0) { return money_; } else { return MoneyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        money_ = value;
      }
    }
    /// <summary>Gets whether the "money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoney {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoney() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorBoardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorBoardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoardIndex != other.BoardIndex) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBoardIndex) hash ^= BoardIndex.GetHashCode();
      if (HasMoney) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBoardIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(BoardIndex);
      }
      if (HasMoney) {
        output.WriteRawTag(16);
        output.WriteInt64(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBoardIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(BoardIndex);
      }
      if (HasMoney) {
        output.WriteRawTag(16);
        output.WriteInt64(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBoardIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardIndex);
      }
      if (HasMoney) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorBoardInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasBoardIndex) {
        BoardIndex = other.BoardIndex;
      }
      if (other.HasMoney) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoardIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Money = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BoardIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Money = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorGameDice : pb::IMessage<ColorGameDice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGameDice> _parser = new pb::MessageParser<ColorGameDice>(() => new ColorGameDice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorGameDice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameDice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameDice(ColorGameDice other) : this() {
      _hasBits0 = other._hasBits0;
      firstDiceColor_ = other.firstDiceColor_;
      secondDiceColor_ = other.secondDiceColor_;
      thirdDiceColor_ = other.thirdDiceColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameDice Clone() {
      return new ColorGameDice(this);
    }

    /// <summary>Field number for the "first_dice_color" field.</summary>
    public const int FirstDiceColorFieldNumber = 1;
    private readonly static int FirstDiceColorDefaultValue = 0;

    private int firstDiceColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FirstDiceColor {
      get { if ((_hasBits0 & 1) != 0) { return firstDiceColor_; } else { return FirstDiceColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        firstDiceColor_ = value;
      }
    }
    /// <summary>Gets whether the "first_dice_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstDiceColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "first_dice_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstDiceColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "second_dice_color" field.</summary>
    public const int SecondDiceColorFieldNumber = 2;
    private readonly static int SecondDiceColorDefaultValue = 0;

    private int secondDiceColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SecondDiceColor {
      get { if ((_hasBits0 & 2) != 0) { return secondDiceColor_; } else { return SecondDiceColorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        secondDiceColor_ = value;
      }
    }
    /// <summary>Gets whether the "second_dice_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecondDiceColor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "second_dice_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecondDiceColor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "third_dice_color" field.</summary>
    public const int ThirdDiceColorFieldNumber = 3;
    private readonly static int ThirdDiceColorDefaultValue = 0;

    private int thirdDiceColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThirdDiceColor {
      get { if ((_hasBits0 & 4) != 0) { return thirdDiceColor_; } else { return ThirdDiceColorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        thirdDiceColor_ = value;
      }
    }
    /// <summary>Gets whether the "third_dice_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThirdDiceColor {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "third_dice_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThirdDiceColor() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorGameDice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorGameDice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstDiceColor != other.FirstDiceColor) return false;
      if (SecondDiceColor != other.SecondDiceColor) return false;
      if (ThirdDiceColor != other.ThirdDiceColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFirstDiceColor) hash ^= FirstDiceColor.GetHashCode();
      if (HasSecondDiceColor) hash ^= SecondDiceColor.GetHashCode();
      if (HasThirdDiceColor) hash ^= ThirdDiceColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFirstDiceColor) {
        output.WriteRawTag(8);
        output.WriteInt32(FirstDiceColor);
      }
      if (HasSecondDiceColor) {
        output.WriteRawTag(16);
        output.WriteInt32(SecondDiceColor);
      }
      if (HasThirdDiceColor) {
        output.WriteRawTag(24);
        output.WriteInt32(ThirdDiceColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFirstDiceColor) {
        output.WriteRawTag(8);
        output.WriteInt32(FirstDiceColor);
      }
      if (HasSecondDiceColor) {
        output.WriteRawTag(16);
        output.WriteInt32(SecondDiceColor);
      }
      if (HasThirdDiceColor) {
        output.WriteRawTag(24);
        output.WriteInt32(ThirdDiceColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFirstDiceColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstDiceColor);
      }
      if (HasSecondDiceColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondDiceColor);
      }
      if (HasThirdDiceColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThirdDiceColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorGameDice other) {
      if (other == null) {
        return;
      }
      if (other.HasFirstDiceColor) {
        FirstDiceColor = other.FirstDiceColor;
      }
      if (other.HasSecondDiceColor) {
        SecondDiceColor = other.SecondDiceColor;
      }
      if (other.HasThirdDiceColor) {
        ThirdDiceColor = other.ThirdDiceColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FirstDiceColor = input.ReadInt32();
            break;
          }
          case 16: {
            SecondDiceColor = input.ReadInt32();
            break;
          }
          case 24: {
            ThirdDiceColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FirstDiceColor = input.ReadInt32();
            break;
          }
          case 16: {
            SecondDiceColor = input.ReadInt32();
            break;
          }
          case 24: {
            ThirdDiceColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///房間詳細資訊，幾本上跟CreateColorRoomParam差不多，多了幾個欄位
  /// </summary>
  public sealed partial class ColorRoomInfo : pb::IMessage<ColorRoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRoomInfo> _parser = new pb::MessageParser<ColorRoomInfo>(() => new ColorRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomInfo(ColorRoomInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      roomName_ = other.roomName_;
      blind_ = other.blind_;
      minBuyin_ = other.minBuyin_;
      maxBuyin_ = other.maxBuyin_;
      minStack_ = other.minStack_;
      feepoint_ = other.feepoint_;
      feecap_ = other.feecap_;
      creatorUserId_ = other.creatorUserId_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      ownerIcon_ = other.ownerIcon_;
      ownerName_ = other.ownerName_;
      ownerid_ = other.ownerid_;
      ownerVipLevel_ = other.ownerVipLevel_;
      region_ = other.region_;
      platform_ = other.platform_;
      clubName_ = other.clubName_;
      clubOwnerid_ = other.clubOwnerid_;
      clubIcon_ = other.clubIcon_;
      operationTime_ = other.operationTime_;
      roomTime_ = other.roomTime_;
      seatNum_ = other.seatNum_;
      autoStart_ = other.autoStart_;
      roomType_ = other.roomType_;
      roomMode_ = other.roomMode_;
      gameMode_ = other.gameMode_;
      timezone_ = other.timezone_;
      roomid_ = other.roomid_;
      official_ = other.official_;
      passwd_ = other.passwd_;
      isAutoDelayRoomOver_ = other.isAutoDelayRoomOver_;
      autoDelayRoomOverTimes_ = other.autoDelayRoomOverTimes_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      moduleid_ = other.moduleid_;
      multiOpid_ = other.multiOpid_;
      tempid_ = other.tempid_;
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      forbiddenChat_ = other.forbiddenChat_;
      passwdLimit_ = other.passwdLimit_;
      isCaptcha_ = other.isCaptcha_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      gpsDistanceLimit_ = other.gpsDistanceLimit_;
      createClubid_ = other.createClubid_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      roomVersion_ = other.roomVersion_;
      calltimeMinutes_ = other.calltimeMinutes_;
      rateSettingType_ = other.rateSettingType_;
      rateSetting_ = other.rateSetting_ != null ? other.rateSetting_.Clone() : null;
      betSetting_ = other.betSetting_ != null ? other.betSetting_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomInfo Clone() {
      return new ColorRoomInfo(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    /// <summary>
    ///房間名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 2;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    /// <summary>
    ///買入相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 1) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "min_buyin" field.</summary>
    public const int MinBuyinFieldNumber = 3;
    private readonly static long MinBuyinDefaultValue = 0L;

    private long minBuyin_;
    /// <summary>
    ///最小買入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBuyin {
      get { if ((_hasBits0 & 2) != 0) { return minBuyin_; } else { return MinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBuyin {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBuyin() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_buyin" field.</summary>
    public const int MaxBuyinFieldNumber = 4;
    private readonly static long MaxBuyinDefaultValue = 0L;

    private long maxBuyin_;
    /// <summary>
    ///最大買入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxBuyin {
      get { if ((_hasBits0 & 4) != 0) { return maxBuyin_; } else { return MaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBuyin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBuyin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_stack" field.</summary>
    public const int MinStackFieldNumber = 5;
    private readonly static long MinStackDefaultValue = 0L;

    private long minStack_;
    /// <summary>
    ///籌碼最底須保持在min_stack以上，否則跳出彈窗要求補碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinStack {
      get { if ((_hasBits0 & 8) != 0) { return minStack_; } else { return MinStackDefaultValue; } }
      set {
        _hasBits0 |= 8;
        minStack_ = value;
      }
    }
    /// <summary>Gets whether the "min_stack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinStack {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "min_stack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinStack() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 6;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    /// <summary>
    ///服務費相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 16) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 16;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "feecap" field.</summary>
    public const int FeecapFieldNumber = 7;
    private readonly static int FeecapDefaultValue = 0;

    private int feecap_;
    /// <summary>
    ///服務費封頂
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feecap {
      get { if ((_hasBits0 & 32) != 0) { return feecap_; } else { return FeecapDefaultValue; } }
      set {
        _hasBits0 |= 32;
        feecap_ = value;
      }
    }
    /// <summary>Gets whether the "feecap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeecap {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "feecap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeecap() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "creator_user_id" field.</summary>
    public const int CreatorUserIdFieldNumber = 8;
    private readonly static long CreatorUserIdDefaultValue = 0L;

    private long creatorUserId_;
    /// <summary>
    ///創辦人、俱樂部屬性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CreatorUserId {
      get { if ((_hasBits0 & 64) != 0) { return creatorUserId_; } else { return CreatorUserIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        creatorUserId_ = value;
      }
    }
    /// <summary>Gets whether the "creator_user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreatorUserId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "creator_user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreatorUserId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 9;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///玩家所屬俱樂部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 10;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    /// <summary>
    ///玩家所屬聯盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 128) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 128;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 11;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    /// <summary>
    ///牌桌所屬超級聯盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 256) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 12;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    ///1表示非PPST
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits0 & 512) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "owner_icon" field.</summary>
    public const int OwnerIconFieldNumber = 13;
    private readonly static string OwnerIconDefaultValue = "";

    private string ownerIcon_;
    /// <summary>
    ///由RoomRouter填寫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerIcon {
      get { return ownerIcon_ ?? OwnerIconDefaultValue; }
      set {
        ownerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerIcon {
      get { return ownerIcon_ != null; }
    }
    /// <summary>Clears the value of the "owner_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerIcon() {
      ownerIcon_ = null;
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 14;
    private readonly static string OwnerNameDefaultValue = "";

    private string ownerName_;
    /// <summary>
    ///房主名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OwnerName {
      get { return ownerName_ ?? OwnerNameDefaultValue; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerName {
      get { return ownerName_ != null; }
    }
    /// <summary>Clears the value of the "owner_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerName() {
      ownerName_ = null;
    }

    /// <summary>Field number for the "ownerid" field.</summary>
    public const int OwneridFieldNumber = 15;
    private readonly static long OwneridDefaultValue = 0L;

    private long ownerid_;
    /// <summary>
    ///房主id，可不填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Ownerid {
      get { if ((_hasBits0 & 1024) != 0) { return ownerid_; } else { return OwneridDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ownerid_ = value;
      }
    }
    /// <summary>Gets whether the "ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerid {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerid() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "owner_vip_level" field.</summary>
    public const int OwnerVipLevelFieldNumber = 16;
    private readonly static uint OwnerVipLevelDefaultValue = 0;

    private uint ownerVipLevel_;
    /// <summary>
    ///房主VIP訊息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OwnerVipLevel {
      get { if ((_hasBits0 & 2048) != 0) { return ownerVipLevel_; } else { return OwnerVipLevelDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        ownerVipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "owner_vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerVipLevel {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "owner_vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerVipLevel() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 17;
    private readonly static int RegionDefaultValue = 0;

    private int region_;
    /// <summary>
    ///房间所属的区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Region {
      get { if ((_hasBits0 & 4096) != 0) { return region_; } else { return RegionDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        region_ = value;
      }
    }
    /// <summary>Gets whether the "region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegion {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegion() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 18;
    private readonly static string PlatformDefaultValue = "";

    private string platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Platform {
      get { return platform_ ?? PlatformDefaultValue; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlatform {
      get { return platform_ != null; }
    }
    /// <summary>Clears the value of the "platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlatform() {
      platform_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 19;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "club_ownerid" field.</summary>
    public const int ClubOwneridFieldNumber = 20;
    private readonly static long ClubOwneridDefaultValue = 0L;

    private long clubOwnerid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ClubOwnerid {
      get { if ((_hasBits0 & 8192) != 0) { return clubOwnerid_; } else { return ClubOwneridDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        clubOwnerid_ = value;
      }
    }
    /// <summary>Gets whether the "club_ownerid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubOwnerid {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "club_ownerid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubOwnerid() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "club_icon" field.</summary>
    public const int ClubIconFieldNumber = 21;
    private readonly static string ClubIconDefaultValue = "";

    private string clubIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubIcon {
      get { return clubIcon_ ?? ClubIconDefaultValue; }
      set {
        clubIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubIcon {
      get { return clubIcon_ != null; }
    }
    /// <summary>Clears the value of the "club_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubIcon() {
      clubIcon_ = null;
    }

    /// <summary>Field number for the "operation_time" field.</summary>
    public const int OperationTimeFieldNumber = 22;
    private readonly static int OperationTimeDefaultValue = 0;

    private int operationTime_;
    /// <summary>
    ///房間基礎屬性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OperationTime {
      get { if ((_hasBits0 & 16384) != 0) { return operationTime_; } else { return OperationTimeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        operationTime_ = value;
      }
    }
    /// <summary>Gets whether the "operation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOperationTime {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "operation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOperationTime() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "room_time" field.</summary>
    public const int RoomTimeFieldNumber = 23;
    private readonly static int RoomTimeDefaultValue = 0;

    private int roomTime_;
    /// <summary>
    ///房間存活時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomTime {
      get { if ((_hasBits0 & 32768) != 0) { return roomTime_; } else { return RoomTimeDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        roomTime_ = value;
      }
    }
    /// <summary>Gets whether the "room_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomTime {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "room_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomTime() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 24;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    /// <summary>
    ///座位數量，最大只支持4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 65536) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "auto_start" field.</summary>
    public const int AutoStartFieldNumber = 25;
    private readonly static int AutoStartDefaultValue = 0;

    private int autoStart_;
    /// <summary>
    ///幾個人坐下可自動開始，-1表示需要手動開始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoStart {
      get { if ((_hasBits0 & 131072) != 0) { return autoStart_; } else { return AutoStartDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        autoStart_ = value;
      }
    }
    /// <summary>Gets whether the "auto_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoStart {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "auto_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoStart() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 26;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    /// <summary>
    ///房間模式，Color = 16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 262144) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "room_mode" field.</summary>
    public const int RoomModeFieldNumber = 27;
    private readonly static global::Texas.Protocol.RoomMode RoomModeDefaultValue = global::Texas.Protocol.RoomMode.None;

    private global::Texas.Protocol.RoomMode roomMode_;
    /// <summary>
    ///房間種類，CLUB_ROOM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomMode RoomMode {
      get { if ((_hasBits0 & 524288) != 0) { return roomMode_; } else { return RoomModeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        roomMode_ = value;
      }
    }
    /// <summary>Gets whether the "room_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomMode {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "room_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomMode() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 28;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    /// <summary>
    ///Color = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 1048576) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 29;
    private readonly static int TimezoneDefaultValue = 0;

    private int timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Timezone {
      get { if ((_hasBits0 & 2097152) != 0) { return timezone_; } else { return TimezoneDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        timezone_ = value;
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimezone {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimezone() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 30;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    /// <summary>
    ///由伺服器填寫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "official" field.</summary>
    public const int OfficialFieldNumber = 31;
    private readonly static bool OfficialDefaultValue = false;

    private bool official_;
    /// <summary>
    ///RoomRouter填寫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Official {
      get { if ((_hasBits0 & 4194304) != 0) { return official_; } else { return OfficialDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        official_ = value;
      }
    }
    /// <summary>Gets whether the "official" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOfficial {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "official" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOfficial() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 32;
    private readonly static string PasswdDefaultValue = "";

    private string passwd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Passwd {
      get { return passwd_ ?? PasswdDefaultValue; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "passwd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswd {
      get { return passwd_ != null; }
    }
    /// <summary>Clears the value of the "passwd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswd() {
      passwd_ = null;
    }

    /// <summary>Field number for the "is_auto_delay_room_over" field.</summary>
    public const int IsAutoDelayRoomOverFieldNumber = 33;
    private readonly static bool IsAutoDelayRoomOverDefaultValue = false;

    private bool isAutoDelayRoomOver_;
    /// <summary>
    ///自動延時、開桌相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoDelayRoomOver {
      get { if ((_hasBits0 & 8388608) != 0) { return isAutoDelayRoomOver_; } else { return IsAutoDelayRoomOverDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        isAutoDelayRoomOver_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_delay_room_over" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoDelayRoomOver {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_delay_room_over" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoDelayRoomOver() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "auto_delay_room_over_times" field.</summary>
    public const int AutoDelayRoomOverTimesFieldNumber = 34;
    private readonly static int AutoDelayRoomOverTimesDefaultValue = 0;

    private int autoDelayRoomOverTimes_;
    /// <summary>
    ///自动延时次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoDelayRoomOverTimes {
      get { if ((_hasBits0 & 16777216) != 0) { return autoDelayRoomOverTimes_; } else { return AutoDelayRoomOverTimesDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        autoDelayRoomOverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "auto_delay_room_over_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoDelayRoomOverTimes {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "auto_delay_room_over_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoDelayRoomOverTimes() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 35;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    /// <summary>
    ///是否自动开桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits0 & 33554432) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 36;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    ///模板??
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits0 & 67108864) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "multi_opid" field.</summary>
    public const int MultiOpidFieldNumber = 37;
    private readonly static string MultiOpidDefaultValue = "";

    private string multiOpid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MultiOpid {
      get { return multiOpid_ ?? MultiOpidDefaultValue; }
      set {
        multiOpid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "multi_opid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMultiOpid {
      get { return multiOpid_ != null; }
    }
    /// <summary>Clears the value of the "multi_opid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMultiOpid() {
      multiOpid_ = null;
    }

    /// <summary>Field number for the "tempid" field.</summary>
    public const int TempidFieldNumber = 38;
    private readonly static string TempidDefaultValue = "";

    private string tempid_;
    /// <summary>
    ///RoomRouter填寫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tempid {
      get { return tempid_ ?? TempidDefaultValue; }
      set {
        tempid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tempid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTempid {
      get { return tempid_ != null; }
    }
    /// <summary>Clears the value of the "tempid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTempid() {
      tempid_ = null;
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 39;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    /// <summary>
    ///限制功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 134217728) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 40;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    /// <summary>
    ///IP限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 268435456) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 41;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    /// <summary>
    ///是否禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits0 & 536870912) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 42;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    ///是否密码桌,与授权买入互斥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits0 & 1073741824) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "is_captcha" field.</summary>
    public const int IsCaptchaFieldNumber = 43;
    private readonly static bool IsCaptchaDefaultValue = false;

    private bool isCaptcha_;
    /// <summary>
    ///是否人机校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCaptcha {
      get { if ((_hasBits0 & -2147483648) != 0) { return isCaptcha_; } else { return IsCaptchaDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        isCaptcha_ = value;
      }
    }
    /// <summary>Gets whether the "is_captcha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCaptcha {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "is_captcha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCaptcha() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 44;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    /// <summary>
    ///禁止PC玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits1 & 1) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits1 |= 1;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 45;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    /// <summary>
    ///需要進行email檢查
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits1 & 2) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits1 |= 2;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "gps_distance_limit" field.</summary>
    public const int GpsDistanceLimitFieldNumber = 46;
    private readonly static int GpsDistanceLimitDefaultValue = 0;

    private int gpsDistanceLimit_;
    /// <summary>
    ///RoomRouter填寫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsDistanceLimit {
      get { if ((_hasBits1 & 4) != 0) { return gpsDistanceLimit_; } else { return GpsDistanceLimitDefaultValue; } }
      set {
        _hasBits1 |= 4;
        gpsDistanceLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_distance_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsDistanceLimit {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gps_distance_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsDistanceLimit() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "create_clubid" field.</summary>
    public const int CreateClubidFieldNumber = 47;
    private readonly static int CreateClubidDefaultValue = 0;

    private int createClubid_;
    /// <summary>
    ///牌桌所屬俱樂部
    ///勿跟clubid搞混，clubid表示玩家進入房間帶的俱樂部ID，退出房間會退到此俱樂部列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CreateClubid {
      get { if ((_hasBits1 & 8) != 0) { return createClubid_; } else { return CreateClubidDefaultValue; } }
      set {
        _hasBits1 |= 8;
        createClubid_ = value;
      }
    }
    /// <summary>Gets whether the "create_clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreateClubid {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "create_clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreateClubid() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 48;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits1 & 16) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits1 |= 16;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "room_version" field.</summary>
    public const int RoomVersionFieldNumber = 49;
    private readonly static int RoomVersionDefaultValue = 0;

    private int roomVersion_;
    /// <summary>
    ///房間版本代號，用於與前端做版本兼容檢測
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomVersion {
      get { if ((_hasBits1 & 32) != 0) { return roomVersion_; } else { return RoomVersionDefaultValue; } }
      set {
        _hasBits1 |= 32;
        roomVersion_ = value;
      }
    }
    /// <summary>Gets whether the "room_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomVersion {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "room_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomVersion() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "calltime_minutes" field.</summary>
    public const int CalltimeMinutesFieldNumber = 50;
    private readonly static int CalltimeMinutesDefaultValue = 0;

    private int calltimeMinutes_;
    /// <summary>
    ///Calltime時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalltimeMinutes {
      get { if ((_hasBits1 & 64) != 0) { return calltimeMinutes_; } else { return CalltimeMinutesDefaultValue; } }
      set {
        _hasBits1 |= 64;
        calltimeMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "calltime_minutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCalltimeMinutes {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "calltime_minutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCalltimeMinutes() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "rate_setting_type" field.</summary>
    public const int RateSettingTypeFieldNumber = 51;
    private readonly static int RateSettingTypeDefaultValue = 0;

    private int rateSettingType_;
    /// <summary>
    ///ColorGame牌桌特定功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RateSettingType {
      get { if ((_hasBits1 & 128) != 0) { return rateSettingType_; } else { return RateSettingTypeDefaultValue; } }
      set {
        _hasBits1 |= 128;
        rateSettingType_ = value;
      }
    }
    /// <summary>Gets whether the "rate_setting_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRateSettingType {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "rate_setting_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRateSettingType() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "rate_setting" field.</summary>
    public const int RateSettingFieldNumber = 52;
    private global::Texas.Protocol.ColorRateSetting rateSetting_;
    /// <summary>
    ///中獎倍率設定 根據rate_setting_type由服務端寫入值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorRateSetting RateSetting {
      get { return rateSetting_; }
      set {
        rateSetting_ = value;
      }
    }

    /// <summary>Field number for the "bet_setting" field.</summary>
    public const int BetSettingFieldNumber = 53;
    private global::Texas.Protocol.ColorBetSetting betSetting_;
    /// <summary>
    ///下注設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorBetSetting BetSetting {
      get { return betSetting_; }
      set {
        betSetting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Blind != other.Blind) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (MinStack != other.MinStack) return false;
      if (Feepoint != other.Feepoint) return false;
      if (Feecap != other.Feecap) return false;
      if (CreatorUserId != other.CreatorUserId) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (OwnerIcon != other.OwnerIcon) return false;
      if (OwnerName != other.OwnerName) return false;
      if (Ownerid != other.Ownerid) return false;
      if (OwnerVipLevel != other.OwnerVipLevel) return false;
      if (Region != other.Region) return false;
      if (Platform != other.Platform) return false;
      if (ClubName != other.ClubName) return false;
      if (ClubOwnerid != other.ClubOwnerid) return false;
      if (ClubIcon != other.ClubIcon) return false;
      if (OperationTime != other.OperationTime) return false;
      if (RoomTime != other.RoomTime) return false;
      if (SeatNum != other.SeatNum) return false;
      if (AutoStart != other.AutoStart) return false;
      if (RoomType != other.RoomType) return false;
      if (RoomMode != other.RoomMode) return false;
      if (GameMode != other.GameMode) return false;
      if (Timezone != other.Timezone) return false;
      if (Roomid != other.Roomid) return false;
      if (Official != other.Official) return false;
      if (Passwd != other.Passwd) return false;
      if (IsAutoDelayRoomOver != other.IsAutoDelayRoomOver) return false;
      if (AutoDelayRoomOverTimes != other.AutoDelayRoomOverTimes) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (Moduleid != other.Moduleid) return false;
      if (MultiOpid != other.MultiOpid) return false;
      if (Tempid != other.Tempid) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (IsCaptcha != other.IsCaptcha) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (GpsDistanceLimit != other.GpsDistanceLimit) return false;
      if (CreateClubid != other.CreateClubid) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      if (RoomVersion != other.RoomVersion) return false;
      if (CalltimeMinutes != other.CalltimeMinutes) return false;
      if (RateSettingType != other.RateSettingType) return false;
      if (!object.Equals(RateSetting, other.RateSetting)) return false;
      if (!object.Equals(BetSetting, other.BetSetting)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasMinBuyin) hash ^= MinBuyin.GetHashCode();
      if (HasMaxBuyin) hash ^= MaxBuyin.GetHashCode();
      if (HasMinStack) hash ^= MinStack.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasFeecap) hash ^= Feecap.GetHashCode();
      if (HasCreatorUserId) hash ^= CreatorUserId.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasOwnerIcon) hash ^= OwnerIcon.GetHashCode();
      if (HasOwnerName) hash ^= OwnerName.GetHashCode();
      if (HasOwnerid) hash ^= Ownerid.GetHashCode();
      if (HasOwnerVipLevel) hash ^= OwnerVipLevel.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasClubOwnerid) hash ^= ClubOwnerid.GetHashCode();
      if (HasClubIcon) hash ^= ClubIcon.GetHashCode();
      if (HasOperationTime) hash ^= OperationTime.GetHashCode();
      if (HasRoomTime) hash ^= RoomTime.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasAutoStart) hash ^= AutoStart.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasRoomMode) hash ^= RoomMode.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasOfficial) hash ^= Official.GetHashCode();
      if (HasPasswd) hash ^= Passwd.GetHashCode();
      if (HasIsAutoDelayRoomOver) hash ^= IsAutoDelayRoomOver.GetHashCode();
      if (HasAutoDelayRoomOverTimes) hash ^= AutoDelayRoomOverTimes.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasMultiOpid) hash ^= MultiOpid.GetHashCode();
      if (HasTempid) hash ^= Tempid.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasIsCaptcha) hash ^= IsCaptcha.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasGpsDistanceLimit) hash ^= GpsDistanceLimit.GetHashCode();
      if (HasCreateClubid) hash ^= CreateClubid.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (HasRoomVersion) hash ^= RoomVersion.GetHashCode();
      if (HasCalltimeMinutes) hash ^= CalltimeMinutes.GetHashCode();
      if (HasRateSettingType) hash ^= RateSettingType.GetHashCode();
      if (rateSetting_ != null) hash ^= RateSetting.GetHashCode();
      if (betSetting_ != null) hash ^= BetSetting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomName) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (HasBlind) {
        output.WriteRawTag(16);
        output.WriteInt64(Blind);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(24);
        output.WriteInt64(MinBuyin);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxBuyin);
      }
      if (HasMinStack) {
        output.WriteRawTag(40);
        output.WriteInt64(MinStack);
      }
      if (HasFeepoint) {
        output.WriteRawTag(48);
        output.WriteInt32(Feepoint);
      }
      if (HasFeecap) {
        output.WriteRawTag(56);
        output.WriteInt32(Feecap);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatorUserId);
      }
      if (HasClubid) {
        output.WriteRawTag(74);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(80);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(88);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(96);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(106);
        output.WriteString(OwnerIcon);
      }
      if (HasOwnerName) {
        output.WriteRawTag(114);
        output.WriteString(OwnerName);
      }
      if (HasOwnerid) {
        output.WriteRawTag(120);
        output.WriteInt64(Ownerid);
      }
      if (HasOwnerVipLevel) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(OwnerVipLevel);
      }
      if (HasRegion) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Region);
      }
      if (HasPlatform) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (HasClubName) {
        output.WriteRawTag(154, 1);
        output.WriteString(ClubName);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(170, 1);
        output.WriteString(ClubIcon);
      }
      if (HasOperationTime) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(OperationTime);
      }
      if (HasRoomTime) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RoomTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(SeatNum);
      }
      if (HasAutoStart) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasRoomType) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) RoomType);
      }
      if (HasRoomMode) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) RoomMode);
      }
      if (HasGameMode) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasTimezone) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Timezone);
      }
      if (HasRoomid) {
        output.WriteRawTag(242, 1);
        output.WriteString(Roomid);
      }
      if (HasOfficial) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Official);
      }
      if (HasPasswd) {
        output.WriteRawTag(130, 2);
        output.WriteString(Passwd);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(152, 2);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasModuleid) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(170, 2);
        output.WriteString(MultiOpid);
      }
      if (HasTempid) {
        output.WriteRawTag(178, 2);
        output.WriteString(Tempid);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(184, 2);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IpLimit);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(208, 2);
        output.WriteBool(PasswdLimit);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasCreateClubid) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(CreateClubid);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasRoomVersion) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RoomVersion);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasRateSettingType) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(RateSettingType);
      }
      if (rateSetting_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(RateSetting);
      }
      if (betSetting_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(BetSetting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomName) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (HasBlind) {
        output.WriteRawTag(16);
        output.WriteInt64(Blind);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(24);
        output.WriteInt64(MinBuyin);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxBuyin);
      }
      if (HasMinStack) {
        output.WriteRawTag(40);
        output.WriteInt64(MinStack);
      }
      if (HasFeepoint) {
        output.WriteRawTag(48);
        output.WriteInt32(Feepoint);
      }
      if (HasFeecap) {
        output.WriteRawTag(56);
        output.WriteInt32(Feecap);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatorUserId);
      }
      if (HasClubid) {
        output.WriteRawTag(74);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(80);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(88);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(96);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasOwnerIcon) {
        output.WriteRawTag(106);
        output.WriteString(OwnerIcon);
      }
      if (HasOwnerName) {
        output.WriteRawTag(114);
        output.WriteString(OwnerName);
      }
      if (HasOwnerid) {
        output.WriteRawTag(120);
        output.WriteInt64(Ownerid);
      }
      if (HasOwnerVipLevel) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(OwnerVipLevel);
      }
      if (HasRegion) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Region);
      }
      if (HasPlatform) {
        output.WriteRawTag(146, 1);
        output.WriteString(Platform);
      }
      if (HasClubName) {
        output.WriteRawTag(154, 1);
        output.WriteString(ClubName);
      }
      if (HasClubOwnerid) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(ClubOwnerid);
      }
      if (HasClubIcon) {
        output.WriteRawTag(170, 1);
        output.WriteString(ClubIcon);
      }
      if (HasOperationTime) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(OperationTime);
      }
      if (HasRoomTime) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RoomTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(SeatNum);
      }
      if (HasAutoStart) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasRoomType) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) RoomType);
      }
      if (HasRoomMode) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) RoomMode);
      }
      if (HasGameMode) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasTimezone) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Timezone);
      }
      if (HasRoomid) {
        output.WriteRawTag(242, 1);
        output.WriteString(Roomid);
      }
      if (HasOfficial) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Official);
      }
      if (HasPasswd) {
        output.WriteRawTag(130, 2);
        output.WriteString(Passwd);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(152, 2);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasModuleid) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(170, 2);
        output.WriteString(MultiOpid);
      }
      if (HasTempid) {
        output.WriteRawTag(178, 2);
        output.WriteString(Tempid);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(184, 2);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IpLimit);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(208, 2);
        output.WriteBool(PasswdLimit);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasGpsDistanceLimit) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(GpsDistanceLimit);
      }
      if (HasCreateClubid) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(CreateClubid);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasRoomVersion) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RoomVersion);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasRateSettingType) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(RateSettingType);
      }
      if (rateSetting_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(RateSetting);
      }
      if (betSetting_ != null) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(BetSetting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasMinBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinBuyin);
      }
      if (HasMaxBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBuyin);
      }
      if (HasMinStack) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinStack);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasFeecap) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feecap);
      }
      if (HasCreatorUserId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatorUserId);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSuperLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasOwnerIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerIcon);
      }
      if (HasOwnerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (HasOwnerid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ownerid);
      }
      if (HasOwnerVipLevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OwnerVipLevel);
      }
      if (HasRegion) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      if (HasPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (HasClubName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasClubOwnerid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClubOwnerid);
      }
      if (HasClubIcon) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClubIcon);
      }
      if (HasOperationTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OperationTime);
      }
      if (HasRoomTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoomTime);
      }
      if (HasSeatNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasAutoStart) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoStart);
      }
      if (HasRoomType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasRoomMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomMode);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasTimezone) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
      }
      if (HasRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasOfficial) {
        size += 2 + 1;
      }
      if (HasPasswd) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (HasIsAutoDelayRoomOver) {
        size += 2 + 1;
      }
      if (HasAutoDelayRoomOverTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasMultiOpid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultiOpid);
      }
      if (HasTempid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tempid);
      }
      if (HasGpsLimit) {
        size += 2 + 1;
      }
      if (HasIpLimit) {
        size += 2 + 1;
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasIsCaptcha) {
        size += 2 + 1;
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasGpsDistanceLimit) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GpsDistanceLimit);
      }
      if (HasCreateClubid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CreateClubid);
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (HasRoomVersion) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoomVersion);
      }
      if (HasCalltimeMinutes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CalltimeMinutes);
      }
      if (HasRateSettingType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateSettingType);
      }
      if (rateSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RateSetting);
      }
      if (betSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BetSetting);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasMinBuyin) {
        MinBuyin = other.MinBuyin;
      }
      if (other.HasMaxBuyin) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.HasMinStack) {
        MinStack = other.MinStack;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasFeecap) {
        Feecap = other.Feecap;
      }
      if (other.HasCreatorUserId) {
        CreatorUserId = other.CreatorUserId;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasOwnerIcon) {
        OwnerIcon = other.OwnerIcon;
      }
      if (other.HasOwnerName) {
        OwnerName = other.OwnerName;
      }
      if (other.HasOwnerid) {
        Ownerid = other.Ownerid;
      }
      if (other.HasOwnerVipLevel) {
        OwnerVipLevel = other.OwnerVipLevel;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasClubOwnerid) {
        ClubOwnerid = other.ClubOwnerid;
      }
      if (other.HasClubIcon) {
        ClubIcon = other.ClubIcon;
      }
      if (other.HasOperationTime) {
        OperationTime = other.OperationTime;
      }
      if (other.HasRoomTime) {
        RoomTime = other.RoomTime;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasAutoStart) {
        AutoStart = other.AutoStart;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasRoomMode) {
        RoomMode = other.RoomMode;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasOfficial) {
        Official = other.Official;
      }
      if (other.HasPasswd) {
        Passwd = other.Passwd;
      }
      if (other.HasIsAutoDelayRoomOver) {
        IsAutoDelayRoomOver = other.IsAutoDelayRoomOver;
      }
      if (other.HasAutoDelayRoomOverTimes) {
        AutoDelayRoomOverTimes = other.AutoDelayRoomOverTimes;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasMultiOpid) {
        MultiOpid = other.MultiOpid;
      }
      if (other.HasTempid) {
        Tempid = other.Tempid;
      }
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasIsCaptcha) {
        IsCaptcha = other.IsCaptcha;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasGpsDistanceLimit) {
        GpsDistanceLimit = other.GpsDistanceLimit;
      }
      if (other.HasCreateClubid) {
        CreateClubid = other.CreateClubid;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      if (other.HasRoomVersion) {
        RoomVersion = other.RoomVersion;
      }
      if (other.HasCalltimeMinutes) {
        CalltimeMinutes = other.CalltimeMinutes;
      }
      if (other.HasRateSettingType) {
        RateSettingType = other.RateSettingType;
      }
      if (other.rateSetting_ != null) {
        if (rateSetting_ == null) {
          RateSetting = new global::Texas.Protocol.ColorRateSetting();
        }
        RateSetting.MergeFrom(other.RateSetting);
      }
      if (other.betSetting_ != null) {
        if (betSetting_ == null) {
          BetSetting = new global::Texas.Protocol.ColorBetSetting();
        }
        BetSetting.MergeFrom(other.BetSetting);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            Blind = input.ReadInt64();
            break;
          }
          case 24: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 32: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 40: {
            MinStack = input.ReadInt64();
            break;
          }
          case 48: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 56: {
            Feecap = input.ReadInt32();
            break;
          }
          case 64: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 74: {
            Clubid = input.ReadString();
            break;
          }
          case 80: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 88: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 96: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 106: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 114: {
            OwnerName = input.ReadString();
            break;
          }
          case 120: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 128: {
            OwnerVipLevel = input.ReadUInt32();
            break;
          }
          case 136: {
            Region = input.ReadInt32();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 154: {
            ClubName = input.ReadString();
            break;
          }
          case 160: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 170: {
            ClubIcon = input.ReadString();
            break;
          }
          case 176: {
            OperationTime = input.ReadInt32();
            break;
          }
          case 184: {
            RoomTime = input.ReadInt32();
            break;
          }
          case 192: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 200: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 208: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 216: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 224: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 232: {
            Timezone = input.ReadInt32();
            break;
          }
          case 242: {
            Roomid = input.ReadString();
            break;
          }
          case 248: {
            Official = input.ReadBool();
            break;
          }
          case 258: {
            Passwd = input.ReadString();
            break;
          }
          case 264: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 272: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 280: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 288: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 298: {
            MultiOpid = input.ReadString();
            break;
          }
          case 306: {
            Tempid = input.ReadString();
            break;
          }
          case 312: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 320: {
            IpLimit = input.ReadBool();
            break;
          }
          case 328: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 336: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 344: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 352: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 360: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 368: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 376: {
            CreateClubid = input.ReadInt32();
            break;
          }
          case 384: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 392: {
            RoomVersion = input.ReadInt32();
            break;
          }
          case 400: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 408: {
            RateSettingType = input.ReadInt32();
            break;
          }
          case 418: {
            if (rateSetting_ == null) {
              RateSetting = new global::Texas.Protocol.ColorRateSetting();
            }
            input.ReadMessage(RateSetting);
            break;
          }
          case 426: {
            if (betSetting_ == null) {
              BetSetting = new global::Texas.Protocol.ColorBetSetting();
            }
            input.ReadMessage(BetSetting);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            Blind = input.ReadInt64();
            break;
          }
          case 24: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 32: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 40: {
            MinStack = input.ReadInt64();
            break;
          }
          case 48: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 56: {
            Feecap = input.ReadInt32();
            break;
          }
          case 64: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 74: {
            Clubid = input.ReadString();
            break;
          }
          case 80: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 88: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 96: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 106: {
            OwnerIcon = input.ReadString();
            break;
          }
          case 114: {
            OwnerName = input.ReadString();
            break;
          }
          case 120: {
            Ownerid = input.ReadInt64();
            break;
          }
          case 128: {
            OwnerVipLevel = input.ReadUInt32();
            break;
          }
          case 136: {
            Region = input.ReadInt32();
            break;
          }
          case 146: {
            Platform = input.ReadString();
            break;
          }
          case 154: {
            ClubName = input.ReadString();
            break;
          }
          case 160: {
            ClubOwnerid = input.ReadInt64();
            break;
          }
          case 170: {
            ClubIcon = input.ReadString();
            break;
          }
          case 176: {
            OperationTime = input.ReadInt32();
            break;
          }
          case 184: {
            RoomTime = input.ReadInt32();
            break;
          }
          case 192: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 200: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 208: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 216: {
            RoomMode = (global::Texas.Protocol.RoomMode) input.ReadEnum();
            break;
          }
          case 224: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 232: {
            Timezone = input.ReadInt32();
            break;
          }
          case 242: {
            Roomid = input.ReadString();
            break;
          }
          case 248: {
            Official = input.ReadBool();
            break;
          }
          case 258: {
            Passwd = input.ReadString();
            break;
          }
          case 264: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 272: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 280: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 288: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 298: {
            MultiOpid = input.ReadString();
            break;
          }
          case 306: {
            Tempid = input.ReadString();
            break;
          }
          case 312: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 320: {
            IpLimit = input.ReadBool();
            break;
          }
          case 328: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 336: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 344: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 352: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 360: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 368: {
            GpsDistanceLimit = input.ReadInt32();
            break;
          }
          case 376: {
            CreateClubid = input.ReadInt32();
            break;
          }
          case 384: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 392: {
            RoomVersion = input.ReadInt32();
            break;
          }
          case 400: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 408: {
            RateSettingType = input.ReadInt32();
            break;
          }
          case 418: {
            if (rateSetting_ == null) {
              RateSetting = new global::Texas.Protocol.ColorRateSetting();
            }
            input.ReadMessage(RateSetting);
            break;
          }
          case 426: {
            if (betSetting_ == null) {
              BetSetting = new global::Texas.Protocol.ColorBetSetting();
            }
            input.ReadMessage(BetSetting);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateColorRoomREQ : pb::IMessage<CreateColorRoomREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateColorRoomREQ> _parser = new pb::MessageParser<CreateColorRoomREQ>(() => new CreateColorRoomREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateColorRoomREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateColorRoomREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateColorRoomREQ(CreateColorRoomREQ other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      roomName_ = other.roomName_;
      blind_ = other.blind_;
      minBuyin_ = other.minBuyin_;
      maxBuyin_ = other.maxBuyin_;
      minStack_ = other.minStack_;
      feepoint_ = other.feepoint_;
      feecap_ = other.feecap_;
      creatorUserId_ = other.creatorUserId_;
      clubid_ = other.clubid_;
      leagueid_ = other.leagueid_;
      superLeagueid_ = other.superLeagueid_;
      superLeagueType_ = other.superLeagueType_;
      operationTime_ = other.operationTime_;
      roomTime_ = other.roomTime_;
      seatNum_ = other.seatNum_;
      autoStart_ = other.autoStart_;
      roomType_ = other.roomType_;
      gameMode_ = other.gameMode_;
      timezone_ = other.timezone_;
      roomid_ = other.roomid_;
      derivedRoomid_ = other.derivedRoomid_;
      isAutoDelayRoomOver_ = other.isAutoDelayRoomOver_;
      autoDelayRoomOverTimes_ = other.autoDelayRoomOverTimes_;
      isAutoCreateRoom_ = other.isAutoCreateRoom_;
      moduleid_ = other.moduleid_;
      multiOpid_ = other.multiOpid_;
      canUse_ = other.canUse_;
      gpsLimit_ = other.gpsLimit_;
      ipLimit_ = other.ipLimit_;
      forbiddenChat_ = other.forbiddenChat_;
      passwdLimit_ = other.passwdLimit_;
      isCaptcha_ = other.isCaptcha_;
      isBanPc_ = other.isBanPc_;
      isCheckMail_ = other.isCheckMail_;
      forbiddenChatMode_ = other.forbiddenChatMode_;
      calltimeMinutes_ = other.calltimeMinutes_;
      rateSettingType_ = other.rateSettingType_;
      betSetting_ = other.betSetting_ != null ? other.betSetting_.Clone() : null;
      banClub_ = other.banClub_.Clone();
      banCountry_ = other.banCountry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateColorRoomREQ Clone() {
      return new CreateColorRoomREQ(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private readonly static string RoomNameDefaultValue = "";

    private string roomName_;
    /// <summary>
    ///房間名稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RoomName {
      get { return roomName_ ?? RoomNameDefaultValue; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "room_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomName {
      get { return roomName_ != null; }
    }
    /// <summary>Clears the value of the "room_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomName() {
      roomName_ = null;
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 2;
    private readonly static long BlindDefaultValue = 0L;

    private long blind_;
    /// <summary>
    ///買入相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Blind {
      get { if ((_hasBits0 & 1) != 0) { return blind_; } else { return BlindDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blind_ = value;
      }
    }
    /// <summary>Gets whether the "blind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBlind {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBlind() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "min_buyin" field.</summary>
    public const int MinBuyinFieldNumber = 3;
    private readonly static long MinBuyinDefaultValue = 0L;

    private long minBuyin_;
    /// <summary>
    ///最小買入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinBuyin {
      get { if ((_hasBits0 & 2) != 0) { return minBuyin_; } else { return MinBuyinDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "min_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBuyin {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBuyin() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_buyin" field.</summary>
    public const int MaxBuyinFieldNumber = 4;
    private readonly static long MaxBuyinDefaultValue = 0L;

    private long maxBuyin_;
    /// <summary>
    ///最大買入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxBuyin {
      get { if ((_hasBits0 & 4) != 0) { return maxBuyin_; } else { return MaxBuyinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxBuyin_ = value;
      }
    }
    /// <summary>Gets whether the "max_buyin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBuyin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_buyin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBuyin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_stack" field.</summary>
    public const int MinStackFieldNumber = 5;
    private readonly static long MinStackDefaultValue = 0L;

    private long minStack_;
    /// <summary>
    ///籌碼最底須保持在min_stack以上，否則跳出彈窗要求補碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MinStack {
      get { if ((_hasBits0 & 8) != 0) { return minStack_; } else { return MinStackDefaultValue; } }
      set {
        _hasBits0 |= 8;
        minStack_ = value;
      }
    }
    /// <summary>Gets whether the "min_stack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinStack {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "min_stack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinStack() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "feepoint" field.</summary>
    public const int FeepointFieldNumber = 6;
    private readonly static int FeepointDefaultValue = 0;

    private int feepoint_;
    /// <summary>
    ///服務費相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feepoint {
      get { if ((_hasBits0 & 16) != 0) { return feepoint_; } else { return FeepointDefaultValue; } }
      set {
        _hasBits0 |= 16;
        feepoint_ = value;
      }
    }
    /// <summary>Gets whether the "feepoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeepoint {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "feepoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeepoint() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "feecap" field.</summary>
    public const int FeecapFieldNumber = 7;
    private readonly static int FeecapDefaultValue = 0;

    private int feecap_;
    /// <summary>
    ///服務費封頂 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Feecap {
      get { if ((_hasBits0 & 32) != 0) { return feecap_; } else { return FeecapDefaultValue; } }
      set {
        _hasBits0 |= 32;
        feecap_ = value;
      }
    }
    /// <summary>Gets whether the "feecap" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFeecap {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "feecap" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFeecap() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "creator_user_id" field.</summary>
    public const int CreatorUserIdFieldNumber = 8;
    private readonly static long CreatorUserIdDefaultValue = 0L;

    private long creatorUserId_;
    /// <summary>
    ///創辦人、俱樂部屬性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CreatorUserId {
      get { if ((_hasBits0 & 64) != 0) { return creatorUserId_; } else { return CreatorUserIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        creatorUserId_ = value;
      }
    }
    /// <summary>Gets whether the "creator_user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCreatorUserId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "creator_user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCreatorUserId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 9;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///牌桌所屬俱樂部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "leagueid" field.</summary>
    public const int LeagueidFieldNumber = 10;
    private readonly static int LeagueidDefaultValue = 0;

    private int leagueid_;
    /// <summary>
    ///牌桌所屬聯盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Leagueid {
      get { if ((_hasBits0 & 128) != 0) { return leagueid_; } else { return LeagueidDefaultValue; } }
      set {
        _hasBits0 |= 128;
        leagueid_ = value;
      }
    }
    /// <summary>Gets whether the "leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeagueid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeagueid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "super_leagueid" field.</summary>
    public const int SuperLeagueidFieldNumber = 11;
    private readonly static int SuperLeagueidDefaultValue = 0;

    private int superLeagueid_;
    /// <summary>
    ///牌桌所屬超級聯盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueid {
      get { if ((_hasBits0 & 256) != 0) { return superLeagueid_; } else { return SuperLeagueidDefaultValue; } }
      set {
        _hasBits0 |= 256;
        superLeagueid_ = value;
      }
    }
    /// <summary>Gets whether the "super_leagueid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueid {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "super_leagueid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueid() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "super_league_type" field.</summary>
    public const int SuperLeagueTypeFieldNumber = 12;
    private readonly static int SuperLeagueTypeDefaultValue = 0;

    private int superLeagueType_;
    /// <summary>
    ///1表示非PPST
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuperLeagueType {
      get { if ((_hasBits0 & 512) != 0) { return superLeagueType_; } else { return SuperLeagueTypeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        superLeagueType_ = value;
      }
    }
    /// <summary>Gets whether the "super_league_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuperLeagueType {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "super_league_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuperLeagueType() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "operation_time" field.</summary>
    public const int OperationTimeFieldNumber = 13;
    private readonly static int OperationTimeDefaultValue = 0;

    private int operationTime_;
    /// <summary>
    ///房間屬性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OperationTime {
      get { if ((_hasBits0 & 1024) != 0) { return operationTime_; } else { return OperationTimeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        operationTime_ = value;
      }
    }
    /// <summary>Gets whether the "operation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOperationTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "operation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOperationTime() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "room_time" field.</summary>
    public const int RoomTimeFieldNumber = 14;
    private readonly static int RoomTimeDefaultValue = 0;

    private int roomTime_;
    /// <summary>
    ///房間存活時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomTime {
      get { if ((_hasBits0 & 2048) != 0) { return roomTime_; } else { return RoomTimeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        roomTime_ = value;
      }
    }
    /// <summary>Gets whether the "room_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomTime {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "room_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomTime() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "seat_num" field.</summary>
    public const int SeatNumFieldNumber = 15;
    private readonly static int SeatNumDefaultValue = 0;

    private int seatNum_;
    /// <summary>
    ///座位數量，最大只支持4 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeatNum {
      get { if ((_hasBits0 & 4096) != 0) { return seatNum_; } else { return SeatNumDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        seatNum_ = value;
      }
    }
    /// <summary>Gets whether the "seat_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatNum {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "seat_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatNum() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "auto_start" field.</summary>
    public const int AutoStartFieldNumber = 16;
    private readonly static int AutoStartDefaultValue = 0;

    private int autoStart_;
    /// <summary>
    ///幾個人坐下可自動開始，-1表示需要手動開始 //ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoStart {
      get { if ((_hasBits0 & 8192) != 0) { return autoStart_; } else { return AutoStartDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        autoStart_ = value;
      }
    }
    /// <summary>Gets whether the "auto_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoStart {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "auto_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoStart() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 17;
    private readonly static global::Texas.Protocol.RoomType RoomTypeDefaultValue = global::Texas.Protocol.RoomType.TestRoom;

    private global::Texas.Protocol.RoomType roomType_;
    /// <summary>
    ///房間模式，Color = 14
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.RoomType RoomType {
      get { if ((_hasBits0 & 16384) != 0) { return roomType_; } else { return RoomTypeDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        roomType_ = value;
      }
    }
    /// <summary>Gets whether the "room_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomType {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "room_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomType() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 18;
    private readonly static global::Texas.Protocol.GameMode GameModeDefaultValue = global::Texas.Protocol.GameMode.Regular;

    private global::Texas.Protocol.GameMode gameMode_;
    /// <summary>
    ///Color = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.GameMode GameMode {
      get { if ((_hasBits0 & 32768) != 0) { return gameMode_; } else { return GameModeDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        gameMode_ = value;
      }
    }
    /// <summary>Gets whether the "game_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameMode {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "game_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameMode() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 19;
    private readonly static int TimezoneDefaultValue = 0;

    private int timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Timezone {
      get { if ((_hasBits0 & 65536) != 0) { return timezone_; } else { return TimezoneDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        timezone_ = value;
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimezone {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimezone() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 20;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    /// <summary>
    ///由伺服器填寫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "derived_roomid" field.</summary>
    public const int DerivedRoomidFieldNumber = 21;
    private readonly static int DerivedRoomidDefaultValue = 0;

    private int derivedRoomid_;
    /// <summary>
    ///自動開桌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DerivedRoomid {
      get { if ((_hasBits0 & 131072) != 0) { return derivedRoomid_; } else { return DerivedRoomidDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        derivedRoomid_ = value;
      }
    }
    /// <summary>Gets whether the "derived_roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDerivedRoomid {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "derived_roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDerivedRoomid() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "is_auto_delay_room_over" field.</summary>
    public const int IsAutoDelayRoomOverFieldNumber = 22;
    private readonly static bool IsAutoDelayRoomOverDefaultValue = false;

    private bool isAutoDelayRoomOver_;
    /// <summary>
    ///自動延時、開桌相關
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoDelayRoomOver {
      get { if ((_hasBits0 & 262144) != 0) { return isAutoDelayRoomOver_; } else { return IsAutoDelayRoomOverDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        isAutoDelayRoomOver_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_delay_room_over" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoDelayRoomOver {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_delay_room_over" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoDelayRoomOver() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "auto_delay_room_over_times" field.</summary>
    public const int AutoDelayRoomOverTimesFieldNumber = 23;
    private readonly static int AutoDelayRoomOverTimesDefaultValue = 0;

    private int autoDelayRoomOverTimes_;
    /// <summary>
    ///自动延时次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoDelayRoomOverTimes {
      get { if ((_hasBits0 & 524288) != 0) { return autoDelayRoomOverTimes_; } else { return AutoDelayRoomOverTimesDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        autoDelayRoomOverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "auto_delay_room_over_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoDelayRoomOverTimes {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "auto_delay_room_over_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoDelayRoomOverTimes() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "is_auto_create_room" field.</summary>
    public const int IsAutoCreateRoomFieldNumber = 24;
    private readonly static bool IsAutoCreateRoomDefaultValue = false;

    private bool isAutoCreateRoom_;
    /// <summary>
    ///是否自动开桌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoCreateRoom {
      get { if ((_hasBits0 & 1048576) != 0) { return isAutoCreateRoom_; } else { return IsAutoCreateRoomDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        isAutoCreateRoom_ = value;
      }
    }
    /// <summary>Gets whether the "is_auto_create_room" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoCreateRoom {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "is_auto_create_room" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoCreateRoom() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "moduleid" field.</summary>
    public const int ModuleidFieldNumber = 25;
    private readonly static long ModuleidDefaultValue = 0L;

    private long moduleid_;
    /// <summary>
    ///模板??
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Moduleid {
      get { if ((_hasBits0 & 2097152) != 0) { return moduleid_; } else { return ModuleidDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        moduleid_ = value;
      }
    }
    /// <summary>Gets whether the "moduleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModuleid {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "moduleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModuleid() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "multi_opid" field.</summary>
    public const int MultiOpidFieldNumber = 26;
    private readonly static string MultiOpidDefaultValue = "";

    private string multiOpid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MultiOpid {
      get { return multiOpid_ ?? MultiOpidDefaultValue; }
      set {
        multiOpid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "multi_opid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMultiOpid {
      get { return multiOpid_ != null; }
    }
    /// <summary>Clears the value of the "multi_opid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMultiOpid() {
      multiOpid_ = null;
    }

    /// <summary>Field number for the "can_use" field.</summary>
    public const int CanUseFieldNumber = 27;
    private readonly static bool CanUseDefaultValue = false;

    private bool canUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanUse {
      get { if ((_hasBits0 & 4194304) != 0) { return canUse_; } else { return CanUseDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        canUse_ = value;
      }
    }
    /// <summary>Gets whether the "can_use" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanUse {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "can_use" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanUse() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "gps_limit" field.</summary>
    public const int GpsLimitFieldNumber = 28;
    private readonly static bool GpsLimitDefaultValue = false;

    private bool gpsLimit_;
    /// <summary>
    ///限制功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GpsLimit {
      get { if ((_hasBits0 & 8388608) != 0) { return gpsLimit_; } else { return GpsLimitDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        gpsLimit_ = value;
      }
    }
    /// <summary>Gets whether the "gps_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLimit {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "gps_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLimit() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "ip_limit" field.</summary>
    public const int IpLimitFieldNumber = 29;
    private readonly static bool IpLimitDefaultValue = false;

    private bool ipLimit_;
    /// <summary>
    ///IP限制 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpLimit {
      get { if ((_hasBits0 & 16777216) != 0) { return ipLimit_; } else { return IpLimitDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        ipLimit_ = value;
      }
    }
    /// <summary>Gets whether the "ip_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpLimit {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "ip_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpLimit() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "forbidden_chat" field.</summary>
    public const int ForbiddenChatFieldNumber = 30;
    private readonly static bool ForbiddenChatDefaultValue = false;

    private bool forbiddenChat_;
    /// <summary>
    ///是否禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForbiddenChat {
      get { if ((_hasBits0 & 33554432) != 0) { return forbiddenChat_; } else { return ForbiddenChatDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        forbiddenChat_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChat {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChat() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "passwd_limit" field.</summary>
    public const int PasswdLimitFieldNumber = 31;
    private readonly static bool PasswdLimitDefaultValue = false;

    private bool passwdLimit_;
    /// <summary>
    ///是否密码桌,与授权买入互斥 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PasswdLimit {
      get { if ((_hasBits0 & 67108864) != 0) { return passwdLimit_; } else { return PasswdLimitDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        passwdLimit_ = value;
      }
    }
    /// <summary>Gets whether the "passwd_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPasswdLimit {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "passwd_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPasswdLimit() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "is_captcha" field.</summary>
    public const int IsCaptchaFieldNumber = 32;
    private readonly static bool IsCaptchaDefaultValue = false;

    private bool isCaptcha_;
    /// <summary>
    ///是否人机校验 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCaptcha {
      get { if ((_hasBits0 & 134217728) != 0) { return isCaptcha_; } else { return IsCaptchaDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        isCaptcha_ = value;
      }
    }
    /// <summary>Gets whether the "is_captcha" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCaptcha {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "is_captcha" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCaptcha() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "is_ban_pc" field.</summary>
    public const int IsBanPcFieldNumber = 33;
    private readonly static bool IsBanPcDefaultValue = false;

    private bool isBanPc_;
    /// <summary>
    ///禁止PC玩家 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBanPc {
      get { if ((_hasBits0 & 268435456) != 0) { return isBanPc_; } else { return IsBanPcDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        isBanPc_ = value;
      }
    }
    /// <summary>Gets whether the "is_ban_pc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBanPc {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "is_ban_pc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBanPc() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "is_check_mail" field.</summary>
    public const int IsCheckMailFieldNumber = 34;
    private readonly static bool IsCheckMailDefaultValue = false;

    private bool isCheckMail_;
    /// <summary>
    ///需要進行email檢查 ColorGame未使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCheckMail {
      get { if ((_hasBits0 & 536870912) != 0) { return isCheckMail_; } else { return IsCheckMailDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        isCheckMail_ = value;
      }
    }
    /// <summary>Gets whether the "is_check_mail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCheckMail {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "is_check_mail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCheckMail() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "forbidden_chat_mode" field.</summary>
    public const int ForbiddenChatModeFieldNumber = 35;
    private readonly static int ForbiddenChatModeDefaultValue = 0;

    private int forbiddenChatMode_;
    /// <summary>
    ///0: 全體禁言 1:看客禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForbiddenChatMode {
      get { if ((_hasBits0 & 1073741824) != 0) { return forbiddenChatMode_; } else { return ForbiddenChatModeDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        forbiddenChatMode_ = value;
      }
    }
    /// <summary>Gets whether the "forbidden_chat_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForbiddenChatMode {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "forbidden_chat_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForbiddenChatMode() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "calltime_minutes" field.</summary>
    public const int CalltimeMinutesFieldNumber = 36;
    private readonly static int CalltimeMinutesDefaultValue = 0;

    private int calltimeMinutes_;
    /// <summary>
    ///Calltime時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalltimeMinutes {
      get { if ((_hasBits0 & -2147483648) != 0) { return calltimeMinutes_; } else { return CalltimeMinutesDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        calltimeMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "calltime_minutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCalltimeMinutes {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "calltime_minutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCalltimeMinutes() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "rate_setting_type" field.</summary>
    public const int RateSettingTypeFieldNumber = 37;
    private readonly static int RateSettingTypeDefaultValue = 0;

    private int rateSettingType_;
    /// <summary>
    ///ColorGame牌桌特定功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RateSettingType {
      get { if ((_hasBits1 & 1) != 0) { return rateSettingType_; } else { return RateSettingTypeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        rateSettingType_ = value;
      }
    }
    /// <summary>Gets whether the "rate_setting_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRateSettingType {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rate_setting_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRateSettingType() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "bet_setting" field.</summary>
    public const int BetSettingFieldNumber = 38;
    private global::Texas.Protocol.ColorBetSetting betSetting_;
    /// <summary>
    ///下注設定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorBetSetting BetSetting {
      get { return betSetting_; }
      set {
        betSetting_ = value;
      }
    }

    /// <summary>Field number for the "ban_club" field.</summary>
    public const int BanClubFieldNumber = 39;
    private static readonly pb::FieldCodec<int> _repeated_banClub_codec
        = pb::FieldCodec.ForInt32(314);
    private readonly pbc::RepeatedField<int> banClub_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// restriction for clubs and regions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BanClub {
      get { return banClub_; }
    }

    /// <summary>Field number for the "ban_country" field.</summary>
    public const int BanCountryFieldNumber = 40;
    private static readonly pb::FieldCodec<string> _repeated_banCountry_codec
        = pb::FieldCodec.ForString(322);
    private readonly pbc::RepeatedField<string> banCountry_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 限制注册地为某些国家的用户不能看到和加入牌桌，缩写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> BanCountry {
      get { return banCountry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateColorRoomREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateColorRoomREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Blind != other.Blind) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (MinStack != other.MinStack) return false;
      if (Feepoint != other.Feepoint) return false;
      if (Feecap != other.Feecap) return false;
      if (CreatorUserId != other.CreatorUserId) return false;
      if (Clubid != other.Clubid) return false;
      if (Leagueid != other.Leagueid) return false;
      if (SuperLeagueid != other.SuperLeagueid) return false;
      if (SuperLeagueType != other.SuperLeagueType) return false;
      if (OperationTime != other.OperationTime) return false;
      if (RoomTime != other.RoomTime) return false;
      if (SeatNum != other.SeatNum) return false;
      if (AutoStart != other.AutoStart) return false;
      if (RoomType != other.RoomType) return false;
      if (GameMode != other.GameMode) return false;
      if (Timezone != other.Timezone) return false;
      if (Roomid != other.Roomid) return false;
      if (DerivedRoomid != other.DerivedRoomid) return false;
      if (IsAutoDelayRoomOver != other.IsAutoDelayRoomOver) return false;
      if (AutoDelayRoomOverTimes != other.AutoDelayRoomOverTimes) return false;
      if (IsAutoCreateRoom != other.IsAutoCreateRoom) return false;
      if (Moduleid != other.Moduleid) return false;
      if (MultiOpid != other.MultiOpid) return false;
      if (CanUse != other.CanUse) return false;
      if (GpsLimit != other.GpsLimit) return false;
      if (IpLimit != other.IpLimit) return false;
      if (ForbiddenChat != other.ForbiddenChat) return false;
      if (PasswdLimit != other.PasswdLimit) return false;
      if (IsCaptcha != other.IsCaptcha) return false;
      if (IsBanPc != other.IsBanPc) return false;
      if (IsCheckMail != other.IsCheckMail) return false;
      if (ForbiddenChatMode != other.ForbiddenChatMode) return false;
      if (CalltimeMinutes != other.CalltimeMinutes) return false;
      if (RateSettingType != other.RateSettingType) return false;
      if (!object.Equals(BetSetting, other.BetSetting)) return false;
      if(!banClub_.Equals(other.banClub_)) return false;
      if(!banCountry_.Equals(other.banCountry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomName) hash ^= RoomName.GetHashCode();
      if (HasBlind) hash ^= Blind.GetHashCode();
      if (HasMinBuyin) hash ^= MinBuyin.GetHashCode();
      if (HasMaxBuyin) hash ^= MaxBuyin.GetHashCode();
      if (HasMinStack) hash ^= MinStack.GetHashCode();
      if (HasFeepoint) hash ^= Feepoint.GetHashCode();
      if (HasFeecap) hash ^= Feecap.GetHashCode();
      if (HasCreatorUserId) hash ^= CreatorUserId.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasLeagueid) hash ^= Leagueid.GetHashCode();
      if (HasSuperLeagueid) hash ^= SuperLeagueid.GetHashCode();
      if (HasSuperLeagueType) hash ^= SuperLeagueType.GetHashCode();
      if (HasOperationTime) hash ^= OperationTime.GetHashCode();
      if (HasRoomTime) hash ^= RoomTime.GetHashCode();
      if (HasSeatNum) hash ^= SeatNum.GetHashCode();
      if (HasAutoStart) hash ^= AutoStart.GetHashCode();
      if (HasRoomType) hash ^= RoomType.GetHashCode();
      if (HasGameMode) hash ^= GameMode.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasDerivedRoomid) hash ^= DerivedRoomid.GetHashCode();
      if (HasIsAutoDelayRoomOver) hash ^= IsAutoDelayRoomOver.GetHashCode();
      if (HasAutoDelayRoomOverTimes) hash ^= AutoDelayRoomOverTimes.GetHashCode();
      if (HasIsAutoCreateRoom) hash ^= IsAutoCreateRoom.GetHashCode();
      if (HasModuleid) hash ^= Moduleid.GetHashCode();
      if (HasMultiOpid) hash ^= MultiOpid.GetHashCode();
      if (HasCanUse) hash ^= CanUse.GetHashCode();
      if (HasGpsLimit) hash ^= GpsLimit.GetHashCode();
      if (HasIpLimit) hash ^= IpLimit.GetHashCode();
      if (HasForbiddenChat) hash ^= ForbiddenChat.GetHashCode();
      if (HasPasswdLimit) hash ^= PasswdLimit.GetHashCode();
      if (HasIsCaptcha) hash ^= IsCaptcha.GetHashCode();
      if (HasIsBanPc) hash ^= IsBanPc.GetHashCode();
      if (HasIsCheckMail) hash ^= IsCheckMail.GetHashCode();
      if (HasForbiddenChatMode) hash ^= ForbiddenChatMode.GetHashCode();
      if (HasCalltimeMinutes) hash ^= CalltimeMinutes.GetHashCode();
      if (HasRateSettingType) hash ^= RateSettingType.GetHashCode();
      if (betSetting_ != null) hash ^= BetSetting.GetHashCode();
      hash ^= banClub_.GetHashCode();
      hash ^= banCountry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRoomName) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (HasBlind) {
        output.WriteRawTag(16);
        output.WriteInt64(Blind);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(24);
        output.WriteInt64(MinBuyin);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxBuyin);
      }
      if (HasMinStack) {
        output.WriteRawTag(40);
        output.WriteInt64(MinStack);
      }
      if (HasFeepoint) {
        output.WriteRawTag(48);
        output.WriteInt32(Feepoint);
      }
      if (HasFeecap) {
        output.WriteRawTag(56);
        output.WriteInt32(Feecap);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatorUserId);
      }
      if (HasClubid) {
        output.WriteRawTag(74);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(80);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(88);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(96);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasOperationTime) {
        output.WriteRawTag(104);
        output.WriteInt32(OperationTime);
      }
      if (HasRoomTime) {
        output.WriteRawTag(112);
        output.WriteInt32(RoomTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(120);
        output.WriteInt32(SeatNum);
      }
      if (HasAutoStart) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasRoomType) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) RoomType);
      }
      if (HasGameMode) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasTimezone) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Timezone);
      }
      if (HasRoomid) {
        output.WriteRawTag(162, 1);
        output.WriteString(Roomid);
      }
      if (HasDerivedRoomid) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(DerivedRoomid);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasModuleid) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(210, 1);
        output.WriteString(MultiOpid);
      }
      if (HasCanUse) {
        output.WriteRawTag(216, 1);
        output.WriteBool(CanUse);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(224, 1);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IpLimit);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(248, 1);
        output.WriteBool(PasswdLimit);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(144, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasRateSettingType) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(RateSettingType);
      }
      if (betSetting_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(BetSetting);
      }
      banClub_.WriteTo(output, _repeated_banClub_codec);
      banCountry_.WriteTo(output, _repeated_banCountry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRoomName) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (HasBlind) {
        output.WriteRawTag(16);
        output.WriteInt64(Blind);
      }
      if (HasMinBuyin) {
        output.WriteRawTag(24);
        output.WriteInt64(MinBuyin);
      }
      if (HasMaxBuyin) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxBuyin);
      }
      if (HasMinStack) {
        output.WriteRawTag(40);
        output.WriteInt64(MinStack);
      }
      if (HasFeepoint) {
        output.WriteRawTag(48);
        output.WriteInt32(Feepoint);
      }
      if (HasFeecap) {
        output.WriteRawTag(56);
        output.WriteInt32(Feecap);
      }
      if (HasCreatorUserId) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatorUserId);
      }
      if (HasClubid) {
        output.WriteRawTag(74);
        output.WriteString(Clubid);
      }
      if (HasLeagueid) {
        output.WriteRawTag(80);
        output.WriteInt32(Leagueid);
      }
      if (HasSuperLeagueid) {
        output.WriteRawTag(88);
        output.WriteInt32(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        output.WriteRawTag(96);
        output.WriteInt32(SuperLeagueType);
      }
      if (HasOperationTime) {
        output.WriteRawTag(104);
        output.WriteInt32(OperationTime);
      }
      if (HasRoomTime) {
        output.WriteRawTag(112);
        output.WriteInt32(RoomTime);
      }
      if (HasSeatNum) {
        output.WriteRawTag(120);
        output.WriteInt32(SeatNum);
      }
      if (HasAutoStart) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AutoStart);
      }
      if (HasRoomType) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) RoomType);
      }
      if (HasGameMode) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) GameMode);
      }
      if (HasTimezone) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Timezone);
      }
      if (HasRoomid) {
        output.WriteRawTag(162, 1);
        output.WriteString(Roomid);
      }
      if (HasDerivedRoomid) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(DerivedRoomid);
      }
      if (HasIsAutoDelayRoomOver) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsAutoDelayRoomOver);
      }
      if (HasAutoDelayRoomOverTimes) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsAutoCreateRoom);
      }
      if (HasModuleid) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Moduleid);
      }
      if (HasMultiOpid) {
        output.WriteRawTag(210, 1);
        output.WriteString(MultiOpid);
      }
      if (HasCanUse) {
        output.WriteRawTag(216, 1);
        output.WriteBool(CanUse);
      }
      if (HasGpsLimit) {
        output.WriteRawTag(224, 1);
        output.WriteBool(GpsLimit);
      }
      if (HasIpLimit) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IpLimit);
      }
      if (HasForbiddenChat) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ForbiddenChat);
      }
      if (HasPasswdLimit) {
        output.WriteRawTag(248, 1);
        output.WriteBool(PasswdLimit);
      }
      if (HasIsCaptcha) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsCaptcha);
      }
      if (HasIsBanPc) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsBanPc);
      }
      if (HasIsCheckMail) {
        output.WriteRawTag(144, 2);
        output.WriteBool(IsCheckMail);
      }
      if (HasForbiddenChatMode) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ForbiddenChatMode);
      }
      if (HasCalltimeMinutes) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(CalltimeMinutes);
      }
      if (HasRateSettingType) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(RateSettingType);
      }
      if (betSetting_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(BetSetting);
      }
      banClub_.WriteTo(ref output, _repeated_banClub_codec);
      banCountry_.WriteTo(ref output, _repeated_banCountry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRoomName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (HasBlind) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Blind);
      }
      if (HasMinBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinBuyin);
      }
      if (HasMaxBuyin) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxBuyin);
      }
      if (HasMinStack) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinStack);
      }
      if (HasFeepoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feepoint);
      }
      if (HasFeecap) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Feecap);
      }
      if (HasCreatorUserId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatorUserId);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leagueid);
      }
      if (HasSuperLeagueid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueid);
      }
      if (HasSuperLeagueType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuperLeagueType);
      }
      if (HasOperationTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationTime);
      }
      if (HasRoomTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomTime);
      }
      if (HasSeatNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
      }
      if (HasAutoStart) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoStart);
      }
      if (HasRoomType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoomType);
      }
      if (HasGameMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (HasTimezone) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
      }
      if (HasRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasDerivedRoomid) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DerivedRoomid);
      }
      if (HasIsAutoDelayRoomOver) {
        size += 2 + 1;
      }
      if (HasAutoDelayRoomOverTimes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoDelayRoomOverTimes);
      }
      if (HasIsAutoCreateRoom) {
        size += 2 + 1;
      }
      if (HasModuleid) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Moduleid);
      }
      if (HasMultiOpid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultiOpid);
      }
      if (HasCanUse) {
        size += 2 + 1;
      }
      if (HasGpsLimit) {
        size += 2 + 1;
      }
      if (HasIpLimit) {
        size += 2 + 1;
      }
      if (HasForbiddenChat) {
        size += 2 + 1;
      }
      if (HasPasswdLimit) {
        size += 2 + 1;
      }
      if (HasIsCaptcha) {
        size += 2 + 1;
      }
      if (HasIsBanPc) {
        size += 2 + 1;
      }
      if (HasIsCheckMail) {
        size += 2 + 1;
      }
      if (HasForbiddenChatMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForbiddenChatMode);
      }
      if (HasCalltimeMinutes) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CalltimeMinutes);
      }
      if (HasRateSettingType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateSettingType);
      }
      if (betSetting_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BetSetting);
      }
      size += banClub_.CalculateSize(_repeated_banClub_codec);
      size += banCountry_.CalculateSize(_repeated_banCountry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateColorRoomREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomName) {
        RoomName = other.RoomName;
      }
      if (other.HasBlind) {
        Blind = other.Blind;
      }
      if (other.HasMinBuyin) {
        MinBuyin = other.MinBuyin;
      }
      if (other.HasMaxBuyin) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.HasMinStack) {
        MinStack = other.MinStack;
      }
      if (other.HasFeepoint) {
        Feepoint = other.Feepoint;
      }
      if (other.HasFeecap) {
        Feecap = other.Feecap;
      }
      if (other.HasCreatorUserId) {
        CreatorUserId = other.CreatorUserId;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasLeagueid) {
        Leagueid = other.Leagueid;
      }
      if (other.HasSuperLeagueid) {
        SuperLeagueid = other.SuperLeagueid;
      }
      if (other.HasSuperLeagueType) {
        SuperLeagueType = other.SuperLeagueType;
      }
      if (other.HasOperationTime) {
        OperationTime = other.OperationTime;
      }
      if (other.HasRoomTime) {
        RoomTime = other.RoomTime;
      }
      if (other.HasSeatNum) {
        SeatNum = other.SeatNum;
      }
      if (other.HasAutoStart) {
        AutoStart = other.AutoStart;
      }
      if (other.HasRoomType) {
        RoomType = other.RoomType;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasDerivedRoomid) {
        DerivedRoomid = other.DerivedRoomid;
      }
      if (other.HasIsAutoDelayRoomOver) {
        IsAutoDelayRoomOver = other.IsAutoDelayRoomOver;
      }
      if (other.HasAutoDelayRoomOverTimes) {
        AutoDelayRoomOverTimes = other.AutoDelayRoomOverTimes;
      }
      if (other.HasIsAutoCreateRoom) {
        IsAutoCreateRoom = other.IsAutoCreateRoom;
      }
      if (other.HasModuleid) {
        Moduleid = other.Moduleid;
      }
      if (other.HasMultiOpid) {
        MultiOpid = other.MultiOpid;
      }
      if (other.HasCanUse) {
        CanUse = other.CanUse;
      }
      if (other.HasGpsLimit) {
        GpsLimit = other.GpsLimit;
      }
      if (other.HasIpLimit) {
        IpLimit = other.IpLimit;
      }
      if (other.HasForbiddenChat) {
        ForbiddenChat = other.ForbiddenChat;
      }
      if (other.HasPasswdLimit) {
        PasswdLimit = other.PasswdLimit;
      }
      if (other.HasIsCaptcha) {
        IsCaptcha = other.IsCaptcha;
      }
      if (other.HasIsBanPc) {
        IsBanPc = other.IsBanPc;
      }
      if (other.HasIsCheckMail) {
        IsCheckMail = other.IsCheckMail;
      }
      if (other.HasForbiddenChatMode) {
        ForbiddenChatMode = other.ForbiddenChatMode;
      }
      if (other.HasCalltimeMinutes) {
        CalltimeMinutes = other.CalltimeMinutes;
      }
      if (other.HasRateSettingType) {
        RateSettingType = other.RateSettingType;
      }
      if (other.betSetting_ != null) {
        if (betSetting_ == null) {
          BetSetting = new global::Texas.Protocol.ColorBetSetting();
        }
        BetSetting.MergeFrom(other.BetSetting);
      }
      banClub_.Add(other.banClub_);
      banCountry_.Add(other.banCountry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            Blind = input.ReadInt64();
            break;
          }
          case 24: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 32: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 40: {
            MinStack = input.ReadInt64();
            break;
          }
          case 48: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 56: {
            Feecap = input.ReadInt32();
            break;
          }
          case 64: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 74: {
            Clubid = input.ReadString();
            break;
          }
          case 80: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 88: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 96: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 104: {
            OperationTime = input.ReadInt32();
            break;
          }
          case 112: {
            RoomTime = input.ReadInt32();
            break;
          }
          case 120: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 128: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 136: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 144: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 152: {
            Timezone = input.ReadInt32();
            break;
          }
          case 162: {
            Roomid = input.ReadString();
            break;
          }
          case 168: {
            DerivedRoomid = input.ReadInt32();
            break;
          }
          case 176: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 184: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 192: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 200: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 210: {
            MultiOpid = input.ReadString();
            break;
          }
          case 216: {
            CanUse = input.ReadBool();
            break;
          }
          case 224: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 232: {
            IpLimit = input.ReadBool();
            break;
          }
          case 240: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 248: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 256: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 264: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 272: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 280: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 288: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 296: {
            RateSettingType = input.ReadInt32();
            break;
          }
          case 306: {
            if (betSetting_ == null) {
              BetSetting = new global::Texas.Protocol.ColorBetSetting();
            }
            input.ReadMessage(BetSetting);
            break;
          }
          case 314:
          case 312: {
            banClub_.AddEntriesFrom(input, _repeated_banClub_codec);
            break;
          }
          case 322: {
            banCountry_.AddEntriesFrom(input, _repeated_banCountry_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            Blind = input.ReadInt64();
            break;
          }
          case 24: {
            MinBuyin = input.ReadInt64();
            break;
          }
          case 32: {
            MaxBuyin = input.ReadInt64();
            break;
          }
          case 40: {
            MinStack = input.ReadInt64();
            break;
          }
          case 48: {
            Feepoint = input.ReadInt32();
            break;
          }
          case 56: {
            Feecap = input.ReadInt32();
            break;
          }
          case 64: {
            CreatorUserId = input.ReadInt64();
            break;
          }
          case 74: {
            Clubid = input.ReadString();
            break;
          }
          case 80: {
            Leagueid = input.ReadInt32();
            break;
          }
          case 88: {
            SuperLeagueid = input.ReadInt32();
            break;
          }
          case 96: {
            SuperLeagueType = input.ReadInt32();
            break;
          }
          case 104: {
            OperationTime = input.ReadInt32();
            break;
          }
          case 112: {
            RoomTime = input.ReadInt32();
            break;
          }
          case 120: {
            SeatNum = input.ReadInt32();
            break;
          }
          case 128: {
            AutoStart = input.ReadInt32();
            break;
          }
          case 136: {
            RoomType = (global::Texas.Protocol.RoomType) input.ReadEnum();
            break;
          }
          case 144: {
            GameMode = (global::Texas.Protocol.GameMode) input.ReadEnum();
            break;
          }
          case 152: {
            Timezone = input.ReadInt32();
            break;
          }
          case 162: {
            Roomid = input.ReadString();
            break;
          }
          case 168: {
            DerivedRoomid = input.ReadInt32();
            break;
          }
          case 176: {
            IsAutoDelayRoomOver = input.ReadBool();
            break;
          }
          case 184: {
            AutoDelayRoomOverTimes = input.ReadInt32();
            break;
          }
          case 192: {
            IsAutoCreateRoom = input.ReadBool();
            break;
          }
          case 200: {
            Moduleid = input.ReadInt64();
            break;
          }
          case 210: {
            MultiOpid = input.ReadString();
            break;
          }
          case 216: {
            CanUse = input.ReadBool();
            break;
          }
          case 224: {
            GpsLimit = input.ReadBool();
            break;
          }
          case 232: {
            IpLimit = input.ReadBool();
            break;
          }
          case 240: {
            ForbiddenChat = input.ReadBool();
            break;
          }
          case 248: {
            PasswdLimit = input.ReadBool();
            break;
          }
          case 256: {
            IsCaptcha = input.ReadBool();
            break;
          }
          case 264: {
            IsBanPc = input.ReadBool();
            break;
          }
          case 272: {
            IsCheckMail = input.ReadBool();
            break;
          }
          case 280: {
            ForbiddenChatMode = input.ReadInt32();
            break;
          }
          case 288: {
            CalltimeMinutes = input.ReadInt32();
            break;
          }
          case 296: {
            RateSettingType = input.ReadInt32();
            break;
          }
          case 306: {
            if (betSetting_ == null) {
              BetSetting = new global::Texas.Protocol.ColorBetSetting();
            }
            input.ReadMessage(BetSetting);
            break;
          }
          case 314:
          case 312: {
            banClub_.AddEntriesFrom(ref input, _repeated_banClub_codec);
            break;
          }
          case 322: {
            banCountry_.AddEntriesFrom(ref input, _repeated_banCountry_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateColorRoomRSP : pb::IMessage<CreateColorRoomRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateColorRoomRSP> _parser = new pb::MessageParser<CreateColorRoomRSP>(() => new CreateColorRoomRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateColorRoomRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateColorRoomRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateColorRoomRSP(CreateColorRoomRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      reason_ = other.reason_;
      colorInfo_ = other.colorInfo_ != null ? other.colorInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateColorRoomRSP Clone() {
      return new CreateColorRoomRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0 成功 -1 失敗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "color_info" field.</summary>
    public const int ColorInfoFieldNumber = 3;
    private global::Texas.Protocol.ColorRoomInfo colorInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorRoomInfo ColorInfo {
      get { return colorInfo_; }
      set {
        colorInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateColorRoomRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateColorRoomRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Reason != other.Reason) return false;
      if (!object.Equals(ColorInfo, other.ColorInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (colorInfo_ != null) hash ^= ColorInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasReason) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (colorInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ColorInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasReason) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (colorInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ColorInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (colorInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColorInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateColorRoomRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.colorInfo_ != null) {
        if (colorInfo_ == null) {
          ColorInfo = new global::Texas.Protocol.ColorRoomInfo();
        }
        ColorInfo.MergeFrom(other.ColorInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            if (colorInfo_ == null) {
              ColorInfo = new global::Texas.Protocol.ColorRoomInfo();
            }
            input.ReadMessage(ColorInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            if (colorInfo_ == null) {
              ColorInfo = new global::Texas.Protocol.ColorRoomInfo();
            }
            input.ReadMessage(ColorInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorSitDownREQ : pb::IMessage<ColorSitDownREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorSitDownREQ> _parser = new pb::MessageParser<ColorSitDownREQ>(() => new ColorSitDownREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorSitDownREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSitDownREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSitDownREQ(ColorSitDownREQ other) : this() {
      _hasBits0 = other._hasBits0;
      chips_ = other.chips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSitDownREQ Clone() {
      return new ColorSitDownREQ(this);
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 1;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    /// <summary>
    ///帶入的籌碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 1) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorSitDownREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorSitDownREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chips != other.Chips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChips) hash ^= Chips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChips) {
        output.WriteRawTag(8);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChips) {
        output.WriteRawTag(8);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorSitDownREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorStandUpREQ : pb::IMessage<ColorStandUpREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorStandUpREQ> _parser = new pb::MessageParser<ColorStandUpREQ>(() => new ColorStandUpREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorStandUpREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorStandUpREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorStandUpREQ(ColorStandUpREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorStandUpREQ Clone() {
      return new ColorStandUpREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorStandUpREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorStandUpREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorStandUpREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ColorStandUpRSP : pb::IMessage<ColorStandUpRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorStandUpRSP> _parser = new pb::MessageParser<ColorStandUpRSP>(() => new ColorStandUpRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorStandUpRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorStandUpRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorStandUpRSP(ColorStandUpRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorStandUpRSP Clone() {
      return new ColorStandUpRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorStandUpRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorStandUpRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorStandUpRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家資訊
  /// </summary>
  public sealed partial class ColorPlayerInfo : pb::IMessage<ColorPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorPlayerInfo> _parser = new pb::MessageParser<ColorPlayerInfo>(() => new ColorPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerInfo(ColorPlayerInfo other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      iconUrl_ = other.iconUrl_;
      uid_ = other.uid_;
      clubid_ = other.clubid_;
      clubName_ = other.clubName_;
      vipLevel_ = other.vipLevel_;
      level_ = other.level_;
      country_ = other.country_;
      gpsLon_ = other.gpsLon_;
      gpsLat_ = other.gpsLat_;
      waitingStatus_ = other.waitingStatus_;
      certification_ = other.certification_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerInfo Clone() {
      return new ColorPlayerInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    ///基本資訊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "icon_url" field.</summary>
    public const int IconUrlFieldNumber = 2;
    private readonly static string IconUrlDefaultValue = "";

    private string iconUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconUrl {
      get { return iconUrl_ ?? IconUrlDefaultValue; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconUrl {
      get { return iconUrl_ != null; }
    }
    /// <summary>Clears the value of the "icon_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconUrl() {
      iconUrl_ = null;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 4;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    /// <summary>
    ///以下從SeatStatus分離
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 5;
    private readonly static string ClubNameDefaultValue = "";

    private string clubName_;
    /// <summary>
    ///俱樂部名稱，從原本SeatStatus移過來
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClubName {
      get { return clubName_ ?? ClubNameDefaultValue; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "club_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubName {
      get { return clubName_ != null; }
    }
    /// <summary>Clears the value of the "club_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubName() {
      clubName_ = null;
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 6;
    private readonly static int VipLevelDefaultValue = 0;

    private int vipLevel_;
    /// <summary>
    ///VIP等級，從原本SeatStatus移過來
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VipLevel {
      get { if ((_hasBits0 & 1) != 0) { return vipLevel_; } else { return VipLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        vipLevel_ = value;
      }
    }
    /// <summary>Gets whether the "vip_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVipLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "vip_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVipLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private readonly static int LevelDefaultValue = 0;

    private int level_;
    /// <summary>
    ///等級，從原本SeatStatus移過來
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 8;
    private readonly static string CountryDefaultValue = "";

    private string country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Country {
      get { return country_ ?? CountryDefaultValue; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCountry {
      get { return country_ != null; }
    }
    /// <summary>Clears the value of the "country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCountry() {
      country_ = null;
    }

    /// <summary>Field number for the "gps_lon" field.</summary>
    public const int GpsLonFieldNumber = 9;
    private readonly static int GpsLonDefaultValue = 0;

    private int gpsLon_;
    /// <summary>
    ///GPS資訊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsLon {
      get { if ((_hasBits0 & 4) != 0) { return gpsLon_; } else { return GpsLonDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gpsLon_ = value;
      }
    }
    /// <summary>Gets whether the "gps_lon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLon {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gps_lon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLon() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gps_lat" field.</summary>
    public const int GpsLatFieldNumber = 10;
    private readonly static int GpsLatDefaultValue = 0;

    private int gpsLat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GpsLat {
      get { if ((_hasBits0 & 8) != 0) { return gpsLat_; } else { return GpsLatDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gpsLat_ = value;
      }
    }
    /// <summary>Gets whether the "gps_lat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsLat {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gps_lat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsLat() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "waiting_status" field.</summary>
    public const int WaitingStatusFieldNumber = 11;
    private readonly static int WaitingStatusDefaultValue = 0;

    private int waitingStatus_;
    /// <summary>
    ///前端優化用，判斷玩家是不是在等待列表中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaitingStatus {
      get { if ((_hasBits0 & 16) != 0) { return waitingStatus_; } else { return WaitingStatusDefaultValue; } }
      set {
        _hasBits0 |= 16;
        waitingStatus_ = value;
      }
    }
    /// <summary>Gets whether the "waiting_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWaitingStatus {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "waiting_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWaitingStatus() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "certification" field.</summary>
    public const int CertificationFieldNumber = 12;
    private readonly static int CertificationDefaultValue = 0;

    private int certification_;
    /// <summary>
    ///俱樂部會員認證
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Certification {
      get { if ((_hasBits0 & 32) != 0) { return certification_; } else { return CertificationDefaultValue; } }
      set {
        _hasBits0 |= 32;
        certification_ = value;
      }
    }
    /// <summary>Gets whether the "certification" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCertification {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "certification" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCertification() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (IconUrl != other.IconUrl) return false;
      if (Uid != other.Uid) return false;
      if (Clubid != other.Clubid) return false;
      if (ClubName != other.ClubName) return false;
      if (VipLevel != other.VipLevel) return false;
      if (Level != other.Level) return false;
      if (Country != other.Country) return false;
      if (GpsLon != other.GpsLon) return false;
      if (GpsLat != other.GpsLat) return false;
      if (WaitingStatus != other.WaitingStatus) return false;
      if (Certification != other.Certification) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIconUrl) hash ^= IconUrl.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasClubName) hash ^= ClubName.GetHashCode();
      if (HasVipLevel) hash ^= VipLevel.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasCountry) hash ^= Country.GetHashCode();
      if (HasGpsLon) hash ^= GpsLon.GetHashCode();
      if (HasGpsLat) hash ^= GpsLat.GetHashCode();
      if (HasWaitingStatus) hash ^= WaitingStatus.GetHashCode();
      if (HasCertification) hash ^= Certification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasIconUrl) {
        output.WriteRawTag(18);
        output.WriteString(IconUrl);
      }
      if (HasUid) {
        output.WriteRawTag(26);
        output.WriteString(Uid);
      }
      if (HasClubid) {
        output.WriteRawTag(34);
        output.WriteString(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(42);
        output.WriteString(ClubName);
      }
      if (HasVipLevel) {
        output.WriteRawTag(48);
        output.WriteInt32(VipLevel);
      }
      if (HasLevel) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (HasCountry) {
        output.WriteRawTag(66);
        output.WriteString(Country);
      }
      if (HasGpsLon) {
        output.WriteRawTag(72);
        output.WriteInt32(GpsLon);
      }
      if (HasGpsLat) {
        output.WriteRawTag(80);
        output.WriteInt32(GpsLat);
      }
      if (HasWaitingStatus) {
        output.WriteRawTag(88);
        output.WriteInt32(WaitingStatus);
      }
      if (HasCertification) {
        output.WriteRawTag(96);
        output.WriteInt32(Certification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasIconUrl) {
        output.WriteRawTag(18);
        output.WriteString(IconUrl);
      }
      if (HasUid) {
        output.WriteRawTag(26);
        output.WriteString(Uid);
      }
      if (HasClubid) {
        output.WriteRawTag(34);
        output.WriteString(Clubid);
      }
      if (HasClubName) {
        output.WriteRawTag(42);
        output.WriteString(ClubName);
      }
      if (HasVipLevel) {
        output.WriteRawTag(48);
        output.WriteInt32(VipLevel);
      }
      if (HasLevel) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (HasCountry) {
        output.WriteRawTag(66);
        output.WriteString(Country);
      }
      if (HasGpsLon) {
        output.WriteRawTag(72);
        output.WriteInt32(GpsLon);
      }
      if (HasGpsLat) {
        output.WriteRawTag(80);
        output.WriteInt32(GpsLat);
      }
      if (HasWaitingStatus) {
        output.WriteRawTag(88);
        output.WriteInt32(WaitingStatus);
      }
      if (HasCertification) {
        output.WriteRawTag(96);
        output.WriteInt32(Certification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIconUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasClubName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      if (HasVipLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (HasGpsLon) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsLon);
      }
      if (HasGpsLat) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsLat);
      }
      if (HasWaitingStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitingStatus);
      }
      if (HasCertification) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Certification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIconUrl) {
        IconUrl = other.IconUrl;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasClubName) {
        ClubName = other.ClubName;
      }
      if (other.HasVipLevel) {
        VipLevel = other.VipLevel;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      if (other.HasGpsLon) {
        GpsLon = other.GpsLon;
      }
      if (other.HasGpsLat) {
        GpsLat = other.GpsLat;
      }
      if (other.HasWaitingStatus) {
        WaitingStatus = other.WaitingStatus;
      }
      if (other.HasCertification) {
        Certification = other.Certification;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            IconUrl = input.ReadString();
            break;
          }
          case 26: {
            Uid = input.ReadString();
            break;
          }
          case 34: {
            Clubid = input.ReadString();
            break;
          }
          case 42: {
            ClubName = input.ReadString();
            break;
          }
          case 48: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 66: {
            Country = input.ReadString();
            break;
          }
          case 72: {
            GpsLon = input.ReadInt32();
            break;
          }
          case 80: {
            GpsLat = input.ReadInt32();
            break;
          }
          case 88: {
            WaitingStatus = input.ReadInt32();
            break;
          }
          case 96: {
            Certification = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            IconUrl = input.ReadString();
            break;
          }
          case 26: {
            Uid = input.ReadString();
            break;
          }
          case 34: {
            Clubid = input.ReadString();
            break;
          }
          case 42: {
            ClubName = input.ReadString();
            break;
          }
          case 48: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 66: {
            Country = input.ReadString();
            break;
          }
          case 72: {
            GpsLon = input.ReadInt32();
            break;
          }
          case 80: {
            GpsLat = input.ReadInt32();
            break;
          }
          case 88: {
            WaitingStatus = input.ReadInt32();
            break;
          }
          case 96: {
            Certification = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家遊玩狀態
  /// </summary>
  public sealed partial class ColorPlayerGamingStatus : pb::IMessage<ColorPlayerGamingStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorPlayerGamingStatus> _parser = new pb::MessageParser<ColorPlayerGamingStatus>(() => new ColorPlayerGamingStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorPlayerGamingStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerGamingStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerGamingStatus(ColorPlayerGamingStatus other) : this() {
      _hasBits0 = other._hasBits0;
      chips_ = other.chips_;
      isPlaying_ = other.isPlaying_;
      playerBettingInfo_ = other.playerBettingInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerGamingStatus Clone() {
      return new ColorPlayerGamingStatus(this);
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 1;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    /// <summary>
    ///Playing狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 1) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 2;
    private readonly static bool IsPlayingDefaultValue = false;

    private bool isPlaying_;
    /// <summary>
    ///是否已經參與遊戲牌局中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlaying {
      get { if ((_hasBits0 & 2) != 0) { return isPlaying_; } else { return IsPlayingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isPlaying_ = value;
      }
    }
    /// <summary>Gets whether the "is_playing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPlaying {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_playing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPlaying() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player_betting_info" field.</summary>
    public const int PlayerBettingInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorBoardInfo> _repeated_playerBettingInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.ColorBoardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> playerBettingInfo_ = new pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo>();
    /// <summary>
    ///若遊玩中 顯示玩家的下注狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> PlayerBettingInfo {
      get { return playerBettingInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorPlayerGamingStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorPlayerGamingStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chips != other.Chips) return false;
      if (IsPlaying != other.IsPlaying) return false;
      if(!playerBettingInfo_.Equals(other.playerBettingInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChips) hash ^= Chips.GetHashCode();
      if (HasIsPlaying) hash ^= IsPlaying.GetHashCode();
      hash ^= playerBettingInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChips) {
        output.WriteRawTag(8);
        output.WriteInt64(Chips);
      }
      if (HasIsPlaying) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlaying);
      }
      playerBettingInfo_.WriteTo(output, _repeated_playerBettingInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChips) {
        output.WriteRawTag(8);
        output.WriteInt64(Chips);
      }
      if (HasIsPlaying) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlaying);
      }
      playerBettingInfo_.WriteTo(ref output, _repeated_playerBettingInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (HasIsPlaying) {
        size += 1 + 1;
      }
      size += playerBettingInfo_.CalculateSize(_repeated_playerBettingInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorPlayerGamingStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.HasIsPlaying) {
        IsPlaying = other.IsPlaying;
      }
      playerBettingInfo_.Add(other.playerBettingInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chips = input.ReadInt64();
            break;
          }
          case 16: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 26: {
            playerBettingInfo_.AddEntriesFrom(input, _repeated_playerBettingInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chips = input.ReadInt64();
            break;
          }
          case 16: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 26: {
            playerBettingInfo_.AddEntriesFrom(ref input, _repeated_playerBettingInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///座位屬性狀態
  ///包含在位置上的玩家
  ///包含遊玩狀態
  /// </summary>
  public sealed partial class ColorSeatStatus : pb::IMessage<ColorSeatStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorSeatStatus> _parser = new pb::MessageParser<ColorSeatStatus>(() => new ColorSeatStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorSeatStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSeatStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSeatStatus(ColorSeatStatus other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      playerStatus_ = other.playerStatus_ != null ? other.playerStatus_.Clone() : null;
      frameId_ = other.frameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSeatStatus Clone() {
      return new ColorSeatStatus(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 5;
    private global::Texas.Protocol.ColorPlayerInfo playerInfo_;
    /// <summary>
    ///玩家資訊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_status" field.</summary>
    public const int PlayerStatusFieldNumber = 6;
    private global::Texas.Protocol.ColorPlayerGamingStatus playerStatus_;
    /// <summary>
    ///玩家遊玩狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorPlayerGamingStatus PlayerStatus {
      get { return playerStatus_; }
      set {
        playerStatus_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 7;
    private readonly static string FrameIdDefaultValue = "";

    private string frameId_;
    /// <summary>
    ///用户头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FrameId {
      get { return frameId_ ?? FrameIdDefaultValue; }
      set {
        frameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameId {
      get { return frameId_ != null; }
    }
    /// <summary>Clears the value of the "frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameId() {
      frameId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorSeatStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorSeatStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(PlayerStatus, other.PlayerStatus)) return false;
      if (FrameId != other.FrameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (playerStatus_ != null) hash ^= PlayerStatus.GetHashCode();
      if (HasFrameId) hash ^= FrameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerInfo);
      }
      if (playerStatus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerStatus);
      }
      if (HasFrameId) {
        output.WriteRawTag(58);
        output.WriteString(FrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerInfo);
      }
      if (playerStatus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerStatus);
      }
      if (HasFrameId) {
        output.WriteRawTag(58);
        output.WriteString(FrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (playerStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStatus);
      }
      if (HasFrameId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorSeatStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Texas.Protocol.ColorPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.playerStatus_ != null) {
        if (playerStatus_ == null) {
          PlayerStatus = new global::Texas.Protocol.ColorPlayerGamingStatus();
        }
        PlayerStatus.MergeFrom(other.PlayerStatus);
      }
      if (other.HasFrameId) {
        FrameId = other.FrameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 42: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Texas.Protocol.ColorPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 50: {
            if (playerStatus_ == null) {
              PlayerStatus = new global::Texas.Protocol.ColorPlayerGamingStatus();
            }
            input.ReadMessage(PlayerStatus);
            break;
          }
          case 58: {
            FrameId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 42: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Texas.Protocol.ColorPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 50: {
            if (playerStatus_ == null) {
              PlayerStatus = new global::Texas.Protocol.ColorPlayerGamingStatus();
            }
            input.ReadMessage(PlayerStatus);
            break;
          }
          case 58: {
            FrameId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorSitDownRSP : pb::IMessage<ColorSitDownRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorSitDownRSP> _parser = new pb::MessageParser<ColorSitDownRSP>(() => new ColorSitDownRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorSitDownRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSitDownRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSitDownRSP(ColorSitDownRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      chips_ = other.chips_;
      seatStatus_ = other.seatStatus_ != null ? other.seatStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorSitDownRSP Clone() {
      return new ColorSitDownRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static global::Texas.Protocol.SitDownCode CodeDefaultValue = global::Texas.Protocol.SitDownCode.SitDownOk;

    private global::Texas.Protocol.SitDownCode code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.SitDownCode Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "seat_status" field.</summary>
    public const int SeatStatusFieldNumber = 3;
    private global::Texas.Protocol.ColorSeatStatus seatStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorSeatStatus SeatStatus {
      get { return seatStatus_; }
      set {
        seatStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorSitDownRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorSitDownRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Chips != other.Chips) return false;
      if (!object.Equals(SeatStatus, other.SeatStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (seatStatus_ != null) hash ^= SeatStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (seatStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SeatStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (seatStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SeatStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (seatStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorSitDownRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      if (other.seatStatus_ != null) {
        if (seatStatus_ == null) {
          SeatStatus = new global::Texas.Protocol.ColorSeatStatus();
        }
        SeatStatus.MergeFrom(other.SeatStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Texas.Protocol.SitDownCode) input.ReadEnum();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 26: {
            if (seatStatus_ == null) {
              SeatStatus = new global::Texas.Protocol.ColorSeatStatus();
            }
            input.ReadMessage(SeatStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Texas.Protocol.SitDownCode) input.ReadEnum();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 26: {
            if (seatStatus_ == null) {
              SeatStatus = new global::Texas.Protocol.ColorSeatStatus();
            }
            input.ReadMessage(SeatStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///離開遊戲REQ/RSP
  /// </summary>
  public sealed partial class ColorLeaveGameREQ : pb::IMessage<ColorLeaveGameREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorLeaveGameREQ> _parser = new pb::MessageParser<ColorLeaveGameREQ>(() => new ColorLeaveGameREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorLeaveGameREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameREQ(ColorLeaveGameREQ other) : this() {
      _hasBits0 = other._hasBits0;
      leave_ = other.leave_;
      leaveType_ = other.leaveType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameREQ Clone() {
      return new ColorLeaveGameREQ(this);
    }

    /// <summary>Field number for the "leave" field.</summary>
    public const int LeaveFieldNumber = 1;
    private readonly static bool LeaveDefaultValue = false;

    private bool leave_;
    /// <summary>
    ///leave = true: 離開(如果在遊玩中，下一局離開), leave = false: 取消下一局離開
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Leave {
      get { if ((_hasBits0 & 1) != 0) { return leave_; } else { return LeaveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leave_ = value;
      }
    }
    /// <summary>Gets whether the "leave" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeave {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "leave" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeave() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leave_type" field.</summary>
    public const int LeaveTypeFieldNumber = 2;
    private readonly static int LeaveTypeDefaultValue = 0;

    private int leaveType_;
    /// <summary>
    ///1 = 立即離開  2 = 下一局離開
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeaveType {
      get { if ((_hasBits0 & 2) != 0) { return leaveType_; } else { return LeaveTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leaveType_ = value;
      }
    }
    /// <summary>Gets whether the "leave_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeaveType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leave_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeaveType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorLeaveGameREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorLeaveGameREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leave != other.Leave) return false;
      if (LeaveType != other.LeaveType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeave) hash ^= Leave.GetHashCode();
      if (HasLeaveType) hash ^= LeaveType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeave) {
        output.WriteRawTag(8);
        output.WriteBool(Leave);
      }
      if (HasLeaveType) {
        output.WriteRawTag(16);
        output.WriteInt32(LeaveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeave) {
        output.WriteRawTag(8);
        output.WriteBool(Leave);
      }
      if (HasLeaveType) {
        output.WriteRawTag(16);
        output.WriteInt32(LeaveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeave) {
        size += 1 + 1;
      }
      if (HasLeaveType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorLeaveGameREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasLeave) {
        Leave = other.Leave;
      }
      if (other.HasLeaveType) {
        LeaveType = other.LeaveType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leave = input.ReadBool();
            break;
          }
          case 16: {
            LeaveType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Leave = input.ReadBool();
            break;
          }
          case 16: {
            LeaveType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorLeaveGameRSP : pb::IMessage<ColorLeaveGameRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorLeaveGameRSP> _parser = new pb::MessageParser<ColorLeaveGameRSP>(() => new ColorLeaveGameRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorLeaveGameRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameRSP(ColorLeaveGameRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      leave_ = other.leave_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameRSP Clone() {
      return new ColorLeaveGameRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 1 = 立即離開 2 = 下一局離開
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leave" field.</summary>
    public const int LeaveFieldNumber = 2;
    private readonly static bool LeaveDefaultValue = false;

    private bool leave_;
    /// <summary>
    ///leave = true: 離開(如果在遊玩中，下一局離開), leave = false: 取消下一局離開
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Leave {
      get { if ((_hasBits0 & 2) != 0) { return leave_; } else { return LeaveDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leave_ = value;
      }
    }
    /// <summary>Gets whether the "leave" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeave {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leave" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeave() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorLeaveGameRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorLeaveGameRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Leave != other.Leave) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasLeave) hash ^= Leave.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasLeave) {
        output.WriteRawTag(16);
        output.WriteBool(Leave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasLeave) {
        output.WriteRawTag(16);
        output.WriteBool(Leave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasLeave) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorLeaveGameRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasLeave) {
        Leave = other.Leave;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Leave = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Leave = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorLeaveGameBRC : pb::IMessage<ColorLeaveGameBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorLeaveGameBRC> _parser = new pb::MessageParser<ColorLeaveGameBRC>(() => new ColorLeaveGameBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorLeaveGameBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameBRC(ColorLeaveGameBRC other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorLeaveGameBRC Clone() {
      return new ColorLeaveGameBRC(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorLeaveGameBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorLeaveGameBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorLeaveGameBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorGameStartBRC : pb::IMessage<ColorGameStartBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGameStartBRC> _parser = new pb::MessageParser<ColorGameStartBRC>(() => new ColorGameStartBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorGameStartBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameStartBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameStartBRC(ColorGameStartBRC other) : this() {
      _hasBits0 = other._hasBits0;
      leftTime_ = other.leftTime_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameStartBRC Clone() {
      return new ColorGameStartBRC(this);
    }

    /// <summary>Field number for the "left_time" field.</summary>
    public const int LeftTimeFieldNumber = 1;
    private readonly static int LeftTimeDefaultValue = 0;

    private int leftTime_;
    /// <summary>
    ///剩餘時間 單位: 秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeftTime {
      get { if ((_hasBits0 & 1) != 0) { return leftTime_; } else { return LeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        leftTime_ = value;
      }
    }
    /// <summary>Gets whether the "left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private readonly static string GameIdDefaultValue = "";

    private string gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameId {
      get { return gameId_ ?? GameIdDefaultValue; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameId {
      get { return gameId_ != null; }
    }
    /// <summary>Clears the value of the "game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameId() {
      gameId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorGameStartBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorGameStartBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftTime != other.LeftTime) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLeftTime) hash ^= LeftTime.GetHashCode();
      if (HasGameId) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLeftTime) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftTime);
      }
      if (HasGameId) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLeftTime) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftTime);
      }
      if (HasGameId) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      if (HasGameId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorGameStartBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasLeftTime) {
        LeftTime = other.LeftTime;
      }
      if (other.HasGameId) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///房間結束後廣播盈虧畫面
  /// </summary>
  public sealed partial class ColorRoomOverBRC : pb::IMessage<ColorRoomOverBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRoomOverBRC> _parser = new pb::MessageParser<ColorRoomOverBRC>(() => new ColorRoomOverBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorRoomOverBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomOverBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomOverBRC(ColorRoomOverBRC other) : this() {
      _hasBits0 = other._hasBits0;
      profit_ = other.profit_.Clone();
      isRoomStarted_ = other.isRoomStarted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomOverBRC Clone() {
      return new ColorRoomOverBRC(this);
    }

    /// <summary>Field number for the "profit" field.</summary>
    public const int ProfitFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ProfitInfo> _repeated_profit_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.ProfitInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> profit_ = new pbc::RepeatedField<global::Texas.Protocol.ProfitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ProfitInfo> Profit {
      get { return profit_; }
    }

    /// <summary>Field number for the "is_room_started" field.</summary>
    public const int IsRoomStartedFieldNumber = 2;
    private readonly static bool IsRoomStartedDefaultValue = false;

    private bool isRoomStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRoomStarted {
      get { if ((_hasBits0 & 1) != 0) { return isRoomStarted_; } else { return IsRoomStartedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isRoomStarted_ = value;
      }
    }
    /// <summary>Gets whether the "is_room_started" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRoomStarted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_room_started" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRoomStarted() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorRoomOverBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorRoomOverBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!profit_.Equals(other.profit_)) return false;
      if (IsRoomStarted != other.IsRoomStarted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= profit_.GetHashCode();
      if (HasIsRoomStarted) hash ^= IsRoomStarted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      profit_.WriteTo(output, _repeated_profit_codec);
      if (HasIsRoomStarted) {
        output.WriteRawTag(16);
        output.WriteBool(IsRoomStarted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      profit_.WriteTo(ref output, _repeated_profit_codec);
      if (HasIsRoomStarted) {
        output.WriteRawTag(16);
        output.WriteBool(IsRoomStarted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += profit_.CalculateSize(_repeated_profit_codec);
      if (HasIsRoomStarted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorRoomOverBRC other) {
      if (other == null) {
        return;
      }
      profit_.Add(other.profit_);
      if (other.HasIsRoomStarted) {
        IsRoomStarted = other.IsRoomStarted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            profit_.AddEntriesFrom(input, _repeated_profit_codec);
            break;
          }
          case 16: {
            IsRoomStarted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            profit_.AddEntriesFrom(ref input, _repeated_profit_codec);
            break;
          }
          case 16: {
            IsRoomStarted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///牌桌的遊玩狀態
  /// </summary>
  public sealed partial class ColorPlayingStatus : pb::IMessage<ColorPlayingStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorPlayingStatus> _parser = new pb::MessageParser<ColorPlayingStatus>(() => new ColorPlayingStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorPlayingStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayingStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayingStatus(ColorPlayingStatus other) : this() {
      _hasBits0 = other._hasBits0;
      stage_ = other.stage_;
      stageLeftTime_ = other.stageLeftTime_;
      totalPlayerCount_ = other.totalPlayerCount_;
      selfSeats_ = other.selfSeats_ != null ? other.selfSeats_.Clone() : null;
      gameCount_ = other.gameCount_;
      recentGameResult_ = other.recentGameResult_ != null ? other.recentGameResult_.Clone() : null;
      recentRewardResult_ = other.recentRewardResult_.Clone();
      boardBettingStatus_ = other.boardBettingStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayingStatus Clone() {
      return new ColorPlayingStatus(this);
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private readonly static int StageDefaultValue = 0;

    private int stage_;
    /// <summary>
    ///遊戲階段  
    ///0 = 房間尚未開始
    ///1 = 投注期 9秒(前端9秒 後端有留2秒buffer)
    ///2 = 結算期 7秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stage {
      get { if ((_hasBits0 & 1) != 0) { return stage_; } else { return StageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stage_ = value;
      }
    }
    /// <summary>Gets whether the "stage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stage_left_time" field.</summary>
    public const int StageLeftTimeFieldNumber = 2;
    private readonly static int StageLeftTimeDefaultValue = 0;

    private int stageLeftTime_;
    /// <summary>
    ///階段剩餘時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StageLeftTime {
      get { if ((_hasBits0 & 2) != 0) { return stageLeftTime_; } else { return StageLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        stageLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "stage_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStageLeftTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stage_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStageLeftTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_player_count" field.</summary>
    public const int TotalPlayerCountFieldNumber = 3;
    private readonly static int TotalPlayerCountDefaultValue = 0;

    private int totalPlayerCount_;
    /// <summary>
    ///玩家總人數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalPlayerCount {
      get { if ((_hasBits0 & 4) != 0) { return totalPlayerCount_; } else { return TotalPlayerCountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        totalPlayerCount_ = value;
      }
    }
    /// <summary>Gets whether the "total_player_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalPlayerCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "total_player_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalPlayerCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "self_seats" field.</summary>
    public const int SelfSeatsFieldNumber = 4;
    private global::Texas.Protocol.ColorSeatStatus selfSeats_;
    /// <summary>
    ///自己的座位狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorSeatStatus SelfSeats {
      get { return selfSeats_; }
      set {
        selfSeats_ = value;
      }
    }

    /// <summary>Field number for the "game_count" field.</summary>
    public const int GameCountFieldNumber = 5;
    private readonly static int GameCountDefaultValue = 0;

    private int gameCount_;
    /// <summary>
    ///當前開獎期數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameCount {
      get { if ((_hasBits0 & 8) != 0) { return gameCount_; } else { return GameCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameCount_ = value;
      }
    }
    /// <summary>Gets whether the "game_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "game_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "recent_game_result" field.</summary>
    public const int RecentGameResultFieldNumber = 6;
    private global::Texas.Protocol.ColorGameDice recentGameResult_;
    /// <summary>
    ///最近一次的開獎結果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorGameDice RecentGameResult {
      get { return recentGameResult_; }
      set {
        recentGameResult_ = value;
      }
    }

    /// <summary>Field number for the "recent_reward_result" field.</summary>
    public const int RecentRewardResultFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorBoardInfo> _repeated_recentRewardResult_codec
        = pb::FieldCodec.ForMessage(58, global::Texas.Protocol.ColorBoardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> recentRewardResult_ = new pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo>();
    /// <summary>
    ///結算階段顯示玩家最近一次獲獎資訊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> RecentRewardResult {
      get { return recentRewardResult_; }
    }

    /// <summary>Field number for the "board_betting_status" field.</summary>
    public const int BoardBettingStatusFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorBoardInfo> _repeated_boardBettingStatus_codec
        = pb::FieldCodec.ForMessage(66, global::Texas.Protocol.ColorBoardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> boardBettingStatus_ = new pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo>();
    /// <summary>
    ///當前盤面總下注狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> BoardBettingStatus {
      get { return boardBettingStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorPlayingStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorPlayingStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stage != other.Stage) return false;
      if (StageLeftTime != other.StageLeftTime) return false;
      if (TotalPlayerCount != other.TotalPlayerCount) return false;
      if (!object.Equals(SelfSeats, other.SelfSeats)) return false;
      if (GameCount != other.GameCount) return false;
      if (!object.Equals(RecentGameResult, other.RecentGameResult)) return false;
      if(!recentRewardResult_.Equals(other.recentRewardResult_)) return false;
      if(!boardBettingStatus_.Equals(other.boardBettingStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStage) hash ^= Stage.GetHashCode();
      if (HasStageLeftTime) hash ^= StageLeftTime.GetHashCode();
      if (HasTotalPlayerCount) hash ^= TotalPlayerCount.GetHashCode();
      if (selfSeats_ != null) hash ^= SelfSeats.GetHashCode();
      if (HasGameCount) hash ^= GameCount.GetHashCode();
      if (recentGameResult_ != null) hash ^= RecentGameResult.GetHashCode();
      hash ^= recentRewardResult_.GetHashCode();
      hash ^= boardBettingStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStage) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (HasStageLeftTime) {
        output.WriteRawTag(16);
        output.WriteInt32(StageLeftTime);
      }
      if (HasTotalPlayerCount) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalPlayerCount);
      }
      if (selfSeats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfSeats);
      }
      if (HasGameCount) {
        output.WriteRawTag(40);
        output.WriteInt32(GameCount);
      }
      if (recentGameResult_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecentGameResult);
      }
      recentRewardResult_.WriteTo(output, _repeated_recentRewardResult_codec);
      boardBettingStatus_.WriteTo(output, _repeated_boardBettingStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStage) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (HasStageLeftTime) {
        output.WriteRawTag(16);
        output.WriteInt32(StageLeftTime);
      }
      if (HasTotalPlayerCount) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalPlayerCount);
      }
      if (selfSeats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfSeats);
      }
      if (HasGameCount) {
        output.WriteRawTag(40);
        output.WriteInt32(GameCount);
      }
      if (recentGameResult_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecentGameResult);
      }
      recentRewardResult_.WriteTo(ref output, _repeated_recentRewardResult_codec);
      boardBettingStatus_.WriteTo(ref output, _repeated_boardBettingStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStage) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (HasStageLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageLeftTime);
      }
      if (HasTotalPlayerCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPlayerCount);
      }
      if (selfSeats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfSeats);
      }
      if (HasGameCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameCount);
      }
      if (recentGameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecentGameResult);
      }
      size += recentRewardResult_.CalculateSize(_repeated_recentRewardResult_codec);
      size += boardBettingStatus_.CalculateSize(_repeated_boardBettingStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorPlayingStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasStage) {
        Stage = other.Stage;
      }
      if (other.HasStageLeftTime) {
        StageLeftTime = other.StageLeftTime;
      }
      if (other.HasTotalPlayerCount) {
        TotalPlayerCount = other.TotalPlayerCount;
      }
      if (other.selfSeats_ != null) {
        if (selfSeats_ == null) {
          SelfSeats = new global::Texas.Protocol.ColorSeatStatus();
        }
        SelfSeats.MergeFrom(other.SelfSeats);
      }
      if (other.HasGameCount) {
        GameCount = other.GameCount;
      }
      if (other.recentGameResult_ != null) {
        if (recentGameResult_ == null) {
          RecentGameResult = new global::Texas.Protocol.ColorGameDice();
        }
        RecentGameResult.MergeFrom(other.RecentGameResult);
      }
      recentRewardResult_.Add(other.recentRewardResult_);
      boardBettingStatus_.Add(other.boardBettingStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
          case 16: {
            StageLeftTime = input.ReadInt32();
            break;
          }
          case 24: {
            TotalPlayerCount = input.ReadInt32();
            break;
          }
          case 34: {
            if (selfSeats_ == null) {
              SelfSeats = new global::Texas.Protocol.ColorSeatStatus();
            }
            input.ReadMessage(SelfSeats);
            break;
          }
          case 40: {
            GameCount = input.ReadInt32();
            break;
          }
          case 50: {
            if (recentGameResult_ == null) {
              RecentGameResult = new global::Texas.Protocol.ColorGameDice();
            }
            input.ReadMessage(RecentGameResult);
            break;
          }
          case 58: {
            recentRewardResult_.AddEntriesFrom(input, _repeated_recentRewardResult_codec);
            break;
          }
          case 66: {
            boardBettingStatus_.AddEntriesFrom(input, _repeated_boardBettingStatus_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
          case 16: {
            StageLeftTime = input.ReadInt32();
            break;
          }
          case 24: {
            TotalPlayerCount = input.ReadInt32();
            break;
          }
          case 34: {
            if (selfSeats_ == null) {
              SelfSeats = new global::Texas.Protocol.ColorSeatStatus();
            }
            input.ReadMessage(SelfSeats);
            break;
          }
          case 40: {
            GameCount = input.ReadInt32();
            break;
          }
          case 50: {
            if (recentGameResult_ == null) {
              RecentGameResult = new global::Texas.Protocol.ColorGameDice();
            }
            input.ReadMessage(RecentGameResult);
            break;
          }
          case 58: {
            recentRewardResult_.AddEntriesFrom(ref input, _repeated_recentRewardResult_codec);
            break;
          }
          case 66: {
            boardBettingStatus_.AddEntriesFrom(ref input, _repeated_boardBettingStatus_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///房間狀態
  /// </summary>
  public sealed partial class ColorRoomStatus : pb::IMessage<ColorRoomStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRoomStatus> _parser = new pb::MessageParser<ColorRoomStatus>(() => new ColorRoomStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorRoomStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomStatus(ColorRoomStatus other) : this() {
      _hasBits0 = other._hasBits0;
      playingStatus_ = other.playingStatus_ != null ? other.playingStatus_.Clone() : null;
      isStarted_ = other.isStarted_;
      roomLeftTime_ = other.roomLeftTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRoomStatus Clone() {
      return new ColorRoomStatus(this);
    }

    /// <summary>Field number for the "playing_status" field.</summary>
    public const int PlayingStatusFieldNumber = 1;
    private global::Texas.Protocol.ColorPlayingStatus playingStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorPlayingStatus PlayingStatus {
      get { return playingStatus_; }
      set {
        playingStatus_ = value;
      }
    }

    /// <summary>Field number for the "is_started" field.</summary>
    public const int IsStartedFieldNumber = 2;
    private readonly static bool IsStartedDefaultValue = false;

    private bool isStarted_;
    /// <summary>
    ///房間是否開始?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsStarted {
      get { if ((_hasBits0 & 1) != 0) { return isStarted_; } else { return IsStartedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isStarted_ = value;
      }
    }
    /// <summary>Gets whether the "is_started" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsStarted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_started" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsStarted() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "room_left_time" field.</summary>
    public const int RoomLeftTimeFieldNumber = 3;
    private readonly static int RoomLeftTimeDefaultValue = 0;

    private int roomLeftTime_;
    /// <summary>
    ///房間剩餘多久時間會關閉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomLeftTime {
      get { if ((_hasBits0 & 2) != 0) { return roomLeftTime_; } else { return RoomLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        roomLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "room_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomLeftTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "room_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomLeftTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorRoomStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorRoomStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayingStatus, other.PlayingStatus)) return false;
      if (IsStarted != other.IsStarted) return false;
      if (RoomLeftTime != other.RoomLeftTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (playingStatus_ != null) hash ^= PlayingStatus.GetHashCode();
      if (HasIsStarted) hash ^= IsStarted.GetHashCode();
      if (HasRoomLeftTime) hash ^= RoomLeftTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playingStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayingStatus);
      }
      if (HasIsStarted) {
        output.WriteRawTag(16);
        output.WriteBool(IsStarted);
      }
      if (HasRoomLeftTime) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomLeftTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playingStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayingStatus);
      }
      if (HasIsStarted) {
        output.WriteRawTag(16);
        output.WriteBool(IsStarted);
      }
      if (HasRoomLeftTime) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomLeftTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (playingStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayingStatus);
      }
      if (HasIsStarted) {
        size += 1 + 1;
      }
      if (HasRoomLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomLeftTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorRoomStatus other) {
      if (other == null) {
        return;
      }
      if (other.playingStatus_ != null) {
        if (playingStatus_ == null) {
          PlayingStatus = new global::Texas.Protocol.ColorPlayingStatus();
        }
        PlayingStatus.MergeFrom(other.PlayingStatus);
      }
      if (other.HasIsStarted) {
        IsStarted = other.IsStarted;
      }
      if (other.HasRoomLeftTime) {
        RoomLeftTime = other.RoomLeftTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playingStatus_ == null) {
              PlayingStatus = new global::Texas.Protocol.ColorPlayingStatus();
            }
            input.ReadMessage(PlayingStatus);
            break;
          }
          case 16: {
            IsStarted = input.ReadBool();
            break;
          }
          case 24: {
            RoomLeftTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playingStatus_ == null) {
              PlayingStatus = new global::Texas.Protocol.ColorPlayingStatus();
            }
            input.ReadMessage(PlayingStatus);
            break;
          }
          case 16: {
            IsStarted = input.ReadBool();
            break;
          }
          case 24: {
            RoomLeftTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///看客列表REQ/RSP
  /// </summary>
  public sealed partial class ColorObserversListREQ : pb::IMessage<ColorObserversListREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorObserversListREQ> _parser = new pb::MessageParser<ColorObserversListREQ>(() => new ColorObserversListREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorObserversListREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorObserversListREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorObserversListREQ(ColorObserversListREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorObserversListREQ Clone() {
      return new ColorObserversListREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorObserversListREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorObserversListREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorObserversListREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ColorObserversListRSP : pb::IMessage<ColorObserversListRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorObserversListRSP> _parser = new pb::MessageParser<ColorObserversListRSP>(() => new ColorObserversListRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorObserversListRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorObserversListRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorObserversListRSP(ColorObserversListRSP other) : this() {
      observers_ = other.observers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorObserversListRSP Clone() {
      return new ColorObserversListRSP(this);
    }

    /// <summary>Field number for the "observers" field.</summary>
    public const int ObserversFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.UserBrief> _repeated_observers_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.UserBrief.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.UserBrief> observers_ = new pbc::RepeatedField<global::Texas.Protocol.UserBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.UserBrief> Observers {
      get { return observers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorObserversListRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorObserversListRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!observers_.Equals(other.observers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= observers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      observers_.WriteTo(output, _repeated_observers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      observers_.WriteTo(ref output, _repeated_observers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += observers_.CalculateSize(_repeated_observers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorObserversListRSP other) {
      if (other == null) {
        return;
      }
      observers_.Add(other.observers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            observers_.AddEntriesFrom(input, _repeated_observers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            observers_.AddEntriesFrom(ref input, _repeated_observers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorExchangeChipsREQ : pb::IMessage<ColorExchangeChipsREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorExchangeChipsREQ> _parser = new pb::MessageParser<ColorExchangeChipsREQ>(() => new ColorExchangeChipsREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorExchangeChipsREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsREQ(ColorExchangeChipsREQ other) : this() {
      _hasBits0 = other._hasBits0;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsREQ Clone() {
      return new ColorExchangeChipsREQ(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private readonly static long AmountDefaultValue = 0L;

    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Amount {
      get { if ((_hasBits0 & 1) != 0) { return amount_; } else { return AmountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        amount_ = value;
      }
    }
    /// <summary>Gets whether the "amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAmount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAmount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorExchangeChipsREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorExchangeChipsREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAmount) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAmount) {
        output.WriteRawTag(8);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAmount) {
        output.WriteRawTag(8);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAmount) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorExchangeChipsREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorExchangeChipsRSP : pb::IMessage<ColorExchangeChipsRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorExchangeChipsRSP> _parser = new pb::MessageParser<ColorExchangeChipsRSP>(() => new ColorExchangeChipsRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorExchangeChipsRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsRSP(ColorExchangeChipsRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsRSP Clone() {
      return new ColorExchangeChipsRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorExchangeChipsRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorExchangeChipsRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorExchangeChipsRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorRebuyNotifyRSP : pb::IMessage<ColorRebuyNotifyRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRebuyNotifyRSP> _parser = new pb::MessageParser<ColorRebuyNotifyRSP>(() => new ColorRebuyNotifyRSP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorRebuyNotifyRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRebuyNotifyRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRebuyNotifyRSP(ColorRebuyNotifyRSP other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRebuyNotifyRSP Clone() {
      return new ColorRebuyNotifyRSP(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorRebuyNotifyRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorRebuyNotifyRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorRebuyNotifyRSP other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ColorExchangeChipsBRC : pb::IMessage<ColorExchangeChipsBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorExchangeChipsBRC> _parser = new pb::MessageParser<ColorExchangeChipsBRC>(() => new ColorExchangeChipsBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorExchangeChipsBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsBRC(ColorExchangeChipsBRC other) : this() {
      _hasBits0 = other._hasBits0;
      seatid_ = other.seatid_;
      chips_ = other.chips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorExchangeChipsBRC Clone() {
      return new ColorExchangeChipsBRC(this);
    }

    /// <summary>Field number for the "seatid" field.</summary>
    public const int SeatidFieldNumber = 1;
    private readonly static int SeatidDefaultValue = 0;

    private int seatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Seatid {
      get { if ((_hasBits0 & 1) != 0) { return seatid_; } else { return SeatidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seatid_ = value;
      }
    }
    /// <summary>Gets whether the "seatid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeatid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seatid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeatid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private readonly static long ChipsDefaultValue = 0L;

    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Chips {
      get { if ((_hasBits0 & 2) != 0) { return chips_; } else { return ChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chips_ = value;
      }
    }
    /// <summary>Gets whether the "chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChips() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorExchangeChipsBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorExchangeChipsBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seatid != other.Seatid) return false;
      if (Chips != other.Chips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeatid) hash ^= Seatid.GetHashCode();
      if (HasChips) hash ^= Chips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSeatid) {
        output.WriteRawTag(8);
        output.WriteInt32(Seatid);
      }
      if (HasChips) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSeatid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seatid);
      }
      if (HasChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorExchangeChipsBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasSeatid) {
        Seatid = other.Seatid;
      }
      if (other.HasChips) {
        Chips = other.Chips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seatid = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家參與過的Game ID列表
  /// </summary>
  public sealed partial class ColorGameIDListREQ : pb::IMessage<ColorGameIDListREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGameIDListREQ> _parser = new pb::MessageParser<ColorGameIDListREQ>(() => new ColorGameIDListREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorGameIDListREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameIDListREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameIDListREQ(ColorGameIDListREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameIDListREQ Clone() {
      return new ColorGameIDListREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorGameIDListREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorGameIDListREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorGameIDListREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家參與過的Game ID列表
  /// </summary>
  public sealed partial class ColorGameIDListRSP : pb::IMessage<ColorGameIDListRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGameIDListRSP> _parser = new pb::MessageParser<ColorGameIDListRSP>(() => new ColorGameIDListRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorGameIDListRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameIDListRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameIDListRSP(ColorGameIDListRSP other) : this() {
      _hasBits0 = other._hasBits0;
      gameId_ = other.gameId_.Clone();
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameIDListRSP Clone() {
      return new ColorGameIDListRSP(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gameId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gameId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> GameId {
      get { return gameId_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private readonly static int TotalDefaultValue = 0;

    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Total {
      get { if ((_hasBits0 & 1) != 0) { return total_; } else { return TotalDefaultValue; } }
      set {
        _hasBits0 |= 1;
        total_ = value;
      }
    }
    /// <summary>Gets whether the "total" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotal {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotal() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorGameIDListRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorGameIDListRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameId_.Equals(other.gameId_)) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameId_.GetHashCode();
      if (HasTotal) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gameId_.WriteTo(output, _repeated_gameId_codec);
      if (HasTotal) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gameId_.WriteTo(ref output, _repeated_gameId_codec);
      if (HasTotal) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += gameId_.CalculateSize(_repeated_gameId_codec);
      if (HasTotal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorGameIDListRSP other) {
      if (other == null) {
        return;
      }
      gameId_.Add(other.gameId_);
      if (other.HasTotal) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameId_.AddEntriesFrom(input, _repeated_gameId_codec);
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gameId_.AddEntriesFrom(ref input, _repeated_gameId_codec);
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class ColorBetREQ : pb::IMessage<ColorBetREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorBetREQ> _parser = new pb::MessageParser<ColorBetREQ>(() => new ColorBetREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorBetREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetREQ(ColorBetREQ other) : this() {
      playerBet_ = other.playerBet_ != null ? other.playerBet_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetREQ Clone() {
      return new ColorBetREQ(this);
    }

    /// <summary>Field number for the "player_bet" field.</summary>
    public const int PlayerBetFieldNumber = 1;
    private global::Texas.Protocol.ColorBoardInfo playerBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorBoardInfo PlayerBet {
      get { return playerBet_; }
      set {
        playerBet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorBetREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorBetREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerBet, other.PlayerBet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (playerBet_ != null) hash ^= PlayerBet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerBet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerBet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (playerBet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorBetREQ other) {
      if (other == null) {
        return;
      }
      if (other.playerBet_ != null) {
        if (playerBet_ == null) {
          PlayerBet = new global::Texas.Protocol.ColorBoardInfo();
        }
        PlayerBet.MergeFrom(other.PlayerBet);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerBet_ == null) {
              PlayerBet = new global::Texas.Protocol.ColorBoardInfo();
            }
            input.ReadMessage(PlayerBet);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerBet_ == null) {
              PlayerBet = new global::Texas.Protocol.ColorBoardInfo();
            }
            input.ReadMessage(PlayerBet);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorBetRSP : pb::IMessage<ColorBetRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorBetRSP> _parser = new pb::MessageParser<ColorBetRSP>(() => new ColorBetRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorBetRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetRSP(ColorBetRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      totalMoney_ = other.totalMoney_ != null ? other.totalMoney_.Clone() : null;
      leftMoney_ = other.leftMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetRSP Clone() {
      return new ColorBetRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0:成功 -1:不在投注期 -2:金額不合法或盤面不合法 -3:籌碼不足 -4:已下注三個盤面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_money" field.</summary>
    public const int TotalMoneyFieldNumber = 2;
    private global::Texas.Protocol.ColorBoardInfo totalMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorBoardInfo TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    /// <summary>Field number for the "left_money" field.</summary>
    public const int LeftMoneyFieldNumber = 3;
    private readonly static long LeftMoneyDefaultValue = 0L;

    private long leftMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LeftMoney {
      get { if ((_hasBits0 & 2) != 0) { return leftMoney_; } else { return LeftMoneyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftMoney_ = value;
      }
    }
    /// <summary>Gets whether the "left_money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftMoney {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "left_money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftMoney() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorBetRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorBetRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(TotalMoney, other.TotalMoney)) return false;
      if (LeftMoney != other.LeftMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (totalMoney_ != null) hash ^= TotalMoney.GetHashCode();
      if (HasLeftMoney) hash ^= LeftMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (totalMoney_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalMoney);
      }
      if (HasLeftMoney) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (totalMoney_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalMoney);
      }
      if (HasLeftMoney) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (totalMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalMoney);
      }
      if (HasLeftMoney) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorBetRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.totalMoney_ != null) {
        if (totalMoney_ == null) {
          TotalMoney = new global::Texas.Protocol.ColorBoardInfo();
        }
        TotalMoney.MergeFrom(other.TotalMoney);
      }
      if (other.HasLeftMoney) {
        LeftMoney = other.LeftMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (totalMoney_ == null) {
              TotalMoney = new global::Texas.Protocol.ColorBoardInfo();
            }
            input.ReadMessage(TotalMoney);
            break;
          }
          case 24: {
            LeftMoney = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (totalMoney_ == null) {
              TotalMoney = new global::Texas.Protocol.ColorBoardInfo();
            }
            input.ReadMessage(TotalMoney);
            break;
          }
          case 24: {
            LeftMoney = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorBetBRC : pb::IMessage<ColorBetBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorBetBRC> _parser = new pb::MessageParser<ColorBetBRC>(() => new ColorBetBRC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorBetBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetBRC(ColorBetBRC other) : this() {
      recentBettingIndex_ = other.recentBettingIndex_.Clone();
      boardInfo_ = other.boardInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorBetBRC Clone() {
      return new ColorBetBRC(this);
    }

    /// <summary>Field number for the "recent_betting_index" field.</summary>
    public const int RecentBettingIndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_recentBettingIndex_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> recentBettingIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///其他玩家最近下注的board index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> RecentBettingIndex {
      get { return recentBettingIndex_; }
    }

    /// <summary>Field number for the "board_info" field.</summary>
    public const int BoardInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorBoardInfo> _repeated_boardInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.ColorBoardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> boardInfo_ = new pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo>();
    /// <summary>
    ///6格下注區的總投注額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> BoardInfo {
      get { return boardInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorBetBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorBetBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recentBettingIndex_.Equals(other.recentBettingIndex_)) return false;
      if(!boardInfo_.Equals(other.boardInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recentBettingIndex_.GetHashCode();
      hash ^= boardInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      recentBettingIndex_.WriteTo(output, _repeated_recentBettingIndex_codec);
      boardInfo_.WriteTo(output, _repeated_boardInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      recentBettingIndex_.WriteTo(ref output, _repeated_recentBettingIndex_codec);
      boardInfo_.WriteTo(ref output, _repeated_boardInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += recentBettingIndex_.CalculateSize(_repeated_recentBettingIndex_codec);
      size += boardInfo_.CalculateSize(_repeated_boardInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorBetBRC other) {
      if (other == null) {
        return;
      }
      recentBettingIndex_.Add(other.recentBettingIndex_);
      boardInfo_.Add(other.boardInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            recentBettingIndex_.AddEntriesFrom(input, _repeated_recentBettingIndex_codec);
            break;
          }
          case 18: {
            boardInfo_.AddEntriesFrom(input, _repeated_boardInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            recentBettingIndex_.AddEntriesFrom(ref input, _repeated_recentBettingIndex_codec);
            break;
          }
          case 18: {
            boardInfo_.AddEntriesFrom(ref input, _repeated_boardInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家返回上一次投注
  /// </summary>
  public sealed partial class ColorUndoREQ : pb::IMessage<ColorUndoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorUndoREQ> _parser = new pb::MessageParser<ColorUndoREQ>(() => new ColorUndoREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorUndoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoREQ(ColorUndoREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoREQ Clone() {
      return new ColorUndoREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorUndoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorUndoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorUndoREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ColorUndoRSP : pb::IMessage<ColorUndoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorUndoRSP> _parser = new pb::MessageParser<ColorUndoRSP>(() => new ColorUndoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorUndoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoRSP(ColorUndoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      totalMoney_ = other.totalMoney_ != null ? other.totalMoney_.Clone() : null;
      leftMoney_ = other.leftMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoRSP Clone() {
      return new ColorUndoRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0:成功 -1:非投注期 -2:沒有下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_money" field.</summary>
    public const int TotalMoneyFieldNumber = 2;
    private global::Texas.Protocol.ColorBoardInfo totalMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorBoardInfo TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    /// <summary>Field number for the "left_money" field.</summary>
    public const int LeftMoneyFieldNumber = 3;
    private readonly static long LeftMoneyDefaultValue = 0L;

    private long leftMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LeftMoney {
      get { if ((_hasBits0 & 2) != 0) { return leftMoney_; } else { return LeftMoneyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftMoney_ = value;
      }
    }
    /// <summary>Gets whether the "left_money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftMoney {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "left_money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftMoney() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorUndoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorUndoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(TotalMoney, other.TotalMoney)) return false;
      if (LeftMoney != other.LeftMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (totalMoney_ != null) hash ^= TotalMoney.GetHashCode();
      if (HasLeftMoney) hash ^= LeftMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (totalMoney_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalMoney);
      }
      if (HasLeftMoney) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (totalMoney_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TotalMoney);
      }
      if (HasLeftMoney) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (totalMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalMoney);
      }
      if (HasLeftMoney) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorUndoRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.totalMoney_ != null) {
        if (totalMoney_ == null) {
          TotalMoney = new global::Texas.Protocol.ColorBoardInfo();
        }
        TotalMoney.MergeFrom(other.TotalMoney);
      }
      if (other.HasLeftMoney) {
        LeftMoney = other.LeftMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (totalMoney_ == null) {
              TotalMoney = new global::Texas.Protocol.ColorBoardInfo();
            }
            input.ReadMessage(TotalMoney);
            break;
          }
          case 24: {
            LeftMoney = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            if (totalMoney_ == null) {
              TotalMoney = new global::Texas.Protocol.ColorBoardInfo();
            }
            input.ReadMessage(TotalMoney);
            break;
          }
          case 24: {
            LeftMoney = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家撤銷所有下注
  /// </summary>
  public sealed partial class ColorUndoAllREQ : pb::IMessage<ColorUndoAllREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorUndoAllREQ> _parser = new pb::MessageParser<ColorUndoAllREQ>(() => new ColorUndoAllREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorUndoAllREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoAllREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoAllREQ(ColorUndoAllREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoAllREQ Clone() {
      return new ColorUndoAllREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorUndoAllREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorUndoAllREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorUndoAllREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ColorUndoAllRSP : pb::IMessage<ColorUndoAllRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorUndoAllRSP> _parser = new pb::MessageParser<ColorUndoAllRSP>(() => new ColorUndoAllRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorUndoAllRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoAllRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoAllRSP(ColorUndoAllRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      totalMoney_ = other.totalMoney_.Clone();
      leftMoney_ = other.leftMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorUndoAllRSP Clone() {
      return new ColorUndoAllRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0:成功 -1:非投注期 -2:沒有下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_money" field.</summary>
    public const int TotalMoneyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorBoardInfo> _repeated_totalMoney_codec
        = pb::FieldCodec.ForMessage(18, global::Texas.Protocol.ColorBoardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> totalMoney_ = new pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> TotalMoney {
      get { return totalMoney_; }
    }

    /// <summary>Field number for the "left_money" field.</summary>
    public const int LeftMoneyFieldNumber = 3;
    private readonly static long LeftMoneyDefaultValue = 0L;

    private long leftMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LeftMoney {
      get { if ((_hasBits0 & 2) != 0) { return leftMoney_; } else { return LeftMoneyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftMoney_ = value;
      }
    }
    /// <summary>Gets whether the "left_money" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftMoney {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "left_money" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftMoney() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorUndoAllRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorUndoAllRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!totalMoney_.Equals(other.totalMoney_)) return false;
      if (LeftMoney != other.LeftMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      hash ^= totalMoney_.GetHashCode();
      if (HasLeftMoney) hash ^= LeftMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      totalMoney_.WriteTo(output, _repeated_totalMoney_codec);
      if (HasLeftMoney) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      totalMoney_.WriteTo(ref output, _repeated_totalMoney_codec);
      if (HasLeftMoney) {
        output.WriteRawTag(24);
        output.WriteInt64(LeftMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += totalMoney_.CalculateSize(_repeated_totalMoney_codec);
      if (HasLeftMoney) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorUndoAllRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      totalMoney_.Add(other.totalMoney_);
      if (other.HasLeftMoney) {
        LeftMoney = other.LeftMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            totalMoney_.AddEntriesFrom(input, _repeated_totalMoney_codec);
            break;
          }
          case 24: {
            LeftMoney = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            totalMoney_.AddEntriesFrom(ref input, _repeated_totalMoney_codec);
            break;
          }
          case 24: {
            LeftMoney = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorHistoryInfoREQ : pb::IMessage<ColorHistoryInfoREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorHistoryInfoREQ> _parser = new pb::MessageParser<ColorHistoryInfoREQ>(() => new ColorHistoryInfoREQ());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorHistoryInfoREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorHistoryInfoREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorHistoryInfoREQ(ColorHistoryInfoREQ other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorHistoryInfoREQ Clone() {
      return new ColorHistoryInfoREQ(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorHistoryInfoREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorHistoryInfoREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorHistoryInfoREQ other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ColorHistoryInfoRSP : pb::IMessage<ColorHistoryInfoRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorHistoryInfoRSP> _parser = new pb::MessageParser<ColorHistoryInfoRSP>(() => new ColorHistoryInfoRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorHistoryInfoRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorHistoryInfoRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorHistoryInfoRSP(ColorHistoryInfoRSP other) : this() {
      _hasBits0 = other._hasBits0;
      historyInfo_ = other.historyInfo_.Clone();
      totalGameCount_ = other.totalGameCount_;
      roomLeftTime_ = other.roomLeftTime_;
      playerTotalProfit_ = other.playerTotalProfit_;
      historyProfit_ = other.historyProfit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorHistoryInfoRSP Clone() {
      return new ColorHistoryInfoRSP(this);
    }

    /// <summary>Field number for the "history_info" field.</summary>
    public const int HistoryInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorGameDice> _repeated_historyInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Texas.Protocol.ColorGameDice.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorGameDice> historyInfo_ = new pbc::RepeatedField<global::Texas.Protocol.ColorGameDice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorGameDice> HistoryInfo {
      get { return historyInfo_; }
    }

    /// <summary>Field number for the "total_game_count" field.</summary>
    public const int TotalGameCountFieldNumber = 2;
    private readonly static int TotalGameCountDefaultValue = 0;

    private int totalGameCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalGameCount {
      get { if ((_hasBits0 & 1) != 0) { return totalGameCount_; } else { return TotalGameCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        totalGameCount_ = value;
      }
    }
    /// <summary>Gets whether the "total_game_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalGameCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total_game_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalGameCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "room_left_time" field.</summary>
    public const int RoomLeftTimeFieldNumber = 3;
    private readonly static long RoomLeftTimeDefaultValue = 0L;

    private long roomLeftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RoomLeftTime {
      get { if ((_hasBits0 & 2) != 0) { return roomLeftTime_; } else { return RoomLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        roomLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "room_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomLeftTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "room_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomLeftTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "player_total_profit" field.</summary>
    public const int PlayerTotalProfitFieldNumber = 4;
    private readonly static long PlayerTotalProfitDefaultValue = 0L;

    private long playerTotalProfit_;
    /// <summary>
    ///玩家當前總盈虧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PlayerTotalProfit {
      get { if ((_hasBits0 & 4) != 0) { return playerTotalProfit_; } else { return PlayerTotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playerTotalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "player_total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlayerTotalProfit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "player_total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlayerTotalProfit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "history_profit" field.</summary>
    public const int HistoryProfitFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_historyProfit_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> historyProfit_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///玩家每一手的盈虧 size與history_info一樣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> HistoryProfit {
      get { return historyProfit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorHistoryInfoRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorHistoryInfoRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!historyInfo_.Equals(other.historyInfo_)) return false;
      if (TotalGameCount != other.TotalGameCount) return false;
      if (RoomLeftTime != other.RoomLeftTime) return false;
      if (PlayerTotalProfit != other.PlayerTotalProfit) return false;
      if(!historyProfit_.Equals(other.historyProfit_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= historyInfo_.GetHashCode();
      if (HasTotalGameCount) hash ^= TotalGameCount.GetHashCode();
      if (HasRoomLeftTime) hash ^= RoomLeftTime.GetHashCode();
      if (HasPlayerTotalProfit) hash ^= PlayerTotalProfit.GetHashCode();
      hash ^= historyProfit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      historyInfo_.WriteTo(output, _repeated_historyInfo_codec);
      if (HasTotalGameCount) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalGameCount);
      }
      if (HasRoomLeftTime) {
        output.WriteRawTag(24);
        output.WriteInt64(RoomLeftTime);
      }
      if (HasPlayerTotalProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerTotalProfit);
      }
      historyProfit_.WriteTo(output, _repeated_historyProfit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      historyInfo_.WriteTo(ref output, _repeated_historyInfo_codec);
      if (HasTotalGameCount) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalGameCount);
      }
      if (HasRoomLeftTime) {
        output.WriteRawTag(24);
        output.WriteInt64(RoomLeftTime);
      }
      if (HasPlayerTotalProfit) {
        output.WriteRawTag(32);
        output.WriteInt64(PlayerTotalProfit);
      }
      historyProfit_.WriteTo(ref output, _repeated_historyProfit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += historyInfo_.CalculateSize(_repeated_historyInfo_codec);
      if (HasTotalGameCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalGameCount);
      }
      if (HasRoomLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomLeftTime);
      }
      if (HasPlayerTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerTotalProfit);
      }
      size += historyProfit_.CalculateSize(_repeated_historyProfit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorHistoryInfoRSP other) {
      if (other == null) {
        return;
      }
      historyInfo_.Add(other.historyInfo_);
      if (other.HasTotalGameCount) {
        TotalGameCount = other.TotalGameCount;
      }
      if (other.HasRoomLeftTime) {
        RoomLeftTime = other.RoomLeftTime;
      }
      if (other.HasPlayerTotalProfit) {
        PlayerTotalProfit = other.PlayerTotalProfit;
      }
      historyProfit_.Add(other.historyProfit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            historyInfo_.AddEntriesFrom(input, _repeated_historyInfo_codec);
            break;
          }
          case 16: {
            TotalGameCount = input.ReadInt32();
            break;
          }
          case 24: {
            RoomLeftTime = input.ReadInt64();
            break;
          }
          case 32: {
            PlayerTotalProfit = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            historyProfit_.AddEntriesFrom(input, _repeated_historyProfit_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            historyInfo_.AddEntriesFrom(ref input, _repeated_historyInfo_codec);
            break;
          }
          case 16: {
            TotalGameCount = input.ReadInt32();
            break;
          }
          case 24: {
            RoomLeftTime = input.ReadInt64();
            break;
          }
          case 32: {
            PlayerTotalProfit = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            historyProfit_.AddEntriesFrom(ref input, _repeated_historyProfit_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorGameDiceResultBRC : pb::IMessage<ColorGameDiceResultBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGameDiceResultBRC> _parser = new pb::MessageParser<ColorGameDiceResultBRC>(() => new ColorGameDiceResultBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorGameDiceResultBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameDiceResultBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameDiceResultBRC(ColorGameDiceResultBRC other) : this() {
      _hasBits0 = other._hasBits0;
      dices_ = other.dices_ != null ? other.dices_.Clone() : null;
      stageLeftTime_ = other.stageLeftTime_;
      rewardResult_ = other.rewardResult_.Clone();
      ownChips_ = other.ownChips_;
      hasBigReward_ = other.hasBigReward_;
      bigRewardChips_ = other.bigRewardChips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameDiceResultBRC Clone() {
      return new ColorGameDiceResultBRC(this);
    }

    /// <summary>Field number for the "dices" field.</summary>
    public const int DicesFieldNumber = 1;
    private global::Texas.Protocol.ColorGameDice dices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorGameDice Dices {
      get { return dices_; }
      set {
        dices_ = value;
      }
    }

    /// <summary>Field number for the "stage_left_time" field.</summary>
    public const int StageLeftTimeFieldNumber = 2;
    private readonly static int StageLeftTimeDefaultValue = 0;

    private int stageLeftTime_;
    /// <summary>
    ///從結算到下局開始的伺服器計時時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StageLeftTime {
      get { if ((_hasBits0 & 1) != 0) { return stageLeftTime_; } else { return StageLeftTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stageLeftTime_ = value;
      }
    }
    /// <summary>Gets whether the "stage_left_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStageLeftTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stage_left_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStageLeftTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reward_result" field.</summary>
    public const int RewardResultFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorBoardInfo> _repeated_rewardResult_codec
        = pb::FieldCodec.ForMessage(26, global::Texas.Protocol.ColorBoardInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> rewardResult_ = new pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo>();
    /// <summary>
    ///只有下注玩家才有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorBoardInfo> RewardResult {
      get { return rewardResult_; }
    }

    /// <summary>Field number for the "own_chips" field.</summary>
    public const int OwnChipsFieldNumber = 4;
    private readonly static long OwnChipsDefaultValue = 0L;

    private long ownChips_;
    /// <summary>
    ///玩家籌碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OwnChips {
      get { if ((_hasBits0 & 2) != 0) { return ownChips_; } else { return OwnChipsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ownChips_ = value;
      }
    }
    /// <summary>Gets whether the "own_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnChips {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "own_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnChips() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "has_big_reward" field.</summary>
    public const int HasBigRewardFieldNumber = 5;
    private readonly static bool HasBigRewardDefaultValue = false;

    private bool hasBigReward_;
    /// <summary>
    ///玩家是否擊中大獎
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigReward {
      get { if ((_hasBits0 & 4) != 0) { return hasBigReward_; } else { return HasBigRewardDefaultValue; } }
      set {
        _hasBits0 |= 4;
        hasBigReward_ = value;
      }
    }
    /// <summary>Gets whether the "has_big_reward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasBigReward {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "has_big_reward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasBigReward() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "big_reward_chips" field.</summary>
    public const int BigRewardChipsFieldNumber = 6;
    private readonly static long BigRewardChipsDefaultValue = 0L;

    private long bigRewardChips_;
    /// <summary>
    ///大獎金額
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BigRewardChips {
      get { if ((_hasBits0 & 8) != 0) { return bigRewardChips_; } else { return BigRewardChipsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bigRewardChips_ = value;
      }
    }
    /// <summary>Gets whether the "big_reward_chips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBigRewardChips {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "big_reward_chips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBigRewardChips() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorGameDiceResultBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorGameDiceResultBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dices, other.Dices)) return false;
      if (StageLeftTime != other.StageLeftTime) return false;
      if(!rewardResult_.Equals(other.rewardResult_)) return false;
      if (OwnChips != other.OwnChips) return false;
      if (HasBigReward != other.HasBigReward) return false;
      if (BigRewardChips != other.BigRewardChips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dices_ != null) hash ^= Dices.GetHashCode();
      if (HasStageLeftTime) hash ^= StageLeftTime.GetHashCode();
      hash ^= rewardResult_.GetHashCode();
      if (HasOwnChips) hash ^= OwnChips.GetHashCode();
      if (HasHasBigReward) hash ^= HasBigReward.GetHashCode();
      if (HasBigRewardChips) hash ^= BigRewardChips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dices_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dices);
      }
      if (HasStageLeftTime) {
        output.WriteRawTag(16);
        output.WriteInt32(StageLeftTime);
      }
      rewardResult_.WriteTo(output, _repeated_rewardResult_codec);
      if (HasOwnChips) {
        output.WriteRawTag(32);
        output.WriteInt64(OwnChips);
      }
      if (HasHasBigReward) {
        output.WriteRawTag(40);
        output.WriteBool(HasBigReward);
      }
      if (HasBigRewardChips) {
        output.WriteRawTag(48);
        output.WriteInt64(BigRewardChips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dices_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dices);
      }
      if (HasStageLeftTime) {
        output.WriteRawTag(16);
        output.WriteInt32(StageLeftTime);
      }
      rewardResult_.WriteTo(ref output, _repeated_rewardResult_codec);
      if (HasOwnChips) {
        output.WriteRawTag(32);
        output.WriteInt64(OwnChips);
      }
      if (HasHasBigReward) {
        output.WriteRawTag(40);
        output.WriteBool(HasBigReward);
      }
      if (HasBigRewardChips) {
        output.WriteRawTag(48);
        output.WriteInt64(BigRewardChips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dices);
      }
      if (HasStageLeftTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageLeftTime);
      }
      size += rewardResult_.CalculateSize(_repeated_rewardResult_codec);
      if (HasOwnChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnChips);
      }
      if (HasHasBigReward) {
        size += 1 + 1;
      }
      if (HasBigRewardChips) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigRewardChips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorGameDiceResultBRC other) {
      if (other == null) {
        return;
      }
      if (other.dices_ != null) {
        if (dices_ == null) {
          Dices = new global::Texas.Protocol.ColorGameDice();
        }
        Dices.MergeFrom(other.Dices);
      }
      if (other.HasStageLeftTime) {
        StageLeftTime = other.StageLeftTime;
      }
      rewardResult_.Add(other.rewardResult_);
      if (other.HasOwnChips) {
        OwnChips = other.OwnChips;
      }
      if (other.HasHasBigReward) {
        HasBigReward = other.HasBigReward;
      }
      if (other.HasBigRewardChips) {
        BigRewardChips = other.BigRewardChips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dices_ == null) {
              Dices = new global::Texas.Protocol.ColorGameDice();
            }
            input.ReadMessage(Dices);
            break;
          }
          case 16: {
            StageLeftTime = input.ReadInt32();
            break;
          }
          case 26: {
            rewardResult_.AddEntriesFrom(input, _repeated_rewardResult_codec);
            break;
          }
          case 32: {
            OwnChips = input.ReadInt64();
            break;
          }
          case 40: {
            HasBigReward = input.ReadBool();
            break;
          }
          case 48: {
            BigRewardChips = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dices_ == null) {
              Dices = new global::Texas.Protocol.ColorGameDice();
            }
            input.ReadMessage(Dices);
            break;
          }
          case 16: {
            StageLeftTime = input.ReadInt32();
            break;
          }
          case 26: {
            rewardResult_.AddEntriesFrom(ref input, _repeated_rewardResult_codec);
            break;
          }
          case 32: {
            OwnChips = input.ReadInt64();
            break;
          }
          case 40: {
            HasBigReward = input.ReadBool();
            break;
          }
          case 48: {
            BigRewardChips = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorGameResult : pb::IMessage<ColorGameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGameResult> _parser = new pb::MessageParser<ColorGameResult>(() => new ColorGameResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameResult(ColorGameResult other) : this() {
      _hasBits0 = other._hasBits0;
      diceColor_ = other.diceColor_.Clone();
      boardProfit_ = other.boardProfit_.Clone();
      totalProfit_ = other.totalProfit_;
      totalBetting_ = other.totalBetting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorGameResult Clone() {
      return new ColorGameResult(this);
    }

    /// <summary>Field number for the "dice_color" field.</summary>
    public const int DiceColorFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_diceColor_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> diceColor_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> DiceColor {
      get { return diceColor_; }
    }

    /// <summary>Field number for the "board_profit" field.</summary>
    public const int BoardProfitFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_boardProfit_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> boardProfit_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> BoardProfit {
      get { return boardProfit_; }
    }

    /// <summary>Field number for the "total_profit" field.</summary>
    public const int TotalProfitFieldNumber = 3;
    private readonly static long TotalProfitDefaultValue = 0L;

    private long totalProfit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalProfit {
      get { if ((_hasBits0 & 1) != 0) { return totalProfit_; } else { return TotalProfitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        totalProfit_ = value;
      }
    }
    /// <summary>Gets whether the "total_profit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalProfit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total_profit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalProfit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_betting" field.</summary>
    public const int TotalBettingFieldNumber = 4;
    private readonly static long TotalBettingDefaultValue = 0L;

    private long totalBetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalBetting {
      get { if ((_hasBits0 & 2) != 0) { return totalBetting_; } else { return TotalBettingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        totalBetting_ = value;
      }
    }
    /// <summary>Gets whether the "total_betting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBetting {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "total_betting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBetting() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diceColor_.Equals(other.diceColor_)) return false;
      if(!boardProfit_.Equals(other.boardProfit_)) return false;
      if (TotalProfit != other.TotalProfit) return false;
      if (TotalBetting != other.TotalBetting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diceColor_.GetHashCode();
      hash ^= boardProfit_.GetHashCode();
      if (HasTotalProfit) hash ^= TotalProfit.GetHashCode();
      if (HasTotalBetting) hash ^= TotalBetting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      diceColor_.WriteTo(output, _repeated_diceColor_codec);
      boardProfit_.WriteTo(output, _repeated_boardProfit_codec);
      if (HasTotalProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalProfit);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalBetting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      diceColor_.WriteTo(ref output, _repeated_diceColor_codec);
      boardProfit_.WriteTo(ref output, _repeated_boardProfit_codec);
      if (HasTotalProfit) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalProfit);
      }
      if (HasTotalBetting) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalBetting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += diceColor_.CalculateSize(_repeated_diceColor_codec);
      size += boardProfit_.CalculateSize(_repeated_boardProfit_codec);
      if (HasTotalProfit) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProfit);
      }
      if (HasTotalBetting) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBetting);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorGameResult other) {
      if (other == null) {
        return;
      }
      diceColor_.Add(other.diceColor_);
      boardProfit_.Add(other.boardProfit_);
      if (other.HasTotalProfit) {
        TotalProfit = other.TotalProfit;
      }
      if (other.HasTotalBetting) {
        TotalBetting = other.TotalBetting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            diceColor_.AddEntriesFrom(input, _repeated_diceColor_codec);
            break;
          }
          case 18:
          case 16: {
            boardProfit_.AddEntriesFrom(input, _repeated_boardProfit_codec);
            break;
          }
          case 24: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 32: {
            TotalBetting = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            diceColor_.AddEntriesFrom(ref input, _repeated_diceColor_codec);
            break;
          }
          case 18:
          case 16: {
            boardProfit_.AddEntriesFrom(ref input, _repeated_boardProfit_codec);
            break;
          }
          case 24: {
            TotalProfit = input.ReadInt64();
            break;
          }
          case 32: {
            TotalBetting = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorRankInfo : pb::IMessage<ColorRankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRankInfo> _parser = new pb::MessageParser<ColorRankInfo>(() => new ColorRankInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRankInfo(ColorRankInfo other) : this() {
      _hasBits0 = other._hasBits0;
      rank_ = other.rank_;
      uid_ = other.uid_;
      name_ = other.name_;
      headimgurl_ = other.headimgurl_;
      totalBet_ = other.totalBet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorRankInfo Clone() {
      return new ColorRankInfo(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private readonly static int RankDefaultValue = 0;

    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { if ((_hasBits0 & 1) != 0) { return rank_; } else { return RankDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRank {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRank() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "headimgurl" field.</summary>
    public const int HeadimgurlFieldNumber = 4;
    private readonly static string HeadimgurlDefaultValue = "";

    private string headimgurl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Headimgurl {
      get { return headimgurl_ ?? HeadimgurlDefaultValue; }
      set {
        headimgurl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "headimgurl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeadimgurl {
      get { return headimgurl_ != null; }
    }
    /// <summary>Clears the value of the "headimgurl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeadimgurl() {
      headimgurl_ = null;
    }

    /// <summary>Field number for the "total_bet" field.</summary>
    public const int TotalBetFieldNumber = 5;
    private readonly static long TotalBetDefaultValue = 0L;

    private long totalBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalBet {
      get { if ((_hasBits0 & 2) != 0) { return totalBet_; } else { return TotalBetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        totalBet_ = value;
      }
    }
    /// <summary>Gets whether the "total_bet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalBet {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "total_bet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalBet() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Headimgurl != other.Headimgurl) return false;
      if (TotalBet != other.TotalBet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRank) hash ^= Rank.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasHeadimgurl) hash ^= Headimgurl.GetHashCode();
      if (HasTotalBet) hash ^= TotalBet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRank) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasHeadimgurl) {
        output.WriteRawTag(34);
        output.WriteString(Headimgurl);
      }
      if (HasTotalBet) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRank) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasHeadimgurl) {
        output.WriteRawTag(34);
        output.WriteString(Headimgurl);
      }
      if (HasTotalBet) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRank) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasHeadimgurl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Headimgurl);
      }
      if (HasTotalBet) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasHeadimgurl) {
        Headimgurl = other.Headimgurl;
      }
      if (other.HasTotalBet) {
        TotalBet = other.TotalBet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Headimgurl = input.ReadString();
            break;
          }
          case 40: {
            TotalBet = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Headimgurl = input.ReadString();
            break;
          }
          case 40: {
            TotalBet = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorWeekRankREQ : pb::IMessage<ColorWeekRankREQ>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorWeekRankREQ> _parser = new pb::MessageParser<ColorWeekRankREQ>(() => new ColorWeekRankREQ());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorWeekRankREQ> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorWeekRankREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorWeekRankREQ(ColorWeekRankREQ other) : this() {
      _hasBits0 = other._hasBits0;
      weekType_ = other.weekType_;
      clubid_ = other.clubid_;
      roomid_ = other.roomid_;
      needSelfRank_ = other.needSelfRank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorWeekRankREQ Clone() {
      return new ColorWeekRankREQ(this);
    }

    /// <summary>Field number for the "week_type" field.</summary>
    public const int WeekTypeFieldNumber = 1;
    private readonly static int WeekTypeDefaultValue = 0;

    private int weekType_;
    /// <summary>
    ///0:本周 1:上周 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WeekType {
      get { if ((_hasBits0 & 1) != 0) { return weekType_; } else { return WeekTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        weekType_ = value;
      }
    }
    /// <summary>Gets whether the "week_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWeekType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "week_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWeekType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clubid" field.</summary>
    public const int ClubidFieldNumber = 2;
    private readonly static string ClubidDefaultValue = "";

    private string clubid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Clubid {
      get { return clubid_ ?? ClubidDefaultValue; }
      set {
        clubid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clubid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClubid {
      get { return clubid_ != null; }
    }
    /// <summary>Clears the value of the "clubid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClubid() {
      clubid_ = null;
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 3;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "need_self_rank" field.</summary>
    public const int NeedSelfRankFieldNumber = 4;
    private readonly static bool NeedSelfRankDefaultValue = false;

    private bool needSelfRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NeedSelfRank {
      get { if ((_hasBits0 & 2) != 0) { return needSelfRank_; } else { return NeedSelfRankDefaultValue; } }
      set {
        _hasBits0 |= 2;
        needSelfRank_ = value;
      }
    }
    /// <summary>Gets whether the "need_self_rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNeedSelfRank {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "need_self_rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNeedSelfRank() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorWeekRankREQ);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorWeekRankREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeekType != other.WeekType) return false;
      if (Clubid != other.Clubid) return false;
      if (Roomid != other.Roomid) return false;
      if (NeedSelfRank != other.NeedSelfRank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWeekType) hash ^= WeekType.GetHashCode();
      if (HasClubid) hash ^= Clubid.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasNeedSelfRank) hash ^= NeedSelfRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWeekType) {
        output.WriteRawTag(8);
        output.WriteInt32(WeekType);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasRoomid) {
        output.WriteRawTag(26);
        output.WriteString(Roomid);
      }
      if (HasNeedSelfRank) {
        output.WriteRawTag(32);
        output.WriteBool(NeedSelfRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWeekType) {
        output.WriteRawTag(8);
        output.WriteInt32(WeekType);
      }
      if (HasClubid) {
        output.WriteRawTag(18);
        output.WriteString(Clubid);
      }
      if (HasRoomid) {
        output.WriteRawTag(26);
        output.WriteString(Roomid);
      }
      if (HasNeedSelfRank) {
        output.WriteRawTag(32);
        output.WriteBool(NeedSelfRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasWeekType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeekType);
      }
      if (HasClubid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clubid);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasNeedSelfRank) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorWeekRankREQ other) {
      if (other == null) {
        return;
      }
      if (other.HasWeekType) {
        WeekType = other.WeekType;
      }
      if (other.HasClubid) {
        Clubid = other.Clubid;
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasNeedSelfRank) {
        NeedSelfRank = other.NeedSelfRank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WeekType = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            Roomid = input.ReadString();
            break;
          }
          case 32: {
            NeedSelfRank = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WeekType = input.ReadInt32();
            break;
          }
          case 18: {
            Clubid = input.ReadString();
            break;
          }
          case 26: {
            Roomid = input.ReadString();
            break;
          }
          case 32: {
            NeedSelfRank = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorWeekRankRSP : pb::IMessage<ColorWeekRankRSP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorWeekRankRSP> _parser = new pb::MessageParser<ColorWeekRankRSP>(() => new ColorWeekRankRSP());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorWeekRankRSP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorWeekRankRSP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorWeekRankRSP(ColorWeekRankRSP other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      rankInfo_ = other.rankInfo_.Clone();
      selfInfo_ = other.selfInfo_ != null ? other.selfInfo_.Clone() : null;
      roomid_ = other.roomid_;
      weekType_ = other.weekType_;
      beginDay_ = other.beginDay_;
      endDay_ = other.endDay_;
      utcOffset_ = other.utcOffset_;
      timezoneId_ = other.timezoneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorWeekRankRSP Clone() {
      return new ColorWeekRankRSP(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    ///0:成功 -1:非俱樂部會員
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private readonly static long StartTimeDefaultValue = 0L;

    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartTime {
      get { if ((_hasBits0 & 2) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        startTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private readonly static long EndTimeDefaultValue = 0L;

    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndTime {
      get { if ((_hasBits0 & 4) != 0) { return endTime_; } else { return EndTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rank_info" field.</summary>
    public const int RankInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texas.Protocol.ColorRankInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Texas.Protocol.ColorRankInfo.Parser);
    private readonly pbc::RepeatedField<global::Texas.Protocol.ColorRankInfo> rankInfo_ = new pbc::RepeatedField<global::Texas.Protocol.ColorRankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Texas.Protocol.ColorRankInfo> RankInfo {
      get { return rankInfo_; }
    }

    /// <summary>Field number for the "self_info" field.</summary>
    public const int SelfInfoFieldNumber = 5;
    private global::Texas.Protocol.ColorRankInfo selfInfo_;
    /// <summary>
    ///根據ColorWeekRankREQ的need_self_rank決定要不要塞值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Texas.Protocol.ColorRankInfo SelfInfo {
      get { return selfInfo_; }
      set {
        selfInfo_ = value;
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 6;
    private readonly static string RoomidDefaultValue = "";

    private string roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Roomid {
      get { return roomid_ ?? RoomidDefaultValue; }
      set {
        roomid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "roomid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoomid {
      get { return roomid_ != null; }
    }
    /// <summary>Clears the value of the "roomid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoomid() {
      roomid_ = null;
    }

    /// <summary>Field number for the "week_type" field.</summary>
    public const int WeekTypeFieldNumber = 7;
    private readonly static int WeekTypeDefaultValue = 0;

    private int weekType_;
    /// <summary>
    ///0:本周 1:上周
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WeekType {
      get { if ((_hasBits0 & 8) != 0) { return weekType_; } else { return WeekTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        weekType_ = value;
      }
    }
    /// <summary>Gets whether the "week_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWeekType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "week_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWeekType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "begin_day" field.</summary>
    public const int BeginDayFieldNumber = 8;
    private readonly static string BeginDayDefaultValue = "";

    private string beginDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BeginDay {
      get { return beginDay_ ?? BeginDayDefaultValue; }
      set {
        beginDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "begin_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBeginDay {
      get { return beginDay_ != null; }
    }
    /// <summary>Clears the value of the "begin_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBeginDay() {
      beginDay_ = null;
    }

    /// <summary>Field number for the "end_day" field.</summary>
    public const int EndDayFieldNumber = 9;
    private readonly static string EndDayDefaultValue = "";

    private string endDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndDay {
      get { return endDay_ ?? EndDayDefaultValue; }
      set {
        endDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_day" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndDay {
      get { return endDay_ != null; }
    }
    /// <summary>Clears the value of the "end_day" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndDay() {
      endDay_ = null;
    }

    /// <summary>Field number for the "utc_offset" field.</summary>
    public const int UtcOffsetFieldNumber = 10;
    private readonly static string UtcOffsetDefaultValue = "";

    private string utcOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UtcOffset {
      get { return utcOffset_ ?? UtcOffsetDefaultValue; }
      set {
        utcOffset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "utc_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUtcOffset {
      get { return utcOffset_ != null; }
    }
    /// <summary>Clears the value of the "utc_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUtcOffset() {
      utcOffset_ = null;
    }

    /// <summary>Field number for the "timezone_id" field.</summary>
    public const int TimezoneIdFieldNumber = 11;
    private readonly static string TimezoneIdDefaultValue = "";

    private string timezoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimezoneId {
      get { return timezoneId_ ?? TimezoneIdDefaultValue; }
      set {
        timezoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timezone_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimezoneId {
      get { return timezoneId_ != null; }
    }
    /// <summary>Clears the value of the "timezone_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimezoneId() {
      timezoneId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorWeekRankRSP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorWeekRankRSP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!rankInfo_.Equals(other.rankInfo_)) return false;
      if (!object.Equals(SelfInfo, other.SelfInfo)) return false;
      if (Roomid != other.Roomid) return false;
      if (WeekType != other.WeekType) return false;
      if (BeginDay != other.BeginDay) return false;
      if (EndDay != other.EndDay) return false;
      if (UtcOffset != other.UtcOffset) return false;
      if (TimezoneId != other.TimezoneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasStartTime) hash ^= StartTime.GetHashCode();
      if (HasEndTime) hash ^= EndTime.GetHashCode();
      hash ^= rankInfo_.GetHashCode();
      if (selfInfo_ != null) hash ^= SelfInfo.GetHashCode();
      if (HasRoomid) hash ^= Roomid.GetHashCode();
      if (HasWeekType) hash ^= WeekType.GetHashCode();
      if (HasBeginDay) hash ^= BeginDay.GetHashCode();
      if (HasEndDay) hash ^= EndDay.GetHashCode();
      if (HasUtcOffset) hash ^= UtcOffset.GetHashCode();
      if (HasTimezoneId) hash ^= TimezoneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasStartTime) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTime);
      }
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
      if (selfInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SelfInfo);
      }
      if (HasRoomid) {
        output.WriteRawTag(50);
        output.WriteString(Roomid);
      }
      if (HasWeekType) {
        output.WriteRawTag(56);
        output.WriteInt32(WeekType);
      }
      if (HasBeginDay) {
        output.WriteRawTag(66);
        output.WriteString(BeginDay);
      }
      if (HasEndDay) {
        output.WriteRawTag(74);
        output.WriteString(EndDay);
      }
      if (HasUtcOffset) {
        output.WriteRawTag(82);
        output.WriteString(UtcOffset);
      }
      if (HasTimezoneId) {
        output.WriteRawTag(90);
        output.WriteString(TimezoneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasStartTime) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (HasEndTime) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTime);
      }
      rankInfo_.WriteTo(ref output, _repeated_rankInfo_codec);
      if (selfInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SelfInfo);
      }
      if (HasRoomid) {
        output.WriteRawTag(50);
        output.WriteString(Roomid);
      }
      if (HasWeekType) {
        output.WriteRawTag(56);
        output.WriteInt32(WeekType);
      }
      if (HasBeginDay) {
        output.WriteRawTag(66);
        output.WriteString(BeginDay);
      }
      if (HasEndDay) {
        output.WriteRawTag(74);
        output.WriteString(EndDay);
      }
      if (HasUtcOffset) {
        output.WriteRawTag(82);
        output.WriteString(UtcOffset);
      }
      if (HasTimezoneId) {
        output.WriteRawTag(90);
        output.WriteString(TimezoneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasStartTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (HasEndTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      if (selfInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInfo);
      }
      if (HasRoomid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomid);
      }
      if (HasWeekType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeekType);
      }
      if (HasBeginDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginDay);
      }
      if (HasEndDay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDay);
      }
      if (HasUtcOffset) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UtcOffset);
      }
      if (HasTimezoneId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimezoneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorWeekRankRSP other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      rankInfo_.Add(other.rankInfo_);
      if (other.selfInfo_ != null) {
        if (selfInfo_ == null) {
          SelfInfo = new global::Texas.Protocol.ColorRankInfo();
        }
        SelfInfo.MergeFrom(other.SelfInfo);
      }
      if (other.HasRoomid) {
        Roomid = other.Roomid;
      }
      if (other.HasWeekType) {
        WeekType = other.WeekType;
      }
      if (other.HasBeginDay) {
        BeginDay = other.BeginDay;
      }
      if (other.HasEndDay) {
        EndDay = other.EndDay;
      }
      if (other.HasUtcOffset) {
        UtcOffset = other.UtcOffset;
      }
      if (other.HasTimezoneId) {
        TimezoneId = other.TimezoneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            EndTime = input.ReadInt64();
            break;
          }
          case 34: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
          case 42: {
            if (selfInfo_ == null) {
              SelfInfo = new global::Texas.Protocol.ColorRankInfo();
            }
            input.ReadMessage(SelfInfo);
            break;
          }
          case 50: {
            Roomid = input.ReadString();
            break;
          }
          case 56: {
            WeekType = input.ReadInt32();
            break;
          }
          case 66: {
            BeginDay = input.ReadString();
            break;
          }
          case 74: {
            EndDay = input.ReadString();
            break;
          }
          case 82: {
            UtcOffset = input.ReadString();
            break;
          }
          case 90: {
            TimezoneId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            EndTime = input.ReadInt64();
            break;
          }
          case 34: {
            rankInfo_.AddEntriesFrom(ref input, _repeated_rankInfo_codec);
            break;
          }
          case 42: {
            if (selfInfo_ == null) {
              SelfInfo = new global::Texas.Protocol.ColorRankInfo();
            }
            input.ReadMessage(SelfInfo);
            break;
          }
          case 50: {
            Roomid = input.ReadString();
            break;
          }
          case 56: {
            WeekType = input.ReadInt32();
            break;
          }
          case 66: {
            BeginDay = input.ReadString();
            break;
          }
          case 74: {
            EndDay = input.ReadString();
            break;
          }
          case 82: {
            UtcOffset = input.ReadString();
            break;
          }
          case 90: {
            TimezoneId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorPlayerCountBRC : pb::IMessage<ColorPlayerCountBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorPlayerCountBRC> _parser = new pb::MessageParser<ColorPlayerCountBRC>(() => new ColorPlayerCountBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorPlayerCountBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerCountBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerCountBRC(ColorPlayerCountBRC other) : this() {
      _hasBits0 = other._hasBits0;
      totalPlayerCount_ = other.totalPlayerCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorPlayerCountBRC Clone() {
      return new ColorPlayerCountBRC(this);
    }

    /// <summary>Field number for the "total_player_count" field.</summary>
    public const int TotalPlayerCountFieldNumber = 1;
    private readonly static int TotalPlayerCountDefaultValue = 0;

    private int totalPlayerCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalPlayerCount {
      get { if ((_hasBits0 & 1) != 0) { return totalPlayerCount_; } else { return TotalPlayerCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        totalPlayerCount_ = value;
      }
    }
    /// <summary>Gets whether the "total_player_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalPlayerCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total_player_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalPlayerCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorPlayerCountBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorPlayerCountBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalPlayerCount != other.TotalPlayerCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTotalPlayerCount) hash ^= TotalPlayerCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTotalPlayerCount) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalPlayerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTotalPlayerCount) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalPlayerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTotalPlayerCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPlayerCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorPlayerCountBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasTotalPlayerCount) {
        TotalPlayerCount = other.TotalPlayerCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalPlayerCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalPlayerCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColorDismissTableBRC : pb::IMessage<ColorDismissTableBRC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorDismissTableBRC> _parser = new pb::MessageParser<ColorDismissTableBRC>(() => new ColorDismissTableBRC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColorDismissTableBRC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texas.Protocol.ColorgameReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorDismissTableBRC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorDismissTableBRC(ColorDismissTableBRC other) : this() {
      _hasBits0 = other._hasBits0;
      tableId_ = other.tableId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColorDismissTableBRC Clone() {
      return new ColorDismissTableBRC(this);
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 1;
    private readonly static int TableIdDefaultValue = 0;

    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TableId {
      get { if ((_hasBits0 & 1) != 0) { return tableId_; } else { return TableIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tableId_ = value;
      }
    }
    /// <summary>Gets whether the "table_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTableId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "table_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTableId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColorDismissTableBRC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColorDismissTableBRC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableId != other.TableId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTableId) hash ^= TableId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTableId) {
        output.WriteRawTag(8);
        output.WriteInt32(TableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTableId) {
        output.WriteRawTag(8);
        output.WriteInt32(TableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTableId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColorDismissTableBRC other) {
      if (other == null) {
        return;
      }
      if (other.HasTableId) {
        TableId = other.TableId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
